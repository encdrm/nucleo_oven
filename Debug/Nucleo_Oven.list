
Nucleo_Oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800ab58  0800ab58  0001ab58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b244  0800b244  000204d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b244  0800b244  0001b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b24c  0800b24c  000204d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d8  20000000  0800b254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200004d8  0800b72c  000204d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800b72c  00020750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014501  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de3  00000000  00000000  00034a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000377f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  000388a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019142  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d10  00000000  00000000  000529ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092865  00000000  00000000  000676da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9f3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000578c  00000000  00000000  000f9f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004d8 	.word	0x200004d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab40 	.word	0x0800ab40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004dc 	.word	0x200004dc
 80001dc:	0800ab40 	.word	0x0800ab40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef FLAG_USE_UART_AS_PRINTF
int _write(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	230a      	movs	r3, #10
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <_write+0x30>)
 8000ed2:	f003 fc74 	bl	80047be <HAL_UART_Transmit>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <_write+0x24>
		return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	e001      	b.n	8000ee4 <_write+0x28>
	return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200006c0 	.word	0x200006c0

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fe90 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f85a 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 faa2 	bl	8001444 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f00:	f000 f8be 	bl	8001080 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000f04:	f000 f8f2 	bl	80010ec <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000f08:	f000 fa72 	bl	80013f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f0c:	f000 fa46 	bl	800139c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f10:	f000 f9a6 	bl	8001260 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f14:	f000 f922 	bl	800115c <MX_TIM3_Init>
  MX_TIM9_Init();
 8000f18:	f000 fa06 	bl	8001328 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <main+0x98>)
 8000f20:	f002 fcda 	bl	80038d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f24:	2104      	movs	r1, #4
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <main+0x98>)
 8000f28:	f002 fcd6 	bl	80038d8 <HAL_TIM_PWM_Start>

  /* New temperature sensor object */
  tempBottom = Custom_Tempsensor(&hspi3, TEMPSENSOR_DOWN_CS_Port, TEMPSENSOR_DOWN_CS_Pin, 300);
 8000f2c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f34:	4915      	ldr	r1, [pc, #84]	; (8000f8c <main+0x9c>)
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <main+0xa0>)
 8000f38:	f005 ffb2 	bl	8006ea0 <Custom_Tempsensor>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <main+0xa4>)
 8000f40:	6013      	str	r3, [r2, #0]
  tempTop = Custom_Tempsensor(&hspi3, TEMPSENSOR_UP_CS_Port, TEMPSENSOR_UP_CS_Pin, 300);
 8000f42:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <main+0x9c>)
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <main+0xa0>)
 8000f4e:	f005 ffa7 	bl	8006ea0 <Custom_Tempsensor>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <main+0xa8>)
 8000f56:	6013      	str	r3, [r2, #0]

  /* New heater object */
  heaterTop = Custom_HeaterControl(&htim3, TIM_CHANNEL_3);	// HU
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4810      	ldr	r0, [pc, #64]	; (8000f9c <main+0xac>)
 8000f5c:	f005 fdd4 	bl	8006b08 <Custom_HeaterControl>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <main+0xb0>)
 8000f64:	6013      	str	r3, [r2, #0]
  heaterBottom = Custom_HeaterControl(&htim3, TIM_CHANNEL_2);	// HD
 8000f66:	2104      	movs	r1, #4
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <main+0xac>)
 8000f6a:	f005 fdcd 	bl	8006b08 <Custom_HeaterControl>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <main+0xb4>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* Start HeaterControl interrupt */
  HAL_TIM_Base_Start_IT(&htim9);
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <main+0xb8>)
 8000f76:	f002 fbfd 	bl	8003774 <HAL_TIM_Base_Start_IT>
  printf("Hello!\r\n");
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <main+0xbc>)
 8000f7c:	f007 fc44 	bl	8008808 <puts>
  Menu();
 8000f80:	f006 f96e 	bl	8007260 <Menu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <main+0x94>
 8000f86:	bf00      	nop
 8000f88:	200005ec 	.word	0x200005ec
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	2000054c 	.word	0x2000054c
 8000f94:	20000708 	.word	0x20000708
 8000f98:	20000704 	.word	0x20000704
 8000f9c:	200005a4 	.word	0x200005a4
 8000fa0:	2000070c 	.word	0x2000070c
 8000fa4:	20000710 	.word	0x20000710
 8000fa8:	20000634 	.word	0x20000634
 8000fac:	0800ab58 	.word	0x0800ab58

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	; 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fe4c 	bl	8007c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a26      	ldr	r2, [pc, #152]	; (8001078 <SystemClock_Config+0xc8>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <SystemClock_Config+0xc8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a20      	ldr	r2, [pc, #128]	; (800107c <SystemClock_Config+0xcc>)
 8000ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <SystemClock_Config+0xcc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001020:	2308      	movs	r3, #8
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f94d 	bl	80022d4 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001040:	f000 fac2 	bl	80015c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2103      	movs	r1, #3
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fbaf 	bl	80027c4 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800106c:	f000 faac 	bl	80015c8 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	; 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_SPI2_Init+0x64>)
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <MX_SPI2_Init+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_SPI2_Init+0x64>)
 800108c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001090:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_SPI2_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_SPI2_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010a0:	2202      	movs	r2, #2
 80010a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010cc:	220a      	movs	r2, #10
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010d2:	f001 fd57 	bl	8002b84 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010dc:	f000 fa74 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200004f4 	.word	0x200004f4
 80010e8:	40003800 	.word	0x40003800

080010ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_SPI3_Init+0x68>)
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <MX_SPI3_Init+0x6c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_SPI3_Init+0x68>)
 80010f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_SPI3_Init+0x68>)
 8001100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001104:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_SPI3_Init+0x68>)
 8001108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_SPI3_Init+0x68>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_SPI3_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_SPI3_Init+0x68>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_SPI3_Init+0x68>)
 8001124:	2238      	movs	r2, #56	; 0x38
 8001126:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_SPI3_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_SPI3_Init+0x68>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_SPI3_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_SPI3_Init+0x68>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_SPI3_Init+0x68>)
 8001142:	f001 fd1f 	bl	8002b84 <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800114c:	f000 fa3c 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000054c 	.word	0x2000054c
 8001158:	40003c00 	.word	0x40003c00

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_TIM3_Init+0xfc>)
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <MX_TIM3_Init+0x100>)
 8001190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <MX_TIM3_Init+0xfc>)
 8001194:	f242 720f 	movw	r2, #9999	; 0x270f
 8001198:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <MX_TIM3_Init+0xfc>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b4:	4828      	ldr	r0, [pc, #160]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011b6:	f002 fa8d 	bl	80036d4 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011c0:	f000 fa02 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011d2:	f002 fe5f 	bl	8003e94 <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011dc:	f000 f9f4 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011e0:	481d      	ldr	r0, [pc, #116]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011e2:	f002 fb29 	bl	8003838 <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011ec:	f000 f9ec 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4619      	mov	r1, r3
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <MX_TIM3_Init+0xfc>)
 8001200:	f003 fa0e 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800120a:	f000 f9dd 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800120e:	2370      	movs	r3, #112	; 0x70
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2204      	movs	r2, #4
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_TIM3_Init+0xfc>)
 8001226:	f002 fd73 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001230:	f000 f9ca 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2208      	movs	r2, #8
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM3_Init+0xfc>)
 800123c:	f002 fd68 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001246:	f000 f9bf 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM3_Init+0xfc>)
 800124c:	f000 fae8 	bl	8001820 <HAL_TIM_MspPostInit>

}
 8001250:	bf00      	nop
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200005a4 	.word	0x200005a4
 800125c:	40000400 	.word	0x40000400

08001260 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <MX_TIM4_Init+0xc0>)
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <MX_TIM4_Init+0xc4>)
 8001286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_TIM4_Init+0xc0>)
 800128a:	2229      	movs	r2, #41	; 0x29
 800128c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_TIM4_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <MX_TIM4_Init+0xc0>)
 8001296:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800129a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_TIM4_Init+0xc0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_TIM4_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <MX_TIM4_Init+0xc0>)
 80012aa:	f002 fac5 	bl	8003838 <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 f988 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4619      	mov	r1, r3
 80012c6:	4816      	ldr	r0, [pc, #88]	; (8001320 <MX_TIM4_Init+0xc0>)
 80012c8:	f003 f9aa 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012d2:	f000 f979 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_TIM4_Init+0xc0>)
 80012ee:	f002 fd0f 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012f8:	f000 f966 	bl	80015c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <MX_TIM4_Init+0xc0>)
 8001304:	f002 fd04 	bl	8003d10 <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800130e:	f000 f95b 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <MX_TIM4_Init+0xc0>)
 8001314:	f000 fa84 	bl	8001820 <HAL_TIM_MspPostInit>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200005ec 	.word	0x200005ec
 8001324:	40000800 	.word	0x40000800

08001328 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_TIM9_Init+0x6c>)
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <MX_TIM9_Init+0x70>)
 800133e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_TIM9_Init+0x6c>)
 8001342:	f242 720f 	movw	r2, #9999	; 0x270f
 8001346:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_TIM9_Init+0x6c>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_TIM9_Init+0x6c>)
 8001350:	f242 720f 	movw	r2, #9999	; 0x270f
 8001354:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_TIM9_Init+0x6c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <MX_TIM9_Init+0x6c>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001362:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_TIM9_Init+0x6c>)
 8001364:	f002 f9b6 	bl	80036d4 <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800136e:	f000 f92b 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_TIM9_Init+0x6c>)
 800137e:	f002 fd89 	bl	8003e94 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001388:	f000 f91e 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000634 	.word	0x20000634
 8001398:	40014000 	.word	0x40014000

0800139c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_USART1_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART1_UART_Init+0x4c>)
 80013d4:	f003 f9a6 	bl	8004724 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f8f3 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000067c 	.word	0x2000067c
 80013ec:	40011000 	.word	0x40011000

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_USART2_UART_Init+0x4c>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_USART2_UART_Init+0x4c>)
 8001428:	f003 f97c 	bl	8004724 <HAL_UART_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001432:	f000 f8c9 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200006c0 	.word	0x200006c0
 8001440:	40004400 	.word	0x40004400

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a55      	ldr	r2, [pc, #340]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x174>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <MX_GPIO_Init+0x174>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a4e      	ldr	r2, [pc, #312]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <MX_GPIO_Init+0x174>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <MX_GPIO_Init+0x174>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <MX_GPIO_Init+0x174>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <MX_GPIO_Init+0x174>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a40      	ldr	r2, [pc, #256]	; (80015b8 <MX_GPIO_Init+0x174>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_GPIO_Init+0x174>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2112      	movs	r1, #18
 80014ce:	483b      	ldr	r0, [pc, #236]	; (80015bc <MX_GPIO_Init+0x178>)
 80014d0:	f000 fee6 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2104      	movs	r1, #4
 80014d8:	4839      	ldr	r0, [pc, #228]	; (80015c0 <MX_GPIO_Init+0x17c>)
 80014da:	f000 fee1 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_ADD_Pin|TEMP_ADU_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014e4:	4836      	ldr	r0, [pc, #216]	; (80015c0 <MX_GPIO_Init+0x17c>)
 80014e6:	f000 fedb 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	4834      	ldr	r0, [pc, #208]	; (80015c4 <MX_GPIO_Init+0x180>)
 80014f2:	f000 fed5 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor2_Pin|Motor1_Pin|LAMP_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80014fc:	482f      	ldr	r0, [pc, #188]	; (80015bc <MX_GPIO_Init+0x178>)
 80014fe:	f000 fecf 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_DC_Pin;
 8001502:	2312      	movs	r3, #18
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4828      	ldr	r0, [pc, #160]	; (80015bc <MX_GPIO_Init+0x178>)
 800151a:	f000 fd25 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800151e:	2304      	movs	r3, #4
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <MX_GPIO_Init+0x17c>)
 8001536:	f000 fd17 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_ADD_Pin TEMP_ADU_Pin */
  GPIO_InitStruct.Pin = TEMP_ADD_Pin|TEMP_ADU_Pin;
 800153a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	481b      	ldr	r0, [pc, #108]	; (80015c0 <MX_GPIO_Init+0x17c>)
 8001554:	f000 fd08 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCFAN_Pin */
  GPIO_InitStruct.Pin = DCFAN_Pin;
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800155e:	2311      	movs	r3, #17
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCFAN_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <MX_GPIO_Init+0x180>)
 8001572:	f000 fcf9 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_Pin Motor1_Pin LAMP_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin|Motor1_Pin|LAMP_Pin;
 8001576:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800157c:	2311      	movs	r3, #17
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <MX_GPIO_Init+0x178>)
 8001590:	f000 fcea 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001594:	f44f 734e 	mov.w	r3, #824	; 0x338
 8001598:	617b      	str	r3, [r7, #20]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_GPIO_Init+0x17c>)
 80015aa:	f000 fcdd 	bl	8001f68 <HAL_GPIO_Init>

}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a42      	ldr	r2, [pc, #264]	; (800174c <HAL_SPI_MspInit+0x128>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12d      	bne.n	80016a2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 8001650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 800167e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001690:	2305      	movs	r3, #5
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	482e      	ldr	r0, [pc, #184]	; (8001754 <HAL_SPI_MspInit+0x130>)
 800169c:	f000 fc64 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016a0:	e050      	b.n	8001744 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <HAL_SPI_MspInit+0x134>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d14b      	bne.n	8001744 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_SPI_MspInit+0x12c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_SCK_Pin;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001712:	2307      	movs	r3, #7
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SCK_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <HAL_SPI_MspInit+0x130>)
 800171e:	f000 fc23 	bl	8001f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP_SO_Pin;
 8001722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001734:	2306      	movs	r3, #6
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SO_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <HAL_SPI_MspInit+0x138>)
 8001740:	f000 fc12 	bl	8001f68 <HAL_GPIO_Init>
}
 8001744:	bf00      	nop
 8001746:	3730      	adds	r7, #48	; 0x30
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40003800 	.word	0x40003800
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400
 8001758:	40003c00 	.word	0x40003c00
 800175c:	40020800 	.word	0x40020800

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_TIM_Base_MspInit+0x70>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_TIM_Base_MspInit+0x74>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_TIM_Base_MspInit+0x74>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_TIM_Base_MspInit+0x74>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800178e:	e01a      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_TIM_Base_MspInit+0x78>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d115      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_Base_MspInit+0x74>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <HAL_TIM_Base_MspInit+0x74>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x74>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2018      	movs	r0, #24
 80017bc:	f000 fb9d 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017c0:	2018      	movs	r0, #24
 80017c2:	f000 fbb6 	bl	8001f32 <HAL_NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40014000 	.word	0x40014000

080017dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_TIM_PWM_MspInit+0x3c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_TIM_PWM_MspInit+0x40>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_TIM_PWM_MspInit+0x40>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_TIM_PWM_MspInit+0x40>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40000800 	.word	0x40000800
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d11f      	bne.n	8001882 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Heater_Bottom_Pin|Heater_Top_Pin;
 800185e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001864:	2312      	movs	r3, #18
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001870:	2302      	movs	r3, #2
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	; (80018d8 <HAL_TIM_MspPostInit+0xb8>)
 800187c:	f000 fb74 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001880:	e022      	b.n	80018c8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a15      	ldr	r2, [pc, #84]	; (80018dc <HAL_TIM_MspPostInit+0xbc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d11d      	bne.n	80018c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_Pin|LEDB_Pin;
 80018a8:	23c0      	movs	r3, #192	; 0xc0
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018b8:	2302      	movs	r3, #2
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <HAL_TIM_MspPostInit+0xc0>)
 80018c4:	f000 fb50 	bl	8001f68 <HAL_GPIO_Init>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40000400 	.word	0x40000400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40000800 	.word	0x40000800
 80018e0:	40020400 	.word	0x40020400

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a32      	ldr	r2, [pc, #200]	; (80019cc <HAL_UART_MspInit+0xe8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12d      	bne.n	8001962 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_UART_MspInit+0xec>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_UART_MspInit+0xec>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800193e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001950:	2307      	movs	r3, #7
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	481e      	ldr	r0, [pc, #120]	; (80019d4 <HAL_UART_MspInit+0xf0>)
 800195c:	f000 fb04 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001960:	e030      	b.n	80019c4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_UART_MspInit+0xf4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d12b      	bne.n	80019c4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	4a16      	ldr	r2, [pc, #88]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6413      	str	r3, [r2, #64]	; 0x40
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_UART_MspInit+0xec>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_UART_MspInit+0xec>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_UART_MspInit+0xec>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_UART_MspInit+0xec>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a4:	230c      	movs	r3, #12
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b4:	2307      	movs	r3, #7
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_UART_MspInit+0xf0>)
 80019c0:	f000 fad2 	bl	8001f68 <HAL_GPIO_Init>
}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40004400 	.word	0x40004400

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Systick_Sensor_IRQ();
 8001a28:	f005 fa14 	bl	8006e54 <Systick_Sensor_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2c:	f000 f946 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  HeaterControl_TIM9_IRQ();
 8001a38:	f005 f836 	bl	8006aa8 <HeaterControl_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a3e:	f002 f85f 	bl	8003b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000634 	.word	0x20000634

08001a4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_kill>:

int _kill(int pid, int sig)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a66:	f006 f8bf 	bl	8007be8 <__errno>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2216      	movs	r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_exit>:

void _exit (int status)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe7 	bl	8001a5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a8e:	e7fe      	b.n	8001a8e <_exit+0x12>

08001a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
	}

return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:
	}
	return len;
}

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f006 f840 	bl	8007be8 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20020000 	.word	0x20020000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	20000714 	.word	0x20000714
 8001b9c:	20000750 	.word	0x20000750

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bee:	f7ff ffd7 	bl	8001ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f005 ffff 	bl	8007bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff f97b 	bl	8000ef0 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200004d8 	.word	0x200004d8
  ldr r2, =_sidata
 8001c08:	0800b254 	.word	0x0800b254
  ldr r2, =_sbss
 8001c0c:	200004d8 	.word	0x200004d8
  ldr r4, =_ebss
 8001c10:	20000750 	.word	0x20000750

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f94f 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fcc2 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f967 	bl	8001f4e <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f92f 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000718 	.word	0x20000718

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000718 	.word	0x20000718

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff29 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff3e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff31 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e159      	b.n	8002238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8148 	bne.w	8002232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a2 	beq.w	8002232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a52      	ldr	r2, [pc, #328]	; (8002254 <HAL_GPIO_Init+0x2ec>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a49      	ldr	r2, [pc, #292]	; (8002258 <HAL_GPIO_Init+0x2f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d019      	beq.n	800216a <HAL_GPIO_Init+0x202>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_GPIO_Init+0x2f4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0x1fe>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a47      	ldr	r2, [pc, #284]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00d      	beq.n	8002162 <HAL_GPIO_Init+0x1fa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a46      	ldr	r2, [pc, #280]	; (8002264 <HAL_GPIO_Init+0x2fc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x1f6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a45      	ldr	r2, [pc, #276]	; (8002268 <HAL_GPIO_Init+0x300>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_GPIO_Init+0x1f2>
 8002156:	2304      	movs	r3, #4
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215a:	2307      	movs	r3, #7
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x204>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x204>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x204>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4935      	ldr	r1, [pc, #212]	; (8002254 <HAL_GPIO_Init+0x2ec>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_GPIO_Init+0x304>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_GPIO_Init+0x304>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_GPIO_Init+0x304>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d8:	4a24      	ldr	r2, [pc, #144]	; (800226c <HAL_GPIO_Init+0x304>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_GPIO_Init+0x304>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_GPIO_Init+0x304>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_GPIO_Init+0x304>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <HAL_GPIO_Init+0x304>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f aea2 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00
 8002268:	40021000 	.word	0x40021000
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e001      	b.n	8002292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e267      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d075      	beq.n	80023de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00c      	beq.n	8002318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d112      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <HAL_RCC_OscConfig+0x108>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d157      	bne.n	80023dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e242      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x74>
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6f      	ldr	r2, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 800236c:	4b69      	ldr	r3, [pc, #420]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a68      	ldr	r2, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7ff fcaa 	bl	8001ce4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff fca6 	bl	8001ce4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e207      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xc0>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fc96 	bl	8001ce4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fc92 	bl	8001ce4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1f3      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b51      	ldr	r3, [pc, #324]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0xe8>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1c7      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x244>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff fc4b 	bl	8001ce4 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002452:	f7ff fc47 	bl	8001ce4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1a8      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4925      	ldr	r1, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_OscConfig+0x244>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff fc2a 	bl	8001ce4 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002494:	f7ff fc26 	bl	8001ce4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e187      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d036      	beq.n	800252c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_RCC_OscConfig+0x248>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff fc0a 	bl	8001ce4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d4:	f7ff fc06 	bl	8001ce4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e167      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x240>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x200>
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x248>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7ff fbf3 	bl	8001ce4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002502:	f7ff fbef 	bl	8001ce4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d907      	bls.n	8002520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e150      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ea      	bne.n	8002502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8097 	beq.w	8002668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b77      	ldr	r3, [pc, #476]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b74      	ldr	r3, [pc, #464]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a73      	ldr	r2, [pc, #460]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7ff fbaf 	bl	8001ce4 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7ff fbab 	bl	8001ce4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e10c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <HAL_RCC_OscConfig+0x474>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x2ea>
 80025b0:	4b64      	ldr	r3, [pc, #400]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a63      	ldr	r2, [pc, #396]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x30c>
 80025c6:	4b5f      	ldr	r3, [pc, #380]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a5e      	ldr	r2, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025e0:	4b58      	ldr	r3, [pc, #352]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b55      	ldr	r3, [pc, #340]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a54      	ldr	r2, [pc, #336]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff fb70 	bl	8001ce4 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff fb6c 	bl	8001ce4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0cb      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	4b49      	ldr	r3, [pc, #292]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x334>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fb5a 	bl	8001ce4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7ff fb56 	bl	8001ce4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0b5      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a38      	ldr	r2, [pc, #224]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a1 	beq.w	80027b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d05c      	beq.n	8002738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d141      	bne.n	800270a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCC_OscConfig+0x478>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff fb2a 	bl	8001ce4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002694:	f7ff fb26 	bl	8001ce4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e087      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x478>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7ff faff 	bl	8001ce4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7ff fafb 	bl	8001ce4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e05c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x416>
 8002708:	e054      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fae8 	bl	8001ce4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fae4 	bl	8001ce4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e045      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e038      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x4ec>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d028      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d121      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d11a      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0cc      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b68      	ldr	r3, [pc, #416]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d90c      	bls.n	8002800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002830:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a52      	ldr	r2, [pc, #328]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	494d      	ldr	r1, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d044      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d119      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e07f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d003      	beq.n	8002882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e067      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b37      	ldr	r3, [pc, #220]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4934      	ldr	r1, [pc, #208]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7ff fa16 	bl	8001ce4 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7ff fa12 	bl	8001ce4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e04f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d20c      	bcs.n	800290c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e032      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4916      	ldr	r1, [pc, #88]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294a:	f000 f821 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490a      	ldr	r1, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	4a09      	ldr	r2, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff f976 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00
 8002980:	40023800 	.word	0x40023800
 8002984:	0800ae50 	.word	0x0800ae50
 8002988:	20000000 	.word	0x20000000
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b090      	sub	sp, #64	; 0x40
 8002996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	2300      	movs	r3, #0
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a8:	4b59      	ldr	r3, [pc, #356]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d00d      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x40>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x3a>
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029c8:	e09b      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ce:	e098      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	627a      	str	r2, [r7, #36]	; 0x24
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	460a      	mov	r2, r1
 8002a12:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	4413      	add	r3, r2
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a2a:	f7fe f8c5 	bl	8000bb8 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a36:	e053      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a4a:	f04f 0b00 	mov.w	fp, #0
 8002a4e:	4652      	mov	r2, sl
 8002a50:	465b      	mov	r3, fp
 8002a52:	f04f 0000 	mov.w	r0, #0
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	0159      	lsls	r1, r3, #5
 8002a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a60:	0150      	lsls	r0, r2, #5
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	ebb2 080a 	subs.w	r8, r2, sl
 8002a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a82:	ebb2 0408 	subs.w	r4, r2, r8
 8002a86:	eb63 0509 	sbc.w	r5, r3, r9
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	00eb      	lsls	r3, r5, #3
 8002a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a98:	00e2      	lsls	r2, r4, #3
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	eb14 030a 	adds.w	r3, r4, sl
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	eb45 030b 	adc.w	r3, r5, fp
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	028b      	lsls	r3, r1, #10
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	028a      	lsls	r2, r1, #10
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	2200      	movs	r2, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	60fa      	str	r2, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	f7fe f870 	bl	8000bb8 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3740      	adds	r7, #64	; 0x40
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	017d7840 	.word	0x017d7840

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	0800ae60 	.word	0x0800ae60

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffdc 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0b5b      	lsrs	r3, r3, #13
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	0800ae60 	.word	0x0800ae60

08002b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07b      	b.n	8002c8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba6:	d009      	beq.n	8002bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
 8002bae:	e005      	b.n	8002bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fd24 	bl	8001624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	ea42 0103 	orr.w	r1, r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 0104 	and.w	r1, r3, #4
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f003 0210 	and.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b088      	sub	sp, #32
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_SPI_Transmit+0x22>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e126      	b.n	8002f06 <HAL_SPI_Transmit+0x270>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc0:	f7ff f810 	bl	8001ce4 <HAL_GetTick>
 8002cc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cda:	e10b      	b.n	8002ef4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Transmit+0x52>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cec:	e102      	b.n	8002ef4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d34:	d10f      	bne.n	8002d56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d007      	beq.n	8002d74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7c:	d14b      	bne.n	8002e16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Transmit+0xf6>
 8002d86:	8afb      	ldrh	r3, [r7, #22]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d13e      	bne.n	8002e0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002db0:	e02b      	b.n	8002e0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d112      	bne.n	8002de6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	1c9a      	adds	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de4:	e011      	b.n	8002e0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de6:	f7fe ff7d 	bl	8001ce4 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d803      	bhi.n	8002dfe <HAL_SPI_Transmit+0x168>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d102      	bne.n	8002e04 <HAL_SPI_Transmit+0x16e>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e08:	e074      	b.n	8002ef4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ce      	bne.n	8002db2 <HAL_SPI_Transmit+0x11c>
 8002e14:	e04c      	b.n	8002eb0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Transmit+0x18e>
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d140      	bne.n	8002ea6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	7812      	ldrb	r2, [r2, #0]
 8002e30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e4a:	e02c      	b.n	8002ea6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d113      	bne.n	8002e82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e80:	e011      	b.n	8002ea6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e82:	f7fe ff2f 	bl	8001ce4 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d803      	bhi.n	8002e9a <HAL_SPI_Transmit+0x204>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d102      	bne.n	8002ea0 <HAL_SPI_Transmit+0x20a>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea4:	e026      	b.n	8002ef4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1cd      	bne.n	8002e4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fbcb 	bl	8003650 <SPI_EndRxTxTransaction>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e000      	b.n	8002ef4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ef2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b088      	sub	sp, #32
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2a:	d112      	bne.n	8002f52 <HAL_SPI_Receive+0x44>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10e      	bne.n	8002f52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2204      	movs	r2, #4
 8002f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f8f1 	bl	8003130 <HAL_SPI_TransmitReceive>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	e0ea      	b.n	8003128 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_SPI_Receive+0x52>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e0e3      	b.n	8003128 <HAL_SPI_Receive+0x21a>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f68:	f7fe febc 	bl	8001ce4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f7e:	e0ca      	b.n	8003116 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SPI_Receive+0x7e>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f90:	e0c1      	b.n	8003116 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2204      	movs	r2, #4
 8002f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd8:	d10f      	bne.n	8002ffa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b40      	cmp	r3, #64	; 0x40
 8003006:	d007      	beq.n	8003018 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d162      	bne.n	80030e6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003020:	e02e      	b.n	8003080 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d115      	bne.n	800305c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f103 020c 	add.w	r2, r3, #12
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	7812      	ldrb	r2, [r2, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	87da      	strh	r2, [r3, #62]	; 0x3e
 800305a:	e011      	b.n	8003080 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800305c:	f7fe fe42 	bl	8001ce4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d803      	bhi.n	8003074 <HAL_SPI_Receive+0x166>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003072:	d102      	bne.n	800307a <HAL_SPI_Receive+0x16c>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800307e:	e04a      	b.n	8003116 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1cb      	bne.n	8003022 <HAL_SPI_Receive+0x114>
 800308a:	e031      	b.n	80030f0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d113      	bne.n	80030c2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	b292      	uxth	r2, r2
 80030a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030c0:	e011      	b.n	80030e6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c2:	f7fe fe0f 	bl	8001ce4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d803      	bhi.n	80030da <HAL_SPI_Receive+0x1cc>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d102      	bne.n	80030e0 <HAL_SPI_Receive+0x1d2>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030e4:	e017      	b.n	8003116 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1cd      	bne.n	800308c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	6839      	ldr	r1, [r7, #0]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fa45 	bl	8003584 <SPI_EndRxTransaction>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
 8003112:	e000      	b.n	8003116 <HAL_SPI_Receive+0x208>
  }

error :
 8003114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003126:	7dfb      	ldrb	r3, [r7, #23]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	; 0x30
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800313e:	2301      	movs	r3, #1
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_SPI_TransmitReceive+0x26>
 8003152:	2302      	movs	r3, #2
 8003154:	e18a      	b.n	800346c <HAL_SPI_TransmitReceive+0x33c>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800315e:	f7fe fdc1 	bl	8001ce4 <HAL_GetTick>
 8003162:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317c:	2b01      	cmp	r3, #1
 800317e:	d00f      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0x70>
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003186:	d107      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x68>
 8003190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003194:	2b04      	cmp	r3, #4
 8003196:	d003      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800319e:	e15b      	b.n	8003458 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x82>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x82>
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031b8:	e14e      	b.n	8003458 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2205      	movs	r2, #5
 80031ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	887a      	ldrh	r2, [r7, #2]
 80031de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	887a      	ldrh	r2, [r7, #2]
 80031f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d007      	beq.n	8003222 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322a:	d178      	bne.n	800331e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_TransmitReceive+0x10a>
 8003234:	8b7b      	ldrh	r3, [r7, #26]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d166      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800325e:	e053      	b.n	8003308 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d11b      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x176>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d016      	beq.n	80032a6 <HAL_SPI_TransmitReceive+0x176>
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d113      	bne.n	80032a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d119      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x1b8>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d014      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	b292      	uxth	r2, r2
 80032ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	1c9a      	adds	r2, r3, #2
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e4:	2301      	movs	r3, #1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032e8:	f7fe fcfc 	bl	8001ce4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d807      	bhi.n	8003308 <HAL_SPI_TransmitReceive+0x1d8>
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d003      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003306:	e0a7      	b.n	8003458 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1a6      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x130>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1a1      	bne.n	8003260 <HAL_SPI_TransmitReceive+0x130>
 800331c:	e07c      	b.n	8003418 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_SPI_TransmitReceive+0x1fc>
 8003326:	8b7b      	ldrh	r3, [r7, #26]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d16b      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003352:	e057      	b.n	8003404 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d11c      	bne.n	800339c <HAL_SPI_TransmitReceive+0x26c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d017      	beq.n	800339c <HAL_SPI_TransmitReceive+0x26c>
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	2b01      	cmp	r3, #1
 8003370:	d114      	bne.n	800339c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d119      	bne.n	80033de <HAL_SPI_TransmitReceive+0x2ae>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d014      	beq.n	80033de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033da:	2301      	movs	r3, #1
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033de:	f7fe fc81 	bl	8001ce4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d803      	bhi.n	80033f6 <HAL_SPI_TransmitReceive+0x2c6>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x2cc>
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d103      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003402:	e029      	b.n	8003458 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1a2      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x224>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d19d      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f917 	bl	8003650 <SPI_EndRxTxTransaction>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003434:	e010      	b.n	8003458 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	e000      	b.n	8003458 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003468:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800346c:	4618      	mov	r0, r3
 800346e:	3730      	adds	r7, #48	; 0x30
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003484:	f7fe fc2e 	bl	8001ce4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003494:	f7fe fc26 	bl	8001ce4 <HAL_GetTick>
 8003498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	015b      	lsls	r3, r3, #5
 80034a0:	0d1b      	lsrs	r3, r3, #20
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034aa:	e054      	b.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d050      	beq.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b4:	f7fe fc16 	bl	8001ce4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d902      	bls.n	80034ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d13d      	bne.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e2:	d111      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d004      	beq.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	d107      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003510:	d10f      	bne.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e017      	b.n	8003576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	3b01      	subs	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d19b      	bne.n	80034ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000

08003584 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003598:	d111      	bne.n	80035be <SPI_EndRxTransaction+0x3a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a2:	d004      	beq.n	80035ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ac:	d107      	bne.n	80035be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c6:	d12a      	bne.n	800361e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d0:	d012      	beq.n	80035f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff ff49 	bl	8003474 <SPI_WaitFlagStateUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02d      	beq.n	8003644 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e026      	b.n	8003646 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2200      	movs	r2, #0
 8003600:	2101      	movs	r1, #1
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff ff36 	bl	8003474 <SPI_WaitFlagStateUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01a      	beq.n	8003644 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e013      	b.n	8003646 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	2101      	movs	r1, #1
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff23 	bl	8003474 <SPI_WaitFlagStateUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e000      	b.n	8003646 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <SPI_EndRxTxTransaction+0x7c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <SPI_EndRxTxTransaction+0x80>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0d5b      	lsrs	r3, r3, #21
 8003668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367a:	d112      	bne.n	80036a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	2180      	movs	r1, #128	; 0x80
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff fef4 	bl	8003474 <SPI_WaitFlagStateUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b80      	cmp	r3, #128	; 0x80
 80036ba:	d0f2      	beq.n	80036a2 <SPI_EndRxTxTransaction+0x52>
 80036bc:	e000      	b.n	80036c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80036be:	bf00      	nop
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000
 80036d0:	165e9f81 	.word	0x165e9f81

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e041      	b.n	800376a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe f830 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fcb8 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e044      	b.n	8003816 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_TIM_Base_Start_IT+0xb0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x6c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d013      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x6c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_TIM_Base_Start_IT+0xb4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x6c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_TIM_Base_Start_IT+0xb8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x6c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a17      	ldr	r2, [pc, #92]	; (8003830 <HAL_TIM_Base_Start_IT+0xbc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x6c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_TIM_Base_Start_IT+0xc0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d111      	bne.n	8003804 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d010      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003802:	e007      	b.n	8003814 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40010000 	.word	0x40010000
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40014000 	.word	0x40014000

08003838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e041      	b.n	80038ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd ffbc 	bl	80017dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f000 fc06 	bl	8004088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_TIM_PWM_Start+0x24>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e022      	b.n	8003942 <HAL_TIM_PWM_Start+0x6a>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d109      	bne.n	8003916 <HAL_TIM_PWM_Start+0x3e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e015      	b.n	8003942 <HAL_TIM_PWM_Start+0x6a>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b08      	cmp	r3, #8
 800391a:	d109      	bne.n	8003930 <HAL_TIM_PWM_Start+0x58>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e008      	b.n	8003942 <HAL_TIM_PWM_Start+0x6a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e068      	b.n	8003a1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <HAL_TIM_PWM_Start+0x82>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003958:	e013      	b.n	8003982 <HAL_TIM_PWM_Start+0xaa>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0x92>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003968:	e00b      	b.n	8003982 <HAL_TIM_PWM_Start+0xaa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0xa2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	e003      	b.n	8003982 <HAL_TIM_PWM_Start+0xaa>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fe22 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <HAL_TIM_PWM_Start+0x14c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d107      	bne.n	80039aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_TIM_PWM_Start+0x14c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x10e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d013      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x10e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_TIM_PWM_Start+0x150>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x10e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_TIM_PWM_Start+0x154>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x10e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIM_PWM_Start+0x158>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x10e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_TIM_PWM_Start+0x15c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d111      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d010      	beq.n	8003a1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a08:	e007      	b.n	8003a1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40014000 	.word	0x40014000

08003a38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fdc2 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_TIM_PWM_Stop+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d117      	bne.n	8003a8a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a1a      	ldr	r2, [r3, #32]
 8003a60:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_TIM_PWM_Stop+0x52>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	f240 4344 	movw	r3, #1092	; 0x444
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d107      	bne.n	8003a8a <HAL_TIM_PWM_Stop+0x52>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6a1a      	ldr	r2, [r3, #32]
 8003a90:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_TIM_PWM_Stop+0x82>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	f240 4344 	movw	r3, #1092	; 0x444
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_TIM_PWM_Stop+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Stop+0x92>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac8:	e013      	b.n	8003af2 <HAL_TIM_PWM_Stop+0xba>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d104      	bne.n	8003ada <HAL_TIM_PWM_Stop+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	e00b      	b.n	8003af2 <HAL_TIM_PWM_Stop+0xba>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Stop+0xb2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	e003      	b.n	8003af2 <HAL_TIM_PWM_Stop+0xba>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40010000 	.word	0x40010000

08003b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0202 	mvn.w	r2, #2
 8003b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa81 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa73 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa84 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0204 	mvn.w	r2, #4
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa57 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa49 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa5a 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0208 	mvn.w	r2, #8
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa2d 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa1f 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fa30 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0210 	mvn.w	r2, #16
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa03 	bl	800404a <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f9f5 	bl	8004036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa06 	bl	800405e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0201 	mvn.w	r2, #1
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9cf 	bl	8004022 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fd30 	bl	8004710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f9cb 	bl	8004072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d10e      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0220 	mvn.w	r2, #32
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fcfa 	bl	80046fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0ae      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	f200 809f 	bhi.w	8003e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003e7d 	.word	0x08003e7d
 8003d4c:	08003e7d 	.word	0x08003e7d
 8003d50:	08003e7d 	.word	0x08003e7d
 8003d54:	08003db9 	.word	0x08003db9
 8003d58:	08003e7d 	.word	0x08003e7d
 8003d5c:	08003e7d 	.word	0x08003e7d
 8003d60:	08003e7d 	.word	0x08003e7d
 8003d64:	08003dfb 	.word	0x08003dfb
 8003d68:	08003e7d 	.word	0x08003e7d
 8003d6c:	08003e7d 	.word	0x08003e7d
 8003d70:	08003e7d 	.word	0x08003e7d
 8003d74:	08003e3b 	.word	0x08003e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fa02 	bl	8004188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0208 	orr.w	r2, r2, #8
 8003d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0204 	bic.w	r2, r2, #4
 8003da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6999      	ldr	r1, [r3, #24]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	619a      	str	r2, [r3, #24]
      break;
 8003db6:	e064      	b.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fa48 	bl	8004254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6999      	ldr	r1, [r3, #24]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	021a      	lsls	r2, r3, #8
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	619a      	str	r2, [r3, #24]
      break;
 8003df8:	e043      	b.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fa93 	bl	800432c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0208 	orr.w	r2, r2, #8
 8003e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0204 	bic.w	r2, r2, #4
 8003e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69d9      	ldr	r1, [r3, #28]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	61da      	str	r2, [r3, #28]
      break;
 8003e38:	e023      	b.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fadd 	bl	8004400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69d9      	ldr	r1, [r3, #28]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	021a      	lsls	r2, r3, #8
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	61da      	str	r2, [r3, #28]
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0b4      	b.n	800401a <HAL_TIM_ConfigClockSource+0x186>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee8:	d03e      	beq.n	8003f68 <HAL_TIM_ConfigClockSource+0xd4>
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	f200 8087 	bhi.w	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	f000 8086 	beq.w	8004006 <HAL_TIM_ConfigClockSource+0x172>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d87f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b70      	cmp	r3, #112	; 0x70
 8003f02:	d01a      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xa6>
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d87b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b60      	cmp	r3, #96	; 0x60
 8003f0a:	d050      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x11a>
 8003f0c:	2b60      	cmp	r3, #96	; 0x60
 8003f0e:	d877      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f10:	2b50      	cmp	r3, #80	; 0x50
 8003f12:	d03c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xfa>
 8003f14:	2b50      	cmp	r3, #80	; 0x50
 8003f16:	d873      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d058      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x13a>
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d86f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b30      	cmp	r3, #48	; 0x30
 8003f22:	d064      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d86b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d060      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d867      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05c      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d05a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	e062      	b.n	8004000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6899      	ldr	r1, [r3, #8]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f000 fb23 	bl	8004594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	609a      	str	r2, [r3, #8]
      break;
 8003f66:	e04f      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6899      	ldr	r1, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f000 fb0c 	bl	8004594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8a:	609a      	str	r2, [r3, #8]
      break;
 8003f8c:	e03c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 fa80 	bl	80044a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2150      	movs	r1, #80	; 0x50
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fad9 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003fac:	e02c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fa9f 	bl	80044fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2160      	movs	r1, #96	; 0x60
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fac9 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e01c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fa60 	bl	80044a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2140      	movs	r1, #64	; 0x40
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fab9 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003fec:	e00c      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 fab0 	bl	800455e <TIM_ITRx_SetConfig>
      break;
 8003ffe:	e003      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	e000      	b.n	8004008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a34      	ldr	r2, [pc, #208]	; (800416c <TIM_Base_SetConfig+0xe4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00f      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a31      	ldr	r2, [pc, #196]	; (8004170 <TIM_Base_SetConfig+0xe8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a30      	ldr	r2, [pc, #192]	; (8004174 <TIM_Base_SetConfig+0xec>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a2f      	ldr	r2, [pc, #188]	; (8004178 <TIM_Base_SetConfig+0xf0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a25      	ldr	r2, [pc, #148]	; (800416c <TIM_Base_SetConfig+0xe4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01b      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d017      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a22      	ldr	r2, [pc, #136]	; (8004170 <TIM_Base_SetConfig+0xe8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a21      	ldr	r2, [pc, #132]	; (8004174 <TIM_Base_SetConfig+0xec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00f      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a20      	ldr	r2, [pc, #128]	; (8004178 <TIM_Base_SetConfig+0xf0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <TIM_Base_SetConfig+0xf4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <TIM_Base_SetConfig+0xf8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <TIM_Base_SetConfig+0xfc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d108      	bne.n	8004124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <TIM_Base_SetConfig+0xe4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d103      	bne.n	8004158 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	615a      	str	r2, [r3, #20]
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0302 	bic.w	r3, r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <TIM_OC1_SetConfig+0xc8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10c      	bne.n	80041fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0308 	bic.w	r3, r3, #8
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 0304 	bic.w	r3, r3, #4
 80041fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <TIM_OC1_SetConfig+0xc8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40010000 	.word	0x40010000

08004254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0210 	bic.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0320 	bic.w	r3, r3, #32
 800429e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <TIM_OC2_SetConfig+0xd4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10d      	bne.n	80042d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <TIM_OC2_SetConfig+0xd4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d113      	bne.n	8004300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000

0800432c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <TIM_OC3_SetConfig+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <TIM_OC3_SetConfig+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40010000 	.word	0x40010000

08004400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <TIM_OC4_SetConfig+0x9c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000

080044a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 030a 	bic.w	r3, r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0210 	bic.w	r2, r3, #16
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800453a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	f043 0307 	orr.w	r3, r3, #7
 8004580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	021a      	lsls	r2, r3, #8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2201      	movs	r2, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	401a      	ands	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e050      	b.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d013      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10c      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40014000 	.word	0x40014000

080046fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e03f      	b.n	80047b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd f8ca 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f929 	bl	80049c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800477c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800478c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800479c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28
 80047c2:	af02      	add	r7, sp, #8
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d17c      	bne.n	80048d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_UART_Transmit+0x2c>
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e075      	b.n	80048da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Transmit+0x3e>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e06e      	b.n	80048da <HAL_UART_Transmit+0x11c>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2221      	movs	r2, #33	; 0x21
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004812:	f7fd fa67 	bl	8001ce4 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482c:	d108      	bne.n	8004840 <HAL_UART_Transmit+0x82>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	e003      	b.n	8004848 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004850:	e02a      	b.n	80048a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2200      	movs	r2, #0
 800485a:	2180      	movs	r1, #128	; 0x80
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f840 	bl	80048e2 <UART_WaitOnFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e036      	b.n	80048da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3302      	adds	r3, #2
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e007      	b.n	800489a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1cf      	bne.n	8004852 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2140      	movs	r1, #64	; 0x40
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f810 	bl	80048e2 <UART_WaitOnFlagUntilTimeout>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e000      	b.n	80048da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b090      	sub	sp, #64	; 0x40
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f2:	e050      	b.n	8004996 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d04c      	beq.n	8004996 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0x30>
 8004902:	f7fd f9ef 	bl	8001ce4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800490e:	429a      	cmp	r2, r3
 8004910:	d241      	bcs.n	8004996 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004932:	637a      	str	r2, [r7, #52]	; 0x34
 8004934:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	613b      	str	r3, [r7, #16]
   return(result);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004966:	623a      	str	r2, [r7, #32]
 8004968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	69f9      	ldr	r1, [r7, #28]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	61bb      	str	r3, [r7, #24]
   return(result);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e5      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e00f      	b.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4013      	ands	r3, r2
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d09f      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3740      	adds	r7, #64	; 0x40
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c4:	b0c0      	sub	sp, #256	; 0x100
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	68d9      	ldr	r1, [r3, #12]
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	ea40 0301 	orr.w	r3, r0, r1
 80049e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a18:	f021 010c 	bic.w	r1, r1, #12
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a26:	430b      	orrs	r3, r1
 8004a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	6999      	ldr	r1, [r3, #24]
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	ea40 0301 	orr.w	r3, r0, r1
 8004a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <UART_SetConfig+0x2cc>)
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d005      	beq.n	8004a60 <UART_SetConfig+0xa0>
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b8d      	ldr	r3, [pc, #564]	; (8004c90 <UART_SetConfig+0x2d0>)
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d104      	bne.n	8004a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a60:	f7fe f87c 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004a64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a68:	e003      	b.n	8004a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6a:	f7fe f863 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8004a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	f040 810c 	bne.w	8004c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	1891      	adds	r1, r2, r2
 8004a98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9a:	415b      	adcs	r3, r3
 8004a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	eb12 0801 	adds.w	r8, r2, r1
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb43 0901 	adc.w	r9, r3, r1
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac2:	4690      	mov	r8, r2
 8004ac4:	4699      	mov	r9, r3
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	eb18 0303 	adds.w	r3, r8, r3
 8004acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	eb49 0303 	adc.w	r3, r9, r3
 8004ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aee:	460b      	mov	r3, r1
 8004af0:	18db      	adds	r3, r3, r3
 8004af2:	653b      	str	r3, [r7, #80]	; 0x50
 8004af4:	4613      	mov	r3, r2
 8004af6:	eb42 0303 	adc.w	r3, r2, r3
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
 8004afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b04:	f7fc f858 	bl	8000bb8 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	011c      	lsls	r4, r3, #4
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b30:	415b      	adcs	r3, r3
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b38:	4641      	mov	r1, r8
 8004b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb43 0b01 	adc.w	fp, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b58:	4692      	mov	sl, r2
 8004b5a:	469b      	mov	fp, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b66:	464b      	mov	r3, r9
 8004b68:	eb4b 0303 	adc.w	r3, fp, r3
 8004b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b84:	460b      	mov	r3, r1
 8004b86:	18db      	adds	r3, r3, r3
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
 8004b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9a:	f7fc f80d 	bl	8000bb8 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2264      	movs	r2, #100	; 0x64
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	1acb      	subs	r3, r1, r3
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bc8:	441c      	add	r4, r3
 8004bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be4:	415b      	adcs	r3, r3
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bec:	4641      	mov	r1, r8
 8004bee:	1851      	adds	r1, r2, r1
 8004bf0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	414b      	adcs	r3, r1
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c04:	4659      	mov	r1, fp
 8004c06:	00cb      	lsls	r3, r1, #3
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0e:	4651      	mov	r1, sl
 8004c10:	00ca      	lsls	r2, r1, #3
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	4642      	mov	r2, r8
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c20:	464b      	mov	r3, r9
 8004c22:	460a      	mov	r2, r1
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c40:	460b      	mov	r3, r1
 8004c42:	18db      	adds	r3, r3, r3
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	4613      	mov	r3, r2
 8004c48:	eb42 0303 	adc.w	r3, r2, r3
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c56:	f7fb ffaf 	bl	8000bb8 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004c60:	fba3 1302 	umull	r1, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2164      	movs	r1, #100	; 0x64
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3332      	adds	r3, #50	; 0x32
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 0207 	and.w	r2, r3, #7
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4422      	add	r2, r4
 8004c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c88:	e105      	b.n	8004e96 <UART_SetConfig+0x4d6>
 8004c8a:	bf00      	nop
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40011400 	.word	0x40011400
 8004c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004caa:	4642      	mov	r2, r8
 8004cac:	464b      	mov	r3, r9
 8004cae:	1891      	adds	r1, r2, r2
 8004cb0:	6239      	str	r1, [r7, #32]
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cba:	4641      	mov	r1, r8
 8004cbc:	1854      	adds	r4, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb43 0501 	adc.w	r5, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	00eb      	lsls	r3, r5, #3
 8004cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd2:	00e2      	lsls	r2, r4, #3
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	4643      	mov	r3, r8
 8004cda:	18e3      	adds	r3, r4, r3
 8004cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	eb45 0303 	adc.w	r3, r5, r3
 8004ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d06:	4629      	mov	r1, r5
 8004d08:	008b      	lsls	r3, r1, #2
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d10:	4621      	mov	r1, r4
 8004d12:	008a      	lsls	r2, r1, #2
 8004d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d18:	f7fb ff4e 	bl	8000bb8 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4b60      	ldr	r3, [pc, #384]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004d22:	fba3 2302 	umull	r2, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	011c      	lsls	r4, r3, #4
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	61b9      	str	r1, [r7, #24]
 8004d44:	415b      	adcs	r3, r3
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6139      	str	r1, [r7, #16]
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da4:	4649      	mov	r1, r9
 8004da6:	008b      	lsls	r3, r1, #2
 8004da8:	4641      	mov	r1, r8
 8004daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dae:	4641      	mov	r1, r8
 8004db0:	008a      	lsls	r2, r1, #2
 8004db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004db6:	f7fb feff 	bl	8000bb8 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	2164      	movs	r1, #100	; 0x64
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	3332      	adds	r3, #50	; 0x32
 8004dd2:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dde:	441c      	add	r4, r3
 8004de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de4:	2200      	movs	r2, #0
 8004de6:	673b      	str	r3, [r7, #112]	; 0x70
 8004de8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dee:	4642      	mov	r2, r8
 8004df0:	464b      	mov	r3, r9
 8004df2:	1891      	adds	r1, r2, r2
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	415b      	adcs	r3, r3
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dfe:	4641      	mov	r1, r8
 8004e00:	1851      	adds	r1, r2, r1
 8004e02:	6039      	str	r1, [r7, #0]
 8004e04:	4649      	mov	r1, r9
 8004e06:	414b      	adcs	r3, r1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e16:	4659      	mov	r1, fp
 8004e18:	00cb      	lsls	r3, r1, #3
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e20:	4651      	mov	r1, sl
 8004e22:	00ca      	lsls	r2, r1, #3
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	189b      	adds	r3, r3, r2
 8004e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e30:	464b      	mov	r3, r9
 8004e32:	460a      	mov	r2, r1
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	663b      	str	r3, [r7, #96]	; 0x60
 8004e44:	667a      	str	r2, [r7, #100]	; 0x64
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e52:	4649      	mov	r1, r9
 8004e54:	008b      	lsls	r3, r1, #2
 8004e56:	4641      	mov	r1, r8
 8004e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	008a      	lsls	r2, r1, #2
 8004e60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e64:	f7fb fea8 	bl	8000bb8 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	2164      	movs	r1, #100	; 0x64
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	3332      	adds	r3, #50	; 0x32
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4422      	add	r2, r4
 8004e94:	609a      	str	r2, [r3, #8]
}
 8004e96:	bf00      	nop
 8004e98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop
 8004ea4:	51eb851f 	.word	0x51eb851f

08004ea8 <_Graph_Print>:
#include <math.h>




void _Graph_Print(graph_t * graph_var, uint32_t color){
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b08b      	sub	sp, #44	; 0x2c
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < graph_var -> count - 1; i++){
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	83fb      	strh	r3, [r7, #30]
 8004eb6:	e075      	b.n	8004fa4 <_Graph_Print+0xfc>
		int32_t x1 = graph_var -> xAxisPos + graph_var -> xData [i] / graph_var -> xDensity;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7a9b      	ldrb	r3, [r3, #10]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	8bfb      	ldrh	r3, [r7, #30]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	ed93 6a00 	vldr	s12, [r3]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ed8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ee4:	ee17 3a90 	vmov	r3, s15
 8004ee8:	61bb      	str	r3, [r7, #24]
		int32_t x2 = graph_var -> xAxisPos + graph_var -> xData [i + 1] / graph_var -> xDensity;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7a9b      	ldrb	r3, [r3, #10]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	8bfb      	ldrh	r3, [r7, #30]
 8004efc:	3301      	adds	r3, #1
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	ed93 6a00 	vldr	s12, [r3]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	edd3 6a03 	vldr	s13, [r3, #12]
 8004f0c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f18:	ee17 3a90 	vmov	r3, s15
 8004f1c:	617b      	str	r3, [r7, #20]
		int32_t y1 = graph_var -> yAxisPos - graph_var -> yData [i] / graph_var -> yDensity;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7adb      	ldrb	r3, [r3, #11]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	8bfb      	ldrh	r3, [r7, #30]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	ed93 6a00 	vldr	s12, [r3]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	edd3 6a04 	vldr	s13, [r3, #16]
 8004f3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f4a:	ee17 3a90 	vmov	r3, s15
 8004f4e:	613b      	str	r3, [r7, #16]
		int32_t y2 = graph_var -> yAxisPos - graph_var -> yData [i + 1] / graph_var -> yDensity;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7adb      	ldrb	r3, [r3, #11]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	8bfb      	ldrh	r3, [r7, #30]
 8004f62:	3301      	adds	r3, #1
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	ed93 6a00 	vldr	s12, [r3]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	edd3 6a04 	vldr	s13, [r3, #16]
 8004f72:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f7e:	ee17 3a90 	vmov	r3, s15
 8004f82:	60fb      	str	r3, [r7, #12]
		OLED_Line(x1, y1, x2, y2, color);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	b2d8      	uxtb	r0, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	b2d9      	uxtb	r1, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	b2dc      	uxtb	r4, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f001 f9cf 	bl	800633c <OLED_Line>
	for(uint16_t i = 0; i < graph_var -> count - 1; i++){
 8004f9e:	8bfb      	ldrh	r3, [r7, #30]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	83fb      	strh	r3, [r7, #30]
 8004fa4:	8bfa      	ldrh	r2, [r7, #30]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	891b      	ldrh	r3, [r3, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	429a      	cmp	r2, r3
 8004fae:	db83      	blt.n	8004eb8 <_Graph_Print+0x10>
	}
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	3724      	adds	r7, #36	; 0x24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd90      	pop	{r4, r7, pc}

08004fba <_Graph_PrintPoint>:

void _Graph_PrintPoint(graph_t * graph_var, uint16_t idx, uint32_t color){
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	817b      	strh	r3, [r7, #10]
	int32_t x1 = graph_var -> xAxisPos + graph_var -> xData [idx] / graph_var -> xDensity;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	7a9b      	ldrb	r3, [r3, #10]
 8004fcc:	ee07 3a90 	vmov	s15, r3
 8004fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	897b      	ldrh	r3, [r7, #10]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	ed93 6a00 	vldr	s12, [r3]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004fe8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ff4:	ee17 3a90 	vmov	r3, s15
 8004ff8:	617b      	str	r3, [r7, #20]
	int32_t y1 = graph_var -> yAxisPos - graph_var -> yData [idx] / graph_var -> yDensity;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	7adb      	ldrb	r3, [r3, #11]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	897b      	ldrh	r3, [r7, #10]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	ed93 6a00 	vldr	s12, [r3]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	edd3 6a04 	vldr	s13, [r3, #16]
 800501a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800501e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005026:	ee17 3a90 	vmov	r3, s15
 800502a:	613b      	str	r3, [r7, #16]
	OLED_Dot(x1, y1, 1, color);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	b2d8      	uxtb	r0, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	b2d9      	uxtb	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f000 fcd1 	bl	80059de <OLED_Dot>
	OLED_Dot(x1+1, y1, 1, color);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	b2d8      	uxtb	r0, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	b2d9      	uxtb	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f000 fcc7 	bl	80059de <OLED_Dot>
	OLED_Dot(x1, y1+1, 1, color);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	b2d8      	uxtb	r0, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	3301      	adds	r3, #1
 800505a:	b2d9      	uxtb	r1, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f000 fcbd 	bl	80059de <OLED_Dot>
	OLED_Dot(x1-1, y1, 1, color);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b2d8      	uxtb	r0, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	b2d9      	uxtb	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f000 fcb3 	bl	80059de <OLED_Dot>
	OLED_Dot(x1, y1-1, 1, color);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	b2d8      	uxtb	r0, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b2d9      	uxtb	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f000 fca9 	bl	80059de <OLED_Dot>
}
 800508c:	bf00      	nop
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_Graph_Add>:

void _Graph_Add(graph_t * graph_var, float xData, float yData){
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	ed87 0a02 	vstr	s0, [r7, #8]
 80050a0:	edc7 0a01 	vstr	s1, [r7, #4]
	graph_var -> xData = realloc(graph_var -> xData, (graph_var -> count + 1) * sizeof(float));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	891b      	ldrh	r3, [r3, #8]
 80050ac:	3301      	adds	r3, #1
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f003 fbb0 	bl	8008818 <realloc>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]
	graph_var -> yData = realloc(graph_var -> yData, (graph_var -> count + 1) * sizeof(float));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	891b      	ldrh	r3, [r3, #8]
 80050c6:	3301      	adds	r3, #1
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f003 fba3 	bl	8008818 <realloc>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	605a      	str	r2, [r3, #4]
	graph_var -> xData[graph_var -> count] = xData;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	891b      	ldrh	r3, [r3, #8]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	601a      	str	r2, [r3, #0]
	graph_var -> yData[graph_var -> count] = yData;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	891b      	ldrh	r3, [r3, #8]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
	graph_var -> count += 1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	891b      	ldrh	r3, [r3, #8]
 80050fc:	3301      	adds	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	811a      	strh	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <_Graph_Pop>:

void _Graph_Pop(graph_t * graph_var, float * xData, float * yData){
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
	if(graph_var -> count > 0){
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	891b      	ldrh	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03d      	beq.n	800519c <_Graph_Pop+0x90>
		if(xData != NULL){
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <_Graph_Pop+0x32>
			*xData = graph_var -> xData[graph_var -> count - 1];
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	891b      	ldrh	r3, [r3, #8]
 800512e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005132:	3b01      	subs	r3, #1
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	601a      	str	r2, [r3, #0]
		}
		if(yData != NULL){
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <_Graph_Pop+0x50>
			*yData = graph_var -> yData[graph_var -> count - 1];
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	891b      	ldrh	r3, [r3, #8]
 800514c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005150:	3b01      	subs	r3, #1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]
		}
		graph_var -> xData = realloc(graph_var -> xData, (graph_var -> count - 1) * sizeof(float));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	891b      	ldrh	r3, [r3, #8]
 8005164:	3b01      	subs	r3, #1
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f003 fb54 	bl	8008818 <realloc>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]
		graph_var -> yData = realloc(graph_var -> yData, (graph_var -> count - 1) * sizeof(float));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	891b      	ldrh	r3, [r3, #8]
 800517e:	3b01      	subs	r3, #1
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f003 fb47 	bl	8008818 <realloc>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]
		graph_var -> count -= 1;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	891b      	ldrh	r3, [r3, #8]
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	811a      	strh	r2, [r3, #8]
	}
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_Graph_ChangeDensity>:

static void _Graph_ChangeDensity(struct _graphType * graph_var, float xDen, float yDen){
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80051b0:	edc7 0a01 	vstr	s1, [r7, #4]
	graph_var -> xDensity = xDen;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	60da      	str	r2, [r3, #12]
	graph_var -> yDensity = yDen;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	611a      	str	r2, [r3, #16]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <_Graph_ChangeAxis>:

static void _Graph_ChangeAxis(struct _graphType * graph_var, uint8_t xAxisPos, uint8_t yAxisPos){
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
 80051d8:	4613      	mov	r3, r2
 80051da:	70bb      	strb	r3, [r7, #2]
	graph_var -> xAxisPos = xAxisPos;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	729a      	strb	r2, [r3, #10]
	graph_var -> yAxisPos = yAxisPos;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	78ba      	ldrb	r2, [r7, #2]
 80051e6:	72da      	strb	r2, [r3, #11]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <_Graph_Init>:


graph_t * _Graph_Init(float * xData, float * yData, uint16_t count, uint8_t xAxisPos, uint8_t yAxisPos, float xDen, float yDen){
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6178      	str	r0, [r7, #20]
 80051fc:	6139      	str	r1, [r7, #16]
 80051fe:	4611      	mov	r1, r2
 8005200:	461a      	mov	r2, r3
 8005202:	ed87 0a02 	vstr	s0, [r7, #8]
 8005206:	edc7 0a01 	vstr	s1, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	81fb      	strh	r3, [r7, #14]
 800520e:	4613      	mov	r3, r2
 8005210:	737b      	strb	r3, [r7, #13]
	//배열을 받는 경우에는 malloc로 굳이 동적할당 할 필요는 없다. 하지만 멤버변수 정도는 동적 할당을 한다.
	graph_t * graph_var = (graph_t *)malloc(sizeof(graph_t));
 8005212:	2028      	movs	r0, #40	; 0x28
 8005214:	f002 fd12 	bl	8007c3c <malloc>
 8005218:	4603      	mov	r3, r0
 800521a:	61bb      	str	r3, [r7, #24]
	graph_var -> xData = (float *) malloc(sizeof(float) * count);
 800521c:	89fb      	ldrh	r3, [r7, #14]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f002 fd0b 	bl	8007c3c <malloc>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	601a      	str	r2, [r3, #0]
	graph_var -> yData = (float *) malloc(sizeof(float) * count);
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fd02 	bl	8007c3c <malloc>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	605a      	str	r2, [r3, #4]
	for(uint16_t i = 0; i < count; i++){
 8005240:	2300      	movs	r3, #0
 8005242:	83fb      	strh	r3, [r7, #30]
 8005244:	e018      	b.n	8005278 <_Graph_Init+0x84>
		graph_var -> xData[i] = xData[i];
 8005246:	8bfb      	ldrh	r3, [r7, #30]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	441a      	add	r2, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	6819      	ldr	r1, [r3, #0]
 8005252:	8bfb      	ldrh	r3, [r7, #30]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	601a      	str	r2, [r3, #0]
		graph_var -> yData[i] = yData[i];
 800525c:	8bfb      	ldrh	r3, [r7, #30]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	441a      	add	r2, r3
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	8bfb      	ldrh	r3, [r7, #30]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < count; i++){
 8005272:	8bfb      	ldrh	r3, [r7, #30]
 8005274:	3301      	adds	r3, #1
 8005276:	83fb      	strh	r3, [r7, #30]
 8005278:	8bfa      	ldrh	r2, [r7, #30]
 800527a:	89fb      	ldrh	r3, [r7, #14]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3e2      	bcc.n	8005246 <_Graph_Init+0x52>
	}
	graph_var -> count = count;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	89fa      	ldrh	r2, [r7, #14]
 8005284:	811a      	strh	r2, [r3, #8]
	graph_var -> xAxisPos = xAxisPos;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	7b7a      	ldrb	r2, [r7, #13]
 800528a:	729a      	strb	r2, [r3, #10]
	graph_var -> yAxisPos = yAxisPos;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005292:	72da      	strb	r2, [r3, #11]
	graph_var -> xDensity = xDen;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	60da      	str	r2, [r3, #12]
	graph_var -> yDensity = yDen;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]
	graph_var -> Print = _Graph_Print;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <_Graph_Init+0xd4>)
 80052a4:	615a      	str	r2, [r3, #20]
	graph_var -> Add = _Graph_Add;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <_Graph_Init+0xd8>)
 80052aa:	619a      	str	r2, [r3, #24]
	graph_var -> Pop = _Graph_Pop;
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <_Graph_Init+0xdc>)
 80052b0:	61da      	str	r2, [r3, #28]
	graph_var -> ChangeDensity = _Graph_ChangeDensity;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <_Graph_Init+0xe0>)
 80052b6:	621a      	str	r2, [r3, #32]
	graph_var -> ChangeAxis = _Graph_ChangeAxis;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <_Graph_Init+0xe4>)
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

	return graph_var;
 80052be:	69bb      	ldr	r3, [r7, #24]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	08004ea9 	.word	0x08004ea9
 80052cc:	08005095 	.word	0x08005095
 80052d0:	0800510d 	.word	0x0800510d
 80052d4:	080051a5 	.word	0x080051a5
 80052d8:	080051cd 	.word	0x080051cd

080052dc <Graph_Delete>:
	graph_var -> Pop = _Graph_Pop;
	return graph_var;
}


void Graph_Delete(graph_t * graph_var){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	free(graph_var -> xData);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 fcaf 	bl	8007c4c <free>
	free(graph_var -> yData);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 fcaa 	bl	8007c4c <free>
	free(graph_var);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f002 fca7 	bl	8007c4c <free>
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <Graph_UI>:
	return _Graph_Init(xData, yData, number + 1, xAxisPos, yAxisPos, xDen, yDen);
}

//Graph_UI로 데이터를 조작하면 데이터 값이 바뀝니다. 만약 바뀌질 않는다면 xData, yData 배열을 복제하시기 바랍니다.
//일반적으로 이 UI는 온도 설정을 위한 목적으로 만들어졌습니다. 따라서 이걸로 설정하면 설정값이 바뀌니 유의하시기 바랍니다.
void Graph_UI(graph_t * gr){
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
	uint16_t idx = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	82fb      	strh	r3, [r7, #22]
	OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005314:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2335      	movs	r3, #53	; 0x35
 800531c:	225f      	movs	r2, #95	; 0x5f
 800531e:	2135      	movs	r1, #53	; 0x35
 8005320:	2000      	movs	r0, #0
 8005322:	f001 f80b 	bl	800633c <OLED_Line>
	gr -> Print(gr, 0x0000FF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	21ff      	movs	r1, #255	; 0xff
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4798      	blx	r3
	_Graph_PrintPoint(gr, idx, 0xFF8800);
 8005330:	8afb      	ldrh	r3, [r7, #22]
 8005332:	4aac      	ldr	r2, [pc, #688]	; (80055e4 <Graph_UI+0x2dc>)
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fe3f 	bl	8004fba <_Graph_PrintPoint>
	OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	8afb      	ldrh	r3, [r7, #22]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	edd3 7a00 	vldr	s15, [r3]
 800535c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005360:	ee17 2a90 	vmov	r2, s15
 8005364:	ee17 1a10 	vmov	r1, s14
 8005368:	489f      	ldr	r0, [pc, #636]	; (80055e8 <Graph_UI+0x2e0>)
 800536a:	f000 fc31 	bl	8005bd0 <OLED_Printf>
	uint32_t pTime = HAL_GetTick();
 800536e:	f7fc fcb9 	bl	8001ce4 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]
	for(;;){
		uint16_t sw = Switch_Read();
 8005374:	f001 f9ce 	bl	8006714 <Switch_Read>
 8005378:	4603      	mov	r3, r0
 800537a:	81fb      	strh	r3, [r7, #14]
		if((sw == SW_RIGHT || sw == SW_RIGHT_LONG) && idx < gr->count - 1){
 800537c:	89fb      	ldrh	r3, [r7, #14]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d002      	beq.n	8005388 <Graph_UI+0x80>
 8005382:	89fb      	ldrh	r3, [r7, #14]
 8005384:	2b21      	cmp	r3, #33	; 0x21
 8005386:	d13b      	bne.n	8005400 <Graph_UI+0xf8>
 8005388:	8afa      	ldrh	r2, [r7, #22]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	891b      	ldrh	r3, [r3, #8]
 800538e:	3b01      	subs	r3, #1
 8005390:	429a      	cmp	r2, r3
 8005392:	da35      	bge.n	8005400 <Graph_UI+0xf8>
			idx ++;
 8005394:	8afb      	ldrh	r3, [r7, #22]
 8005396:	3301      	adds	r3, #1
 8005398:	82fb      	strh	r3, [r7, #22]
			OLED_Clear();
 800539a:	f000 f9bb 	bl	8005714 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 800539e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	2335      	movs	r3, #53	; 0x35
 80053a6:	225f      	movs	r2, #95	; 0x5f
 80053a8:	2135      	movs	r1, #53	; 0x35
 80053aa:	2000      	movs	r0, #0
 80053ac:	f000 ffc6 	bl	800633c <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	21ff      	movs	r1, #255	; 0xff
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 80053ba:	8afb      	ldrh	r3, [r7, #22]
 80053bc:	4a89      	ldr	r2, [pc, #548]	; (80055e4 <Graph_UI+0x2dc>)
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fdfa 	bl	8004fba <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	8afb      	ldrh	r3, [r7, #22]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	edd3 7a00 	vldr	s15, [r3]
 80053d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	8afb      	ldrh	r3, [r7, #22]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	edd3 7a00 	vldr	s15, [r3]
 80053e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ea:	ee17 2a90 	vmov	r2, s15
 80053ee:	ee17 1a10 	vmov	r1, s14
 80053f2:	487d      	ldr	r0, [pc, #500]	; (80055e8 <Graph_UI+0x2e0>)
 80053f4:	f000 fbec 	bl	8005bd0 <OLED_Printf>
			pTime = HAL_GetTick();
 80053f8:	f7fc fc74 	bl	8001ce4 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]
 80053fe:	e0fa      	b.n	80055f6 <Graph_UI+0x2ee>
		}
		else if((sw == SW_LEFT || sw == SW_LEFT_LONG) && idx > 0){
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	2b10      	cmp	r3, #16
 8005404:	d002      	beq.n	800540c <Graph_UI+0x104>
 8005406:	89fb      	ldrh	r3, [r7, #14]
 8005408:	2b30      	cmp	r3, #48	; 0x30
 800540a:	d138      	bne.n	800547e <Graph_UI+0x176>
 800540c:	8afb      	ldrh	r3, [r7, #22]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d035      	beq.n	800547e <Graph_UI+0x176>
			idx --;
 8005412:	8afb      	ldrh	r3, [r7, #22]
 8005414:	3b01      	subs	r3, #1
 8005416:	82fb      	strh	r3, [r7, #22]
			OLED_Clear();
 8005418:	f000 f97c 	bl	8005714 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 800541c:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2335      	movs	r3, #53	; 0x35
 8005424:	225f      	movs	r2, #95	; 0x5f
 8005426:	2135      	movs	r1, #53	; 0x35
 8005428:	2000      	movs	r0, #0
 800542a:	f000 ff87 	bl	800633c <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	21ff      	movs	r1, #255	; 0xff
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 8005438:	8afb      	ldrh	r3, [r7, #22]
 800543a:	4a6a      	ldr	r2, [pc, #424]	; (80055e4 <Graph_UI+0x2dc>)
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fdbb 	bl	8004fba <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	8afb      	ldrh	r3, [r7, #22]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	edd3 7a00 	vldr	s15, [r3]
 8005452:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	8afb      	ldrh	r3, [r7, #22]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	edd3 7a00 	vldr	s15, [r3]
 8005464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005468:	ee17 2a90 	vmov	r2, s15
 800546c:	ee17 1a10 	vmov	r1, s14
 8005470:	485d      	ldr	r0, [pc, #372]	; (80055e8 <Graph_UI+0x2e0>)
 8005472:	f000 fbad 	bl	8005bd0 <OLED_Printf>
			pTime = HAL_GetTick();
 8005476:	f7fc fc35 	bl	8001ce4 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]
 800547c:	e0bb      	b.n	80055f6 <Graph_UI+0x2ee>
		}
		else if((sw == SW_TOP || sw == SW_TOP_LONG) && gr->yData[idx] < 305.0f){
 800547e:	89fb      	ldrh	r3, [r7, #14]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d002      	beq.n	800548a <Graph_UI+0x182>
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	2b22      	cmp	r3, #34	; 0x22
 8005488:	d152      	bne.n	8005530 <Graph_UI+0x228>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	8afb      	ldrh	r3, [r7, #22]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	edd3 7a00 	vldr	s15, [r3]
 8005498:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80055ec <Graph_UI+0x2e4>
 800549c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a4:	d544      	bpl.n	8005530 <Graph_UI+0x228>
			gr->yData[idx] += 5.0f;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	8afb      	ldrh	r3, [r7, #22]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	8afb      	ldrh	r3, [r7, #22]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80054c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c6:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 80054ca:	f000 f923 	bl	8005714 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 80054ce:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2335      	movs	r3, #53	; 0x35
 80054d6:	225f      	movs	r2, #95	; 0x5f
 80054d8:	2135      	movs	r1, #53	; 0x35
 80054da:	2000      	movs	r0, #0
 80054dc:	f000 ff2e 	bl	800633c <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	21ff      	movs	r1, #255	; 0xff
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 80054ea:	8afb      	ldrh	r3, [r7, #22]
 80054ec:	4a3d      	ldr	r2, [pc, #244]	; (80055e4 <Graph_UI+0x2dc>)
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fd62 	bl	8004fba <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	edd3 7a00 	vldr	s15, [r3]
 8005504:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	8afb      	ldrh	r3, [r7, #22]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	edd3 7a00 	vldr	s15, [r3]
 8005516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800551a:	ee17 2a90 	vmov	r2, s15
 800551e:	ee17 1a10 	vmov	r1, s14
 8005522:	4831      	ldr	r0, [pc, #196]	; (80055e8 <Graph_UI+0x2e0>)
 8005524:	f000 fb54 	bl	8005bd0 <OLED_Printf>
			pTime = HAL_GetTick();
 8005528:	f7fc fbdc 	bl	8001ce4 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]
 800552e:	e062      	b.n	80055f6 <Graph_UI+0x2ee>
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && gr->yData[idx] > 5.0f){
 8005530:	89fb      	ldrh	r3, [r7, #14]
 8005532:	2b08      	cmp	r3, #8
 8005534:	d002      	beq.n	800553c <Graph_UI+0x234>
 8005536:	89fb      	ldrh	r3, [r7, #14]
 8005538:	2b28      	cmp	r3, #40	; 0x28
 800553a:	d159      	bne.n	80055f0 <Graph_UI+0x2e8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	8afb      	ldrh	r3, [r7, #22]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	edd3 7a00 	vldr	s15, [r3]
 800554a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800554e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005556:	dd4b      	ble.n	80055f0 <Graph_UI+0x2e8>
			gr->yData[idx] -= 5.0f;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	8afb      	ldrh	r3, [r7, #22]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	edd3 7a00 	vldr	s15, [r3]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	8afb      	ldrh	r3, [r7, #22]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005578:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 800557c:	f000 f8ca 	bl	8005714 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005580:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	2335      	movs	r3, #53	; 0x35
 8005588:	225f      	movs	r2, #95	; 0x5f
 800558a:	2135      	movs	r1, #53	; 0x35
 800558c:	2000      	movs	r0, #0
 800558e:	f000 fed5 	bl	800633c <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	21ff      	movs	r1, #255	; 0xff
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 800559c:	8afb      	ldrh	r3, [r7, #22]
 800559e:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <Graph_UI+0x2dc>)
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fd09 	bl	8004fba <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	8afb      	ldrh	r3, [r7, #22]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	edd3 7a00 	vldr	s15, [r3]
 80055c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055cc:	ee17 2a90 	vmov	r2, s15
 80055d0:	ee17 1a10 	vmov	r1, s14
 80055d4:	4804      	ldr	r0, [pc, #16]	; (80055e8 <Graph_UI+0x2e0>)
 80055d6:	f000 fafb 	bl	8005bd0 <OLED_Printf>
			pTime = HAL_GetTick();
 80055da:	f7fc fb83 	bl	8001ce4 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]
 80055e0:	e009      	b.n	80055f6 <Graph_UI+0x2ee>
 80055e2:	bf00      	nop
 80055e4:	00ff8800 	.word	0x00ff8800
 80055e8:	0800ab60 	.word	0x0800ab60
 80055ec:	43988000 	.word	0x43988000
		}
		else if(sw == SW_ENTER){
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d016      	beq.n	8005624 <Graph_UI+0x31c>
			break;
		}
		if(HAL_GetTick() - pTime > 10){
 80055f6:	f7fc fb75 	bl	8001ce4 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b0a      	cmp	r3, #10
 8005602:	f67f aeb7 	bls.w	8005374 <Graph_UI+0x6c>
			pTime += 10;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	330a      	adds	r3, #10
 800560a:	613b      	str	r3, [r7, #16]
			Switch_LED_Temperature(gr->yData[idx]);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	8afb      	ldrh	r3, [r7, #22]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	edd3 7a00 	vldr	s15, [r3]
 800561a:	eeb0 0a67 	vmov.f32	s0, s15
 800561e:	f000 ffbb 	bl	8006598 <Switch_LED_Temperature>
	for(;;){
 8005622:	e6a7      	b.n	8005374 <Graph_UI+0x6c>
			break;
 8005624:	bf00      	nop
		}

	}


}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop

08005630 <OLED_CS_Set>:
		0x7C, 0x7C, 0x7C, 0x7C, 0x7C, //Full Square(/Q)
		0x7C, 0x44, 0x44, 0x44, 0x7C, //Empty Square(/q)
		0x38, 0x7C, 0x7C, 0x7C, 0x38, //Full Circle(/*)
};

static void inline OLED_CS_Set(uint8_t state){
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, state);
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	461a      	mov	r2, r3
 800563e:	2104      	movs	r1, #4
 8005640:	4803      	ldr	r0, [pc, #12]	; (8005650 <OLED_CS_Set+0x20>)
 8005642:	f7fc fe2d 	bl	80022a0 <HAL_GPIO_WritePin>
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40020400 	.word	0x40020400

08005654 <OLED_DC_Set>:

static void inline OLED_DC_Set(uint8_t state){
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, state);
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	461a      	mov	r2, r3
 8005662:	2110      	movs	r1, #16
 8005664:	4803      	ldr	r0, [pc, #12]	; (8005674 <OLED_DC_Set+0x20>)
 8005666:	f7fc fe1b 	bl	80022a0 <HAL_GPIO_WritePin>
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40020000 	.word	0x40020000

08005678 <OLED_RS_Set>:

static void inline OLED_RS_Set(uint8_t state){
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_RS_GPIO_Port, OLED_RS_Pin, state);
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	461a      	mov	r2, r3
 8005686:	2102      	movs	r1, #2
 8005688:	4803      	ldr	r0, [pc, #12]	; (8005698 <OLED_RS_Set+0x20>)
 800568a:	f7fc fe09 	bl	80022a0 <HAL_GPIO_WritePin>
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40020000 	.word	0x40020000

0800569c <OLED_Send>:

static void inline OLED_Send(uint8_t data){
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80056a6:	b672      	cpsid	i
}
 80056a8:	bf00      	nop
	__disable_irq();//인터럽트를 중단하여 데이터 전송을 원활하게 한다.
	OLED_CS_Set(0);//OLED에 데이터를 전송하기 위해 CS를 Low신호로 만들어야 한다.
 80056aa:	2000      	movs	r0, #0
 80056ac:	f7ff ffc0 	bl	8005630 <OLED_CS_Set>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80056b0:	1df9      	adds	r1, r7, #7
 80056b2:	2301      	movs	r3, #1
 80056b4:	2201      	movs	r2, #1
 80056b6:	4806      	ldr	r0, [pc, #24]	; (80056d0 <OLED_Send+0x34>)
 80056b8:	f7fd faed 	bl	8002c96 <HAL_SPI_Transmit>
	OLED_CS_Set(1);//데이터 전송이 끝나면 CS를 High로 만들어 신호가 들어와도 무시하도록 해야 한다.
 80056bc:	2001      	movs	r0, #1
 80056be:	f7ff ffb7 	bl	8005630 <OLED_CS_Set>
  __ASM volatile ("cpsie i" : : : "memory");
 80056c2:	b662      	cpsie	i
}
 80056c4:	bf00      	nop
	__enable_irq();
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200004f4 	.word	0x200004f4

080056d4 <OLED_WriteCommand>:

static void inline OLED_WriteCommand(uint8_t data){
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(0);
 80056de:	2000      	movs	r0, #0
 80056e0:	f7ff ffb8 	bl	8005654 <OLED_DC_Set>
	OLED_Send(data);
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff ffd8 	bl	800569c <OLED_Send>
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <OLED_WriteData>:

static void inline OLED_WriteData(uint8_t data){
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(1);
 80056fe:	2001      	movs	r0, #1
 8005700:	f7ff ffa8 	bl	8005654 <OLED_DC_Set>
	OLED_Send(data);
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ffc8 	bl	800569c <OLED_Send>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <OLED_Clear>:

void OLED_Clear(){
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	OLED_row = 1;
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <OLED_Clear+0x50>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <OLED_Clear+0x54>)
 8005722:	2201      	movs	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
	OLED_charColor = 0xFFFFFF;
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <OLED_Clear+0x58>)
 8005728:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800572c:	601a      	str	r2, [r3, #0]
	OLED_charPoint = 2;
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <OLED_Clear+0x5c>)
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
	OLED_AddrWindow(0, 0, 96, 64);
 8005734:	2340      	movs	r3, #64	; 0x40
 8005736:	2260      	movs	r2, #96	; 0x60
 8005738:	2100      	movs	r1, #0
 800573a:	2000      	movs	r0, #0
 800573c:	f000 f8a1 	bl	8005882 <OLED_AddrWindow>
	for(int i=0; i<12288; i++){
 8005740:	2300      	movs	r3, #0
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	e005      	b.n	8005752 <OLED_Clear+0x3e>
		OLED_WriteData(0);
 8005746:	2000      	movs	r0, #0
 8005748:	f7ff ffd4 	bl	80056f4 <OLED_WriteData>
	for(int i=0; i<12288; i++){
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3301      	adds	r3, #1
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005758:	dbf5      	blt.n	8005746 <OLED_Clear+0x32>
	}
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000009 	.word	0x20000009
 8005768:	2000000a 	.word	0x2000000a
 800576c:	2000000c 	.word	0x2000000c
 8005770:	20000010 	.word	0x20000010

08005774 <OLED_Begin>:

void OLED_Begin(){
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
	//15ms 이상 대기
	HAL_Delay(100);
 8005778:	2064      	movs	r0, #100	; 0x64
 800577a:	f7fc fabf 	bl	8001cfc <HAL_Delay>

	//초기 작업(리셋)
	OLED_CS_Set(1);
 800577e:	2001      	movs	r0, #1
 8005780:	f7ff ff56 	bl	8005630 <OLED_CS_Set>
	OLED_RS_Set(0);
 8005784:	2000      	movs	r0, #0
 8005786:	f7ff ff77 	bl	8005678 <OLED_RS_Set>
	HAL_Delay(3);
 800578a:	2003      	movs	r0, #3
 800578c:	f7fc fab6 	bl	8001cfc <HAL_Delay>
	OLED_RS_Set(1);
 8005790:	2001      	movs	r0, #1
 8005792:	f7ff ff71 	bl	8005678 <OLED_RS_Set>

	//기본 설정 명령어
	OLED_WriteCommand(0xAE);
 8005796:	20ae      	movs	r0, #174	; 0xae
 8005798:	f7ff ff9c 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA0);
 800579c:	20a0      	movs	r0, #160	; 0xa0
 800579e:	f7ff ff99 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x72);
 80057a2:	2072      	movs	r0, #114	; 0x72
 80057a4:	f7ff ff96 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA1);
 80057a8:	20a1      	movs	r0, #161	; 0xa1
 80057aa:	f7ff ff93 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7ff ff90 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA2);
 80057b4:	20a2      	movs	r0, #162	; 0xa2
 80057b6:	f7ff ff8d 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7ff ff8a 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4);
 80057c0:	20a4      	movs	r0, #164	; 0xa4
 80057c2:	f7ff ff87 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA8);
 80057c6:	20a8      	movs	r0, #168	; 0xa8
 80057c8:	f7ff ff84 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80057cc:	203f      	movs	r0, #63	; 0x3f
 80057ce:	f7ff ff81 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xAD);
 80057d2:	20ad      	movs	r0, #173	; 0xad
 80057d4:	f7ff ff7e 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x8E);
 80057d8:	208e      	movs	r0, #142	; 0x8e
 80057da:	f7ff ff7b 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xB0);
 80057de:	20b0      	movs	r0, #176	; 0xb0
 80057e0:	f7ff ff78 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x0B);
 80057e4:	200b      	movs	r0, #11
 80057e6:	f7ff ff75 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xB1);
 80057ea:	20b1      	movs	r0, #177	; 0xb1
 80057ec:	f7ff ff72 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x31);
 80057f0:	2031      	movs	r0, #49	; 0x31
 80057f2:	f7ff ff6f 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xB3);
 80057f6:	20b3      	movs	r0, #179	; 0xb3
 80057f8:	f7ff ff6c 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xF0);
 80057fc:	20f0      	movs	r0, #240	; 0xf0
 80057fe:	f7ff ff69 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x8A);
 8005802:	208a      	movs	r0, #138	; 0x8a
 8005804:	f7ff ff66 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 8005808:	2064      	movs	r0, #100	; 0x64
 800580a:	f7ff ff63 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x8B);
 800580e:	208b      	movs	r0, #139	; 0x8b
 8005810:	f7ff ff60 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x78);
 8005814:	2078      	movs	r0, #120	; 0x78
 8005816:	f7ff ff5d 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x8C);
 800581a:	208c      	movs	r0, #140	; 0x8c
 800581c:	f7ff ff5a 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 8005820:	2064      	movs	r0, #100	; 0x64
 8005822:	f7ff ff57 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xBB);
 8005826:	20bb      	movs	r0, #187	; 0xbb
 8005828:	f7ff ff54 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x3A);
 800582c:	203a      	movs	r0, #58	; 0x3a
 800582e:	f7ff ff51 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0xBE);
 8005832:	20be      	movs	r0, #190	; 0xbe
 8005834:	f7ff ff4e 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x3E);
 8005838:	203e      	movs	r0, #62	; 0x3e
 800583a:	f7ff ff4b 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x87);
 800583e:	2087      	movs	r0, #135	; 0x87
 8005840:	f7ff ff48 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x06);
 8005844:	2006      	movs	r0, #6
 8005846:	f7ff ff45 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x81);
 800584a:	2081      	movs	r0, #129	; 0x81
 800584c:	f7ff ff42 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x91);
 8005850:	2091      	movs	r0, #145	; 0x91
 8005852:	f7ff ff3f 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x82);
 8005856:	2082      	movs	r0, #130	; 0x82
 8005858:	f7ff ff3c 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x50);
 800585c:	2050      	movs	r0, #80	; 0x50
 800585e:	f7ff ff39 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x83);
 8005862:	2083      	movs	r0, #131	; 0x83
 8005864:	f7ff ff36 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x7D);
 8005868:	207d      	movs	r0, #125	; 0x7d
 800586a:	f7ff ff33 	bl	80056d4 <OLED_WriteCommand>

	OLED_Clear();
 800586e:	f7ff ff51 	bl	8005714 <OLED_Clear>
	OLED_WriteCommand(0xAF);
 8005872:	20af      	movs	r0, #175	; 0xaf
 8005874:	f7ff ff2e 	bl	80056d4 <OLED_WriteCommand>
	HAL_Delay(100);
 8005878:	2064      	movs	r0, #100	; 0x64
 800587a:	f7fc fa3f 	bl	8001cfc <HAL_Delay>

}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}

08005882 <OLED_AddrWindow>:

void OLED_AddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 8005882:	b590      	push	{r4, r7, lr}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	461a      	mov	r2, r3
 8005890:	4623      	mov	r3, r4
 8005892:	71fb      	strb	r3, [r7, #7]
 8005894:	4603      	mov	r3, r0
 8005896:	71bb      	strb	r3, [r7, #6]
 8005898:	460b      	mov	r3, r1
 800589a:	717b      	strb	r3, [r7, #5]
 800589c:	4613      	mov	r3, r2
 800589e:	713b      	strb	r3, [r7, #4]
	uint8_t x1 = x;
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	73fb      	strb	r3, [r7, #15]
	uint8_t y1 = y;
 80058a4:	79bb      	ldrb	r3, [r7, #6]
 80058a6:	73bb      	strb	r3, [r7, #14]
	if(x1 > 95){
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b5f      	cmp	r3, #95	; 0x5f
 80058ac:	d901      	bls.n	80058b2 <OLED_AddrWindow+0x30>
		x1 = 95;
 80058ae:	235f      	movs	r3, #95	; 0x5f
 80058b0:	73fb      	strb	r3, [r7, #15]
	}
	if(y1 > 63){
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	2b3f      	cmp	r3, #63	; 0x3f
 80058b6:	d901      	bls.n	80058bc <OLED_AddrWindow+0x3a>
		y1 = 63;
 80058b8:	233f      	movs	r3, #63	; 0x3f
 80058ba:	73bb      	strb	r3, [r7, #14]
	}

	uint8_t x2 = x + w - 1;
 80058bc:	79fa      	ldrb	r2, [r7, #7]
 80058be:	797b      	ldrb	r3, [r7, #5]
 80058c0:	4413      	add	r3, r2
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	737b      	strb	r3, [r7, #13]
	uint8_t y2 = y + h - 1;
 80058c8:	79ba      	ldrb	r2, [r7, #6]
 80058ca:	793b      	ldrb	r3, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	733b      	strb	r3, [r7, #12]
	if(x2>95)
 80058d4:	7b7b      	ldrb	r3, [r7, #13]
 80058d6:	2b5f      	cmp	r3, #95	; 0x5f
 80058d8:	d901      	bls.n	80058de <OLED_AddrWindow+0x5c>
		x2 = 95;
 80058da:	235f      	movs	r3, #95	; 0x5f
 80058dc:	737b      	strb	r3, [r7, #13]
	if(y2>63)
 80058de:	7b3b      	ldrb	r3, [r7, #12]
 80058e0:	2b3f      	cmp	r3, #63	; 0x3f
 80058e2:	d901      	bls.n	80058e8 <OLED_AddrWindow+0x66>
		y2 = 63;
 80058e4:	233f      	movs	r3, #63	; 0x3f
 80058e6:	733b      	strb	r3, [r7, #12]

	if(x1>x2){
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	7b7b      	ldrb	r3, [r7, #13]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d905      	bls.n	80058fc <OLED_AddrWindow+0x7a>
		uint8_t temp = x2;
 80058f0:	7b7b      	ldrb	r3, [r7, #13]
 80058f2:	72fb      	strb	r3, [r7, #11]
		x2=x1;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	737b      	strb	r3, [r7, #13]
		x1=temp;
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	73fb      	strb	r3, [r7, #15]
	}
	if(y1>y2){
 80058fc:	7bba      	ldrb	r2, [r7, #14]
 80058fe:	7b3b      	ldrb	r3, [r7, #12]
 8005900:	429a      	cmp	r2, r3
 8005902:	d905      	bls.n	8005910 <OLED_AddrWindow+0x8e>
		uint8_t temp = y2;
 8005904:	7b3b      	ldrb	r3, [r7, #12]
 8005906:	72bb      	strb	r3, [r7, #10]
		y2=y1;
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	733b      	strb	r3, [r7, #12]
		y1=temp;
 800590c:	7abb      	ldrb	r3, [r7, #10]
 800590e:	73bb      	strb	r3, [r7, #14]
	}

	OLED_WriteCommand(0x15);
 8005910:	2015      	movs	r0, #21
 8005912:	f7ff fedf 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(x1);
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fedb 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(x2);
 800591e:	7b7b      	ldrb	r3, [r7, #13]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fed7 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(0x75);
 8005926:	2075      	movs	r0, #117	; 0x75
 8005928:	f7ff fed4 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(y1);
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fed0 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(y2);
 8005934:	7b3b      	ldrb	r3, [r7, #12]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fecc 	bl	80056d4 <OLED_WriteCommand>
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bd90      	pop	{r4, r7, pc}

08005944 <OLED_Rectangle>:



void OLED_Rectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int32_t color){
 8005944:	b590      	push	{r4, r7, lr}
 8005946:	b089      	sub	sp, #36	; 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	4604      	mov	r4, r0
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4623      	mov	r3, r4
 8005954:	71fb      	strb	r3, [r7, #7]
 8005956:	4603      	mov	r3, r0
 8005958:	71bb      	strb	r3, [r7, #6]
 800595a:	460b      	mov	r3, r1
 800595c:	717b      	strb	r3, [r7, #5]
 800595e:	4613      	mov	r3, r2
 8005960:	713b      	strb	r3, [r7, #4]
	OLED_AddrWindow(x, y, w, h);
 8005962:	793b      	ldrb	r3, [r7, #4]
 8005964:	797a      	ldrb	r2, [r7, #5]
 8005966:	79b9      	ldrb	r1, [r7, #6]
 8005968:	79f8      	ldrb	r0, [r7, #7]
 800596a:	f7ff ff8a 	bl	8005882 <OLED_AddrWindow>
	uint32_t red = (color >> 19) & 0x1F;
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	14db      	asrs	r3, r3, #19
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	61bb      	str	r3, [r7, #24]
	uint32_t gre = (color >> 10) & 0x3F;
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	129b      	asrs	r3, r3, #10
 800597c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005980:	617b      	str	r3, [r7, #20]
	uint32_t blu = (color >> 3) & 0x1F;
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	10db      	asrs	r3, r3, #3
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	613b      	str	r3, [r7, #16]
	uint32_t data = (red << 11) | (gre << 5) | blu;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	02da      	lsls	r2, r3, #11
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	015b      	lsls	r3, r3, #5
 8005994:	4313      	orrs	r3, r2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
	uint16_t size = (uint32_t)w * (uint32_t)h;
 800599c:	797b      	ldrb	r3, [r7, #5]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	793b      	ldrb	r3, [r7, #4]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	fb12 f303 	smulbb	r3, r2, r3
 80059a8:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<size; i++){
 80059aa:	2300      	movs	r3, #0
 80059ac:	83fb      	strh	r3, [r7, #30]
 80059ae:	e00d      	b.n	80059cc <OLED_Rectangle+0x88>
		OLED_WriteData(data >> 8);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fe9c 	bl	80056f4 <OLED_WriteData>
		OLED_WriteData(data & 0xFF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fe97 	bl	80056f4 <OLED_WriteData>
	for(uint16_t i=0; i<size; i++){
 80059c6:	8bfb      	ldrh	r3, [r7, #30]
 80059c8:	3301      	adds	r3, #1
 80059ca:	83fb      	strh	r3, [r7, #30]
 80059cc:	8bfa      	ldrh	r2, [r7, #30]
 80059ce:	897b      	ldrh	r3, [r7, #10]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d3ed      	bcc.n	80059b0 <OLED_Rectangle+0x6c>
	}
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd90      	pop	{r4, r7, pc}

080059de <OLED_Dot>:


void OLED_Dot(uint8_t x,uint8_t y,uint8_t size, uint32_t color){
 80059de:	b590      	push	{r4, r7, lr}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af02      	add	r7, sp, #8
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
 80059ea:	460b      	mov	r3, r1
 80059ec:	71bb      	strb	r3, [r7, #6]
 80059ee:	4613      	mov	r3, r2
 80059f0:	717b      	strb	r3, [r7, #5]
	OLED_Rectangle(x, y, size, size, color);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	797c      	ldrb	r4, [r7, #5]
 80059f6:	797a      	ldrb	r2, [r7, #5]
 80059f8:	79b9      	ldrb	r1, [r7, #6]
 80059fa:	79f8      	ldrb	r0, [r7, #7]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	4623      	mov	r3, r4
 8005a00:	f7ff ffa0 	bl	8005944 <OLED_Rectangle>
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd90      	pop	{r4, r7, pc}

08005a0c <OLED_WriteChar>:


void OLED_WriteChar(int16_t ch){
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	80fb      	strh	r3, [r7, #6]
	if(ch <= -1 && ch >= -3){
 8005a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da09      	bge.n	8005a32 <OLED_WriteChar+0x26>
 8005a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a22:	f113 0f03 	cmn.w	r3, #3
 8005a26:	db04      	blt.n	8005a32 <OLED_WriteChar+0x26>
		ch = 131 + ch;
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	3383      	adds	r3, #131	; 0x83
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	80fb      	strh	r3, [r7, #6]
 8005a30:	e009      	b.n	8005a46 <OLED_WriteChar+0x3a>
	}
	else if(ch < 32 || ch >= 128){
 8005a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a36:	2b1f      	cmp	r3, #31
 8005a38:	dd03      	ble.n	8005a42 <OLED_WriteChar+0x36>
 8005a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a40:	dd01      	ble.n	8005a46 <OLED_WriteChar+0x3a>
		ch = 63;
 8005a42:	233f      	movs	r3, #63	; 0x3f
 8005a44:	80fb      	strh	r3, [r7, #6]
	}

	ch -= 32;
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	3b20      	subs	r3, #32
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<5; i++){
 8005a4e:	2300      	movs	r3, #0
 8005a50:	73fb      	strb	r3, [r7, #15]
 8005a52:	e03d      	b.n	8005ad0 <OLED_WriteChar+0xc4>
		uint8_t byte = characters[ch * 5 + i];
 8005a54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4413      	add	r3, r2
 8005a62:	4a25      	ldr	r2, [pc, #148]	; (8005af8 <OLED_WriteChar+0xec>)
 8005a64:	5cd3      	ldrb	r3, [r2, r3]
 8005a66:	737b      	strb	r3, [r7, #13]
		for(uint8_t j=0; j<8; j++){
 8005a68:	2300      	movs	r3, #0
 8005a6a:	73bb      	strb	r3, [r7, #14]
 8005a6c:	e02a      	b.n	8005ac4 <OLED_WriteChar+0xb8>
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 8005a6e:	4b23      	ldr	r3, [pc, #140]	; (8005afc <OLED_WriteChar+0xf0>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	fb12 f303 	smulbb	r3, r2, r3
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <OLED_WriteChar+0xf4>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	b2d8      	uxtb	r0, r3
 8005a82:	4b1e      	ldr	r3, [pc, #120]	; (8005afc <OLED_WriteChar+0xf0>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	7bba      	ldrb	r2, [r7, #14]
 8005a88:	fb12 f303 	smulbb	r3, r2, r3
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <OLED_WriteChar+0xf8>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4413      	add	r3, r2
 8005a94:	b2d9      	uxtb	r1, r3
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <OLED_WriteChar+0xf0>)
 8005a98:	781c      	ldrb	r4, [r3, #0]
					((byte>>(7-j))&0x01) ? OLED_charColor : OLED_bgColor);
 8005a9a:	7b7a      	ldrb	r2, [r7, #13]
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	f1c3 0307 	rsb	r3, r3, #7
 8005aa2:	fa42 f303 	asr.w	r3, r2, r3
 8005aa6:	f003 0301 	and.w	r3, r3, #1
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <OLED_WriteChar+0xa8>
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <OLED_WriteChar+0xfc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	e001      	b.n	8005ab8 <OLED_WriteChar+0xac>
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <OLED_WriteChar+0x100>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4622      	mov	r2, r4
 8005aba:	f7ff ff90 	bl	80059de <OLED_Dot>
		for(uint8_t j=0; j<8; j++){
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	73bb      	strb	r3, [r7, #14]
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	2b07      	cmp	r3, #7
 8005ac8:	d9d1      	bls.n	8005a6e <OLED_WriteChar+0x62>
	for(uint8_t i=0; i<5; i++){
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	3301      	adds	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d9be      	bls.n	8005a54 <OLED_WriteChar+0x48>
		}
	}
	OLED_col += 6 * OLED_charPoint;
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <OLED_WriteChar+0xf0>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	0052      	lsls	r2, r2, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <OLED_WriteChar+0xf4>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <OLED_WriteChar+0xf4>)
 8005aee:	701a      	strb	r2, [r3, #0]

}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd90      	pop	{r4, r7, pc}
 8005af8:	20000014 	.word	0x20000014
 8005afc:	20000010 	.word	0x20000010
 8005b00:	2000000a 	.word	0x2000000a
 8005b04:	20000009 	.word	0x20000009
 8005b08:	2000000c 	.word	0x2000000c
 8005b0c:	2000071c 	.word	0x2000071c

08005b10 <str2hex>:


static int str2hex(char * str){
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	int result = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	e049      	b.n	8005bb6 <str2hex+0xa6>
		if(str[i] >= '0' && str[i] <= '9'){
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b2c:	d911      	bls.n	8005b52 <str2hex+0x42>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4413      	add	r3, r2
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b39      	cmp	r3, #57	; 0x39
 8005b38:	d80b      	bhi.n	8005b52 <str2hex+0x42>
			result <<= 4;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	60fb      	str	r3, [r7, #12]
			result |= str[i] - '0';
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	3b30      	subs	r3, #48	; 0x30
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e02e      	b.n	8005bb0 <str2hex+0xa0>
		}
		else if(str[i] >= 'A' && str[i] <= 'F'){
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d911      	bls.n	8005b82 <str2hex+0x72>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b46      	cmp	r3, #70	; 0x46
 8005b68:	d80b      	bhi.n	8005b82 <str2hex+0x72>
			result <<= 4;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'A' + 10;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	3b37      	subs	r3, #55	; 0x37
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e016      	b.n	8005bb0 <str2hex+0xa0>
		}
		else if(str[i] >= 'a' && str[i] <= 'f'){
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b60      	cmp	r3, #96	; 0x60
 8005b8c:	d910      	bls.n	8005bb0 <str2hex+0xa0>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	4413      	add	r3, r2
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b66      	cmp	r3, #102	; 0x66
 8005b98:	d80a      	bhi.n	8005bb0 <str2hex+0xa0>
			result <<= 4;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'a' + 10;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	3b57      	subs	r3, #87	; 0x57
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	4413      	add	r3, r2
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1af      	bne.n	8005b22 <str2hex+0x12>
		}
	}
	return result;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <OLED_Printf>:

#define OLED
void OLED_Printf(const char * format, ...){
 8005bd0:	b40f      	push	{r0, r1, r2, r3}
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b0c4      	sub	sp, #272	; 0x110
 8005bd6:	af00      	add	r7, sp, #0
	/*
	 * buffer를 많이 할당받거나 static으로 선언하면 좋겠지만, 보통 프로세스당 4GB의 메모리를 가지는 일반 컴퓨터와 다르게
	 * STM32F411의 경우 전체 메모리 공간이 오직 128kB의 저장용량만 가지므로 메모리 공간을 아껴 써야 한다.
	 */
	char buffer[256] = { 0 };
 8005bd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	22fc      	movs	r2, #252	; 0xfc
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 f836 	bl	8007c5c <memset>

	// 가변 인자를 받아서 buffer에 쓴다.
	va_list args;
	va_start(args, format);
 8005bf0:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8005bf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8005bfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c06:	f107 000c 	add.w	r0, r7, #12
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005c10:	f002 fe44 	bl	800889c <vsiprintf>
//#ifdef OLED
//	oled_row = 0;
//	oled_col = 0;
//#endif
	// 줄바꿈 기호인 /0, /1을 만나면 커서 위치를 설정해주는 부분.
	for (char *c = buffer; *c; c++) {
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c1c:	e378      	b.n	8006310 <OLED_Printf+0x740>
		if (*c == '/' && (*(c + 1) >= '0' && *(c + 1) <= '6')) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 8005c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b2f      	cmp	r3, #47	; 0x2f
 8005c26:	d13c      	bne.n	8005ca2 <OLED_Printf+0xd2>
 8005c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b2f      	cmp	r3, #47	; 0x2f
 8005c32:	d936      	bls.n	8005ca2 <OLED_Printf+0xd2>
 8005c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c38:	3301      	adds	r3, #1
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b36      	cmp	r3, #54	; 0x36
 8005c3e:	d830      	bhi.n	8005ca2 <OLED_Printf+0xd2>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 8005c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c44:	3301      	adds	r3, #1
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	3b30      	subs	r3, #48	; 0x30
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4ba5      	ldr	r3, [pc, #660]	; (8005ee4 <OLED_Printf+0x314>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	fb12 f303 	smulbb	r3, r2, r3
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	00d2      	lsls	r2, r2, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	4ba1      	ldr	r3, [pc, #644]	; (8005ee8 <OLED_Printf+0x318>)
 8005c64:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 8005c66:	4ba0      	ldr	r3, [pc, #640]	; (8005ee8 <OLED_Printf+0x318>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b3c      	cmp	r3, #60	; 0x3c
 8005c6c:	d807      	bhi.n	8005c7e <OLED_Printf+0xae>
 8005c6e:	4b9e      	ldr	r3, [pc, #632]	; (8005ee8 <OLED_Printf+0x318>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b35      	cmp	r3, #53	; 0x35
 8005c74:	d90c      	bls.n	8005c90 <OLED_Printf+0xc0>
 8005c76:	4b9b      	ldr	r3, [pc, #620]	; (8005ee4 <OLED_Printf+0x314>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d108      	bne.n	8005c90 <OLED_Printf+0xc0>
				OLED_row = 18 * OLED_charPoint;
 8005c7e:	4b99      	ldr	r3, [pc, #612]	; (8005ee4 <OLED_Printf+0x314>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	00d2      	lsls	r2, r2, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	4b96      	ldr	r3, [pc, #600]	; (8005ee8 <OLED_Printf+0x318>)
 8005c8e:	701a      	strb	r2, [r3, #0]
			}
			OLED_col = 1;
 8005c90:	4b96      	ldr	r3, [pc, #600]	; (8005eec <OLED_Printf+0x31c>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005ca0:	e331      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '$' && (*(c + 1) >= '0' && *(c + 1) <= '6') && ((*(c + 2) >= '0' && *(c + 2) <= '9')||(*(c + 2) >= 'A' && *(c + 2) <= 'F'))) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b24      	cmp	r3, #36	; 0x24
 8005caa:	d172      	bne.n	8005d92 <OLED_Printf+0x1c2>
 8005cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8005cb6:	d96c      	bls.n	8005d92 <OLED_Printf+0x1c2>
 8005cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b36      	cmp	r3, #54	; 0x36
 8005cc2:	d866      	bhi.n	8005d92 <OLED_Printf+0x1c2>
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc8:	3302      	adds	r3, #2
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b2f      	cmp	r3, #47	; 0x2f
 8005cce:	d905      	bls.n	8005cdc <OLED_Printf+0x10c>
 8005cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b39      	cmp	r3, #57	; 0x39
 8005cda:	d90b      	bls.n	8005cf4 <OLED_Printf+0x124>
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d954      	bls.n	8005d92 <OLED_Printf+0x1c2>
 8005ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cec:	3302      	adds	r3, #2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b46      	cmp	r3, #70	; 0x46
 8005cf2:	d84e      	bhi.n	8005d92 <OLED_Printf+0x1c2>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 8005cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	3b30      	subs	r3, #48	; 0x30
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	4b78      	ldr	r3, [pc, #480]	; (8005ee4 <OLED_Printf+0x314>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	fb12 f303 	smulbb	r3, r2, r3
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	00d2      	lsls	r2, r2, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	3301      	adds	r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	4b74      	ldr	r3, [pc, #464]	; (8005ee8 <OLED_Printf+0x318>)
 8005d18:	701a      	strb	r2, [r3, #0]
			OLED_col = 1 + 6 * OLED_charPoint * (*(c + 2) >= 'A' ? (*(c + 2) - 'A' + 10) :(*(c + 2) - '0'));
 8005d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1e:	3302      	adds	r3, #2
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d906      	bls.n	8005d34 <OLED_Printf+0x164>
 8005d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	3b37      	subs	r3, #55	; 0x37
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	e005      	b.n	8005d40 <OLED_Printf+0x170>
 8005d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d38:	3302      	adds	r3, #2
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	3b30      	subs	r3, #48	; 0x30
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	4a68      	ldr	r2, [pc, #416]	; (8005ee4 <OLED_Printf+0x314>)
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	fb13 f302 	smulbb	r3, r3, r2
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	0052      	lsls	r2, r2, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b64      	ldr	r3, [pc, #400]	; (8005eec <OLED_Printf+0x31c>)
 8005d5a:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 8005d5c:	4b62      	ldr	r3, [pc, #392]	; (8005ee8 <OLED_Printf+0x318>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b3c      	cmp	r3, #60	; 0x3c
 8005d62:	d807      	bhi.n	8005d74 <OLED_Printf+0x1a4>
 8005d64:	4b60      	ldr	r3, [pc, #384]	; (8005ee8 <OLED_Printf+0x318>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b35      	cmp	r3, #53	; 0x35
 8005d6a:	d90c      	bls.n	8005d86 <OLED_Printf+0x1b6>
 8005d6c:	4b5d      	ldr	r3, [pc, #372]	; (8005ee4 <OLED_Printf+0x314>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d108      	bne.n	8005d86 <OLED_Printf+0x1b6>
				OLED_row = 18 * OLED_charPoint;
 8005d74:	4b5b      	ldr	r3, [pc, #364]	; (8005ee4 <OLED_Printf+0x314>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	00d2      	lsls	r2, r2, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <OLED_Printf+0x318>)
 8005d84:	701a      	strb	r2, [r3, #0]
			}
			c += 2;
 8005d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005d90:	e2b9      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b2f      	cmp	r3, #47	; 0x2f
 8005d9a:	d128      	bne.n	8005dee <OLED_Printf+0x21e>
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da0:	3301      	adds	r3, #1
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b23      	cmp	r3, #35	; 0x23
 8005da6:	d122      	bne.n	8005dee <OLED_Printf+0x21e>
			char str[7] = {0,0,0,0,0,0,0};
 8005da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005db0:	4a4f      	ldr	r2, [pc, #316]	; (8005ef0 <OLED_Printf+0x320>)
 8005db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005db6:	6018      	str	r0, [r3, #0]
 8005db8:	3304      	adds	r3, #4
 8005dba:	8019      	strh	r1, [r3, #0]
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	0c0a      	lsrs	r2, r1, #16
 8005dc0:	701a      	strb	r2, [r3, #0]
			strncpy(str, c+2, 6);
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc6:	1c99      	adds	r1, r3, #2
 8005dc8:	463b      	mov	r3, r7
 8005dca:	2206      	movs	r2, #6
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 fd3b 	bl	8008848 <strncpy>
			OLED_charColor = str2hex(str);
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fe9b 	bl	8005b10 <str2hex>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b45      	ldr	r3, [pc, #276]	; (8005ef4 <OLED_Printf+0x324>)
 8005de0:	601a      	str	r2, [r3, #0]
			c += 7;
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de6:	3307      	adds	r3, #7
 8005de8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dec:	e28b      	b.n	8006306 <OLED_Printf+0x736>
			continue;
		}
		else if (*c == '/' && *(c + 1) == 'S'){
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b2f      	cmp	r3, #47	; 0x2f
 8005df6:	d10e      	bne.n	8005e16 <OLED_Printf+0x246>
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b53      	cmp	r3, #83	; 0x53
 8005e02:	d108      	bne.n	8005e16 <OLED_Printf+0x246>
			//Size Big
			OLED_charPoint = 2;
 8005e04:	4b37      	ldr	r3, [pc, #220]	; (8005ee4 <OLED_Printf+0x314>)
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e14:	e277      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 's'){
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e1e:	d10e      	bne.n	8005e3e <OLED_Printf+0x26e>
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e24:	3301      	adds	r3, #1
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b73      	cmp	r3, #115	; 0x73
 8005e2a:	d108      	bne.n	8005e3e <OLED_Printf+0x26e>
			//Size Big
			OLED_charPoint = 1;
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <OLED_Printf+0x314>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e36:	3301      	adds	r3, #1
 8005e38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e3c:	e263      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'r'){//RGBCMY는 오직 2색 이상 OLED만 지원(예외로 노랑색 라인이 있는 파랑 OLED는 조금 다르게 취급)
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b2f      	cmp	r3, #47	; 0x2f
 8005e46:	d10f      	bne.n	8005e68 <OLED_Printf+0x298>
 8005e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b72      	cmp	r3, #114	; 0x72
 8005e52:	d109      	bne.n	8005e68 <OLED_Printf+0x298>
			OLED_charColor = 0xFF0000;
 8005e54:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <OLED_Printf+0x324>)
 8005e56:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005e5a:	601a      	str	r2, [r3, #0]
			c += 1;
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e60:	3301      	adds	r3, #1
 8005e62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e66:	e24e      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'g'){
 8005e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b2f      	cmp	r3, #47	; 0x2f
 8005e70:	d10f      	bne.n	8005e92 <OLED_Printf+0x2c2>
 8005e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e76:	3301      	adds	r3, #1
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b67      	cmp	r3, #103	; 0x67
 8005e7c:	d109      	bne.n	8005e92 <OLED_Printf+0x2c2>
			OLED_charColor = 0x00FF00;
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <OLED_Printf+0x324>)
 8005e80:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005e84:	601a      	str	r2, [r3, #0]
			c += 1;
 8005e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e90:	e239      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'b'){
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b2f      	cmp	r3, #47	; 0x2f
 8005e9a:	d10e      	bne.n	8005eba <OLED_Printf+0x2ea>
 8005e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b62      	cmp	r3, #98	; 0x62
 8005ea6:	d108      	bne.n	8005eba <OLED_Printf+0x2ea>
			OLED_charColor = 0x0000FF;
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <OLED_Printf+0x324>)
 8005eaa:	22ff      	movs	r2, #255	; 0xff
 8005eac:	601a      	str	r2, [r3, #0]
			c += 1;
 8005eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005eb8:	e225      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'y'){
 8005eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8005ec2:	d11b      	bne.n	8005efc <OLED_Printf+0x32c>
 8005ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec8:	3301      	adds	r3, #1
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b79      	cmp	r3, #121	; 0x79
 8005ece:	d115      	bne.n	8005efc <OLED_Printf+0x32c>
			OLED_charColor = 0xFFFF00;
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <OLED_Printf+0x324>)
 8005ed2:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <OLED_Printf+0x328>)
 8005ed4:	601a      	str	r2, [r3, #0]
			c += 1;
 8005ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eda:	3301      	adds	r3, #1
 8005edc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005ee0:	e211      	b.n	8006306 <OLED_Printf+0x736>
 8005ee2:	bf00      	nop
 8005ee4:	20000010 	.word	0x20000010
 8005ee8:	20000009 	.word	0x20000009
 8005eec:	2000000a 	.word	0x2000000a
 8005ef0:	0800ab74 	.word	0x0800ab74
 8005ef4:	2000000c 	.word	0x2000000c
 8005ef8:	00ffff00 	.word	0x00ffff00
		}
		else if (*c == '/' && *(c + 1) == 'c'){
 8005efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b2f      	cmp	r3, #47	; 0x2f
 8005f04:	d10f      	bne.n	8005f26 <OLED_Printf+0x356>
 8005f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b63      	cmp	r3, #99	; 0x63
 8005f10:	d109      	bne.n	8005f26 <OLED_Printf+0x356>
			OLED_charColor = 0x00FFFF;
 8005f12:	4b9c      	ldr	r3, [pc, #624]	; (8006184 <OLED_Printf+0x5b4>)
 8005f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f18:	601a      	str	r2, [r3, #0]
			c += 1;
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1e:	3301      	adds	r3, #1
 8005f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005f24:	e1ef      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'm'){
 8005f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b2f      	cmp	r3, #47	; 0x2f
 8005f2e:	d10f      	bne.n	8005f50 <OLED_Printf+0x380>
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f34:	3301      	adds	r3, #1
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b6d      	cmp	r3, #109	; 0x6d
 8005f3a:	d109      	bne.n	8005f50 <OLED_Printf+0x380>
			OLED_charColor = 0xFF00FF;
 8005f3c:	4b91      	ldr	r3, [pc, #580]	; (8006184 <OLED_Printf+0x5b4>)
 8005f3e:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8005f42:	601a      	str	r2, [r3, #0]
			c += 1;
 8005f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f48:	3301      	adds	r3, #1
 8005f4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005f4e:	e1da      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'w'){//White는 단색 OLED에서는 켜짐을 의미
 8005f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b2f      	cmp	r3, #47	; 0x2f
 8005f58:	d10f      	bne.n	8005f7a <OLED_Printf+0x3aa>
 8005f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5e:	3301      	adds	r3, #1
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b77      	cmp	r3, #119	; 0x77
 8005f64:	d109      	bne.n	8005f7a <OLED_Printf+0x3aa>
			OLED_charColor = 0xFFFFFF;
 8005f66:	4b87      	ldr	r3, [pc, #540]	; (8006184 <OLED_Printf+0x5b4>)
 8005f68:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005f6c:	601a      	str	r2, [r3, #0]
			c += 1;
 8005f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f72:	3301      	adds	r3, #1
 8005f74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005f78:	e1c5      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'k'){//key color는 단색 OLED에서도 지원
 8005f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b2f      	cmp	r3, #47	; 0x2f
 8005f82:	d10f      	bne.n	8005fa4 <OLED_Printf+0x3d4>
 8005f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f88:	3301      	adds	r3, #1
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b6b      	cmp	r3, #107	; 0x6b
 8005f8e:	d109      	bne.n	8005fa4 <OLED_Printf+0x3d4>
			OLED_charColor = 0xFFFFFF;
 8005f90:	4b7c      	ldr	r3, [pc, #496]	; (8006184 <OLED_Printf+0x5b4>)
 8005f92:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005f96:	601a      	str	r2, [r3, #0]
			c += 1;
 8005f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005fa2:	e1b0      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'R'){
 8005fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b2f      	cmp	r3, #47	; 0x2f
 8005fac:	d10e      	bne.n	8005fcc <OLED_Printf+0x3fc>
 8005fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b52      	cmp	r3, #82	; 0x52
 8005fb8:	d108      	bne.n	8005fcc <OLED_Printf+0x3fc>
			OLED_charColor = 0xFF7777;
 8005fba:	4b72      	ldr	r3, [pc, #456]	; (8006184 <OLED_Printf+0x5b4>)
 8005fbc:	4a72      	ldr	r2, [pc, #456]	; (8006188 <OLED_Printf+0x5b8>)
 8005fbe:	601a      	str	r2, [r3, #0]
			c += 1;
 8005fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005fca:	e19c      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'G'){
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b2f      	cmp	r3, #47	; 0x2f
 8005fd4:	d10e      	bne.n	8005ff4 <OLED_Printf+0x424>
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	3301      	adds	r3, #1
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b47      	cmp	r3, #71	; 0x47
 8005fe0:	d108      	bne.n	8005ff4 <OLED_Printf+0x424>
			OLED_charColor = 0x77FF77;
 8005fe2:	4b68      	ldr	r3, [pc, #416]	; (8006184 <OLED_Printf+0x5b4>)
 8005fe4:	4a69      	ldr	r2, [pc, #420]	; (800618c <OLED_Printf+0x5bc>)
 8005fe6:	601a      	str	r2, [r3, #0]
			c += 1;
 8005fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005ff2:	e188      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'B'){
 8005ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b2f      	cmp	r3, #47	; 0x2f
 8005ffc:	d10e      	bne.n	800601c <OLED_Printf+0x44c>
 8005ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006002:	3301      	adds	r3, #1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b42      	cmp	r3, #66	; 0x42
 8006008:	d108      	bne.n	800601c <OLED_Printf+0x44c>
			OLED_charColor = 0x7777FF;
 800600a:	4b5e      	ldr	r3, [pc, #376]	; (8006184 <OLED_Printf+0x5b4>)
 800600c:	4a60      	ldr	r2, [pc, #384]	; (8006190 <OLED_Printf+0x5c0>)
 800600e:	601a      	str	r2, [r3, #0]
			c += 1;
 8006010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006014:	3301      	adds	r3, #1
 8006016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800601a:	e174      	b.n	8006306 <OLED_Printf+0x736>
		}

		//Additional Color : 비표준 색상입니다.
		else if (*c == '/' && *(c + 1) == 'o'){
 800601c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b2f      	cmp	r3, #47	; 0x2f
 8006024:	d10e      	bne.n	8006044 <OLED_Printf+0x474>
 8006026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800602a:	3301      	adds	r3, #1
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b6f      	cmp	r3, #111	; 0x6f
 8006030:	d108      	bne.n	8006044 <OLED_Printf+0x474>
			OLED_charColor = 0xFF7700;
 8006032:	4b54      	ldr	r3, [pc, #336]	; (8006184 <OLED_Printf+0x5b4>)
 8006034:	4a57      	ldr	r2, [pc, #348]	; (8006194 <OLED_Printf+0x5c4>)
 8006036:	601a      	str	r2, [r3, #0]
			c += 1;
 8006038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603c:	3301      	adds	r3, #1
 800603e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006042:	e160      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'l'){
 8006044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b2f      	cmp	r3, #47	; 0x2f
 800604c:	d10e      	bne.n	800606c <OLED_Printf+0x49c>
 800604e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006052:	3301      	adds	r3, #1
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b6c      	cmp	r3, #108	; 0x6c
 8006058:	d108      	bne.n	800606c <OLED_Printf+0x49c>
			OLED_charColor = 0x77FF00;
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <OLED_Printf+0x5b4>)
 800605c:	4a4e      	ldr	r2, [pc, #312]	; (8006198 <OLED_Printf+0x5c8>)
 800605e:	601a      	str	r2, [r3, #0]
			c += 1;
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800606a:	e14c      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 't'){
 800606c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b2f      	cmp	r3, #47	; 0x2f
 8006074:	d10f      	bne.n	8006096 <OLED_Printf+0x4c6>
 8006076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607a:	3301      	adds	r3, #1
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b74      	cmp	r3, #116	; 0x74
 8006080:	d109      	bne.n	8006096 <OLED_Printf+0x4c6>
			OLED_charColor = 0x00FF77;
 8006082:	4b40      	ldr	r3, [pc, #256]	; (8006184 <OLED_Printf+0x5b4>)
 8006084:	f64f 7277 	movw	r2, #65399	; 0xff77
 8006088:	601a      	str	r2, [r3, #0]
			c += 1;
 800608a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608e:	3301      	adds	r3, #1
 8006090:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006094:	e137      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'e'){
 8006096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b2f      	cmp	r3, #47	; 0x2f
 800609e:	d10f      	bne.n	80060c0 <OLED_Printf+0x4f0>
 80060a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a4:	3301      	adds	r3, #1
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b65      	cmp	r3, #101	; 0x65
 80060aa:	d109      	bne.n	80060c0 <OLED_Printf+0x4f0>
			OLED_charColor = 0x0077FF;
 80060ac:	4b35      	ldr	r3, [pc, #212]	; (8006184 <OLED_Printf+0x5b4>)
 80060ae:	f247 72ff 	movw	r2, #30719	; 0x77ff
 80060b2:	601a      	str	r2, [r3, #0]
			c += 1;
 80060b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b8:	3301      	adds	r3, #1
 80060ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80060be:	e122      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'p'){
 80060c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b2f      	cmp	r3, #47	; 0x2f
 80060c8:	d10e      	bne.n	80060e8 <OLED_Printf+0x518>
 80060ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ce:	3301      	adds	r3, #1
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b70      	cmp	r3, #112	; 0x70
 80060d4:	d108      	bne.n	80060e8 <OLED_Printf+0x518>
			OLED_charColor = 0x7700FF;
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <OLED_Printf+0x5b4>)
 80060d8:	4a30      	ldr	r2, [pc, #192]	; (800619c <OLED_Printf+0x5cc>)
 80060da:	601a      	str	r2, [r3, #0]
			c += 1;
 80060dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e0:	3301      	adds	r3, #1
 80060e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80060e6:	e10e      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'M'){
 80060e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b2f      	cmp	r3, #47	; 0x2f
 80060f0:	d10e      	bne.n	8006110 <OLED_Printf+0x540>
 80060f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f6:	3301      	adds	r3, #1
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b4d      	cmp	r3, #77	; 0x4d
 80060fc:	d108      	bne.n	8006110 <OLED_Printf+0x540>
			OLED_charColor = 0xFF0077;
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <OLED_Printf+0x5b4>)
 8006100:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <OLED_Printf+0x5d0>)
 8006102:	601a      	str	r2, [r3, #0]
			c += 1;
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006108:	3301      	adds	r3, #1
 800610a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800610e:	e0fa      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'A'){
 8006110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b2f      	cmp	r3, #47	; 0x2f
 8006118:	d10e      	bne.n	8006138 <OLED_Printf+0x568>
 800611a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800611e:	3301      	adds	r3, #1
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b41      	cmp	r3, #65	; 0x41
 8006124:	d108      	bne.n	8006138 <OLED_Printf+0x568>
			OLED_charColor = 0x888888;
 8006126:	4b17      	ldr	r3, [pc, #92]	; (8006184 <OLED_Printf+0x5b4>)
 8006128:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <OLED_Printf+0x5d4>)
 800612a:	601a      	str	r2, [r3, #0]
			c += 1;
 800612c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006130:	3301      	adds	r3, #1
 8006132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006136:	e0e6      	b.n	8006306 <OLED_Printf+0x736>
		}
		else if (*c == '/' && *(c + 1) == 'a'){
 8006138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b2f      	cmp	r3, #47	; 0x2f
 8006140:	d10e      	bne.n	8006160 <OLED_Printf+0x590>
 8006142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006146:	3301      	adds	r3, #1
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b61      	cmp	r3, #97	; 0x61
 800614c:	d108      	bne.n	8006160 <OLED_Printf+0x590>
			OLED_charColor = 0x444444;
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <OLED_Printf+0x5b4>)
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <OLED_Printf+0x5d8>)
 8006152:	601a      	str	r2, [r3, #0]
			c += 1;
 8006154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006158:	3301      	adds	r3, #1
 800615a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800615e:	e0d2      	b.n	8006306 <OLED_Printf+0x736>
		}

		else if (*c == '/' && *(c + 1) == '/'){
 8006160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b2f      	cmp	r3, #47	; 0x2f
 8006168:	d120      	bne.n	80061ac <OLED_Printf+0x5dc>
 800616a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616e:	3301      	adds	r3, #1
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b2f      	cmp	r3, #47	; 0x2f
 8006174:	d11a      	bne.n	80061ac <OLED_Printf+0x5dc>
			c += 1;
 8006176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800617a:	3301      	adds	r3, #1
 800617c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006180:	e028      	b.n	80061d4 <OLED_Printf+0x604>
 8006182:	bf00      	nop
 8006184:	2000000c 	.word	0x2000000c
 8006188:	00ff7777 	.word	0x00ff7777
 800618c:	0077ff77 	.word	0x0077ff77
 8006190:	007777ff 	.word	0x007777ff
 8006194:	00ff7700 	.word	0x00ff7700
 8006198:	0077ff00 	.word	0x0077ff00
 800619c:	007700ff 	.word	0x007700ff
 80061a0:	00ff0077 	.word	0x00ff0077
 80061a4:	00888888 	.word	0x00888888
 80061a8:	00444444 	.word	0x00444444
		}
		else if (*c == '/' && *(c + 1) == '#'){
 80061ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b2f      	cmp	r3, #47	; 0x2f
 80061b4:	d10e      	bne.n	80061d4 <OLED_Printf+0x604>
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ba:	3301      	adds	r3, #1
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b23      	cmp	r3, #35	; 0x23
 80061c0:	d108      	bne.n	80061d4 <OLED_Printf+0x604>
			*c = '#';
 80061c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c6:	2223      	movs	r2, #35	; 0x23
 80061c8:	701a      	strb	r2, [r3, #0]
			c += 1;
 80061ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ce:	3301      	adds	r3, #1
 80061d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		// \n, \r 등은 깨져서 출력되므로 무시한다.
		if (*c == '\r') continue;
 80061d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b0d      	cmp	r3, #13
 80061dc:	f000 8092 	beq.w	8006304 <OLED_Printf+0x734>
		if (*c == '\n') {
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b0a      	cmp	r3, #10
 80061e8:	d10f      	bne.n	800620a <OLED_Printf+0x63a>
			OLED_row += 9 * OLED_charPoint;
 80061ea:	4b51      	ldr	r3, [pc, #324]	; (8006330 <OLED_Printf+0x760>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	00d2      	lsls	r2, r2, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4b4f      	ldr	r3, [pc, #316]	; (8006334 <OLED_Printf+0x764>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	4413      	add	r3, r2
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4b4d      	ldr	r3, [pc, #308]	; (8006334 <OLED_Printf+0x764>)
 8006200:	701a      	strb	r2, [r3, #0]
			OLED_col = 1;
 8006202:	4b4d      	ldr	r3, [pc, #308]	; (8006338 <OLED_Printf+0x768>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
			continue;
 8006208:	e07d      	b.n	8006306 <OLED_Printf+0x736>
		}
		if (*c == '\t') {
 800620a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b09      	cmp	r3, #9
 8006212:	d130      	bne.n	8006276 <OLED_Printf+0x6a6>
			if(OLED_col < 25 && OLED_charPoint == 1){
 8006214:	4b48      	ldr	r3, [pc, #288]	; (8006338 <OLED_Printf+0x768>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b18      	cmp	r3, #24
 800621a:	d807      	bhi.n	800622c <OLED_Printf+0x65c>
 800621c:	4b44      	ldr	r3, [pc, #272]	; (8006330 <OLED_Printf+0x760>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d103      	bne.n	800622c <OLED_Printf+0x65c>
				OLED_col = 25;
 8006224:	4b44      	ldr	r3, [pc, #272]	; (8006338 <OLED_Printf+0x768>)
 8006226:	2219      	movs	r2, #25
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e023      	b.n	8006274 <OLED_Printf+0x6a4>
			}
			else if(OLED_col < 49){
 800622c:	4b42      	ldr	r3, [pc, #264]	; (8006338 <OLED_Printf+0x768>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b30      	cmp	r3, #48	; 0x30
 8006232:	d803      	bhi.n	800623c <OLED_Printf+0x66c>
				OLED_col = 49;
 8006234:	4b40      	ldr	r3, [pc, #256]	; (8006338 <OLED_Printf+0x768>)
 8006236:	2231      	movs	r2, #49	; 0x31
 8006238:	701a      	strb	r2, [r3, #0]
			}
			else{
				OLED_col = 1;
				OLED_row += 9 * OLED_charPoint;
			}
			continue;
 800623a:	e064      	b.n	8006306 <OLED_Printf+0x736>
			else if(OLED_col < 73 && OLED_charPoint == 1){
 800623c:	4b3e      	ldr	r3, [pc, #248]	; (8006338 <OLED_Printf+0x768>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b48      	cmp	r3, #72	; 0x48
 8006242:	d807      	bhi.n	8006254 <OLED_Printf+0x684>
 8006244:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <OLED_Printf+0x760>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d103      	bne.n	8006254 <OLED_Printf+0x684>
				OLED_col = 75;
 800624c:	4b3a      	ldr	r3, [pc, #232]	; (8006338 <OLED_Printf+0x768>)
 800624e:	224b      	movs	r2, #75	; 0x4b
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	e00f      	b.n	8006274 <OLED_Printf+0x6a4>
				OLED_col = 1;
 8006254:	4b38      	ldr	r3, [pc, #224]	; (8006338 <OLED_Printf+0x768>)
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
				OLED_row += 9 * OLED_charPoint;
 800625a:	4b35      	ldr	r3, [pc, #212]	; (8006330 <OLED_Printf+0x760>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	00d2      	lsls	r2, r2, #3
 8006262:	4413      	add	r3, r2
 8006264:	b2da      	uxtb	r2, r3
 8006266:	4b33      	ldr	r3, [pc, #204]	; (8006334 <OLED_Printf+0x764>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4413      	add	r3, r2
 800626c:	b2da      	uxtb	r2, r3
 800626e:	4b31      	ldr	r3, [pc, #196]	; (8006334 <OLED_Printf+0x764>)
 8006270:	701a      	strb	r2, [r3, #0]
			continue;
 8006272:	e048      	b.n	8006306 <OLED_Printf+0x736>
 8006274:	e047      	b.n	8006306 <OLED_Printf+0x736>
		}
		if (*c == '/' && *(c+1) == '*'){
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b2f      	cmp	r3, #47	; 0x2f
 800627e:	d10f      	bne.n	80062a0 <OLED_Printf+0x6d0>
 8006280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006284:	3301      	adds	r3, #1
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b2a      	cmp	r3, #42	; 0x2a
 800628a:	d109      	bne.n	80062a0 <OLED_Printf+0x6d0>
			c += 1;
 800628c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006290:	3301      	adds	r3, #1
 8006292:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-1);
 8006296:	f04f 30ff 	mov.w	r0, #4294967295
 800629a:	f7ff fbb7 	bl	8005a0c <OLED_WriteChar>
			continue;
 800629e:	e032      	b.n	8006306 <OLED_Printf+0x736>
		}
		if (*c == '/' && *(c+1) == 'q'){
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b2f      	cmp	r3, #47	; 0x2f
 80062a8:	d10f      	bne.n	80062ca <OLED_Printf+0x6fa>
 80062aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ae:	3301      	adds	r3, #1
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b71      	cmp	r3, #113	; 0x71
 80062b4:	d109      	bne.n	80062ca <OLED_Printf+0x6fa>
			c += 1;
 80062b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ba:	3301      	adds	r3, #1
 80062bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-2);
 80062c0:	f06f 0001 	mvn.w	r0, #1
 80062c4:	f7ff fba2 	bl	8005a0c <OLED_WriteChar>
			continue;
 80062c8:	e01d      	b.n	8006306 <OLED_Printf+0x736>
		}
		if (*c == '/' && *(c+1) == 'Q'){
 80062ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b2f      	cmp	r3, #47	; 0x2f
 80062d2:	d10f      	bne.n	80062f4 <OLED_Printf+0x724>
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d8:	3301      	adds	r3, #1
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b51      	cmp	r3, #81	; 0x51
 80062de:	d109      	bne.n	80062f4 <OLED_Printf+0x724>
			c += 1;
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	3301      	adds	r3, #1
 80062e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-3);
 80062ea:	f06f 0002 	mvn.w	r0, #2
 80062ee:	f7ff fb8d 	bl	8005a0c <OLED_WriteChar>
			continue;
 80062f2:	e008      	b.n	8006306 <OLED_Printf+0x736>
		}
		OLED_WriteChar(*c);
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b21b      	sxth	r3, r3
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fb85 	bl	8005a0c <OLED_WriteChar>
 8006302:	e000      	b.n	8006306 <OLED_Printf+0x736>
		if (*c == '\r') continue;
 8006304:	bf00      	nop
	for (char *c = buffer; *c; c++) {
 8006306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630a:	3301      	adds	r3, #1
 800630c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f47f ac81 	bne.w	8005c1e <OLED_Printf+0x4e>
	}
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006324:	46bd      	mov	sp, r7
 8006326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800632a:	b004      	add	sp, #16
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000010 	.word	0x20000010
 8006334:	20000009 	.word	0x20000009
 8006338:	2000000a 	.word	0x2000000a

0800633c <OLED_Line>:

void OLED_Line(uint8_t xi, uint8_t yi, uint8_t xe, uint8_t ye, int32_t color){
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	4611      	mov	r1, r2
 8006348:	461a      	mov	r2, r3
 800634a:	4623      	mov	r3, r4
 800634c:	71fb      	strb	r3, [r7, #7]
 800634e:	4603      	mov	r3, r0
 8006350:	71bb      	strb	r3, [r7, #6]
 8006352:	460b      	mov	r3, r1
 8006354:	717b      	strb	r3, [r7, #5]
 8006356:	4613      	mov	r3, r2
 8006358:	713b      	strb	r3, [r7, #4]
	uint8_t red = (color >> 16) & 0xF8;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	141b      	asrs	r3, r3, #16
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f023 0307 	bic.w	r3, r3, #7
 8006364:	73fb      	strb	r3, [r7, #15]
	uint8_t gre = (color >> 8) & 0xFC;
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	121b      	asrs	r3, r3, #8
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f023 0303 	bic.w	r3, r3, #3
 8006370:	73bb      	strb	r3, [r7, #14]
	uint8_t blu = color & 0xF8;
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	737b      	strb	r3, [r7, #13]

	//선을 그리기 위해서는 0x21 신호가 필요합니다.
	OLED_WriteCommand(0x21);
 800637c:	2021      	movs	r0, #33	; 0x21
 800637e:	f7ff f9a9 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(xi);
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff f9a5 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(yi);
 800638a:	79bb      	ldrb	r3, [r7, #6]
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff f9a1 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(xe);
 8006392:	797b      	ldrb	r3, [r7, #5]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff f99d 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(ye);
 800639a:	793b      	ldrb	r3, [r7, #4]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff f999 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(red>>2);
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff f993 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(gre>>2);
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff f98d 	bl	80056d4 <OLED_WriteCommand>
	OLED_WriteCommand(blu>>2);
 80063ba:	7b7b      	ldrb	r3, [r7, #13]
 80063bc:	089b      	lsrs	r3, r3, #2
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff f987 	bl	80056d4 <OLED_WriteCommand>
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd90      	pop	{r4, r7, pc}
	...

080063d0 <OLED_MenuUI>:

void OLED_MenuUI(char * title, uint32_t titleBgColor, uint32_t titleTextColor, Menu_t * menu, uint32_t count, uint32_t textColor){
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
	OLED_Rectangle(0, 0, 96, 9, titleBgColor);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2309      	movs	r3, #9
 80063e4:	2260      	movs	r2, #96	; 0x60
 80063e6:	2100      	movs	r1, #0
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7ff faab 	bl	8005944 <OLED_Rectangle>
	OLED_row = 1;
 80063ee:	4b19      	ldr	r3, [pc, #100]	; (8006454 <OLED_MenuUI+0x84>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <OLED_MenuUI+0x88>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
	OLED_charColor = titleTextColor;
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <OLED_MenuUI+0x8c>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6013      	str	r3, [r2, #0]
	OLED_bgColor = titleBgColor;
 8006400:	4a17      	ldr	r2, [pc, #92]	; (8006460 <OLED_MenuUI+0x90>)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6013      	str	r3, [r2, #0]
	OLED_Printf("/s%s\n", title);
 8006406:	68f9      	ldr	r1, [r7, #12]
 8006408:	4816      	ldr	r0, [pc, #88]	; (8006464 <OLED_MenuUI+0x94>)
 800640a:	f7ff fbe1 	bl	8005bd0 <OLED_Printf>
	OLED_charColor = textColor;
 800640e:	4a13      	ldr	r2, [pc, #76]	; (800645c <OLED_MenuUI+0x8c>)
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	6013      	str	r3, [r2, #0]
	OLED_bgColor = 0;
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <OLED_MenuUI+0x90>)
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < count; i++){
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
 800641e:	e00f      	b.n	8006440 <OLED_MenuUI+0x70>
		OLED_Printf("/s%s\n", menu[i].message);
 8006420:	7dfa      	ldrb	r2, [r7, #23]
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	461a      	mov	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	4413      	add	r3, r2
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4619      	mov	r1, r3
 8006434:	480b      	ldr	r0, [pc, #44]	; (8006464 <OLED_MenuUI+0x94>)
 8006436:	f7ff fbcb 	bl	8005bd0 <OLED_Printf>
	for(uint8_t i = 0; i < count; i++){
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	3301      	adds	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	429a      	cmp	r2, r3
 8006446:	d8eb      	bhi.n	8006420 <OLED_MenuUI+0x50>
	}
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000009 	.word	0x20000009
 8006458:	2000000a 	.word	0x2000000a
 800645c:	2000000c 	.word	0x2000000c
 8006460:	2000071c 	.word	0x2000071c
 8006464:	0800ab7c 	.word	0x0800ab7c

08006468 <OLED_Cursor>:

void OLED_Cursor(uint8_t n, uint32_t color){
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af02      	add	r7, sp, #8
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
	//Line Erase
	for(uint8_t i = 9; i < 64; i+=9){
 8006474:	2309      	movs	r3, #9
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e00a      	b.n	8006490 <OLED_Cursor+0x28>
		OLED_Line(0, i, 95, i, 0);
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	7bf9      	ldrb	r1, [r7, #15]
 800647e:	2200      	movs	r2, #0
 8006480:	9200      	str	r2, [sp, #0]
 8006482:	225f      	movs	r2, #95	; 0x5f
 8006484:	2000      	movs	r0, #0
 8006486:	f7ff ff59 	bl	800633c <OLED_Line>
	for(uint8_t i = 9; i < 64; i+=9){
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	3309      	adds	r3, #9
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b3f      	cmp	r3, #63	; 0x3f
 8006494:	d9f1      	bls.n	800647a <OLED_Cursor+0x12>
	}
	OLED_Line(0, 9, 0, 63, 0);
 8006496:	2300      	movs	r3, #0
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	233f      	movs	r3, #63	; 0x3f
 800649c:	2200      	movs	r2, #0
 800649e:	2109      	movs	r1, #9
 80064a0:	2000      	movs	r0, #0
 80064a2:	f7ff ff4b 	bl	800633c <OLED_Line>
	OLED_Line(95, 9, 95, 63, 0);
 80064a6:	2300      	movs	r3, #0
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	233f      	movs	r3, #63	; 0x3f
 80064ac:	225f      	movs	r2, #95	; 0x5f
 80064ae:	2109      	movs	r1, #9
 80064b0:	205f      	movs	r0, #95	; 0x5f
 80064b2:	f7ff ff43 	bl	800633c <OLED_Line>

	//Line Drawing
	OLED_Line(0, 9 + 9 * n, 95, 9 + 9 * n, color);
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	3301      	adds	r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	00d2      	lsls	r2, r2, #3
 80064c0:	4413      	add	r3, r2
 80064c2:	b2d9      	uxtb	r1, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	3301      	adds	r3, #1
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	00d2      	lsls	r2, r2, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	225f      	movs	r2, #95	; 0x5f
 80064da:	2000      	movs	r0, #0
 80064dc:	f7ff ff2e 	bl	800633c <OLED_Line>
	OLED_Line(0, 18 + 9 * n, 95, 18 + 9 * n, color);
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	461a      	mov	r2, r3
 80064e4:	00d2      	lsls	r2, r2, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	3312      	adds	r3, #18
 80064ec:	b2d9      	uxtb	r1, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	461a      	mov	r2, r3
 80064f2:	00d2      	lsls	r2, r2, #3
 80064f4:	4413      	add	r3, r2
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	3312      	adds	r3, #18
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	225f      	movs	r2, #95	; 0x5f
 8006504:	2000      	movs	r0, #0
 8006506:	f7ff ff19 	bl	800633c <OLED_Line>
	OLED_Line(0, 9 + 9 * n, 0, 18 + 9 * n, color);
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	3301      	adds	r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	00d2      	lsls	r2, r2, #3
 8006514:	4413      	add	r3, r2
 8006516:	b2d9      	uxtb	r1, r3
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	461a      	mov	r2, r3
 800651c:	00d2      	lsls	r2, r2, #3
 800651e:	4413      	add	r3, r2
 8006520:	b2db      	uxtb	r3, r3
 8006522:	3312      	adds	r3, #18
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	2200      	movs	r2, #0
 800652e:	2000      	movs	r0, #0
 8006530:	f7ff ff04 	bl	800633c <OLED_Line>
	OLED_Line(95, 9 + 9 * n, 95, 18 + 9 * n, color);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	3301      	adds	r3, #1
 8006538:	b2db      	uxtb	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	00d2      	lsls	r2, r2, #3
 800653e:	4413      	add	r3, r2
 8006540:	b2d9      	uxtb	r1, r3
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	461a      	mov	r2, r3
 8006546:	00d2      	lsls	r2, r2, #3
 8006548:	4413      	add	r3, r2
 800654a:	b2db      	uxtb	r3, r3
 800654c:	3312      	adds	r3, #18
 800654e:	b2da      	uxtb	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	225f      	movs	r2, #95	; 0x5f
 8006558:	205f      	movs	r0, #95	; 0x5f
 800655a:	f7ff feef 	bl	800633c <OLED_Line>
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <Switch_LED>:
#define LONG_FLAG 0x20

#define LINE_TRACER_SWITCH
extern TIM_HandleTypeDef htim4;

void Switch_LED(uint16_t red, uint16_t blue){
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	460a      	mov	r2, r1
 8006572:	80fb      	strh	r3, [r7, #6]
 8006574:	4613      	mov	r3, r2
 8006576:	80bb      	strh	r3, [r7, #4]
	htim4.Instance -> CCR1 = red;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <Switch_LED+0x2c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance -> CCR2 = blue;
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <Switch_LED+0x2c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	88ba      	ldrh	r2, [r7, #4]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	200005ec 	.word	0x200005ec

08006598 <Switch_LED_Temperature>:

void Switch_LED_Temperature(float temp){
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	ed87 0a01 	vstr	s0, [r7, #4]
	//250도일 때 빨강
	//50도일 때 흰색
	//0도일 때 파랑
	static float temp_v;
	if(temp_v < temp){
 80065a2:	4b56      	ldr	r3, [pc, #344]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065a4:	edd3 7a00 	vldr	s15, [r3]
 80065a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80065ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b4:	dd17      	ble.n	80065e6 <Switch_LED_Temperature+0x4e>
		temp_v += 1.0f;
 80065b6:	4b51      	ldr	r3, [pc, #324]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065b8:	edd3 7a00 	vldr	s15, [r3]
 80065bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065c4:	4b4d      	ldr	r3, [pc, #308]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065c6:	edc3 7a00 	vstr	s15, [r3]
		if(temp_v > temp){
 80065ca:	4b4c      	ldr	r3, [pc, #304]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065cc:	edd3 7a00 	vldr	s15, [r3]
 80065d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80065d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065dc:	d524      	bpl.n	8006628 <Switch_LED_Temperature+0x90>
			temp_v = temp;
 80065de:	4a47      	ldr	r2, [pc, #284]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e020      	b.n	8006628 <Switch_LED_Temperature+0x90>
		}
	}
	else if(temp_v > temp){
 80065e6:	4b45      	ldr	r3, [pc, #276]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065e8:	edd3 7a00 	vldr	s15, [r3]
 80065ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80065f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f8:	d516      	bpl.n	8006628 <Switch_LED_Temperature+0x90>
		temp_v -= 1.0f;
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <Switch_LED_Temperature+0x164>)
 80065fc:	edd3 7a00 	vldr	s15, [r3]
 8006600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006608:	4b3c      	ldr	r3, [pc, #240]	; (80066fc <Switch_LED_Temperature+0x164>)
 800660a:	edc3 7a00 	vstr	s15, [r3]
		if(temp_v < temp){
 800660e:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <Switch_LED_Temperature+0x164>)
 8006610:	edd3 7a00 	vldr	s15, [r3]
 8006614:	ed97 7a01 	vldr	s14, [r7, #4]
 8006618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006620:	dd02      	ble.n	8006628 <Switch_LED_Temperature+0x90>
			temp_v = temp;
 8006622:	4a36      	ldr	r2, [pc, #216]	; (80066fc <Switch_LED_Temperature+0x164>)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6013      	str	r3, [r2, #0]
		}
	}


	if(temp_v > 250.00f){
 8006628:	4b34      	ldr	r3, [pc, #208]	; (80066fc <Switch_LED_Temperature+0x164>)
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006700 <Switch_LED_Temperature+0x168>
 8006632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	dd05      	ble.n	8006648 <Switch_LED_Temperature+0xb0>
		Switch_LED(1023, 0);
 800663c:	2100      	movs	r1, #0
 800663e:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8006642:	f7ff ff91 	bl	8006568 <Switch_LED>
		Switch_LED(temp_v * temp_v * 1023.00f / 2500.0f, 1023);
	}
	else{
		Switch_LED(0, 1023);
	}
}
 8006646:	e054      	b.n	80066f2 <Switch_LED_Temperature+0x15a>
	else if(temp_v > 50.00f){
 8006648:	4b2c      	ldr	r3, [pc, #176]	; (80066fc <Switch_LED_Temperature+0x164>)
 800664a:	edd3 7a00 	vldr	s15, [r3]
 800664e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006704 <Switch_LED_Temperature+0x16c>
 8006652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665a:	dd22      	ble.n	80066a2 <Switch_LED_Temperature+0x10a>
		Switch_LED(1023, (250.00f - temp_v) * (250.00f - temp_v) * 1023.00f / 40000.0f);
 800665c:	4b27      	ldr	r3, [pc, #156]	; (80066fc <Switch_LED_Temperature+0x164>)
 800665e:	edd3 7a00 	vldr	s15, [r3]
 8006662:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006700 <Switch_LED_Temperature+0x168>
 8006666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <Switch_LED_Temperature+0x164>)
 800666c:	edd3 7a00 	vldr	s15, [r3]
 8006670:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006700 <Switch_LED_Temperature+0x168>
 8006674:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006708 <Switch_LED_Temperature+0x170>
 8006680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006684:	eddf 6a21 	vldr	s13, [pc, #132]	; 800670c <Switch_LED_Temperature+0x174>
 8006688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800668c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006690:	ee17 3a90 	vmov	r3, s15
 8006694:	b29b      	uxth	r3, r3
 8006696:	4619      	mov	r1, r3
 8006698:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800669c:	f7ff ff64 	bl	8006568 <Switch_LED>
}
 80066a0:	e027      	b.n	80066f2 <Switch_LED_Temperature+0x15a>
	else if(temp_v > 0){
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <Switch_LED_Temperature+0x164>)
 80066a4:	edd3 7a00 	vldr	s15, [r3]
 80066a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80066ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b0:	dd1a      	ble.n	80066e8 <Switch_LED_Temperature+0x150>
		Switch_LED(temp_v * temp_v * 1023.00f / 2500.0f, 1023);
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <Switch_LED_Temperature+0x164>)
 80066b4:	ed93 7a00 	vldr	s14, [r3]
 80066b8:	4b10      	ldr	r3, [pc, #64]	; (80066fc <Switch_LED_Temperature+0x164>)
 80066ba:	edd3 7a00 	vldr	s15, [r3]
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006708 <Switch_LED_Temperature+0x170>
 80066c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066ca:	eddf 6a11 	vldr	s13, [pc, #68]	; 8006710 <Switch_LED_Temperature+0x178>
 80066ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d6:	ee17 3a90 	vmov	r3, s15
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ff41 	bl	8006568 <Switch_LED>
}
 80066e6:	e004      	b.n	80066f2 <Switch_LED_Temperature+0x15a>
		Switch_LED(0, 1023);
 80066e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80066ec:	2000      	movs	r0, #0
 80066ee:	f7ff ff3b 	bl	8006568 <Switch_LED>
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000720 	.word	0x20000720
 8006700:	437a0000 	.word	0x437a0000
 8006704:	42480000 	.word	0x42480000
 8006708:	447fc000 	.word	0x447fc000
 800670c:	471c4000 	.word	0x471c4000
 8006710:	451c4000 	.word	0x451c4000

08006714 <Switch_Read>:




uint16_t Switch_Read(){
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
	static uint16_t Switch_sum = 0;
	static uint16_t Switch_input = 0;
	static uint32_t Switch_time = 0;
	static uint32_t Switch_lowTime = 0;
#ifdef LINE_TRACER_SWITCH
	uint8_t sw1 = !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 800671a:	2108      	movs	r1, #8
 800671c:	4893      	ldr	r0, [pc, #588]	; (800696c <Switch_Read+0x258>)
 800671e:	f7fb fda7 	bl	8002270 <HAL_GPIO_ReadPin>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2 = !HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8006730:	2110      	movs	r1, #16
 8006732:	488e      	ldr	r0, [pc, #568]	; (800696c <Switch_Read+0x258>)
 8006734:	f7fb fd9c 	bl	8002270 <HAL_GPIO_ReadPin>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3 = !HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 8006746:	2120      	movs	r1, #32
 8006748:	4888      	ldr	r0, [pc, #544]	; (800696c <Switch_Read+0x258>)
 800674a:	f7fb fd91 	bl	8002270 <HAL_GPIO_ReadPin>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	717b      	strb	r3, [r7, #5]
	uint8_t sw4 = !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin);
 800675c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006760:	4882      	ldr	r0, [pc, #520]	; (800696c <Switch_Read+0x258>)
 8006762:	f7fb fd85 	bl	8002270 <HAL_GPIO_ReadPin>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf0c      	ite	eq
 800676c:	2301      	moveq	r3, #1
 800676e:	2300      	movne	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	713b      	strb	r3, [r7, #4]
	uint8_t sw5 = !HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin);
 8006774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006778:	487c      	ldr	r0, [pc, #496]	; (800696c <Switch_Read+0x258>)
 800677a:	f7fb fd79 	bl	8002270 <HAL_GPIO_ReadPin>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	70fb      	strb	r3, [r7, #3]
	Switch_input = sw1 | (sw2 << 1) | (sw3 << 2) | (sw4 << 3) | (sw5 << 4);
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	b21a      	sxth	r2, r3
 8006790:	79bb      	ldrb	r3, [r7, #6]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	b21b      	sxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b21a      	sxth	r2, r3
 800679a:	797b      	ldrb	r3, [r7, #5]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	b21b      	sxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b21a      	sxth	r2, r3
 80067a4:	793b      	ldrb	r3, [r7, #4]
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	4313      	orrs	r3, r2
 80067ac:	b21a      	sxth	r2, r3
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	4313      	orrs	r3, r2
 80067b6:	b21b      	sxth	r3, r3
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	4b6d      	ldr	r3, [pc, #436]	; (8006970 <Switch_Read+0x25c>)
 80067bc:	801a      	strh	r2, [r3, #0]
#endif
	switch(Switch_state){
 80067be:	4b6d      	ldr	r3, [pc, #436]	; (8006974 <Switch_Read+0x260>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	f200 80cd 	bhi.w	8006962 <Switch_Read+0x24e>
 80067c8:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <Switch_Read+0xbc>)
 80067ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ce:	bf00      	nop
 80067d0:	080067e9 	.word	0x080067e9
 80067d4:	08006815 	.word	0x08006815
 80067d8:	08006859 	.word	0x08006859
 80067dc:	080068a1 	.word	0x080068a1
 80067e0:	080068d9 	.word	0x080068d9
 80067e4:	08006919 	.word	0x08006919
	case SWITCH_STATE_IDLE:
		if(Switch_input){
 80067e8:	4b61      	ldr	r3, [pc, #388]	; (8006970 <Switch_Read+0x25c>)
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80af 	beq.w	8006950 <Switch_Read+0x23c>
			Switch_time = HAL_GetTick();
 80067f2:	f7fb fa77 	bl	8001ce4 <HAL_GetTick>
 80067f6:	4603      	mov	r3, r0
 80067f8:	4a5f      	ldr	r2, [pc, #380]	; (8006978 <Switch_Read+0x264>)
 80067fa:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_DOWN;
 80067fc:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <Switch_Read+0x260>)
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
			Switch_sum |= Switch_input;
 8006802:	4b5e      	ldr	r3, [pc, #376]	; (800697c <Switch_Read+0x268>)
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <Switch_Read+0x25c>)
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	4313      	orrs	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	4b5b      	ldr	r3, [pc, #364]	; (800697c <Switch_Read+0x268>)
 8006810:	801a      	strh	r2, [r3, #0]
		}
		break;
 8006812:	e09d      	b.n	8006950 <Switch_Read+0x23c>
	case SWITCH_STATE_PRE_DOWN:
		if(Switch_input){
 8006814:	4b56      	ldr	r3, [pc, #344]	; (8006970 <Switch_Read+0x25c>)
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d016      	beq.n	800684a <Switch_Read+0x136>
			if(HAL_GetTick() - Switch_time > 80){
 800681c:	f7fb fa62 	bl	8001ce4 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	4b55      	ldr	r3, [pc, #340]	; (8006978 <Switch_Read+0x264>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d905      	bls.n	8006838 <Switch_Read+0x124>
				Switch_state = SWITCH_STATE_DOWN;
 800682c:	4b51      	ldr	r3, [pc, #324]	; (8006974 <Switch_Read+0x260>)
 800682e:	2202      	movs	r2, #2
 8006830:	701a      	strb	r2, [r3, #0]
				return Switch_sum;
 8006832:	4b52      	ldr	r3, [pc, #328]	; (800697c <Switch_Read+0x268>)
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	e095      	b.n	8006964 <Switch_Read+0x250>
			}
			Switch_sum |= Switch_input;
 8006838:	4b50      	ldr	r3, [pc, #320]	; (800697c <Switch_Read+0x268>)
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	4b4c      	ldr	r3, [pc, #304]	; (8006970 <Switch_Read+0x25c>)
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	4313      	orrs	r3, r2
 8006842:	b29a      	uxth	r2, r3
 8006844:	4b4d      	ldr	r3, [pc, #308]	; (800697c <Switch_Read+0x268>)
 8006846:	801a      	strh	r2, [r3, #0]
		}
		else{
			Switch_state = SWITCH_STATE_IDLE;
			Switch_sum = 0;
		}
		break;
 8006848:	e08b      	b.n	8006962 <Switch_Read+0x24e>
			Switch_state = SWITCH_STATE_IDLE;
 800684a:	4b4a      	ldr	r3, [pc, #296]	; (8006974 <Switch_Read+0x260>)
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
			Switch_sum = 0;
 8006850:	4b4a      	ldr	r3, [pc, #296]	; (800697c <Switch_Read+0x268>)
 8006852:	2200      	movs	r2, #0
 8006854:	801a      	strh	r2, [r3, #0]
		break;
 8006856:	e084      	b.n	8006962 <Switch_Read+0x24e>
	case SWITCH_STATE_DOWN:
		if(!Switch_input){
 8006858:	4b45      	ldr	r3, [pc, #276]	; (8006970 <Switch_Read+0x25c>)
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d108      	bne.n	8006872 <Switch_Read+0x15e>
			Switch_lowTime = HAL_GetTick();
 8006860:	f7fb fa40 	bl	8001ce4 <HAL_GetTick>
 8006864:	4603      	mov	r3, r0
 8006866:	4a46      	ldr	r2, [pc, #280]	; (8006980 <Switch_Read+0x26c>)
 8006868:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE;
 800686a:	4b42      	ldr	r3, [pc, #264]	; (8006974 <Switch_Read+0x260>)
 800686c:	2203      	movs	r2, #3
 800686e:	701a      	strb	r2, [r3, #0]
		else if(HAL_GetTick() - Switch_time > 400){
			Switch_time = HAL_GetTick();
			Switch_state = SWITCH_STATE_LONG;
			return Switch_sum | LONG_FLAG;
		}
		break;
 8006870:	e070      	b.n	8006954 <Switch_Read+0x240>
		else if(HAL_GetTick() - Switch_time > 400){
 8006872:	f7fb fa37 	bl	8001ce4 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	4b3f      	ldr	r3, [pc, #252]	; (8006978 <Switch_Read+0x264>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006882:	d967      	bls.n	8006954 <Switch_Read+0x240>
			Switch_time = HAL_GetTick();
 8006884:	f7fb fa2e 	bl	8001ce4 <HAL_GetTick>
 8006888:	4603      	mov	r3, r0
 800688a:	4a3b      	ldr	r2, [pc, #236]	; (8006978 <Switch_Read+0x264>)
 800688c:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_LONG;
 800688e:	4b39      	ldr	r3, [pc, #228]	; (8006974 <Switch_Read+0x260>)
 8006890:	2204      	movs	r2, #4
 8006892:	701a      	strb	r2, [r3, #0]
			return Switch_sum | LONG_FLAG;
 8006894:	4b39      	ldr	r3, [pc, #228]	; (800697c <Switch_Read+0x268>)
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	f043 0320 	orr.w	r3, r3, #32
 800689c:	b29b      	uxth	r3, r3
 800689e:	e061      	b.n	8006964 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE:
		if(!Switch_input){
 80068a0:	4b33      	ldr	r3, [pc, #204]	; (8006970 <Switch_Read+0x25c>)
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d113      	bne.n	80068d0 <Switch_Read+0x1bc>
			if(HAL_GetTick() - Switch_lowTime > 80){
 80068a8:	f7fb fa1c 	bl	8001ce4 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4b34      	ldr	r3, [pc, #208]	; (8006980 <Switch_Read+0x26c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b50      	cmp	r3, #80	; 0x50
 80068b6:	d94f      	bls.n	8006958 <Switch_Read+0x244>
				Switch_time = HAL_GetTick();
 80068b8:	f7fb fa14 	bl	8001ce4 <HAL_GetTick>
 80068bc:	4603      	mov	r3, r0
 80068be:	4a2e      	ldr	r2, [pc, #184]	; (8006978 <Switch_Read+0x264>)
 80068c0:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 80068c2:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <Switch_Read+0x260>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 80068c8:	4b2c      	ldr	r3, [pc, #176]	; (800697c <Switch_Read+0x268>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_DOWN;
		}
		break;
 80068ce:	e043      	b.n	8006958 <Switch_Read+0x244>
			Switch_state = SWITCH_STATE_DOWN;
 80068d0:	4b28      	ldr	r3, [pc, #160]	; (8006974 <Switch_Read+0x260>)
 80068d2:	2202      	movs	r2, #2
 80068d4:	701a      	strb	r2, [r3, #0]
		break;
 80068d6:	e03f      	b.n	8006958 <Switch_Read+0x244>
	case SWITCH_STATE_LONG:
		if(!Switch_input){
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <Switch_Read+0x25c>)
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d108      	bne.n	80068f2 <Switch_Read+0x1de>
			Switch_lowTime = HAL_GetTick();
 80068e0:	f7fb fa00 	bl	8001ce4 <HAL_GetTick>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4a26      	ldr	r2, [pc, #152]	; (8006980 <Switch_Read+0x26c>)
 80068e8:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE_LONG;
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <Switch_Read+0x260>)
 80068ec:	2205      	movs	r2, #5
 80068ee:	701a      	strb	r2, [r3, #0]
		}
		else if(HAL_GetTick() - Switch_time > 100){
			Switch_time = HAL_GetTick();
			return Switch_sum | LONG_FLAG;
		}
		break;
 80068f0:	e034      	b.n	800695c <Switch_Read+0x248>
		else if(HAL_GetTick() - Switch_time > 100){
 80068f2:	f7fb f9f7 	bl	8001ce4 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <Switch_Read+0x264>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b64      	cmp	r3, #100	; 0x64
 8006900:	d92c      	bls.n	800695c <Switch_Read+0x248>
			Switch_time = HAL_GetTick();
 8006902:	f7fb f9ef 	bl	8001ce4 <HAL_GetTick>
 8006906:	4603      	mov	r3, r0
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <Switch_Read+0x264>)
 800690a:	6013      	str	r3, [r2, #0]
			return Switch_sum | LONG_FLAG;
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <Switch_Read+0x268>)
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	f043 0320 	orr.w	r3, r3, #32
 8006914:	b29b      	uxth	r3, r3
 8006916:	e025      	b.n	8006964 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE_LONG:
		if(!Switch_input){
 8006918:	4b15      	ldr	r3, [pc, #84]	; (8006970 <Switch_Read+0x25c>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d113      	bne.n	8006948 <Switch_Read+0x234>
			if(HAL_GetTick() - Switch_lowTime > 80){
 8006920:	f7fb f9e0 	bl	8001ce4 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <Switch_Read+0x26c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b50      	cmp	r3, #80	; 0x50
 800692e:	d917      	bls.n	8006960 <Switch_Read+0x24c>
				Switch_time = HAL_GetTick();
 8006930:	f7fb f9d8 	bl	8001ce4 <HAL_GetTick>
 8006934:	4603      	mov	r3, r0
 8006936:	4a10      	ldr	r2, [pc, #64]	; (8006978 <Switch_Read+0x264>)
 8006938:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <Switch_Read+0x260>)
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 8006940:	4b0e      	ldr	r3, [pc, #56]	; (800697c <Switch_Read+0x268>)
 8006942:	2200      	movs	r2, #0
 8006944:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_LONG;
		}
		break;
 8006946:	e00b      	b.n	8006960 <Switch_Read+0x24c>
			Switch_state = SWITCH_STATE_LONG;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <Switch_Read+0x260>)
 800694a:	2204      	movs	r2, #4
 800694c:	701a      	strb	r2, [r3, #0]
		break;
 800694e:	e007      	b.n	8006960 <Switch_Read+0x24c>
		break;
 8006950:	bf00      	nop
 8006952:	e006      	b.n	8006962 <Switch_Read+0x24e>
		break;
 8006954:	bf00      	nop
 8006956:	e004      	b.n	8006962 <Switch_Read+0x24e>
		break;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <Switch_Read+0x24e>
		break;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <Switch_Read+0x24e>
		break;
 8006960:	bf00      	nop
	}
	return 0;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40020400 	.word	0x40020400
 8006970:	20000724 	.word	0x20000724
 8006974:	20000726 	.word	0x20000726
 8006978:	20000728 	.word	0x20000728
 800697c:	2000072c 	.word	0x2000072c
 8006980:	20000730 	.word	0x20000730

08006984 <Control_PID>:
		.01f,		// kd
		10.f,		// filterConst
		5.f			// antiWindUpConst
};

float Control_PID(float sensorADCRead, heater_t *heaterobj, PIDConst PIDMode){
 8006984:	b084      	sub	sp, #16
 8006986:	b480      	push	{r7}
 8006988:	b087      	sub	sp, #28
 800698a:	af00      	add	r7, sp, #0
 800698c:	ed87 0a01 	vstr	s0, [r7, #4]
 8006990:	6038      	str	r0, [r7, #0]
 8006992:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006996:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	float duty;
	heaterobj->prev = heaterobj->current;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	619a      	str	r2, [r3, #24]
	heaterobj->current = sensorADCRead;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	615a      	str	r2, [r3, #20]

	// Proportional term
	float temperatureError = heaterobj->target - heaterobj->current;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80069b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b8:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative term
	float temperatureDifferential = (heaterobj->current - heaterobj->prev) / PERIOD;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	ed93 7a05 	vldr	s14, [r3, #20]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80069c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069cc:	edc7 7a03 	vstr	s15, [r7, #12]

	// Integral term
	heaterobj->errorSum += temperatureError * PERIOD;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	ed93 7a07 	vldr	s14, [r3, #28]
 80069d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80069da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	edc3 7a07 	vstr	s15, [r3, #28]

	// anti wind-up
	if (heaterobj->errorSum > PIDMode.antiWindUpConst) heaterobj->errorSum = PIDMode.antiWindUpConst;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80069ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80069ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f6:	dd03      	ble.n	8006a00 <Control_PID+0x7c>
 80069f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	61da      	str	r2, [r3, #28]
 80069fe:	e012      	b.n	8006a26 <Control_PID+0xa2>
	else if (heaterobj->errorSum < -PIDMode.antiWindUpConst) heaterobj->errorSum = -PIDMode.antiWindUpConst;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	ed93 7a07 	vldr	s14, [r3, #28]
 8006a06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006a0a:	eef1 7a67 	vneg.f32	s15, s15
 8006a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a16:	d506      	bpl.n	8006a26 <Control_PID+0xa2>
 8006a18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006a1c:	eef1 7a67 	vneg.f32	s15, s15
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	edc3 7a07 	vstr	s15, [r3, #28]

	// PID control
	duty = (temperatureError * PIDMode.kp - temperatureDifferential * PIDMode.kd + heaterobj->errorSum * PIDMode.ki);
 8006a26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a32:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	edd3 6a07 	vldr	s13, [r3, #28]
 8006a48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a54:	edc7 7a05 	vstr	s15, [r7, #20]

	// output limit
	if (duty < 0.01f) duty = 0.f;
 8006a58:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a5c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006aa0 <Control_PID+0x11c>
 8006a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a68:	d502      	bpl.n	8006a70 <Control_PID+0xec>
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]
	if (duty > 0.99f) duty = 1.f;
 8006a70:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a74:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006aa4 <Control_PID+0x120>
 8006a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a80:	dd02      	ble.n	8006a88 <Control_PID+0x104>
 8006a82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006a86:	617b      	str	r3, [r7, #20]
	return duty;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
}
 8006a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	b004      	add	sp, #16
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	3c23d70a 	.word	0x3c23d70a
 8006aa4:	3f7d70a4 	.word	0x3f7d70a4

08006aa8 <HeaterControl_TIM9_IRQ>:
static void Heater_Start(heater_t *heaterobj);
static void Heater_Stop(heater_t *heaterobj);
static void Heater_Set(heater_t *heaterobj);
static void Heater_Controller(tempsensor_t *tempsensor, heater_t *heaterobj);

void HeaterControl_TIM9_IRQ(){
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
	Heater_Controller(tempTop, heaterTop);
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HeaterControl_TIM9_IRQ+0x50>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a12      	ldr	r2, [pc, #72]	; (8006afc <HeaterControl_TIM9_IRQ+0x54>)
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 f8d4 	bl	8006c64 <Heater_Controller>
	Heater_Controller(tempBottom, heaterBottom);
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <HeaterControl_TIM9_IRQ+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a10      	ldr	r2, [pc, #64]	; (8006b04 <HeaterControl_TIM9_IRQ+0x5c>)
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 f8cc 	bl	8006c64 <Heater_Controller>
	if(heaterTop->state)
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HeaterControl_TIM9_IRQ+0x54>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <HeaterControl_TIM9_IRQ+0x38>
		Heater_Set(heaterTop);
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HeaterControl_TIM9_IRQ+0x54>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f87e 	bl	8006bdc <Heater_Set>
	if(heaterBottom->state)
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <HeaterControl_TIM9_IRQ+0x5c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <HeaterControl_TIM9_IRQ+0x4c>
		Heater_Set(heaterBottom);
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <HeaterControl_TIM9_IRQ+0x5c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f874 	bl	8006bdc <Heater_Set>
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000704 	.word	0x20000704
 8006afc:	2000070c 	.word	0x2000070c
 8006b00:	20000708 	.word	0x20000708
 8006b04:	20000710 	.word	0x20000710

08006b08 <Custom_HeaterControl>:

heater_t *Custom_HeaterControl(TIM_HandleTypeDef *htim, uint32_t Channel){
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	//
	heater_t *heaterobj = (heater_t*) calloc(1, sizeof(heater_t));
 8006b12:	212c      	movs	r1, #44	; 0x2c
 8006b14:	2001      	movs	r0, #1
 8006b16:	f001 f85f 	bl	8007bd8 <calloc>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	60fb      	str	r3, [r7, #12]

	// Setting methods
	heaterobj->channel = Channel;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	605a      	str	r2, [r3, #4]
	heaterobj->current = .0f;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	615a      	str	r2, [r3, #20]
	heaterobj->duty = .0f;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	60da      	str	r2, [r3, #12]
	heaterobj->errorSum = .0f;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	61da      	str	r2, [r3, #28]
	heaterobj->htim = htim;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	heaterobj->onFlag = false;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2020 	strb.w	r2, [r3, #32]
	heaterobj->prev = .0f;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	619a      	str	r2, [r3, #24]
	heaterobj->state = OFF;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	609a      	str	r2, [r3, #8]
	heaterobj->target = .0f;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	611a      	str	r2, [r3, #16]

	// Setting fields
	heaterobj->start = Heater_Start;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <Custom_HeaterControl+0x70>)
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24
	heaterobj->stop = Heater_Stop;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <Custom_HeaterControl+0x74>)
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28

	return heaterobj;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	08006b81 	.word	0x08006b81
 8006b7c:	08006ba9 	.word	0x08006ba9

08006b80 <Heater_Start>:

static void Heater_Start(heater_t *heaterobj){
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = true;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_TIM_PWM_Start(heaterobj->htim, heaterobj->channel);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7fc fe9c 	bl	80038d8 <HAL_TIM_PWM_Start>
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <Heater_Stop>:

static void Heater_Stop(heater_t *heaterobj){
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = false;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2020 	strb.w	r2, [r3, #32]
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 8006bb8:	e007      	b.n	8006bca <Heater_Stop+0x22>
	HAL_TIM_PWM_Stop(heaterobj->htim, heaterobj->channel);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	f7fc ff37 	bl	8003a38 <HAL_TIM_PWM_Stop>
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f3      	bne.n	8006bba <Heater_Stop+0x12>
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <Heater_Set>:

static void Heater_Set(heater_t *heaterobj){
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	// Duty ratio to duty cycle conversion
	uint32_t dutycycle = heaterobj->duty * (__HAL_TIM_GET_AUTORELOAD(heaterobj->htim)+1) - 1;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	ed93 7a03 	vldr	s14, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0c:	ee17 3a90 	vmov	r3, s15
 8006c10:	60fb      	str	r3, [r7, #12]
	// Set duty rate of PWM
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <Heater_Set+0x4a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006c24:	e018      	b.n	8006c58 <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d105      	bne.n	8006c3a <Heater_Set+0x5e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006c38:	e00e      	b.n	8006c58 <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d105      	bne.n	8006c4e <Heater_Set+0x72>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006c4c:	e004      	b.n	8006c58 <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <Heater_Controller>:

static void Heater_Controller(tempsensor_t *tempsensorobj, heater_t *heaterobj){
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	float sensorADCRead = tempsensorobj->read(tempsensorobj);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	ed87 0a03 	vstr	s0, [r7, #12]


	if (sensorADCRead == NAN)
		return;

	switch (heaterobj->state){
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	f200 80d7 	bhi.w	8006e32 <Heater_Controller+0x1ce>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <Heater_Controller+0x28>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006ce1 	.word	0x08006ce1
 8006c94:	08006d29 	.word	0x08006d29
 8006c98:	08006daf 	.word	0x08006daf
		case OFF:
			heaterobj->duty = 0.f;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	60da      	str	r2, [r3, #12]
			heaterobj->target = 0.f;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	611a      	str	r2, [r3, #16]
			heaterobj->errorSum = 0.f;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	61da      	str	r2, [r3, #28]
			heaterobj->prev = 0.f;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	619a      	str	r2, [r3, #24]
			heaterobj->current = 0.f;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	615a      	str	r2, [r3, #20]
			if (heaterobj->onFlag) {
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80b9 	beq.w	8006e42 <Heater_Controller+0x1de>
				heaterobj->start(heaterobj);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	6838      	ldr	r0, [r7, #0]
 8006cd6:	4798      	blx	r3
				heaterobj->state = PREHEATING;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	609a      	str	r2, [r3, #8]
			}
			break;
 8006cde:	e0b0      	b.n	8006e42 <Heater_Controller+0x1de>

		case PREHEATING:
			heaterobj->duty = 1.f;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006ce6:	60da      	str	r2, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cee:	f083 0301 	eor.w	r3, r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <Heater_Controller+0x9c>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	609a      	str	r2, [r3, #8]
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;

			break;
 8006cfe:	e0a1      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d0c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006d10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	dc00      	bgt.n	8006d20 <Heater_Controller+0xbc>
			break;
 8006d1e:	e091      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2202      	movs	r2, #2
 8006d24:	609a      	str	r2, [r3, #8]
			break;
 8006d26:	e08d      	b.n	8006e44 <Heater_Controller+0x1e0>

		case TRANSIENT:
			heaterobj->duty = Control_PID(sensorADCRead, heaterobj, PIDTransient);
 8006d28:	4b48      	ldr	r3, [pc, #288]	; (8006e4c <Heater_Controller+0x1e8>)
 8006d2a:	466c      	mov	r4, sp
 8006d2c:	f103 020c 	add.w	r2, r3, #12
 8006d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d34:	e884 0003 	stmia.w	r4, {r0, r1}
 8006d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3a:	6838      	ldr	r0, [r7, #0]
 8006d3c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006d40:	f7ff fe20 	bl	8006984 <Control_PID>
 8006d44:	eef0 7a40 	vmov.f32	s15, s0
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d54:	f083 0301 	eor.w	r3, r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <Heater_Controller+0x102>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2200      	movs	r2, #0
 8006d62:	609a      	str	r2, [r3, #8]
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
			break;
 8006d64:	e06e      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d82:	dc00      	bgt.n	8006d86 <Heater_Controller+0x122>
			break;
 8006d84:	e05e      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	d400      	bmi.n	8006da6 <Heater_Controller+0x142>
			break;
 8006da4:	e04e      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2203      	movs	r2, #3
 8006daa:	609a      	str	r2, [r3, #8]
			break;
 8006dac:	e04a      	b.n	8006e44 <Heater_Controller+0x1e0>

		case STEADY:
			heaterobj->duty = Control_PID(sensorADCRead, heaterobj, PIDSteady);
 8006dae:	4b28      	ldr	r3, [pc, #160]	; (8006e50 <Heater_Controller+0x1ec>)
 8006db0:	466c      	mov	r4, sp
 8006db2:	f103 020c 	add.w	r2, r3, #12
 8006db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dba:	e884 0003 	stmia.w	r4, {r0, r1}
 8006dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dc0:	6838      	ldr	r0, [r7, #0]
 8006dc2:	ed97 0a03 	vldr	s0, [r7, #12]
 8006dc6:	f7ff fddd 	bl	8006984 <Control_PID>
 8006dca:	eef0 7a40 	vmov.f32	s15, s0
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dda:	f083 0301 	eor.w	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <Heater_Controller+0x188>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	609a      	str	r2, [r3, #8]
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
			break;
 8006dea:	e02b      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	ed93 7a05 	vldr	s14, [r3, #20]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8006df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e08:	d90f      	bls.n	8006e2a <Heater_Controller+0x1c6>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	edd3 7a06 	vldr	s15, [r3, #24]
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e26:	da00      	bge.n	8006e2a <Heater_Controller+0x1c6>
			break;
 8006e28:	e00c      	b.n	8006e44 <Heater_Controller+0x1e0>
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	609a      	str	r2, [r3, #8]
			break;
 8006e30:	e008      	b.n	8006e44 <Heater_Controller+0x1e0>

		default:
			heaterobj->onFlag = 0;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2020 	strb.w	r2, [r3, #32]
			heaterobj->state = OFF;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
 8006e40:	e000      	b.n	8006e44 <Heater_Controller+0x1e0>
			break;
 8006e42:	bf00      	nop
	}
}
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd90      	pop	{r4, r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000204 	.word	0x20000204
 8006e50:	20000218 	.word	0x20000218

08006e54 <Systick_Sensor_IRQ>:
/* Functions */

// 카운트 값을 1씩 줄이기 위한 인터럽트 핸들러.
// HAL_InitTick 함수에서 Systick 인터럽트가 1ms마다 실행되도록 설정되므로,
// 핸들러의 실행주기도 1ms이다.
void Systick_Sensor_IRQ() {
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
	// 카운트가 0이 아니면, waitcount의 값을 1 감소시킨다.
	// 현재 카운트 node를 읽으면, next node가 없을 때까지 다음으로 넘어가 읽기를 반복한다.
	if (waitcount_node_storage.size > 0) {
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <Systick_Sensor_IRQ+0x48>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d015      	beq.n	8006e8e <Systick_Sensor_IRQ+0x3a>
		waitcount_node *cur_node = waitcount_node_storage.frontPtr;
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <Systick_Sensor_IRQ+0x48>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 8006e68:	e00e      	b.n	8006e88 <Systick_Sensor_IRQ+0x34>
			cur_node->data -= (cur_node->data == 0) ? 0 : 1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	bf14      	ite	ne
 8006e76:	2201      	movne	r2, #1
 8006e78:	2200      	moveq	r2, #0
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	1a9a      	subs	r2, r3, r2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
			cur_node = cur_node->next;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1ed      	bne.n	8006e6a <Systick_Sensor_IRQ+0x16>
		}
	}
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000734 	.word	0x20000734

08006ea0 <Custom_Tempsensor>:

tempsensor_t* Custom_Tempsensor(SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t interval) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	80fb      	strh	r3, [r7, #6]
	// Setting methods
	tempsensor_t *sensorobj = (tempsensor_t*) calloc(1, sizeof(tempsensor_t));
 8006eb0:	212c      	movs	r1, #44	; 0x2c
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f000 fe90 	bl	8007bd8 <calloc>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	617b      	str	r3, [r7, #20]

	sensorobj->read = read;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <Custom_Tempsensor+0x8c>)
 8006ec0:	619a      	str	r2, [r3, #24]
	sensorobj->is_readable = is_readable;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	4a1a      	ldr	r2, [pc, #104]	; (8006f30 <Custom_Tempsensor+0x90>)
 8006ec6:	61da      	str	r2, [r3, #28]
	sensorobj->set_interval = set_interval;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	4a1a      	ldr	r2, [pc, #104]	; (8006f34 <Custom_Tempsensor+0x94>)
 8006ecc:	621a      	str	r2, [r3, #32]
	sensorobj->get_interval = get_interval;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4a19      	ldr	r2, [pc, #100]	; (8006f38 <Custom_Tempsensor+0x98>)
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24
	sensorobj->read_waitcount = read_waitcount;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <Custom_Tempsensor+0x9c>)
 8006ed8:	629a      	str	r2, [r3, #40]	; 0x28


	// Setting fields
	sensorobj->hspi = hspi;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]
	sensorobj->__sensor_interval = interval;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	60da      	str	r2, [r3, #12]

	// Setting CS pin
	sensorobj->csPin = GPIO_Pin;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	88fa      	ldrh	r2, [r7, #6]
 8006eea:	829a      	strh	r2, [r3, #20]
	sensorobj->csPort = GPIOx;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	605a      	str	r2, [r3, #4]

	// Pulling up CS pin
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6858      	ldr	r0, [r3, #4]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	8a9b      	ldrh	r3, [r3, #20]
 8006efa:	2201      	movs	r2, #1
 8006efc:	4619      	mov	r1, r3
 8006efe:	f7fb f9cf 	bl	80022a0 <HAL_GPIO_WritePin>

	// setting waitCount object
	waitcount_node *waitCntNode = (waitcount_node*) calloc(1, sizeof(waitcount_node));
 8006f02:	2108      	movs	r1, #8
 8006f04:	2001      	movs	r0, #1
 8006f06:	f000 fe67 	bl	8007bd8 <calloc>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	613b      	str	r3, [r7, #16]
	sensorobj->waitCount = &(waitCntNode->data);
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	609a      	str	r2, [r3, #8]
	*(sensorobj->waitCount) = 10;	// for initialize&interrupt working test
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	220a      	movs	r2, #10
 8006f1a:	601a      	str	r2, [r3, #0]
	Add_GlobalWaitCountNode(waitCntNode);
 8006f1c:	6938      	ldr	r0, [r7, #16]
 8006f1e:	f000 f80f 	bl	8006f40 <Add_GlobalWaitCountNode>

	return sensorobj;
 8006f22:	697b      	ldr	r3, [r7, #20]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	08007011 	.word	0x08007011
 8006f30:	0800705f 	.word	0x0800705f
 8006f34:	08007083 	.word	0x08007083
 8006f38:	0800709f 	.word	0x0800709f
 8006f3c:	080070b7 	.word	0x080070b7

08006f40 <Add_GlobalWaitCountNode>:

void Add_GlobalWaitCountNode(waitcount_node *waitCntNode) {
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	if (waitCntNode != NULL) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d013      	beq.n	8006f76 <Add_GlobalWaitCountNode+0x36>

		if (waitcount_node_storage.size == 0) {
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <Add_GlobalWaitCountNode+0x44>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <Add_GlobalWaitCountNode+0x1e>
			waitcount_node_storage.frontPtr = waitCntNode;
 8006f56:	4a0b      	ldr	r2, [pc, #44]	; (8006f84 <Add_GlobalWaitCountNode+0x44>)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	e003      	b.n	8006f66 <Add_GlobalWaitCountNode+0x26>
		} else {
			waitcount_node_storage.backPtr->next = waitCntNode;
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <Add_GlobalWaitCountNode+0x44>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]

		}
		waitcount_node_storage.backPtr = waitCntNode;
 8006f66:	4a07      	ldr	r2, [pc, #28]	; (8006f84 <Add_GlobalWaitCountNode+0x44>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6053      	str	r3, [r2, #4]
		waitcount_node_storage.size++;
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <Add_GlobalWaitCountNode+0x44>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	3301      	adds	r3, #1
 8006f72:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <Add_GlobalWaitCountNode+0x44>)
 8006f74:	6093      	str	r3, [r2, #8]
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000734 	.word	0x20000734

08006f88 <__sensor_read>:

/* Methods */
__weak float __sensor_read(tempsensor_t *sensorobj) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float temp = 0;
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]

	// 16비트 데이터를 MSB부터 차례대로 받는다.
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_RESET);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6858      	ldr	r0, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8a9b      	ldrh	r3, [r3, #20]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f7fb f97d 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(sensorobj->hspi, pData, 1, 50);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f107 0108 	add.w	r1, r7, #8
 8006fae:	2332      	movs	r3, #50	; 0x32
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f7fb ffac 	bl	8002f0e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6858      	ldr	r0, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8a9b      	ldrh	r3, [r3, #20]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f7fb f96d 	bl	80022a0 <HAL_GPIO_WritePin>

	if (((pData[0]|(pData[1]<<8))>>2)& 0x0001)
 8006fc6:	7a3b      	ldrb	r3, [r7, #8]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	7a7b      	ldrb	r3, [r7, #9]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <__sensor_read+0x56>
	   return NAN;
 8006fd8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800700c <__sensor_read+0x84>
 8006fdc:	e011      	b.n	8007002 <__sensor_read+0x7a>
	temp = ((((pData[0]|pData[1]<<8)))>>3);
 8006fde:	7a3b      	ldrb	r3, [r7, #8]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	7a7b      	ldrb	r3, [r7, #9]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	10db      	asrs	r3, r3, #3
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff2:	edc7 7a03 	vstr	s15, [r7, #12]

	return temp * 0.25f;
 8006ff6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ffa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8006ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007002:	eeb0 0a67 	vmov.f32	s0, s15
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	7fc00000 	.word	0x7fc00000

08007010 <read>:
float read(tempsensor_t *sensorobj) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	float data = .0f;
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
	if (sensorobj->is_readable(sensorobj)) {
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00d      	beq.n	8007048 <read+0x38>
		data = __sensor_read(sensorobj);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff ffab 	bl	8006f88 <__sensor_read>
 8007032:	ed87 0a03 	vstr	s0, [r7, #12]
		*(sensorobj->waitCount) = sensorobj->__sensor_interval;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68d2      	ldr	r2, [r2, #12]
 800703e:	601a      	str	r2, [r3, #0]
		sensorobj->lastTemp = data;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	611a      	str	r2, [r3, #16]
 8007046:	e002      	b.n	800704e <read+0x3e>
	} else {
		data = sensorobj->lastTemp;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	ee07 3a90 	vmov	s15, r3
}
 8007054:	eeb0 0a67 	vmov.f32	s0, s15
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <is_readable>:
bool is_readable(tempsensor_t *sensorobj) {
 800705e:	b580      	push	{r7, lr}
 8007060:	b082      	sub	sp, #8
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
	return !(sensorobj->read_waitcount(sensorobj));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <set_interval>:

void set_interval(tempsensor_t *sensorobj, uint32_t interval) {
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
	sensorobj->__sensor_interval = interval;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	60da      	str	r2, [r3, #12]
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <get_interval>:
uint32_t get_interval(tempsensor_t *sensorobj) {
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
	return sensorobj->__sensor_interval;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <read_waitcount>:
uint32_t read_waitcount(tempsensor_t *sensorobj) {
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
	return *(sensorobj->waitCount);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	681b      	ldr	r3, [r3, #0]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <testTemp>:

extern heater_t *heaterTop;
extern heater_t *heaterBottom;

void testTemp();
void testTemp(){
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
	SwitchLED(COLOR_BLACK);
 80070d6:	2100      	movs	r1, #0
 80070d8:	2000      	movs	r0, #0
 80070da:	f7ff fa45 	bl	8006568 <Switch_LED>
	for(;;){
		uint16_t sw = Switch_Read();
 80070de:	f7ff fb19 	bl	8006714 <Switch_Read>
 80070e2:	4603      	mov	r3, r0
 80070e4:	81fb      	strh	r3, [r7, #14]
		if(sw) break;
 80070e6:	89fb      	ldrh	r3, [r7, #14]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d136      	bne.n	800715a <testTemp+0x8a>
		if (tempTop->is_readable(tempTop) && tempBottom->is_readable(tempBottom)) {
 80070ec:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <testTemp+0x94>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <testTemp+0x94>)
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	4610      	mov	r0, r2
 80070f8:	4798      	blx	r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0ee      	beq.n	80070de <testTemp+0xe>
 8007100:	4b19      	ldr	r3, [pc, #100]	; (8007168 <testTemp+0x98>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	4a18      	ldr	r2, [pc, #96]	; (8007168 <testTemp+0x98>)
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	4610      	mov	r0, r2
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0e4      	beq.n	80070de <testTemp+0xe>
			float temp1 = tempTop->read(tempTop);
 8007114:	4b13      	ldr	r3, [pc, #76]	; (8007164 <testTemp+0x94>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	4a12      	ldr	r2, [pc, #72]	; (8007164 <testTemp+0x94>)
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	4610      	mov	r0, r2
 8007120:	4798      	blx	r3
 8007122:	ed87 0a02 	vstr	s0, [r7, #8]
			float temp2 = tempBottom->read(tempBottom);
 8007126:	4b10      	ldr	r3, [pc, #64]	; (8007168 <testTemp+0x98>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	4a0e      	ldr	r2, [pc, #56]	; (8007168 <testTemp+0x98>)
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	ed87 0a01 	vstr	s0, [r7, #4]
			OLED_Printf("/s/0/rtempU: /y%f\r\n", temp1);
 8007138:	68b8      	ldr	r0, [r7, #8]
 800713a:	f7f9 fa0d 	bl	8000558 <__aeabi_f2d>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	480a      	ldr	r0, [pc, #40]	; (800716c <testTemp+0x9c>)
 8007144:	f7fe fd44 	bl	8005bd0 <OLED_Printf>
			OLED_Printf("/s/1/rtempD: /y%f\r\n", temp2);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7f9 fa05 	bl	8000558 <__aeabi_f2d>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4807      	ldr	r0, [pc, #28]	; (8007170 <testTemp+0xa0>)
 8007154:	f7fe fd3c 	bl	8005bd0 <OLED_Printf>
	for(;;){
 8007158:	e7c1      	b.n	80070de <testTemp+0xe>
		if(sw) break;
 800715a:	bf00      	nop
//			printf("temp: %f\r\n", temp1->read(temp1));
		}
	}
}
 800715c:	bf00      	nop
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000704 	.word	0x20000704
 8007168:	20000708 	.word	0x20000708
 800716c:	0800ab84 	.word	0x0800ab84
 8007170:	0800ab98 	.word	0x0800ab98

08007174 <profile>:
void testHeat();




void profile(){}
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
 8007178:	bf00      	nop
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <GraphUITest>:
void test();
void DCFan_Set(uint8_t level);
void GraphUITest(){
 8007184:	b5b0      	push	{r4, r5, r7, lr}
 8007186:	b098      	sub	sp, #96	; 0x60
 8007188:	af02      	add	r7, sp, #8
	float xData[10] = {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0};
 800718a:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <GraphUITest+0x64>)
 800718c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8007190:	461d      	mov	r5, r3
 8007192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800719a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800719e:	e884 0003 	stmia.w	r4, {r0, r1}
	float yData[10] = {30.0, 100.0, 250.0, 250.0, 250.0, 250.0, 250.0, 250.0, 250.0, 250.0};
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <GraphUITest+0x68>)
 80071a4:	1d3c      	adds	r4, r7, #4
 80071a6:	461d      	mov	r5, r3
 80071a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80071b4:	e884 0003 	stmia.w	r4, {r0, r1}
	graph_t * g = Graph_InitEdge(xData, yData, 1.0, 6.0);
 80071b8:	1d39      	adds	r1, r7, #4
 80071ba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80071be:	2334      	movs	r3, #52	; 0x34
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80071c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80071ca:	2301      	movs	r3, #1
 80071cc:	220a      	movs	r2, #10
 80071ce:	f7fe f811 	bl	80051f4 <_Graph_Init>
 80071d2:	6578      	str	r0, [r7, #84]	; 0x54
	Graph_UI(g);
 80071d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80071d6:	f7fe f897 	bl	8005308 <Graph_UI>
	Graph_Delete(g);
 80071da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80071dc:	f7fe f87e 	bl	80052dc <Graph_Delete>
}
 80071e0:	bf00      	nop
 80071e2:	3758      	adds	r7, #88	; 0x58
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bdb0      	pop	{r4, r5, r7, pc}
 80071e8:	0800abac 	.word	0x0800abac
 80071ec:	0800abd4 	.word	0x0800abd4

080071f0 <Menu_Setup>:

};

const uint8_t menuCnt = sizeof(menuList) / sizeof(Menu_t);

void Menu_Setup(){
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af02      	add	r7, sp, #8
	OLED_Begin();
 80071f6:	f7fe fabd 	bl	8005774 <OLED_Begin>
	OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt > 6 ? 6 : menuCnt, 0xFFFF00);
 80071fa:	2305      	movs	r3, #5
 80071fc:	2b06      	cmp	r3, #6
 80071fe:	bf28      	it	cs
 8007200:	2306      	movcs	r3, #6
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <Menu_Setup+0x60>)
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	9200      	str	r2, [sp, #0]
 800720c:	4b11      	ldr	r3, [pc, #68]	; (8007254 <Menu_Setup+0x64>)
 800720e:	2200      	movs	r2, #0
 8007210:	4911      	ldr	r1, [pc, #68]	; (8007258 <Menu_Setup+0x68>)
 8007212:	4812      	ldr	r0, [pc, #72]	; (800725c <Menu_Setup+0x6c>)
 8007214:	f7ff f8dc 	bl	80063d0 <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8007218:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800721c:	2000      	movs	r0, #0
 800721e:	f7ff f923 	bl	8006468 <OLED_Cursor>
	SwitchLED(menuList[0].color);
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <Menu_Setup+0x64>)
 8007224:	891b      	ldrh	r3, [r3, #8]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	b29b      	uxth	r3, r3
 800722e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007232:	b29a      	uxth	r2, r3
 8007234:	4b07      	ldr	r3, [pc, #28]	; (8007254 <Menu_Setup+0x64>)
 8007236:	891b      	ldrh	r3, [r3, #8]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	b29b      	uxth	r3, r3
 800723c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007240:	b29b      	uxth	r3, r3
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7ff f98f 	bl	8006568 <Switch_LED>
}
 800724a:	bf00      	nop
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	00ffff00 	.word	0x00ffff00
 8007254:	2000022c 	.word	0x2000022c
 8007258:	00ff8800 	.word	0x00ff8800
 800725c:	0800ac30 	.word	0x0800ac30

08007260 <Menu>:

void Menu(){
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af02      	add	r7, sp, #8
	Menu_Setup();
 8007266:	f7ff ffc3 	bl	80071f0 <Menu_Setup>
	uint8_t idx = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	71fb      	strb	r3, [r7, #7]
	for(;;){
		uint16_t sw = Switch_Read();
 800726e:	f7ff fa51 	bl	8006714 <Switch_Read>
 8007272:	4603      	mov	r3, r0
 8007274:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8007276:	88bb      	ldrh	r3, [r7, #4]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d002      	beq.n	8007282 <Menu+0x22>
 800727c:	88bb      	ldrh	r3, [r7, #4]
 800727e:	2b22      	cmp	r3, #34	; 0x22
 8007280:	d17f      	bne.n	8007382 <Menu+0x122>
			idx+=menuCnt - 1;
 8007282:	2205      	movs	r2, #5
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	4413      	add	r3, r2
 8007288:	b2db      	uxtb	r3, r3
 800728a:	3b01      	subs	r3, #1
 800728c:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 800728e:	2205      	movs	r2, #5
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	fbb3 f1f2 	udiv	r1, r3, r2
 8007296:	fb01 f202 	mul.w	r2, r1, r2
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && (idx % 6 == 5 || idx == menuCnt - 1)){
 800729e:	2305      	movs	r3, #5
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	d93c      	bls.n	800731e <Menu+0xbe>
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	4b95      	ldr	r3, [pc, #596]	; (80074fc <Menu+0x29c>)
 80072a8:	fba3 1302 	umull	r1, r3, r3, r2
 80072ac:	0899      	lsrs	r1, r3, #2
 80072ae:	460b      	mov	r3, r1
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	440b      	add	r3, r1
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d004      	beq.n	80072c8 <Menu+0x68>
 80072be:	79fa      	ldrb	r2, [r7, #7]
 80072c0:	2305      	movs	r3, #5
 80072c2:	3b01      	subs	r3, #1
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d12a      	bne.n	800731e <Menu+0xbe>
				OLED_Clear();
 80072c8:	f7fe fa24 	bl	8005714 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + (idx / 6) * 6, menuCnt - (idx / 6) * 6 > 6 ? 6 : menuCnt - (idx / 6) * 6, 0xFFFF00);
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	4a8b      	ldr	r2, [pc, #556]	; (80074fc <Menu+0x29c>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	089b      	lsrs	r3, r3, #2
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	4613      	mov	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	4413      	add	r3, r2
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	461a      	mov	r2, r3
 80072e4:	4b86      	ldr	r3, [pc, #536]	; (8007500 <Menu+0x2a0>)
 80072e6:	18d1      	adds	r1, r2, r3
 80072e8:	2305      	movs	r3, #5
 80072ea:	4618      	mov	r0, r3
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	4a83      	ldr	r2, [pc, #524]	; (80074fc <Menu+0x29c>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	089b      	lsrs	r3, r3, #2
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	4613      	mov	r3, r2
 80072fc:	0092      	lsls	r2, r2, #2
 80072fe:	1a9b      	subs	r3, r3, r2
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	4403      	add	r3, r0
 8007304:	2b06      	cmp	r3, #6
 8007306:	bfa8      	it	ge
 8007308:	2306      	movge	r3, #6
 800730a:	461a      	mov	r2, r3
 800730c:	4b7d      	ldr	r3, [pc, #500]	; (8007504 <Menu+0x2a4>)
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	9200      	str	r2, [sp, #0]
 8007312:	460b      	mov	r3, r1
 8007314:	2200      	movs	r2, #0
 8007316:	497c      	ldr	r1, [pc, #496]	; (8007508 <Menu+0x2a8>)
 8007318:	487c      	ldr	r0, [pc, #496]	; (800750c <Menu+0x2ac>)
 800731a:	f7ff f859 	bl	80063d0 <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 800731e:	79fa      	ldrb	r2, [r7, #7]
 8007320:	4b76      	ldr	r3, [pc, #472]	; (80074fc <Menu+0x29c>)
 8007322:	fba3 1302 	umull	r1, r3, r3, r2
 8007326:	0899      	lsrs	r1, r3, #2
 8007328:	460b      	mov	r3, r1
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	440b      	add	r3, r1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff f895 	bl	8006468 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 800733e:	79fa      	ldrb	r2, [r7, #7]
 8007340:	496f      	ldr	r1, [pc, #444]	; (8007500 <Menu+0x2a0>)
 8007342:	4613      	mov	r3, r2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3308      	adds	r3, #8
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	b29b      	uxth	r3, r3
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	b29b      	uxth	r3, r3
 8007358:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800735c:	b298      	uxth	r0, r3
 800735e:	79fa      	ldrb	r2, [r7, #7]
 8007360:	4967      	ldr	r1, [pc, #412]	; (8007500 <Menu+0x2a0>)
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	3308      	adds	r3, #8
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	b29b      	uxth	r3, r3
 8007374:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007378:	b29b      	uxth	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	f7ff f8f4 	bl	8006568 <Switch_LED>
 8007380:	e0ba      	b.n	80074f8 <Menu+0x298>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8007382:	88bb      	ldrh	r3, [r7, #4]
 8007384:	2b08      	cmp	r3, #8
 8007386:	d002      	beq.n	800738e <Menu+0x12e>
 8007388:	88bb      	ldrh	r3, [r7, #4]
 800738a:	2b28      	cmp	r3, #40	; 0x28
 800738c:	d167      	bne.n	800745e <Menu+0x1fe>
			idx+=1;
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	3301      	adds	r3, #1
 8007392:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8007394:	2205      	movs	r2, #5
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	fbb3 f1f2 	udiv	r1, r3, r2
 800739c:	fb01 f202 	mul.w	r2, r1, r2
 80073a0:	1a9b      	subs	r3, r3, r2
 80073a2:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && idx % 6 == 0){
 80073a4:	2305      	movs	r3, #5
 80073a6:	2b06      	cmp	r3, #6
 80073a8:	d927      	bls.n	80073fa <Menu+0x19a>
 80073aa:	79fa      	ldrb	r2, [r7, #7]
 80073ac:	4b53      	ldr	r3, [pc, #332]	; (80074fc <Menu+0x29c>)
 80073ae:	fba3 1302 	umull	r1, r3, r3, r2
 80073b2:	0899      	lsrs	r1, r3, #2
 80073b4:	460b      	mov	r3, r1
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	440b      	add	r3, r1
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11a      	bne.n	80073fa <Menu+0x19a>
				OLED_Clear();
 80073c4:	f7fe f9a6 	bl	8005714 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + idx, menuCnt - idx > 6 ? 6 : menuCnt - idx, 0xFFFF00);
 80073c8:	79fa      	ldrb	r2, [r7, #7]
 80073ca:	4613      	mov	r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	461a      	mov	r2, r3
 80073d4:	4b4a      	ldr	r3, [pc, #296]	; (8007500 <Menu+0x2a0>)
 80073d6:	441a      	add	r2, r3
 80073d8:	2305      	movs	r3, #5
 80073da:	4619      	mov	r1, r3
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	1acb      	subs	r3, r1, r3
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	bfa8      	it	ge
 80073e4:	2306      	movge	r3, #6
 80073e6:	4619      	mov	r1, r3
 80073e8:	4b46      	ldr	r3, [pc, #280]	; (8007504 <Menu+0x2a4>)
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	9100      	str	r1, [sp, #0]
 80073ee:	4613      	mov	r3, r2
 80073f0:	2200      	movs	r2, #0
 80073f2:	4945      	ldr	r1, [pc, #276]	; (8007508 <Menu+0x2a8>)
 80073f4:	4845      	ldr	r0, [pc, #276]	; (800750c <Menu+0x2ac>)
 80073f6:	f7fe ffeb 	bl	80063d0 <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 80073fa:	79fa      	ldrb	r2, [r7, #7]
 80073fc:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <Menu+0x29c>)
 80073fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007402:	0899      	lsrs	r1, r3, #2
 8007404:	460b      	mov	r3, r1
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	440b      	add	r3, r1
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff f827 	bl	8006468 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 800741a:	79fa      	ldrb	r2, [r7, #7]
 800741c:	4938      	ldr	r1, [pc, #224]	; (8007500 <Menu+0x2a0>)
 800741e:	4613      	mov	r3, r2
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	3308      	adds	r3, #8
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	0a1b      	lsrs	r3, r3, #8
 800742e:	b29b      	uxth	r3, r3
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	b29b      	uxth	r3, r3
 8007434:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007438:	b298      	uxth	r0, r3
 800743a:	79fa      	ldrb	r2, [r7, #7]
 800743c:	4930      	ldr	r1, [pc, #192]	; (8007500 <Menu+0x2a0>)
 800743e:	4613      	mov	r3, r2
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	3308      	adds	r3, #8
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	b29b      	uxth	r3, r3
 8007450:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007454:	b29b      	uxth	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	f7ff f886 	bl	8006568 <Switch_LED>
 800745c:	e04c      	b.n	80074f8 <Menu+0x298>
		}
		else if(sw == SW_ENTER){
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	2b04      	cmp	r3, #4
 8007462:	f47f af04 	bne.w	800726e <Menu+0xe>
			OLED_Clear();//OLED를 지웁니다.
 8007466:	f7fe f955 	bl	8005714 <OLED_Clear>
			menuList[idx].function();
 800746a:	79fa      	ldrb	r2, [r7, #7]
 800746c:	4924      	ldr	r1, [pc, #144]	; (8007500 <Menu+0x2a0>)
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4798      	blx	r3
			OLED_Clear();//OLED를 지웁니다.
 800747c:	f7fe f94a 	bl	8005714 <OLED_Clear>
			OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt, 0xFFFF00);
 8007480:	2305      	movs	r3, #5
 8007482:	461a      	mov	r2, r3
 8007484:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <Menu+0x2a4>)
 8007486:	9301      	str	r3, [sp, #4]
 8007488:	9200      	str	r2, [sp, #0]
 800748a:	4b1d      	ldr	r3, [pc, #116]	; (8007500 <Menu+0x2a0>)
 800748c:	2200      	movs	r2, #0
 800748e:	491e      	ldr	r1, [pc, #120]	; (8007508 <Menu+0x2a8>)
 8007490:	481e      	ldr	r0, [pc, #120]	; (800750c <Menu+0x2ac>)
 8007492:	f7fe ff9d 	bl	80063d0 <OLED_MenuUI>
			OLED_Cursor(idx % 6, 0xFF0000);
 8007496:	79fa      	ldrb	r2, [r7, #7]
 8007498:	4b18      	ldr	r3, [pc, #96]	; (80074fc <Menu+0x29c>)
 800749a:	fba3 1302 	umull	r1, r3, r3, r2
 800749e:	0899      	lsrs	r1, r3, #2
 80074a0:	460b      	mov	r3, r1
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	440b      	add	r3, r1
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe ffd9 	bl	8006468 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	4911      	ldr	r1, [pc, #68]	; (8007500 <Menu+0x2a0>)
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	440b      	add	r3, r1
 80074c4:	3308      	adds	r3, #8
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	0a1b      	lsrs	r3, r3, #8
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80074d4:	b298      	uxth	r0, r3
 80074d6:	79fa      	ldrb	r2, [r7, #7]
 80074d8:	4909      	ldr	r1, [pc, #36]	; (8007500 <Menu+0x2a0>)
 80074da:	4613      	mov	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	3308      	adds	r3, #8
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4619      	mov	r1, r3
 80074f4:	f7ff f838 	bl	8006568 <Switch_LED>
	for(;;){
 80074f8:	e6b9      	b.n	800726e <Menu+0xe>
 80074fa:	bf00      	nop
 80074fc:	aaaaaaab 	.word	0xaaaaaaab
 8007500:	2000022c 	.word	0x2000022c
 8007504:	00ffff00 	.word	0x00ffff00
 8007508:	00ff8800 	.word	0x00ff8800
 800750c:	0800ac30 	.word	0x0800ac30

08007510 <test>:
		{NULL, "HD    : OFF", COLOR_RED},
		{NULL, "FAN   : OFF", COLOR_RED},
};

//출력 단자가 잘 동작하는지 테스트합니다.
void test(){
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af02      	add	r7, sp, #8
	uint8_t idx = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	71fb      	strb	r3, [r7, #7]
	OLED_MenuUI("TEST", 0xFF00FF, 0x000000, testList, 6, 0x6600FF);
 800751a:	4bb9      	ldr	r3, [pc, #740]	; (8007800 <test+0x2f0>)
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	2306      	movs	r3, #6
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	4bb8      	ldr	r3, [pc, #736]	; (8007804 <test+0x2f4>)
 8007524:	2200      	movs	r2, #0
 8007526:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
 800752a:	48b7      	ldr	r0, [pc, #732]	; (8007808 <test+0x2f8>)
 800752c:	f7fe ff50 	bl	80063d0 <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8007530:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007534:	2000      	movs	r0, #0
 8007536:	f7fe ff97 	bl	8006468 <OLED_Cursor>
	SwitchLED(testList[0].color);
 800753a:	4bb2      	ldr	r3, [pc, #712]	; (8007804 <test+0x2f4>)
 800753c:	891b      	ldrh	r3, [r3, #8]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	b29b      	uxth	r3, r3
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	b29b      	uxth	r3, r3
 8007546:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800754a:	b29a      	uxth	r2, r3
 800754c:	4bad      	ldr	r3, [pc, #692]	; (8007804 <test+0x2f4>)
 800754e:	891b      	ldrh	r3, [r3, #8]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	b29b      	uxth	r3, r3
 8007554:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007558:	b29b      	uxth	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	4610      	mov	r0, r2
 800755e:	f7ff f803 	bl	8006568 <Switch_LED>
	testList[0].color = COLOR_RED;
 8007562:	4ba8      	ldr	r3, [pc, #672]	; (8007804 <test+0x2f4>)
 8007564:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007568:	811a      	strh	r2, [r3, #8]
	testList[1].color = COLOR_RED;
 800756a:	4ba6      	ldr	r3, [pc, #664]	; (8007804 <test+0x2f4>)
 800756c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007570:	829a      	strh	r2, [r3, #20]
	testList[2].color = COLOR_RED;
 8007572:	4ba4      	ldr	r3, [pc, #656]	; (8007804 <test+0x2f4>)
 8007574:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007578:	841a      	strh	r2, [r3, #32]
	testList[3].color = COLOR_RED;
 800757a:	4ba2      	ldr	r3, [pc, #648]	; (8007804 <test+0x2f4>)
 800757c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007580:	859a      	strh	r2, [r3, #44]	; 0x2c
	testList[4].color = COLOR_RED;
 8007582:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <test+0x2f4>)
 8007584:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007588:	871a      	strh	r2, [r3, #56]	; 0x38
	testList[5].color = COLOR_RED;
 800758a:	4b9e      	ldr	r3, [pc, #632]	; (8007804 <test+0x2f4>)
 800758c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	for(;;){
		uint16_t sw = Switch_Read();
 8007594:	f7ff f8be 	bl	8006714 <Switch_Read>
 8007598:	4603      	mov	r3, r0
 800759a:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 800759c:	88bb      	ldrh	r3, [r7, #4]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d002      	beq.n	80075a8 <test+0x98>
 80075a2:	88bb      	ldrh	r3, [r7, #4]
 80075a4:	2b22      	cmp	r3, #34	; 0x22
 80075a6:	d135      	bne.n	8007614 <test+0x104>
			idx+=5;
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	3305      	adds	r3, #5
 80075ac:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 80075ae:	79fa      	ldrb	r2, [r7, #7]
 80075b0:	4b96      	ldr	r3, [pc, #600]	; (800780c <test+0x2fc>)
 80075b2:	fba3 1302 	umull	r1, r3, r3, r2
 80075b6:	0899      	lsrs	r1, r3, #2
 80075b8:	460b      	mov	r3, r1
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	440b      	add	r3, r1
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe ff4c 	bl	8006468 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 80075d0:	79fa      	ldrb	r2, [r7, #7]
 80075d2:	498c      	ldr	r1, [pc, #560]	; (8007804 <test+0x2f4>)
 80075d4:	4613      	mov	r3, r2
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	3308      	adds	r3, #8
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80075ee:	b298      	uxth	r0, r3
 80075f0:	79fa      	ldrb	r2, [r7, #7]
 80075f2:	4984      	ldr	r1, [pc, #528]	; (8007804 <test+0x2f4>)
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	3308      	adds	r3, #8
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	b29b      	uxth	r3, r3
 8007606:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800760a:	b29b      	uxth	r3, r3
 800760c:	4619      	mov	r1, r3
 800760e:	f7fe ffab 	bl	8006568 <Switch_LED>
 8007612:	e152      	b.n	80078ba <test+0x3aa>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8007614:	88bb      	ldrh	r3, [r7, #4]
 8007616:	2b08      	cmp	r3, #8
 8007618:	d002      	beq.n	8007620 <test+0x110>
 800761a:	88bb      	ldrh	r3, [r7, #4]
 800761c:	2b28      	cmp	r3, #40	; 0x28
 800761e:	d135      	bne.n	800768c <test+0x17c>
			idx+=1;
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	3301      	adds	r3, #1
 8007624:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 8007626:	79fa      	ldrb	r2, [r7, #7]
 8007628:	4b78      	ldr	r3, [pc, #480]	; (800780c <test+0x2fc>)
 800762a:	fba3 1302 	umull	r1, r3, r3, r2
 800762e:	0899      	lsrs	r1, r3, #2
 8007630:	460b      	mov	r3, r1
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	440b      	add	r3, r1
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe ff10 	bl	8006468 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 8007648:	79fa      	ldrb	r2, [r7, #7]
 800764a:	496e      	ldr	r1, [pc, #440]	; (8007804 <test+0x2f4>)
 800764c:	4613      	mov	r3, r2
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	3308      	adds	r3, #8
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	0a1b      	lsrs	r3, r3, #8
 800765c:	b29b      	uxth	r3, r3
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	b29b      	uxth	r3, r3
 8007662:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007666:	b298      	uxth	r0, r3
 8007668:	79fa      	ldrb	r2, [r7, #7]
 800766a:	4966      	ldr	r1, [pc, #408]	; (8007804 <test+0x2f4>)
 800766c:	4613      	mov	r3, r2
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	3308      	adds	r3, #8
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	b29b      	uxth	r3, r3
 800767e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007682:	b29b      	uxth	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	f7fe ff6f 	bl	8006568 <Switch_LED>
 800768a:	e116      	b.n	80078ba <test+0x3aa>
		}
		else if(sw == SW_ENTER){
 800768c:	88bb      	ldrh	r3, [r7, #4]
 800768e:	2b04      	cmp	r3, #4
 8007690:	f000 8114 	beq.w	80078bc <test+0x3ac>
			break;
		}
		else if(sw == SW_LEFT || sw == SW_RIGHT){
 8007694:	88bb      	ldrh	r3, [r7, #4]
 8007696:	2b10      	cmp	r3, #16
 8007698:	d003      	beq.n	80076a2 <test+0x192>
 800769a:	88bb      	ldrh	r3, [r7, #4]
 800769c:	2b01      	cmp	r3, #1
 800769e:	f47f af79 	bne.w	8007594 <test+0x84>
			if(testList[idx].color == COLOR_RED){
 80076a2:	79fa      	ldrb	r2, [r7, #7]
 80076a4:	4957      	ldr	r1, [pc, #348]	; (8007804 <test+0x2f4>)
 80076a6:	4613      	mov	r3, r2
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	3308      	adds	r3, #8
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80076b8:	d159      	bne.n	800776e <test+0x25e>
				testList[idx].color = COLOR_WHITE;
 80076ba:	79fa      	ldrb	r2, [r7, #7]
 80076bc:	4951      	ldr	r1, [pc, #324]	; (8007804 <test+0x2f4>)
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	3308      	adds	r3, #8
 80076ca:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 80076ce:	801a      	strh	r2, [r3, #0]
				switch(idx){
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	f200 80d0 	bhi.w	8007878 <test+0x368>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <test+0x1d0>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	080076f9 	.word	0x080076f9
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	08007721 	.word	0x08007721
 80076ec:	08007735 	.word	0x08007735
 80076f0:	08007749 	.word	0x08007749
 80076f4:	0800775b 	.word	0x0800775b
				case 0:
					// Convection Fan
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 80076f8:	2200      	movs	r2, #0
 80076fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <test+0x300>)
 8007700:	f7fa fdce 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: ON ");
 8007704:	4843      	ldr	r0, [pc, #268]	; (8007814 <test+0x304>)
 8007706:	f7fe fa63 	bl	8005bd0 <OLED_Printf>
					break;
 800770a:	e0b5      	b.n	8007878 <test+0x368>
				case 1:
					// Rotisserie Motor
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 800770c:	2200      	movs	r2, #0
 800770e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007712:	483f      	ldr	r0, [pc, #252]	; (8007810 <test+0x300>)
 8007714:	f7fa fdc4 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: ON ");
 8007718:	483f      	ldr	r0, [pc, #252]	; (8007818 <test+0x308>)
 800771a:	f7fe fa59 	bl	8005bd0 <OLED_Printf>
					break;
 800771e:	e0ab      	b.n	8007878 <test+0x368>
				case 2:
					// Lamp
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 0);
 8007720:	2200      	movs	r2, #0
 8007722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007726:	483a      	ldr	r0, [pc, #232]	; (8007810 <test+0x300>)
 8007728:	f7fa fdba 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : ON ");
 800772c:	483b      	ldr	r0, [pc, #236]	; (800781c <test+0x30c>)
 800772e:	f7fe fa4f 	bl	8005bd0 <OLED_Printf>
					break;
 8007732:	e0a1      	b.n	8007878 <test+0x368>
				case 3:
					// Heater Top
					HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 0);
 8007734:	2200      	movs	r2, #0
 8007736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800773a:	4839      	ldr	r0, [pc, #228]	; (8007820 <test+0x310>)
 800773c:	f7fa fdb0 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : ON ");
 8007740:	4838      	ldr	r0, [pc, #224]	; (8007824 <test+0x314>)
 8007742:	f7fe fa45 	bl	8005bd0 <OLED_Printf>
					break;
 8007746:	e097      	b.n	8007878 <test+0x368>
				case 4:
					// Heater Bottom
					HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 0);
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	4834      	ldr	r0, [pc, #208]	; (8007820 <test+0x310>)
 800774e:	f7fa fda7 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : ON ");
 8007752:	4835      	ldr	r0, [pc, #212]	; (8007828 <test+0x318>)
 8007754:	f7fe fa3c 	bl	8005bd0 <OLED_Printf>
					break;
 8007758:	e08e      	b.n	8007878 <test+0x368>
				case 5:
					// Mainboard Fan
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 1);
 800775a:	2201      	movs	r2, #1
 800775c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007760:	482f      	ldr	r0, [pc, #188]	; (8007820 <test+0x310>)
 8007762:	f7fa fd9d 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : ON ");
 8007766:	4831      	ldr	r0, [pc, #196]	; (800782c <test+0x31c>)
 8007768:	f7fe fa32 	bl	8005bd0 <OLED_Printf>
					break;
 800776c:	e084      	b.n	8007878 <test+0x368>
				}
			}
			else if(testList[idx].color == COLOR_WHITE){
 800776e:	79fa      	ldrb	r2, [r7, #7]
 8007770:	4924      	ldr	r1, [pc, #144]	; (8007804 <test+0x2f4>)
 8007772:	4613      	mov	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	3308      	adds	r3, #8
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8007784:	4293      	cmp	r3, r2
 8007786:	d176      	bne.n	8007876 <test+0x366>
				testList[idx].color = COLOR_RED;
 8007788:	79fa      	ldrb	r2, [r7, #7]
 800778a:	491e      	ldr	r1, [pc, #120]	; (8007804 <test+0x2f4>)
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3308      	adds	r3, #8
 8007798:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800779c:	801a      	strh	r2, [r3, #0]
				switch(idx){
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d869      	bhi.n	8007878 <test+0x368>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <test+0x29c>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077c5 	.word	0x080077c5
 80077b0:	080077d9 	.word	0x080077d9
 80077b4:	080077ed 	.word	0x080077ed
 80077b8:	0800783d 	.word	0x0800783d
 80077bc:	08007851 	.word	0x08007851
 80077c0:	08007863 	.word	0x08007863
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80077c4:	2201      	movs	r2, #1
 80077c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077ca:	4811      	ldr	r0, [pc, #68]	; (8007810 <test+0x300>)
 80077cc:	f7fa fd68 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: OFF");
 80077d0:	4817      	ldr	r0, [pc, #92]	; (8007830 <test+0x320>)
 80077d2:	f7fe f9fd 	bl	8005bd0 <OLED_Printf>
					break;
 80077d6:	e04f      	b.n	8007878 <test+0x368>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 80077d8:	2201      	movs	r2, #1
 80077da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077de:	480c      	ldr	r0, [pc, #48]	; (8007810 <test+0x300>)
 80077e0:	f7fa fd5e 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: OFF");
 80077e4:	4813      	ldr	r0, [pc, #76]	; (8007834 <test+0x324>)
 80077e6:	f7fe f9f3 	bl	8005bd0 <OLED_Printf>
					break;
 80077ea:	e045      	b.n	8007878 <test+0x368>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 80077ec:	2201      	movs	r2, #1
 80077ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80077f2:	4807      	ldr	r0, [pc, #28]	; (8007810 <test+0x300>)
 80077f4:	f7fa fd54 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : OFF");
 80077f8:	480f      	ldr	r0, [pc, #60]	; (8007838 <test+0x328>)
 80077fa:	f7fe f9e9 	bl	8005bd0 <OLED_Printf>
					break;
 80077fe:	e03b      	b.n	8007878 <test+0x368>
 8007800:	006600ff 	.word	0x006600ff
 8007804:	20000268 	.word	0x20000268
 8007808:	0800ac84 	.word	0x0800ac84
 800780c:	aaaaaaab 	.word	0xaaaaaaab
 8007810:	40020000 	.word	0x40020000
 8007814:	0800ac8c 	.word	0x0800ac8c
 8007818:	0800ac9c 	.word	0x0800ac9c
 800781c:	0800acac 	.word	0x0800acac
 8007820:	40020800 	.word	0x40020800
 8007824:	0800acbc 	.word	0x0800acbc
 8007828:	0800accc 	.word	0x0800accc
 800782c:	0800acdc 	.word	0x0800acdc
 8007830:	0800acec 	.word	0x0800acec
 8007834:	0800acfc 	.word	0x0800acfc
 8007838:	0800ad0c 	.word	0x0800ad0c
				case 3:
					HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 1);
 800783c:	2201      	movs	r2, #1
 800783e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007842:	4832      	ldr	r0, [pc, #200]	; (800790c <test+0x3fc>)
 8007844:	f7fa fd2c 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : OFF");
 8007848:	4831      	ldr	r0, [pc, #196]	; (8007910 <test+0x400>)
 800784a:	f7fe f9c1 	bl	8005bd0 <OLED_Printf>
					break;
 800784e:	e013      	b.n	8007878 <test+0x368>
				case 4:
					HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 1);
 8007850:	2201      	movs	r2, #1
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	482d      	ldr	r0, [pc, #180]	; (800790c <test+0x3fc>)
 8007856:	f7fa fd23 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : OFF");
 800785a:	482e      	ldr	r0, [pc, #184]	; (8007914 <test+0x404>)
 800785c:	f7fe f9b8 	bl	8005bd0 <OLED_Printf>
					break;
 8007860:	e00a      	b.n	8007878 <test+0x368>
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 8007862:	2200      	movs	r2, #0
 8007864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007868:	4828      	ldr	r0, [pc, #160]	; (800790c <test+0x3fc>)
 800786a:	f7fa fd19 	bl	80022a0 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : OFF");
 800786e:	482a      	ldr	r0, [pc, #168]	; (8007918 <test+0x408>)
 8007870:	f7fe f9ae 	bl	8005bd0 <OLED_Printf>
					break;
 8007874:	e000      	b.n	8007878 <test+0x368>
				}
			}
 8007876:	bf00      	nop

			SwitchLED(testList[idx].color);
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	4928      	ldr	r1, [pc, #160]	; (800791c <test+0x40c>)
 800787c:	4613      	mov	r3, r2
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	440b      	add	r3, r1
 8007886:	3308      	adds	r3, #8
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	0a1b      	lsrs	r3, r3, #8
 800788c:	b29b      	uxth	r3, r3
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	b29b      	uxth	r3, r3
 8007892:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007896:	b298      	uxth	r0, r3
 8007898:	79fa      	ldrb	r2, [r7, #7]
 800789a:	4920      	ldr	r1, [pc, #128]	; (800791c <test+0x40c>)
 800789c:	4613      	mov	r3, r2
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	440b      	add	r3, r1
 80078a6:	3308      	adds	r3, #8
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	4619      	mov	r1, r3
 80078b6:	f7fe fe57 	bl	8006568 <Switch_LED>
	for(;;){
 80078ba:	e66b      	b.n	8007594 <test+0x84>
			break;
 80078bc:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80078be:	2201      	movs	r2, #1
 80078c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078c4:	4816      	ldr	r0, [pc, #88]	; (8007920 <test+0x410>)
 80078c6:	f7fa fceb 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 80078ca:	2201      	movs	r2, #1
 80078cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078d0:	4813      	ldr	r0, [pc, #76]	; (8007920 <test+0x410>)
 80078d2:	f7fa fce5 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 80078d6:	2201      	movs	r2, #1
 80078d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078dc:	4810      	ldr	r0, [pc, #64]	; (8007920 <test+0x410>)
 80078de:	f7fa fcdf 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 1);
 80078e2:	2201      	movs	r2, #1
 80078e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078e8:	4808      	ldr	r0, [pc, #32]	; (800790c <test+0x3fc>)
 80078ea:	f7fa fcd9 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 1);
 80078ee:	2201      	movs	r2, #1
 80078f0:	2180      	movs	r1, #128	; 0x80
 80078f2:	4806      	ldr	r0, [pc, #24]	; (800790c <test+0x3fc>)
 80078f4:	f7fa fcd4 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 80078f8:	2200      	movs	r2, #0
 80078fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078fe:	4803      	ldr	r0, [pc, #12]	; (800790c <test+0x3fc>)
 8007900:	f7fa fcce 	bl	80022a0 <HAL_GPIO_WritePin>

}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40020800 	.word	0x40020800
 8007910:	0800ad1c 	.word	0x0800ad1c
 8007914:	0800ad2c 	.word	0x0800ad2c
 8007918:	0800ad3c 	.word	0x0800ad3c
 800791c:	20000268 	.word	0x20000268
 8007920:	40020000 	.word	0x40020000

08007924 <testHeat>:
};

// FLAG_TEMPSENSOR_DEBUG가 설정되면 온도를 직접 제어할 수 있음.
// 디버깅을 위한 state to string 저장소
char *heaterStateStr[] = {"OFF", "PREHEATING", "TRANSIENT", "STEADY"};
void testHeat(){
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af02      	add	r7, sp, #8
	SwitchLED(COLOR_SKY);
 800792a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800792e:	20d4      	movs	r0, #212	; 0xd4
 8007930:	f7fe fe1a 	bl	8006568 <Switch_LED>
	OLED_MenuUI("TEST HEAT", 0xFF0000, 0x000000, testHeatList, 4, 0xFFFF00);
 8007934:	4b97      	ldr	r3, [pc, #604]	; (8007b94 <testHeat+0x270>)
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	2304      	movs	r3, #4
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4b96      	ldr	r3, [pc, #600]	; (8007b98 <testHeat+0x274>)
 800793e:	2200      	movs	r2, #0
 8007940:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007944:	4895      	ldr	r0, [pc, #596]	; (8007b9c <testHeat+0x278>)
 8007946:	f7fe fd43 	bl	80063d0 <OLED_MenuUI>
	OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 800794a:	4b95      	ldr	r3, [pc, #596]	; (8007ba0 <testHeat+0x27c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	4618      	mov	r0, r3
 8007952:	f7f8 fe01 	bl	8000558 <__aeabi_f2d>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4892      	ldr	r0, [pc, #584]	; (8007ba4 <testHeat+0x280>)
 800795c:	f7fe f938 	bl	8005bd0 <OLED_Printf>
	OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 8007960:	4b91      	ldr	r3, [pc, #580]	; (8007ba8 <testHeat+0x284>)
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <testHeat+0x4c>
 800796c:	4b8f      	ldr	r3, [pc, #572]	; (8007bac <testHeat+0x288>)
 800796e:	e000      	b.n	8007972 <testHeat+0x4e>
 8007970:	4b8f      	ldr	r3, [pc, #572]	; (8007bb0 <testHeat+0x28c>)
 8007972:	4619      	mov	r1, r3
 8007974:	488f      	ldr	r0, [pc, #572]	; (8007bb4 <testHeat+0x290>)
 8007976:	f7fe f92b 	bl	8005bd0 <OLED_Printf>
	OLED_Cursor(0, 0xFF6600);
 800797a:	498f      	ldr	r1, [pc, #572]	; (8007bb8 <testHeat+0x294>)
 800797c:	2000      	movs	r0, #0
 800797e:	f7fe fd73 	bl	8006468 <OLED_Cursor>
	int idx = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
	heaterTop->start(heaterTop);
 8007986:	4b86      	ldr	r3, [pc, #536]	; (8007ba0 <testHeat+0x27c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	4a84      	ldr	r2, [pc, #528]	; (8007ba0 <testHeat+0x27c>)
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);	// Convection 팬 끄기
 8007994:	2201      	movs	r2, #1
 8007996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800799a:	4883      	ldr	r0, [pc, #524]	; (8007ba8 <testHeat+0x284>)
 800799c:	f7fa fc80 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_SET);	// 냉각팬 켜기
 80079a0:	2201      	movs	r2, #1
 80079a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079a6:	4885      	ldr	r0, [pc, #532]	; (8007bbc <testHeat+0x298>)
 80079a8:	f7fa fc7a 	bl	80022a0 <HAL_GPIO_WritePin>
	uint32_t pTime = HAL_GetTick();
 80079ac:	f7fa f99a 	bl	8001ce4 <HAL_GetTick>
 80079b0:	60b8      	str	r0, [r7, #8]
	for(;;){
		uint16_t sw = Switch_Read();
 80079b2:	f7fe feaf 	bl	8006714 <Switch_Read>
 80079b6:	4603      	mov	r3, r0
 80079b8:	80fb      	strh	r3, [r7, #6]

		if(sw==SW_ENTER) break;
 80079ba:	88fb      	ldrh	r3, [r7, #6]
 80079bc:	2b04      	cmp	r3, #4
 80079be:	f000 80dc 	beq.w	8007b7a <testHeat+0x256>
		else if (sw==SW_TOP) {
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d110      	bne.n	80079ea <testHeat+0xc6>
			idx -= (idx>0)?1:0;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfcc      	ite	gt
 80079ce:	2301      	movgt	r3, #1
 80079d0:	2300      	movle	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
			OLED_Cursor(idx, 0xFF6600);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	4975      	ldr	r1, [pc, #468]	; (8007bb8 <testHeat+0x294>)
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fd40 	bl	8006468 <OLED_Cursor>
 80079e8:	e087      	b.n	8007afa <testHeat+0x1d6>
		}
		else if (sw==SW_BOTTOM) {
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d110      	bne.n	8007a12 <testHeat+0xee>
			idx += (idx<2)?1:0;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	bfd4      	ite	le
 80079f6:	2301      	movle	r3, #1
 80079f8:	2300      	movgt	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
			OLED_Cursor(idx, 0xFF6600);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	496b      	ldr	r1, [pc, #428]	; (8007bb8 <testHeat+0x294>)
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fd2c 	bl	8006468 <OLED_Cursor>
 8007a10:	e073      	b.n	8007afa <testHeat+0x1d6>
		}
		else if (sw==SW_RIGHT || sw==SW_RIGHT_LONG) {
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d002      	beq.n	8007a1e <testHeat+0xfa>
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	2b21      	cmp	r3, #33	; 0x21
 8007a1c:	d133      	bne.n	8007a86 <testHeat+0x162>
			switch(idx) {
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d003      	beq.n	8007a2c <testHeat+0x108>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d018      	beq.n	8007a5c <testHeat+0x138>
 8007a2a:	e066      	b.n	8007afa <testHeat+0x1d6>
			case 0:
				tempTop->lastTemp += 10.0f;
				break;
#endif
			case 1:
				heaterTop->target += 1.0f;
 8007a2c:	4b5c      	ldr	r3, [pc, #368]	; (8007ba0 <testHeat+0x27c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8007a34:	4b5a      	ldr	r3, [pc, #360]	; (8007ba0 <testHeat+0x27c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a40:	edc3 7a04 	vstr	s15, [r3, #16]
				OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 8007a44:	4b56      	ldr	r3, [pc, #344]	; (8007ba0 <testHeat+0x27c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7f8 fd84 	bl	8000558 <__aeabi_f2d>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4853      	ldr	r0, [pc, #332]	; (8007ba4 <testHeat+0x280>)
 8007a56:	f7fe f8bb 	bl	8005bd0 <OLED_Printf>
				break;
 8007a5a:	e013      	b.n	8007a84 <testHeat+0x160>
			case 2:
				HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_RESET);
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a62:	4851      	ldr	r0, [pc, #324]	; (8007ba8 <testHeat+0x284>)
 8007a64:	f7fa fc1c 	bl	80022a0 <HAL_GPIO_WritePin>
				OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 8007a68:	4b4f      	ldr	r3, [pc, #316]	; (8007ba8 <testHeat+0x284>)
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <testHeat+0x154>
 8007a74:	4b4d      	ldr	r3, [pc, #308]	; (8007bac <testHeat+0x288>)
 8007a76:	e000      	b.n	8007a7a <testHeat+0x156>
 8007a78:	4b4d      	ldr	r3, [pc, #308]	; (8007bb0 <testHeat+0x28c>)
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	484d      	ldr	r0, [pc, #308]	; (8007bb4 <testHeat+0x290>)
 8007a7e:	f7fe f8a7 	bl	8005bd0 <OLED_Printf>
				break;
 8007a82:	bf00      	nop
			switch(idx) {
 8007a84:	e039      	b.n	8007afa <testHeat+0x1d6>
			}
		}
		else if (sw==SW_LEFT || sw==SW_LEFT_LONG) {
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d002      	beq.n	8007a92 <testHeat+0x16e>
 8007a8c:	88fb      	ldrh	r3, [r7, #6]
 8007a8e:	2b30      	cmp	r3, #48	; 0x30
 8007a90:	d132      	bne.n	8007af8 <testHeat+0x1d4>
			switch(idx) {
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d003      	beq.n	8007aa0 <testHeat+0x17c>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d018      	beq.n	8007ad0 <testHeat+0x1ac>
 8007a9e:	e02c      	b.n	8007afa <testHeat+0x1d6>
			case 0:
				tempTop->lastTemp -= 10.0f;
				break;
#endif
			case 1:
				heaterTop->target -= 1.0f;
 8007aa0:	4b3f      	ldr	r3, [pc, #252]	; (8007ba0 <testHeat+0x27c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8007aa8:	4b3d      	ldr	r3, [pc, #244]	; (8007ba0 <testHeat+0x27c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ab4:	edc3 7a04 	vstr	s15, [r3, #16]
				OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <testHeat+0x27c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7f8 fd4a 	bl	8000558 <__aeabi_f2d>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4836      	ldr	r0, [pc, #216]	; (8007ba4 <testHeat+0x280>)
 8007aca:	f7fe f881 	bl	8005bd0 <OLED_Printf>
				break;
 8007ace:	e014      	b.n	8007afa <testHeat+0x1d6>
			case 2:
				HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ad6:	4834      	ldr	r0, [pc, #208]	; (8007ba8 <testHeat+0x284>)
 8007ad8:	f7fa fbe2 	bl	80022a0 <HAL_GPIO_WritePin>
				OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 8007adc:	4b32      	ldr	r3, [pc, #200]	; (8007ba8 <testHeat+0x284>)
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <testHeat+0x1c8>
 8007ae8:	4b30      	ldr	r3, [pc, #192]	; (8007bac <testHeat+0x288>)
 8007aea:	e000      	b.n	8007aee <testHeat+0x1ca>
 8007aec:	4b30      	ldr	r3, [pc, #192]	; (8007bb0 <testHeat+0x28c>)
 8007aee:	4619      	mov	r1, r3
 8007af0:	4830      	ldr	r0, [pc, #192]	; (8007bb4 <testHeat+0x290>)
 8007af2:	f7fe f86d 	bl	8005bd0 <OLED_Printf>
				break;
 8007af6:	e000      	b.n	8007afa <testHeat+0x1d6>
			}
		}
 8007af8:	bf00      	nop
		float temp = tempTop->read(tempTop);
 8007afa:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <testHeat+0x29c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	4a2f      	ldr	r2, [pc, #188]	; (8007bc0 <testHeat+0x29c>)
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
 8007b08:	ed87 0a00 	vstr	s0, [r7]
		if(HAL_GetTick() - pTime > 50){
 8007b0c:	f7fa f8ea 	bl	8001ce4 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b32      	cmp	r3, #50	; 0x32
 8007b18:	d906      	bls.n	8007b28 <testHeat+0x204>
			pTime += 50;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3332      	adds	r3, #50	; 0x32
 8007b1e:	60bb      	str	r3, [r7, #8]
			Switch_LED_Temperature(temp);
 8007b20:	ed97 0a00 	vldr	s0, [r7]
 8007b24:	f7fe fd38 	bl	8006598 <Switch_LED_Temperature>
		}
		OLED_Printf("/s$19/y%3.2f  \r\n", temp);
 8007b28:	6838      	ldr	r0, [r7, #0]
 8007b2a:	f7f8 fd15 	bl	8000558 <__aeabi_f2d>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4824      	ldr	r0, [pc, #144]	; (8007bc4 <testHeat+0x2a0>)
 8007b34:	f7fe f84c 	bl	8005bd0 <OLED_Printf>
		OLED_Printf("/s$49/p%3.2f  \r\n", heaterTop->duty);
 8007b38:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <testHeat+0x27c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7f8 fd0a 	bl	8000558 <__aeabi_f2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	481f      	ldr	r0, [pc, #124]	; (8007bc8 <testHeat+0x2a4>)
 8007b4a:	f7fe f841 	bl	8005bd0 <OLED_Printf>
		OLED_Printf("/s$59/p%s     \r\n", heaterStateStr[heaterTop->state]);
 8007b4e:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <testHeat+0x27c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <testHeat+0x2a8>)
 8007b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	481c      	ldr	r0, [pc, #112]	; (8007bd0 <testHeat+0x2ac>)
 8007b5e:	f7fe f837 	bl	8005bd0 <OLED_Printf>
		OLED_Printf("/s$69/p%3.2f  \r\n", heaterTop->errorSum);
 8007b62:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <testHeat+0x27c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7f8 fcf5 	bl	8000558 <__aeabi_f2d>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4818      	ldr	r0, [pc, #96]	; (8007bd4 <testHeat+0x2b0>)
 8007b74:	f7fe f82c 	bl	8005bd0 <OLED_Printf>
	for(;;){
 8007b78:	e71b      	b.n	80079b2 <testHeat+0x8e>
		if(sw==SW_ENTER) break;
 8007b7a:	bf00      	nop
	}
	heaterTop->stop(heaterTop);
 8007b7c:	4b08      	ldr	r3, [pc, #32]	; (8007ba0 <testHeat+0x27c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	4a07      	ldr	r2, [pc, #28]	; (8007ba0 <testHeat+0x27c>)
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	4610      	mov	r0, r2
 8007b88:	4798      	blx	r3
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	00ffff00 	.word	0x00ffff00
 8007b98:	200002b0 	.word	0x200002b0
 8007b9c:	0800add0 	.word	0x0800add0
 8007ba0:	2000070c 	.word	0x2000070c
 8007ba4:	0800addc 	.word	0x0800addc
 8007ba8:	40020000 	.word	0x40020000
 8007bac:	0800adac 	.word	0x0800adac
 8007bb0:	0800adf0 	.word	0x0800adf0
 8007bb4:	0800adf4 	.word	0x0800adf4
 8007bb8:	00ff6600 	.word	0x00ff6600
 8007bbc:	40020800 	.word	0x40020800
 8007bc0:	20000704 	.word	0x20000704
 8007bc4:	0800ae00 	.word	0x0800ae00
 8007bc8:	0800ae14 	.word	0x0800ae14
 8007bcc:	200002f8 	.word	0x200002f8
 8007bd0:	0800ae28 	.word	0x0800ae28
 8007bd4:	0800ae3c 	.word	0x0800ae3c

08007bd8 <calloc>:
 8007bd8:	4b02      	ldr	r3, [pc, #8]	; (8007be4 <calloc+0xc>)
 8007bda:	460a      	mov	r2, r1
 8007bdc:	4601      	mov	r1, r0
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	f000 b844 	b.w	8007c6c <_calloc_r>
 8007be4:	20000308 	.word	0x20000308

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	; (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000308 	.word	0x20000308

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4d0d      	ldr	r5, [pc, #52]	; (8007c2c <__libc_init_array+0x38>)
 8007bf8:	4c0d      	ldr	r4, [pc, #52]	; (8007c30 <__libc_init_array+0x3c>)
 8007bfa:	1b64      	subs	r4, r4, r5
 8007bfc:	10a4      	asrs	r4, r4, #2
 8007bfe:	2600      	movs	r6, #0
 8007c00:	42a6      	cmp	r6, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	4d0b      	ldr	r5, [pc, #44]	; (8007c34 <__libc_init_array+0x40>)
 8007c06:	4c0c      	ldr	r4, [pc, #48]	; (8007c38 <__libc_init_array+0x44>)
 8007c08:	f002 ff9a 	bl	800ab40 <_init>
 8007c0c:	1b64      	subs	r4, r4, r5
 8007c0e:	10a4      	asrs	r4, r4, #2
 8007c10:	2600      	movs	r6, #0
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1c:	4798      	blx	r3
 8007c1e:	3601      	adds	r6, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c26:	4798      	blx	r3
 8007c28:	3601      	adds	r6, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	0800b24c 	.word	0x0800b24c
 8007c30:	0800b24c 	.word	0x0800b24c
 8007c34:	0800b24c 	.word	0x0800b24c
 8007c38:	0800b250 	.word	0x0800b250

08007c3c <malloc>:
 8007c3c:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <malloc+0xc>)
 8007c3e:	4601      	mov	r1, r0
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	f000 b895 	b.w	8007d70 <_malloc_r>
 8007c46:	bf00      	nop
 8007c48:	20000308 	.word	0x20000308

08007c4c <free>:
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <free+0xc>)
 8007c4e:	4601      	mov	r1, r0
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f000 b821 	b.w	8007c98 <_free_r>
 8007c56:	bf00      	nop
 8007c58:	20000308 	.word	0x20000308

08007c5c <memset>:
 8007c5c:	4402      	add	r2, r0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d100      	bne.n	8007c66 <memset+0xa>
 8007c64:	4770      	bx	lr
 8007c66:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6a:	e7f9      	b.n	8007c60 <memset+0x4>

08007c6c <_calloc_r>:
 8007c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c6e:	fba1 2402 	umull	r2, r4, r1, r2
 8007c72:	b94c      	cbnz	r4, 8007c88 <_calloc_r+0x1c>
 8007c74:	4611      	mov	r1, r2
 8007c76:	9201      	str	r2, [sp, #4]
 8007c78:	f000 f87a 	bl	8007d70 <_malloc_r>
 8007c7c:	9a01      	ldr	r2, [sp, #4]
 8007c7e:	4605      	mov	r5, r0
 8007c80:	b930      	cbnz	r0, 8007c90 <_calloc_r+0x24>
 8007c82:	4628      	mov	r0, r5
 8007c84:	b003      	add	sp, #12
 8007c86:	bd30      	pop	{r4, r5, pc}
 8007c88:	220c      	movs	r2, #12
 8007c8a:	6002      	str	r2, [r0, #0]
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	e7f8      	b.n	8007c82 <_calloc_r+0x16>
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7ff ffe3 	bl	8007c5c <memset>
 8007c96:	e7f4      	b.n	8007c82 <_calloc_r+0x16>

08007c98 <_free_r>:
 8007c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	d044      	beq.n	8007d28 <_free_r+0x90>
 8007c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca2:	9001      	str	r0, [sp, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8007caa:	bfb8      	it	lt
 8007cac:	18e4      	addlt	r4, r4, r3
 8007cae:	f001 ff6b 	bl	8009b88 <__malloc_lock>
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	; (8007d2c <_free_r+0x94>)
 8007cb4:	9801      	ldr	r0, [sp, #4]
 8007cb6:	6813      	ldr	r3, [r2, #0]
 8007cb8:	b933      	cbnz	r3, 8007cc8 <_free_r+0x30>
 8007cba:	6063      	str	r3, [r4, #4]
 8007cbc:	6014      	str	r4, [r2, #0]
 8007cbe:	b003      	add	sp, #12
 8007cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cc4:	f001 bf66 	b.w	8009b94 <__malloc_unlock>
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	d908      	bls.n	8007cde <_free_r+0x46>
 8007ccc:	6825      	ldr	r5, [r4, #0]
 8007cce:	1961      	adds	r1, r4, r5
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf01      	itttt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	1949      	addeq	r1, r1, r5
 8007cda:	6021      	streq	r1, [r4, #0]
 8007cdc:	e7ed      	b.n	8007cba <_free_r+0x22>
 8007cde:	461a      	mov	r2, r3
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	b10b      	cbz	r3, 8007ce8 <_free_r+0x50>
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d9fa      	bls.n	8007cde <_free_r+0x46>
 8007ce8:	6811      	ldr	r1, [r2, #0]
 8007cea:	1855      	adds	r5, r2, r1
 8007cec:	42a5      	cmp	r5, r4
 8007cee:	d10b      	bne.n	8007d08 <_free_r+0x70>
 8007cf0:	6824      	ldr	r4, [r4, #0]
 8007cf2:	4421      	add	r1, r4
 8007cf4:	1854      	adds	r4, r2, r1
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	6011      	str	r1, [r2, #0]
 8007cfa:	d1e0      	bne.n	8007cbe <_free_r+0x26>
 8007cfc:	681c      	ldr	r4, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	6053      	str	r3, [r2, #4]
 8007d02:	4421      	add	r1, r4
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	e7da      	b.n	8007cbe <_free_r+0x26>
 8007d08:	d902      	bls.n	8007d10 <_free_r+0x78>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6003      	str	r3, [r0, #0]
 8007d0e:	e7d6      	b.n	8007cbe <_free_r+0x26>
 8007d10:	6825      	ldr	r5, [r4, #0]
 8007d12:	1961      	adds	r1, r4, r5
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf04      	itt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	bf04      	itt	eq
 8007d20:	1949      	addeq	r1, r1, r5
 8007d22:	6021      	streq	r1, [r4, #0]
 8007d24:	6054      	str	r4, [r2, #4]
 8007d26:	e7ca      	b.n	8007cbe <_free_r+0x26>
 8007d28:	b003      	add	sp, #12
 8007d2a:	bd30      	pop	{r4, r5, pc}
 8007d2c:	20000740 	.word	0x20000740

08007d30 <sbrk_aligned>:
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	4e0e      	ldr	r6, [pc, #56]	; (8007d6c <sbrk_aligned+0x3c>)
 8007d34:	460c      	mov	r4, r1
 8007d36:	6831      	ldr	r1, [r6, #0]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b911      	cbnz	r1, 8007d42 <sbrk_aligned+0x12>
 8007d3c:	f000 fd74 	bl	8008828 <_sbrk_r>
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 fd6f 	bl	8008828 <_sbrk_r>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d00a      	beq.n	8007d64 <sbrk_aligned+0x34>
 8007d4e:	1cc4      	adds	r4, r0, #3
 8007d50:	f024 0403 	bic.w	r4, r4, #3
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d007      	beq.n	8007d68 <sbrk_aligned+0x38>
 8007d58:	1a21      	subs	r1, r4, r0
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 fd64 	bl	8008828 <_sbrk_r>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d101      	bne.n	8007d68 <sbrk_aligned+0x38>
 8007d64:	f04f 34ff 	mov.w	r4, #4294967295
 8007d68:	4620      	mov	r0, r4
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	20000744 	.word	0x20000744

08007d70 <_malloc_r>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	1ccd      	adds	r5, r1, #3
 8007d76:	f025 0503 	bic.w	r5, r5, #3
 8007d7a:	3508      	adds	r5, #8
 8007d7c:	2d0c      	cmp	r5, #12
 8007d7e:	bf38      	it	cc
 8007d80:	250c      	movcc	r5, #12
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	4607      	mov	r7, r0
 8007d86:	db01      	blt.n	8007d8c <_malloc_r+0x1c>
 8007d88:	42a9      	cmp	r1, r5
 8007d8a:	d905      	bls.n	8007d98 <_malloc_r+0x28>
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	2600      	movs	r6, #0
 8007d92:	4630      	mov	r0, r6
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	4e2e      	ldr	r6, [pc, #184]	; (8007e54 <_malloc_r+0xe4>)
 8007d9a:	f001 fef5 	bl	8009b88 <__malloc_lock>
 8007d9e:	6833      	ldr	r3, [r6, #0]
 8007da0:	461c      	mov	r4, r3
 8007da2:	bb34      	cbnz	r4, 8007df2 <_malloc_r+0x82>
 8007da4:	4629      	mov	r1, r5
 8007da6:	4638      	mov	r0, r7
 8007da8:	f7ff ffc2 	bl	8007d30 <sbrk_aligned>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	4604      	mov	r4, r0
 8007db0:	d14d      	bne.n	8007e4e <_malloc_r+0xde>
 8007db2:	6834      	ldr	r4, [r6, #0]
 8007db4:	4626      	mov	r6, r4
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d140      	bne.n	8007e3c <_malloc_r+0xcc>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	eb04 0803 	add.w	r8, r4, r3
 8007dc4:	f000 fd30 	bl	8008828 <_sbrk_r>
 8007dc8:	4580      	cmp	r8, r0
 8007dca:	d13a      	bne.n	8007e42 <_malloc_r+0xd2>
 8007dcc:	6821      	ldr	r1, [r4, #0]
 8007dce:	3503      	adds	r5, #3
 8007dd0:	1a6d      	subs	r5, r5, r1
 8007dd2:	f025 0503 	bic.w	r5, r5, #3
 8007dd6:	3508      	adds	r5, #8
 8007dd8:	2d0c      	cmp	r5, #12
 8007dda:	bf38      	it	cc
 8007ddc:	250c      	movcc	r5, #12
 8007dde:	4629      	mov	r1, r5
 8007de0:	4638      	mov	r0, r7
 8007de2:	f7ff ffa5 	bl	8007d30 <sbrk_aligned>
 8007de6:	3001      	adds	r0, #1
 8007de8:	d02b      	beq.n	8007e42 <_malloc_r+0xd2>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	442b      	add	r3, r5
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	e00e      	b.n	8007e10 <_malloc_r+0xa0>
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	1b52      	subs	r2, r2, r5
 8007df6:	d41e      	bmi.n	8007e36 <_malloc_r+0xc6>
 8007df8:	2a0b      	cmp	r2, #11
 8007dfa:	d916      	bls.n	8007e2a <_malloc_r+0xba>
 8007dfc:	1961      	adds	r1, r4, r5
 8007dfe:	42a3      	cmp	r3, r4
 8007e00:	6025      	str	r5, [r4, #0]
 8007e02:	bf18      	it	ne
 8007e04:	6059      	strne	r1, [r3, #4]
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	bf08      	it	eq
 8007e0a:	6031      	streq	r1, [r6, #0]
 8007e0c:	5162      	str	r2, [r4, r5]
 8007e0e:	604b      	str	r3, [r1, #4]
 8007e10:	4638      	mov	r0, r7
 8007e12:	f104 060b 	add.w	r6, r4, #11
 8007e16:	f001 febd 	bl	8009b94 <__malloc_unlock>
 8007e1a:	f026 0607 	bic.w	r6, r6, #7
 8007e1e:	1d23      	adds	r3, r4, #4
 8007e20:	1af2      	subs	r2, r6, r3
 8007e22:	d0b6      	beq.n	8007d92 <_malloc_r+0x22>
 8007e24:	1b9b      	subs	r3, r3, r6
 8007e26:	50a3      	str	r3, [r4, r2]
 8007e28:	e7b3      	b.n	8007d92 <_malloc_r+0x22>
 8007e2a:	6862      	ldr	r2, [r4, #4]
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	bf0c      	ite	eq
 8007e30:	6032      	streq	r2, [r6, #0]
 8007e32:	605a      	strne	r2, [r3, #4]
 8007e34:	e7ec      	b.n	8007e10 <_malloc_r+0xa0>
 8007e36:	4623      	mov	r3, r4
 8007e38:	6864      	ldr	r4, [r4, #4]
 8007e3a:	e7b2      	b.n	8007da2 <_malloc_r+0x32>
 8007e3c:	4634      	mov	r4, r6
 8007e3e:	6876      	ldr	r6, [r6, #4]
 8007e40:	e7b9      	b.n	8007db6 <_malloc_r+0x46>
 8007e42:	230c      	movs	r3, #12
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	4638      	mov	r0, r7
 8007e48:	f001 fea4 	bl	8009b94 <__malloc_unlock>
 8007e4c:	e7a1      	b.n	8007d92 <_malloc_r+0x22>
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	e7de      	b.n	8007e10 <_malloc_r+0xa0>
 8007e52:	bf00      	nop
 8007e54:	20000740 	.word	0x20000740

08007e58 <__cvt>:
 8007e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	ec55 4b10 	vmov	r4, r5, d0
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	460e      	mov	r6, r1
 8007e64:	4619      	mov	r1, r3
 8007e66:	462b      	mov	r3, r5
 8007e68:	bfbb      	ittet	lt
 8007e6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e6e:	461d      	movlt	r5, r3
 8007e70:	2300      	movge	r3, #0
 8007e72:	232d      	movlt	r3, #45	; 0x2d
 8007e74:	700b      	strb	r3, [r1, #0]
 8007e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e7c:	4691      	mov	r9, r2
 8007e7e:	f023 0820 	bic.w	r8, r3, #32
 8007e82:	bfbc      	itt	lt
 8007e84:	4622      	movlt	r2, r4
 8007e86:	4614      	movlt	r4, r2
 8007e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e8c:	d005      	beq.n	8007e9a <__cvt+0x42>
 8007e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e92:	d100      	bne.n	8007e96 <__cvt+0x3e>
 8007e94:	3601      	adds	r6, #1
 8007e96:	2102      	movs	r1, #2
 8007e98:	e000      	b.n	8007e9c <__cvt+0x44>
 8007e9a:	2103      	movs	r1, #3
 8007e9c:	ab03      	add	r3, sp, #12
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	ab02      	add	r3, sp, #8
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	ec45 4b10 	vmov	d0, r4, r5
 8007ea8:	4653      	mov	r3, sl
 8007eaa:	4632      	mov	r2, r6
 8007eac:	f000 fe4c 	bl	8008b48 <_dtoa_r>
 8007eb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	d102      	bne.n	8007ebe <__cvt+0x66>
 8007eb8:	f019 0f01 	tst.w	r9, #1
 8007ebc:	d022      	beq.n	8007f04 <__cvt+0xac>
 8007ebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ec2:	eb07 0906 	add.w	r9, r7, r6
 8007ec6:	d110      	bne.n	8007eea <__cvt+0x92>
 8007ec8:	783b      	ldrb	r3, [r7, #0]
 8007eca:	2b30      	cmp	r3, #48	; 0x30
 8007ecc:	d10a      	bne.n	8007ee4 <__cvt+0x8c>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7f8 fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eda:	b918      	cbnz	r0, 8007ee4 <__cvt+0x8c>
 8007edc:	f1c6 0601 	rsb	r6, r6, #1
 8007ee0:	f8ca 6000 	str.w	r6, [sl]
 8007ee4:	f8da 3000 	ldr.w	r3, [sl]
 8007ee8:	4499      	add	r9, r3
 8007eea:	2200      	movs	r2, #0
 8007eec:	2300      	movs	r3, #0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ef6:	b108      	cbz	r0, 8007efc <__cvt+0xa4>
 8007ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007efc:	2230      	movs	r2, #48	; 0x30
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	454b      	cmp	r3, r9
 8007f02:	d307      	bcc.n	8007f14 <__cvt+0xbc>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f08:	1bdb      	subs	r3, r3, r7
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	b004      	add	sp, #16
 8007f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f14:	1c59      	adds	r1, r3, #1
 8007f16:	9103      	str	r1, [sp, #12]
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e7f0      	b.n	8007efe <__cvt+0xa6>

08007f1c <__exponent>:
 8007f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2900      	cmp	r1, #0
 8007f22:	bfb8      	it	lt
 8007f24:	4249      	neglt	r1, r1
 8007f26:	f803 2b02 	strb.w	r2, [r3], #2
 8007f2a:	bfb4      	ite	lt
 8007f2c:	222d      	movlt	r2, #45	; 0x2d
 8007f2e:	222b      	movge	r2, #43	; 0x2b
 8007f30:	2909      	cmp	r1, #9
 8007f32:	7042      	strb	r2, [r0, #1]
 8007f34:	dd2a      	ble.n	8007f8c <__exponent+0x70>
 8007f36:	f10d 0407 	add.w	r4, sp, #7
 8007f3a:	46a4      	mov	ip, r4
 8007f3c:	270a      	movs	r7, #10
 8007f3e:	46a6      	mov	lr, r4
 8007f40:	460a      	mov	r2, r1
 8007f42:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f46:	fb07 1516 	mls	r5, r7, r6, r1
 8007f4a:	3530      	adds	r5, #48	; 0x30
 8007f4c:	2a63      	cmp	r2, #99	; 0x63
 8007f4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f56:	4631      	mov	r1, r6
 8007f58:	dcf1      	bgt.n	8007f3e <__exponent+0x22>
 8007f5a:	3130      	adds	r1, #48	; 0x30
 8007f5c:	f1ae 0502 	sub.w	r5, lr, #2
 8007f60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f64:	1c44      	adds	r4, r0, #1
 8007f66:	4629      	mov	r1, r5
 8007f68:	4561      	cmp	r1, ip
 8007f6a:	d30a      	bcc.n	8007f82 <__exponent+0x66>
 8007f6c:	f10d 0209 	add.w	r2, sp, #9
 8007f70:	eba2 020e 	sub.w	r2, r2, lr
 8007f74:	4565      	cmp	r5, ip
 8007f76:	bf88      	it	hi
 8007f78:	2200      	movhi	r2, #0
 8007f7a:	4413      	add	r3, r2
 8007f7c:	1a18      	subs	r0, r3, r0
 8007f7e:	b003      	add	sp, #12
 8007f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f8a:	e7ed      	b.n	8007f68 <__exponent+0x4c>
 8007f8c:	2330      	movs	r3, #48	; 0x30
 8007f8e:	3130      	adds	r1, #48	; 0x30
 8007f90:	7083      	strb	r3, [r0, #2]
 8007f92:	70c1      	strb	r1, [r0, #3]
 8007f94:	1d03      	adds	r3, r0, #4
 8007f96:	e7f1      	b.n	8007f7c <__exponent+0x60>

08007f98 <_printf_float>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	ed2d 8b02 	vpush	{d8}
 8007fa0:	b08d      	sub	sp, #52	; 0x34
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007fa8:	4616      	mov	r6, r2
 8007faa:	461f      	mov	r7, r3
 8007fac:	4605      	mov	r5, r0
 8007fae:	f001 fd71 	bl	8009a94 <_localeconv_r>
 8007fb2:	f8d0 a000 	ldr.w	sl, [r0]
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	f7f8 f912 	bl	80001e0 <strlen>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007fcc:	3307      	adds	r3, #7
 8007fce:	f023 0307 	bic.w	r3, r3, #7
 8007fd2:	f103 0208 	add.w	r2, r3, #8
 8007fd6:	f8c8 2000 	str.w	r2, [r8]
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fe2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007fe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fea:	9307      	str	r3, [sp, #28]
 8007fec:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ff0:	ee08 0a10 	vmov	s16, r0
 8007ff4:	4b9f      	ldr	r3, [pc, #636]	; (8008274 <_printf_float+0x2dc>)
 8007ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	f7f8 fd9d 	bl	8000b3c <__aeabi_dcmpun>
 8008002:	bb88      	cbnz	r0, 8008068 <_printf_float+0xd0>
 8008004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008008:	4b9a      	ldr	r3, [pc, #616]	; (8008274 <_printf_float+0x2dc>)
 800800a:	f04f 32ff 	mov.w	r2, #4294967295
 800800e:	f7f8 fd77 	bl	8000b00 <__aeabi_dcmple>
 8008012:	bb48      	cbnz	r0, 8008068 <_printf_float+0xd0>
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	4640      	mov	r0, r8
 800801a:	4649      	mov	r1, r9
 800801c:	f7f8 fd66 	bl	8000aec <__aeabi_dcmplt>
 8008020:	b110      	cbz	r0, 8008028 <_printf_float+0x90>
 8008022:	232d      	movs	r3, #45	; 0x2d
 8008024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008028:	4b93      	ldr	r3, [pc, #588]	; (8008278 <_printf_float+0x2e0>)
 800802a:	4894      	ldr	r0, [pc, #592]	; (800827c <_printf_float+0x2e4>)
 800802c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008030:	bf94      	ite	ls
 8008032:	4698      	movls	r8, r3
 8008034:	4680      	movhi	r8, r0
 8008036:	2303      	movs	r3, #3
 8008038:	6123      	str	r3, [r4, #16]
 800803a:	9b05      	ldr	r3, [sp, #20]
 800803c:	f023 0204 	bic.w	r2, r3, #4
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	f04f 0900 	mov.w	r9, #0
 8008046:	9700      	str	r7, [sp, #0]
 8008048:	4633      	mov	r3, r6
 800804a:	aa0b      	add	r2, sp, #44	; 0x2c
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f000 f9d8 	bl	8008404 <_printf_common>
 8008054:	3001      	adds	r0, #1
 8008056:	f040 8090 	bne.w	800817a <_printf_float+0x1e2>
 800805a:	f04f 30ff 	mov.w	r0, #4294967295
 800805e:	b00d      	add	sp, #52	; 0x34
 8008060:	ecbd 8b02 	vpop	{d8}
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	f7f8 fd64 	bl	8000b3c <__aeabi_dcmpun>
 8008074:	b140      	cbz	r0, 8008088 <_printf_float+0xf0>
 8008076:	464b      	mov	r3, r9
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfbc      	itt	lt
 800807c:	232d      	movlt	r3, #45	; 0x2d
 800807e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008082:	487f      	ldr	r0, [pc, #508]	; (8008280 <_printf_float+0x2e8>)
 8008084:	4b7f      	ldr	r3, [pc, #508]	; (8008284 <_printf_float+0x2ec>)
 8008086:	e7d1      	b.n	800802c <_printf_float+0x94>
 8008088:	6863      	ldr	r3, [r4, #4]
 800808a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800808e:	9206      	str	r2, [sp, #24]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	d13f      	bne.n	8008114 <_printf_float+0x17c>
 8008094:	2306      	movs	r3, #6
 8008096:	6063      	str	r3, [r4, #4]
 8008098:	9b05      	ldr	r3, [sp, #20]
 800809a:	6861      	ldr	r1, [r4, #4]
 800809c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080a0:	2300      	movs	r3, #0
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	ab0a      	add	r3, sp, #40	; 0x28
 80080a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080aa:	ab09      	add	r3, sp, #36	; 0x24
 80080ac:	ec49 8b10 	vmov	d0, r8, r9
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	6022      	str	r2, [r4, #0]
 80080b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7ff fecd 	bl	8007e58 <__cvt>
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080c2:	2b47      	cmp	r3, #71	; 0x47
 80080c4:	4680      	mov	r8, r0
 80080c6:	d108      	bne.n	80080da <_printf_float+0x142>
 80080c8:	1cc8      	adds	r0, r1, #3
 80080ca:	db02      	blt.n	80080d2 <_printf_float+0x13a>
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	dd41      	ble.n	8008156 <_printf_float+0x1be>
 80080d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80080d6:	fa5f fb8b 	uxtb.w	fp, fp
 80080da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080de:	d820      	bhi.n	8008122 <_printf_float+0x18a>
 80080e0:	3901      	subs	r1, #1
 80080e2:	465a      	mov	r2, fp
 80080e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080e8:	9109      	str	r1, [sp, #36]	; 0x24
 80080ea:	f7ff ff17 	bl	8007f1c <__exponent>
 80080ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f0:	1813      	adds	r3, r2, r0
 80080f2:	2a01      	cmp	r2, #1
 80080f4:	4681      	mov	r9, r0
 80080f6:	6123      	str	r3, [r4, #16]
 80080f8:	dc02      	bgt.n	8008100 <_printf_float+0x168>
 80080fa:	6822      	ldr	r2, [r4, #0]
 80080fc:	07d2      	lsls	r2, r2, #31
 80080fe:	d501      	bpl.n	8008104 <_printf_float+0x16c>
 8008100:	3301      	adds	r3, #1
 8008102:	6123      	str	r3, [r4, #16]
 8008104:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008108:	2b00      	cmp	r3, #0
 800810a:	d09c      	beq.n	8008046 <_printf_float+0xae>
 800810c:	232d      	movs	r3, #45	; 0x2d
 800810e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008112:	e798      	b.n	8008046 <_printf_float+0xae>
 8008114:	9a06      	ldr	r2, [sp, #24]
 8008116:	2a47      	cmp	r2, #71	; 0x47
 8008118:	d1be      	bne.n	8008098 <_printf_float+0x100>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1bc      	bne.n	8008098 <_printf_float+0x100>
 800811e:	2301      	movs	r3, #1
 8008120:	e7b9      	b.n	8008096 <_printf_float+0xfe>
 8008122:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008126:	d118      	bne.n	800815a <_printf_float+0x1c2>
 8008128:	2900      	cmp	r1, #0
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	dd0b      	ble.n	8008146 <_printf_float+0x1ae>
 800812e:	6121      	str	r1, [r4, #16]
 8008130:	b913      	cbnz	r3, 8008138 <_printf_float+0x1a0>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	07d0      	lsls	r0, r2, #31
 8008136:	d502      	bpl.n	800813e <_printf_float+0x1a6>
 8008138:	3301      	adds	r3, #1
 800813a:	440b      	add	r3, r1
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	e7de      	b.n	8008104 <_printf_float+0x16c>
 8008146:	b913      	cbnz	r3, 800814e <_printf_float+0x1b6>
 8008148:	6822      	ldr	r2, [r4, #0]
 800814a:	07d2      	lsls	r2, r2, #31
 800814c:	d501      	bpl.n	8008152 <_printf_float+0x1ba>
 800814e:	3302      	adds	r3, #2
 8008150:	e7f4      	b.n	800813c <_printf_float+0x1a4>
 8008152:	2301      	movs	r3, #1
 8008154:	e7f2      	b.n	800813c <_printf_float+0x1a4>
 8008156:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	4299      	cmp	r1, r3
 800815e:	db05      	blt.n	800816c <_printf_float+0x1d4>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	6121      	str	r1, [r4, #16]
 8008164:	07d8      	lsls	r0, r3, #31
 8008166:	d5ea      	bpl.n	800813e <_printf_float+0x1a6>
 8008168:	1c4b      	adds	r3, r1, #1
 800816a:	e7e7      	b.n	800813c <_printf_float+0x1a4>
 800816c:	2900      	cmp	r1, #0
 800816e:	bfd4      	ite	le
 8008170:	f1c1 0202 	rsble	r2, r1, #2
 8008174:	2201      	movgt	r2, #1
 8008176:	4413      	add	r3, r2
 8008178:	e7e0      	b.n	800813c <_printf_float+0x1a4>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	055a      	lsls	r2, r3, #21
 800817e:	d407      	bmi.n	8008190 <_printf_float+0x1f8>
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	4642      	mov	r2, r8
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	d12c      	bne.n	80081e8 <_printf_float+0x250>
 800818e:	e764      	b.n	800805a <_printf_float+0xc2>
 8008190:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008194:	f240 80e0 	bls.w	8008358 <_printf_float+0x3c0>
 8008198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	f7f8 fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d034      	beq.n	8008212 <_printf_float+0x27a>
 80081a8:	4a37      	ldr	r2, [pc, #220]	; (8008288 <_printf_float+0x2f0>)
 80081aa:	2301      	movs	r3, #1
 80081ac:	4631      	mov	r1, r6
 80081ae:	4628      	mov	r0, r5
 80081b0:	47b8      	blx	r7
 80081b2:	3001      	adds	r0, #1
 80081b4:	f43f af51 	beq.w	800805a <_printf_float+0xc2>
 80081b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081bc:	429a      	cmp	r2, r3
 80081be:	db02      	blt.n	80081c6 <_printf_float+0x22e>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	07d8      	lsls	r0, r3, #31
 80081c4:	d510      	bpl.n	80081e8 <_printf_float+0x250>
 80081c6:	ee18 3a10 	vmov	r3, s16
 80081ca:	4652      	mov	r2, sl
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b8      	blx	r7
 80081d2:	3001      	adds	r0, #1
 80081d4:	f43f af41 	beq.w	800805a <_printf_float+0xc2>
 80081d8:	f04f 0800 	mov.w	r8, #0
 80081dc:	f104 091a 	add.w	r9, r4, #26
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	3b01      	subs	r3, #1
 80081e4:	4543      	cmp	r3, r8
 80081e6:	dc09      	bgt.n	80081fc <_printf_float+0x264>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	079b      	lsls	r3, r3, #30
 80081ec:	f100 8105 	bmi.w	80083fa <_printf_float+0x462>
 80081f0:	68e0      	ldr	r0, [r4, #12]
 80081f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f4:	4298      	cmp	r0, r3
 80081f6:	bfb8      	it	lt
 80081f8:	4618      	movlt	r0, r3
 80081fa:	e730      	b.n	800805e <_printf_float+0xc6>
 80081fc:	2301      	movs	r3, #1
 80081fe:	464a      	mov	r2, r9
 8008200:	4631      	mov	r1, r6
 8008202:	4628      	mov	r0, r5
 8008204:	47b8      	blx	r7
 8008206:	3001      	adds	r0, #1
 8008208:	f43f af27 	beq.w	800805a <_printf_float+0xc2>
 800820c:	f108 0801 	add.w	r8, r8, #1
 8008210:	e7e6      	b.n	80081e0 <_printf_float+0x248>
 8008212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	dc39      	bgt.n	800828c <_printf_float+0x2f4>
 8008218:	4a1b      	ldr	r2, [pc, #108]	; (8008288 <_printf_float+0x2f0>)
 800821a:	2301      	movs	r3, #1
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f af19 	beq.w	800805a <_printf_float+0xc2>
 8008228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800822c:	4313      	orrs	r3, r2
 800822e:	d102      	bne.n	8008236 <_printf_float+0x29e>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	07d9      	lsls	r1, r3, #31
 8008234:	d5d8      	bpl.n	80081e8 <_printf_float+0x250>
 8008236:	ee18 3a10 	vmov	r3, s16
 800823a:	4652      	mov	r2, sl
 800823c:	4631      	mov	r1, r6
 800823e:	4628      	mov	r0, r5
 8008240:	47b8      	blx	r7
 8008242:	3001      	adds	r0, #1
 8008244:	f43f af09 	beq.w	800805a <_printf_float+0xc2>
 8008248:	f04f 0900 	mov.w	r9, #0
 800824c:	f104 0a1a 	add.w	sl, r4, #26
 8008250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008252:	425b      	negs	r3, r3
 8008254:	454b      	cmp	r3, r9
 8008256:	dc01      	bgt.n	800825c <_printf_float+0x2c4>
 8008258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825a:	e792      	b.n	8008182 <_printf_float+0x1ea>
 800825c:	2301      	movs	r3, #1
 800825e:	4652      	mov	r2, sl
 8008260:	4631      	mov	r1, r6
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	f43f aef7 	beq.w	800805a <_printf_float+0xc2>
 800826c:	f109 0901 	add.w	r9, r9, #1
 8008270:	e7ee      	b.n	8008250 <_printf_float+0x2b8>
 8008272:	bf00      	nop
 8008274:	7fefffff 	.word	0x7fefffff
 8008278:	0800ae6c 	.word	0x0800ae6c
 800827c:	0800ae70 	.word	0x0800ae70
 8008280:	0800ae78 	.word	0x0800ae78
 8008284:	0800ae74 	.word	0x0800ae74
 8008288:	0800ae7c 	.word	0x0800ae7c
 800828c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008290:	429a      	cmp	r2, r3
 8008292:	bfa8      	it	ge
 8008294:	461a      	movge	r2, r3
 8008296:	2a00      	cmp	r2, #0
 8008298:	4691      	mov	r9, r2
 800829a:	dc37      	bgt.n	800830c <_printf_float+0x374>
 800829c:	f04f 0b00 	mov.w	fp, #0
 80082a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082a4:	f104 021a 	add.w	r2, r4, #26
 80082a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	eba3 0309 	sub.w	r3, r3, r9
 80082b0:	455b      	cmp	r3, fp
 80082b2:	dc33      	bgt.n	800831c <_printf_float+0x384>
 80082b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b8:	429a      	cmp	r2, r3
 80082ba:	db3b      	blt.n	8008334 <_printf_float+0x39c>
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	07da      	lsls	r2, r3, #31
 80082c0:	d438      	bmi.n	8008334 <_printf_float+0x39c>
 80082c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c4:	9a05      	ldr	r2, [sp, #20]
 80082c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082c8:	1a9a      	subs	r2, r3, r2
 80082ca:	eba3 0901 	sub.w	r9, r3, r1
 80082ce:	4591      	cmp	r9, r2
 80082d0:	bfa8      	it	ge
 80082d2:	4691      	movge	r9, r2
 80082d4:	f1b9 0f00 	cmp.w	r9, #0
 80082d8:	dc35      	bgt.n	8008346 <_printf_float+0x3ae>
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082e2:	f104 0a1a 	add.w	sl, r4, #26
 80082e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	eba3 0309 	sub.w	r3, r3, r9
 80082f0:	4543      	cmp	r3, r8
 80082f2:	f77f af79 	ble.w	80081e8 <_printf_float+0x250>
 80082f6:	2301      	movs	r3, #1
 80082f8:	4652      	mov	r2, sl
 80082fa:	4631      	mov	r1, r6
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b8      	blx	r7
 8008300:	3001      	adds	r0, #1
 8008302:	f43f aeaa 	beq.w	800805a <_printf_float+0xc2>
 8008306:	f108 0801 	add.w	r8, r8, #1
 800830a:	e7ec      	b.n	80082e6 <_printf_float+0x34e>
 800830c:	4613      	mov	r3, r2
 800830e:	4631      	mov	r1, r6
 8008310:	4642      	mov	r2, r8
 8008312:	4628      	mov	r0, r5
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	d1c0      	bne.n	800829c <_printf_float+0x304>
 800831a:	e69e      	b.n	800805a <_printf_float+0xc2>
 800831c:	2301      	movs	r3, #1
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	9205      	str	r2, [sp, #20]
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	f43f ae97 	beq.w	800805a <_printf_float+0xc2>
 800832c:	9a05      	ldr	r2, [sp, #20]
 800832e:	f10b 0b01 	add.w	fp, fp, #1
 8008332:	e7b9      	b.n	80082a8 <_printf_float+0x310>
 8008334:	ee18 3a10 	vmov	r3, s16
 8008338:	4652      	mov	r2, sl
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d1be      	bne.n	80082c2 <_printf_float+0x32a>
 8008344:	e689      	b.n	800805a <_printf_float+0xc2>
 8008346:	9a05      	ldr	r2, [sp, #20]
 8008348:	464b      	mov	r3, r9
 800834a:	4442      	add	r2, r8
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	d1c1      	bne.n	80082da <_printf_float+0x342>
 8008356:	e680      	b.n	800805a <_printf_float+0xc2>
 8008358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800835a:	2a01      	cmp	r2, #1
 800835c:	dc01      	bgt.n	8008362 <_printf_float+0x3ca>
 800835e:	07db      	lsls	r3, r3, #31
 8008360:	d538      	bpl.n	80083d4 <_printf_float+0x43c>
 8008362:	2301      	movs	r3, #1
 8008364:	4642      	mov	r2, r8
 8008366:	4631      	mov	r1, r6
 8008368:	4628      	mov	r0, r5
 800836a:	47b8      	blx	r7
 800836c:	3001      	adds	r0, #1
 800836e:	f43f ae74 	beq.w	800805a <_printf_float+0xc2>
 8008372:	ee18 3a10 	vmov	r3, s16
 8008376:	4652      	mov	r2, sl
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f ae6b 	beq.w	800805a <_printf_float+0xc2>
 8008384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008388:	2200      	movs	r2, #0
 800838a:	2300      	movs	r3, #0
 800838c:	f7f8 fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008390:	b9d8      	cbnz	r0, 80083ca <_printf_float+0x432>
 8008392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008394:	f108 0201 	add.w	r2, r8, #1
 8008398:	3b01      	subs	r3, #1
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	d10e      	bne.n	80083c2 <_printf_float+0x42a>
 80083a4:	e659      	b.n	800805a <_printf_float+0xc2>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	f43f ae52 	beq.w	800805a <_printf_float+0xc2>
 80083b6:	f108 0801 	add.w	r8, r8, #1
 80083ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083bc:	3b01      	subs	r3, #1
 80083be:	4543      	cmp	r3, r8
 80083c0:	dcf1      	bgt.n	80083a6 <_printf_float+0x40e>
 80083c2:	464b      	mov	r3, r9
 80083c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083c8:	e6dc      	b.n	8008184 <_printf_float+0x1ec>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	f104 0a1a 	add.w	sl, r4, #26
 80083d2:	e7f2      	b.n	80083ba <_printf_float+0x422>
 80083d4:	2301      	movs	r3, #1
 80083d6:	4642      	mov	r2, r8
 80083d8:	e7df      	b.n	800839a <_printf_float+0x402>
 80083da:	2301      	movs	r3, #1
 80083dc:	464a      	mov	r2, r9
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	f43f ae38 	beq.w	800805a <_printf_float+0xc2>
 80083ea:	f108 0801 	add.w	r8, r8, #1
 80083ee:	68e3      	ldr	r3, [r4, #12]
 80083f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083f2:	1a5b      	subs	r3, r3, r1
 80083f4:	4543      	cmp	r3, r8
 80083f6:	dcf0      	bgt.n	80083da <_printf_float+0x442>
 80083f8:	e6fa      	b.n	80081f0 <_printf_float+0x258>
 80083fa:	f04f 0800 	mov.w	r8, #0
 80083fe:	f104 0919 	add.w	r9, r4, #25
 8008402:	e7f4      	b.n	80083ee <_printf_float+0x456>

08008404 <_printf_common>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	4616      	mov	r6, r2
 800840a:	4699      	mov	r9, r3
 800840c:	688a      	ldr	r2, [r1, #8]
 800840e:	690b      	ldr	r3, [r1, #16]
 8008410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008414:	4293      	cmp	r3, r2
 8008416:	bfb8      	it	lt
 8008418:	4613      	movlt	r3, r2
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008420:	4607      	mov	r7, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b10a      	cbz	r2, 800842a <_printf_common+0x26>
 8008426:	3301      	adds	r3, #1
 8008428:	6033      	str	r3, [r6, #0]
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	0699      	lsls	r1, r3, #26
 800842e:	bf42      	ittt	mi
 8008430:	6833      	ldrmi	r3, [r6, #0]
 8008432:	3302      	addmi	r3, #2
 8008434:	6033      	strmi	r3, [r6, #0]
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	f015 0506 	ands.w	r5, r5, #6
 800843c:	d106      	bne.n	800844c <_printf_common+0x48>
 800843e:	f104 0a19 	add.w	sl, r4, #25
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	6832      	ldr	r2, [r6, #0]
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	42ab      	cmp	r3, r5
 800844a:	dc26      	bgt.n	800849a <_printf_common+0x96>
 800844c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008450:	1e13      	subs	r3, r2, #0
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	bf18      	it	ne
 8008456:	2301      	movne	r3, #1
 8008458:	0692      	lsls	r2, r2, #26
 800845a:	d42b      	bmi.n	80084b4 <_printf_common+0xb0>
 800845c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008460:	4649      	mov	r1, r9
 8008462:	4638      	mov	r0, r7
 8008464:	47c0      	blx	r8
 8008466:	3001      	adds	r0, #1
 8008468:	d01e      	beq.n	80084a8 <_printf_common+0xa4>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	68e5      	ldr	r5, [r4, #12]
 800846e:	6832      	ldr	r2, [r6, #0]
 8008470:	f003 0306 	and.w	r3, r3, #6
 8008474:	2b04      	cmp	r3, #4
 8008476:	bf08      	it	eq
 8008478:	1aad      	subeq	r5, r5, r2
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	6922      	ldr	r2, [r4, #16]
 800847e:	bf0c      	ite	eq
 8008480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008484:	2500      	movne	r5, #0
 8008486:	4293      	cmp	r3, r2
 8008488:	bfc4      	itt	gt
 800848a:	1a9b      	subgt	r3, r3, r2
 800848c:	18ed      	addgt	r5, r5, r3
 800848e:	2600      	movs	r6, #0
 8008490:	341a      	adds	r4, #26
 8008492:	42b5      	cmp	r5, r6
 8008494:	d11a      	bne.n	80084cc <_printf_common+0xc8>
 8008496:	2000      	movs	r0, #0
 8008498:	e008      	b.n	80084ac <_printf_common+0xa8>
 800849a:	2301      	movs	r3, #1
 800849c:	4652      	mov	r2, sl
 800849e:	4649      	mov	r1, r9
 80084a0:	4638      	mov	r0, r7
 80084a2:	47c0      	blx	r8
 80084a4:	3001      	adds	r0, #1
 80084a6:	d103      	bne.n	80084b0 <_printf_common+0xac>
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b0:	3501      	adds	r5, #1
 80084b2:	e7c6      	b.n	8008442 <_printf_common+0x3e>
 80084b4:	18e1      	adds	r1, r4, r3
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	2030      	movs	r0, #48	; 0x30
 80084ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084be:	4422      	add	r2, r4
 80084c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084c8:	3302      	adds	r3, #2
 80084ca:	e7c7      	b.n	800845c <_printf_common+0x58>
 80084cc:	2301      	movs	r3, #1
 80084ce:	4622      	mov	r2, r4
 80084d0:	4649      	mov	r1, r9
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	3001      	adds	r0, #1
 80084d8:	d0e6      	beq.n	80084a8 <_printf_common+0xa4>
 80084da:	3601      	adds	r6, #1
 80084dc:	e7d9      	b.n	8008492 <_printf_common+0x8e>
	...

080084e0 <_printf_i>:
 80084e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	7e0f      	ldrb	r7, [r1, #24]
 80084e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084e8:	2f78      	cmp	r7, #120	; 0x78
 80084ea:	4691      	mov	r9, r2
 80084ec:	4680      	mov	r8, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	469a      	mov	sl, r3
 80084f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084f6:	d807      	bhi.n	8008508 <_printf_i+0x28>
 80084f8:	2f62      	cmp	r7, #98	; 0x62
 80084fa:	d80a      	bhi.n	8008512 <_printf_i+0x32>
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	f000 80d8 	beq.w	80086b2 <_printf_i+0x1d2>
 8008502:	2f58      	cmp	r7, #88	; 0x58
 8008504:	f000 80a3 	beq.w	800864e <_printf_i+0x16e>
 8008508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800850c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008510:	e03a      	b.n	8008588 <_printf_i+0xa8>
 8008512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008516:	2b15      	cmp	r3, #21
 8008518:	d8f6      	bhi.n	8008508 <_printf_i+0x28>
 800851a:	a101      	add	r1, pc, #4	; (adr r1, 8008520 <_printf_i+0x40>)
 800851c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008520:	08008579 	.word	0x08008579
 8008524:	0800858d 	.word	0x0800858d
 8008528:	08008509 	.word	0x08008509
 800852c:	08008509 	.word	0x08008509
 8008530:	08008509 	.word	0x08008509
 8008534:	08008509 	.word	0x08008509
 8008538:	0800858d 	.word	0x0800858d
 800853c:	08008509 	.word	0x08008509
 8008540:	08008509 	.word	0x08008509
 8008544:	08008509 	.word	0x08008509
 8008548:	08008509 	.word	0x08008509
 800854c:	08008699 	.word	0x08008699
 8008550:	080085bd 	.word	0x080085bd
 8008554:	0800867b 	.word	0x0800867b
 8008558:	08008509 	.word	0x08008509
 800855c:	08008509 	.word	0x08008509
 8008560:	080086bb 	.word	0x080086bb
 8008564:	08008509 	.word	0x08008509
 8008568:	080085bd 	.word	0x080085bd
 800856c:	08008509 	.word	0x08008509
 8008570:	08008509 	.word	0x08008509
 8008574:	08008683 	.word	0x08008683
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	1d1a      	adds	r2, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	602a      	str	r2, [r5, #0]
 8008580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008588:	2301      	movs	r3, #1
 800858a:	e0a3      	b.n	80086d4 <_printf_i+0x1f4>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	6829      	ldr	r1, [r5, #0]
 8008590:	0606      	lsls	r6, r0, #24
 8008592:	f101 0304 	add.w	r3, r1, #4
 8008596:	d50a      	bpl.n	80085ae <_printf_i+0xce>
 8008598:	680e      	ldr	r6, [r1, #0]
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	2e00      	cmp	r6, #0
 800859e:	da03      	bge.n	80085a8 <_printf_i+0xc8>
 80085a0:	232d      	movs	r3, #45	; 0x2d
 80085a2:	4276      	negs	r6, r6
 80085a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a8:	485e      	ldr	r0, [pc, #376]	; (8008724 <_printf_i+0x244>)
 80085aa:	230a      	movs	r3, #10
 80085ac:	e019      	b.n	80085e2 <_printf_i+0x102>
 80085ae:	680e      	ldr	r6, [r1, #0]
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085b6:	bf18      	it	ne
 80085b8:	b236      	sxthne	r6, r6
 80085ba:	e7ef      	b.n	800859c <_printf_i+0xbc>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	1d19      	adds	r1, r3, #4
 80085c2:	6029      	str	r1, [r5, #0]
 80085c4:	0601      	lsls	r1, r0, #24
 80085c6:	d501      	bpl.n	80085cc <_printf_i+0xec>
 80085c8:	681e      	ldr	r6, [r3, #0]
 80085ca:	e002      	b.n	80085d2 <_printf_i+0xf2>
 80085cc:	0646      	lsls	r6, r0, #25
 80085ce:	d5fb      	bpl.n	80085c8 <_printf_i+0xe8>
 80085d0:	881e      	ldrh	r6, [r3, #0]
 80085d2:	4854      	ldr	r0, [pc, #336]	; (8008724 <_printf_i+0x244>)
 80085d4:	2f6f      	cmp	r7, #111	; 0x6f
 80085d6:	bf0c      	ite	eq
 80085d8:	2308      	moveq	r3, #8
 80085da:	230a      	movne	r3, #10
 80085dc:	2100      	movs	r1, #0
 80085de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085e2:	6865      	ldr	r5, [r4, #4]
 80085e4:	60a5      	str	r5, [r4, #8]
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	bfa2      	ittt	ge
 80085ea:	6821      	ldrge	r1, [r4, #0]
 80085ec:	f021 0104 	bicge.w	r1, r1, #4
 80085f0:	6021      	strge	r1, [r4, #0]
 80085f2:	b90e      	cbnz	r6, 80085f8 <_printf_i+0x118>
 80085f4:	2d00      	cmp	r5, #0
 80085f6:	d04d      	beq.n	8008694 <_printf_i+0x1b4>
 80085f8:	4615      	mov	r5, r2
 80085fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80085fe:	fb03 6711 	mls	r7, r3, r1, r6
 8008602:	5dc7      	ldrb	r7, [r0, r7]
 8008604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008608:	4637      	mov	r7, r6
 800860a:	42bb      	cmp	r3, r7
 800860c:	460e      	mov	r6, r1
 800860e:	d9f4      	bls.n	80085fa <_printf_i+0x11a>
 8008610:	2b08      	cmp	r3, #8
 8008612:	d10b      	bne.n	800862c <_printf_i+0x14c>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	07de      	lsls	r6, r3, #31
 8008618:	d508      	bpl.n	800862c <_printf_i+0x14c>
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	6861      	ldr	r1, [r4, #4]
 800861e:	4299      	cmp	r1, r3
 8008620:	bfde      	ittt	le
 8008622:	2330      	movle	r3, #48	; 0x30
 8008624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800862c:	1b52      	subs	r2, r2, r5
 800862e:	6122      	str	r2, [r4, #16]
 8008630:	f8cd a000 	str.w	sl, [sp]
 8008634:	464b      	mov	r3, r9
 8008636:	aa03      	add	r2, sp, #12
 8008638:	4621      	mov	r1, r4
 800863a:	4640      	mov	r0, r8
 800863c:	f7ff fee2 	bl	8008404 <_printf_common>
 8008640:	3001      	adds	r0, #1
 8008642:	d14c      	bne.n	80086de <_printf_i+0x1fe>
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	b004      	add	sp, #16
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	4835      	ldr	r0, [pc, #212]	; (8008724 <_printf_i+0x244>)
 8008650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008654:	6829      	ldr	r1, [r5, #0]
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f851 6b04 	ldr.w	r6, [r1], #4
 800865c:	6029      	str	r1, [r5, #0]
 800865e:	061d      	lsls	r5, r3, #24
 8008660:	d514      	bpl.n	800868c <_printf_i+0x1ac>
 8008662:	07df      	lsls	r7, r3, #31
 8008664:	bf44      	itt	mi
 8008666:	f043 0320 	orrmi.w	r3, r3, #32
 800866a:	6023      	strmi	r3, [r4, #0]
 800866c:	b91e      	cbnz	r6, 8008676 <_printf_i+0x196>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	f023 0320 	bic.w	r3, r3, #32
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	2310      	movs	r3, #16
 8008678:	e7b0      	b.n	80085dc <_printf_i+0xfc>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	f043 0320 	orr.w	r3, r3, #32
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	2378      	movs	r3, #120	; 0x78
 8008684:	4828      	ldr	r0, [pc, #160]	; (8008728 <_printf_i+0x248>)
 8008686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800868a:	e7e3      	b.n	8008654 <_printf_i+0x174>
 800868c:	0659      	lsls	r1, r3, #25
 800868e:	bf48      	it	mi
 8008690:	b2b6      	uxthmi	r6, r6
 8008692:	e7e6      	b.n	8008662 <_printf_i+0x182>
 8008694:	4615      	mov	r5, r2
 8008696:	e7bb      	b.n	8008610 <_printf_i+0x130>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	6826      	ldr	r6, [r4, #0]
 800869c:	6961      	ldr	r1, [r4, #20]
 800869e:	1d18      	adds	r0, r3, #4
 80086a0:	6028      	str	r0, [r5, #0]
 80086a2:	0635      	lsls	r5, r6, #24
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	d501      	bpl.n	80086ac <_printf_i+0x1cc>
 80086a8:	6019      	str	r1, [r3, #0]
 80086aa:	e002      	b.n	80086b2 <_printf_i+0x1d2>
 80086ac:	0670      	lsls	r0, r6, #25
 80086ae:	d5fb      	bpl.n	80086a8 <_printf_i+0x1c8>
 80086b0:	8019      	strh	r1, [r3, #0]
 80086b2:	2300      	movs	r3, #0
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	4615      	mov	r5, r2
 80086b8:	e7ba      	b.n	8008630 <_printf_i+0x150>
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	1d1a      	adds	r2, r3, #4
 80086be:	602a      	str	r2, [r5, #0]
 80086c0:	681d      	ldr	r5, [r3, #0]
 80086c2:	6862      	ldr	r2, [r4, #4]
 80086c4:	2100      	movs	r1, #0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f7f7 fd92 	bl	80001f0 <memchr>
 80086cc:	b108      	cbz	r0, 80086d2 <_printf_i+0x1f2>
 80086ce:	1b40      	subs	r0, r0, r5
 80086d0:	6060      	str	r0, [r4, #4]
 80086d2:	6863      	ldr	r3, [r4, #4]
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	2300      	movs	r3, #0
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086dc:	e7a8      	b.n	8008630 <_printf_i+0x150>
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	462a      	mov	r2, r5
 80086e2:	4649      	mov	r1, r9
 80086e4:	4640      	mov	r0, r8
 80086e6:	47d0      	blx	sl
 80086e8:	3001      	adds	r0, #1
 80086ea:	d0ab      	beq.n	8008644 <_printf_i+0x164>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	079b      	lsls	r3, r3, #30
 80086f0:	d413      	bmi.n	800871a <_printf_i+0x23a>
 80086f2:	68e0      	ldr	r0, [r4, #12]
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	4298      	cmp	r0, r3
 80086f8:	bfb8      	it	lt
 80086fa:	4618      	movlt	r0, r3
 80086fc:	e7a4      	b.n	8008648 <_printf_i+0x168>
 80086fe:	2301      	movs	r3, #1
 8008700:	4632      	mov	r2, r6
 8008702:	4649      	mov	r1, r9
 8008704:	4640      	mov	r0, r8
 8008706:	47d0      	blx	sl
 8008708:	3001      	adds	r0, #1
 800870a:	d09b      	beq.n	8008644 <_printf_i+0x164>
 800870c:	3501      	adds	r5, #1
 800870e:	68e3      	ldr	r3, [r4, #12]
 8008710:	9903      	ldr	r1, [sp, #12]
 8008712:	1a5b      	subs	r3, r3, r1
 8008714:	42ab      	cmp	r3, r5
 8008716:	dcf2      	bgt.n	80086fe <_printf_i+0x21e>
 8008718:	e7eb      	b.n	80086f2 <_printf_i+0x212>
 800871a:	2500      	movs	r5, #0
 800871c:	f104 0619 	add.w	r6, r4, #25
 8008720:	e7f5      	b.n	800870e <_printf_i+0x22e>
 8008722:	bf00      	nop
 8008724:	0800ae7e 	.word	0x0800ae7e
 8008728:	0800ae8f 	.word	0x0800ae8f

0800872c <_puts_r>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	460e      	mov	r6, r1
 8008730:	4605      	mov	r5, r0
 8008732:	b118      	cbz	r0, 800873c <_puts_r+0x10>
 8008734:	6983      	ldr	r3, [r0, #24]
 8008736:	b90b      	cbnz	r3, 800873c <_puts_r+0x10>
 8008738:	f001 f90e 	bl	8009958 <__sinit>
 800873c:	69ab      	ldr	r3, [r5, #24]
 800873e:	68ac      	ldr	r4, [r5, #8]
 8008740:	b913      	cbnz	r3, 8008748 <_puts_r+0x1c>
 8008742:	4628      	mov	r0, r5
 8008744:	f001 f908 	bl	8009958 <__sinit>
 8008748:	4b2c      	ldr	r3, [pc, #176]	; (80087fc <_puts_r+0xd0>)
 800874a:	429c      	cmp	r4, r3
 800874c:	d120      	bne.n	8008790 <_puts_r+0x64>
 800874e:	686c      	ldr	r4, [r5, #4]
 8008750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d405      	bmi.n	8008762 <_puts_r+0x36>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	0598      	lsls	r0, r3, #22
 800875a:	d402      	bmi.n	8008762 <_puts_r+0x36>
 800875c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875e:	f001 f99e 	bl	8009a9e <__retarget_lock_acquire_recursive>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	0719      	lsls	r1, r3, #28
 8008766:	d51d      	bpl.n	80087a4 <_puts_r+0x78>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	b1db      	cbz	r3, 80087a4 <_puts_r+0x78>
 800876c:	3e01      	subs	r6, #1
 800876e:	68a3      	ldr	r3, [r4, #8]
 8008770:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008774:	3b01      	subs	r3, #1
 8008776:	60a3      	str	r3, [r4, #8]
 8008778:	bb39      	cbnz	r1, 80087ca <_puts_r+0x9e>
 800877a:	2b00      	cmp	r3, #0
 800877c:	da38      	bge.n	80087f0 <_puts_r+0xc4>
 800877e:	4622      	mov	r2, r4
 8008780:	210a      	movs	r1, #10
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f894 	bl	80088b0 <__swbuf_r>
 8008788:	3001      	adds	r0, #1
 800878a:	d011      	beq.n	80087b0 <_puts_r+0x84>
 800878c:	250a      	movs	r5, #10
 800878e:	e011      	b.n	80087b4 <_puts_r+0x88>
 8008790:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <_puts_r+0xd4>)
 8008792:	429c      	cmp	r4, r3
 8008794:	d101      	bne.n	800879a <_puts_r+0x6e>
 8008796:	68ac      	ldr	r4, [r5, #8]
 8008798:	e7da      	b.n	8008750 <_puts_r+0x24>
 800879a:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <_puts_r+0xd8>)
 800879c:	429c      	cmp	r4, r3
 800879e:	bf08      	it	eq
 80087a0:	68ec      	ldreq	r4, [r5, #12]
 80087a2:	e7d5      	b.n	8008750 <_puts_r+0x24>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f8d4 	bl	8008954 <__swsetup_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0dd      	beq.n	800876c <_puts_r+0x40>
 80087b0:	f04f 35ff 	mov.w	r5, #4294967295
 80087b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087b6:	07da      	lsls	r2, r3, #31
 80087b8:	d405      	bmi.n	80087c6 <_puts_r+0x9a>
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	059b      	lsls	r3, r3, #22
 80087be:	d402      	bmi.n	80087c6 <_puts_r+0x9a>
 80087c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087c2:	f001 f96d 	bl	8009aa0 <__retarget_lock_release_recursive>
 80087c6:	4628      	mov	r0, r5
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da04      	bge.n	80087d8 <_puts_r+0xac>
 80087ce:	69a2      	ldr	r2, [r4, #24]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	dc06      	bgt.n	80087e2 <_puts_r+0xb6>
 80087d4:	290a      	cmp	r1, #10
 80087d6:	d004      	beq.n	80087e2 <_puts_r+0xb6>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	6022      	str	r2, [r4, #0]
 80087de:	7019      	strb	r1, [r3, #0]
 80087e0:	e7c5      	b.n	800876e <_puts_r+0x42>
 80087e2:	4622      	mov	r2, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 f863 	bl	80088b0 <__swbuf_r>
 80087ea:	3001      	adds	r0, #1
 80087ec:	d1bf      	bne.n	800876e <_puts_r+0x42>
 80087ee:	e7df      	b.n	80087b0 <_puts_r+0x84>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	250a      	movs	r5, #10
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	6022      	str	r2, [r4, #0]
 80087f8:	701d      	strb	r5, [r3, #0]
 80087fa:	e7db      	b.n	80087b4 <_puts_r+0x88>
 80087fc:	0800af50 	.word	0x0800af50
 8008800:	0800af70 	.word	0x0800af70
 8008804:	0800af30 	.word	0x0800af30

08008808 <puts>:
 8008808:	4b02      	ldr	r3, [pc, #8]	; (8008814 <puts+0xc>)
 800880a:	4601      	mov	r1, r0
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	f7ff bf8d 	b.w	800872c <_puts_r>
 8008812:	bf00      	nop
 8008814:	20000308 	.word	0x20000308

08008818 <realloc>:
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <realloc+0xc>)
 800881a:	460a      	mov	r2, r1
 800881c:	4601      	mov	r1, r0
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f001 bd42 	b.w	800a2a8 <_realloc_r>
 8008824:	20000308 	.word	0x20000308

08008828 <_sbrk_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d06      	ldr	r5, [pc, #24]	; (8008844 <_sbrk_r+0x1c>)
 800882c:	2300      	movs	r3, #0
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7f9 f97e 	bl	8001b34 <_sbrk>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_sbrk_r+0x1a>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_sbrk_r+0x1a>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	2000074c 	.word	0x2000074c

08008848 <strncpy>:
 8008848:	b510      	push	{r4, lr}
 800884a:	3901      	subs	r1, #1
 800884c:	4603      	mov	r3, r0
 800884e:	b132      	cbz	r2, 800885e <strncpy+0x16>
 8008850:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008854:	f803 4b01 	strb.w	r4, [r3], #1
 8008858:	3a01      	subs	r2, #1
 800885a:	2c00      	cmp	r4, #0
 800885c:	d1f7      	bne.n	800884e <strncpy+0x6>
 800885e:	441a      	add	r2, r3
 8008860:	2100      	movs	r1, #0
 8008862:	4293      	cmp	r3, r2
 8008864:	d100      	bne.n	8008868 <strncpy+0x20>
 8008866:	bd10      	pop	{r4, pc}
 8008868:	f803 1b01 	strb.w	r1, [r3], #1
 800886c:	e7f9      	b.n	8008862 <strncpy+0x1a>
	...

08008870 <_vsiprintf_r>:
 8008870:	b500      	push	{lr}
 8008872:	b09b      	sub	sp, #108	; 0x6c
 8008874:	9100      	str	r1, [sp, #0]
 8008876:	9104      	str	r1, [sp, #16]
 8008878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	9102      	str	r1, [sp, #8]
 8008880:	4905      	ldr	r1, [pc, #20]	; (8008898 <_vsiprintf_r+0x28>)
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	4669      	mov	r1, sp
 8008886:	f001 fd99 	bl	800a3bc <_svfiprintf_r>
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	b01b      	add	sp, #108	; 0x6c
 8008892:	f85d fb04 	ldr.w	pc, [sp], #4
 8008896:	bf00      	nop
 8008898:	ffff0208 	.word	0xffff0208

0800889c <vsiprintf>:
 800889c:	4613      	mov	r3, r2
 800889e:	460a      	mov	r2, r1
 80088a0:	4601      	mov	r1, r0
 80088a2:	4802      	ldr	r0, [pc, #8]	; (80088ac <vsiprintf+0x10>)
 80088a4:	6800      	ldr	r0, [r0, #0]
 80088a6:	f7ff bfe3 	b.w	8008870 <_vsiprintf_r>
 80088aa:	bf00      	nop
 80088ac:	20000308 	.word	0x20000308

080088b0 <__swbuf_r>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	460e      	mov	r6, r1
 80088b4:	4614      	mov	r4, r2
 80088b6:	4605      	mov	r5, r0
 80088b8:	b118      	cbz	r0, 80088c2 <__swbuf_r+0x12>
 80088ba:	6983      	ldr	r3, [r0, #24]
 80088bc:	b90b      	cbnz	r3, 80088c2 <__swbuf_r+0x12>
 80088be:	f001 f84b 	bl	8009958 <__sinit>
 80088c2:	4b21      	ldr	r3, [pc, #132]	; (8008948 <__swbuf_r+0x98>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	d12b      	bne.n	8008920 <__swbuf_r+0x70>
 80088c8:	686c      	ldr	r4, [r5, #4]
 80088ca:	69a3      	ldr	r3, [r4, #24]
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	071a      	lsls	r2, r3, #28
 80088d2:	d52f      	bpl.n	8008934 <__swbuf_r+0x84>
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	b36b      	cbz	r3, 8008934 <__swbuf_r+0x84>
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	6820      	ldr	r0, [r4, #0]
 80088dc:	1ac0      	subs	r0, r0, r3
 80088de:	6963      	ldr	r3, [r4, #20]
 80088e0:	b2f6      	uxtb	r6, r6
 80088e2:	4283      	cmp	r3, r0
 80088e4:	4637      	mov	r7, r6
 80088e6:	dc04      	bgt.n	80088f2 <__swbuf_r+0x42>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 ffa0 	bl	8009830 <_fflush_r>
 80088f0:	bb30      	cbnz	r0, 8008940 <__swbuf_r+0x90>
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	60a3      	str	r3, [r4, #8]
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	6022      	str	r2, [r4, #0]
 80088fe:	701e      	strb	r6, [r3, #0]
 8008900:	6963      	ldr	r3, [r4, #20]
 8008902:	3001      	adds	r0, #1
 8008904:	4283      	cmp	r3, r0
 8008906:	d004      	beq.n	8008912 <__swbuf_r+0x62>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	07db      	lsls	r3, r3, #31
 800890c:	d506      	bpl.n	800891c <__swbuf_r+0x6c>
 800890e:	2e0a      	cmp	r6, #10
 8008910:	d104      	bne.n	800891c <__swbuf_r+0x6c>
 8008912:	4621      	mov	r1, r4
 8008914:	4628      	mov	r0, r5
 8008916:	f000 ff8b 	bl	8009830 <_fflush_r>
 800891a:	b988      	cbnz	r0, 8008940 <__swbuf_r+0x90>
 800891c:	4638      	mov	r0, r7
 800891e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <__swbuf_r+0x9c>)
 8008922:	429c      	cmp	r4, r3
 8008924:	d101      	bne.n	800892a <__swbuf_r+0x7a>
 8008926:	68ac      	ldr	r4, [r5, #8]
 8008928:	e7cf      	b.n	80088ca <__swbuf_r+0x1a>
 800892a:	4b09      	ldr	r3, [pc, #36]	; (8008950 <__swbuf_r+0xa0>)
 800892c:	429c      	cmp	r4, r3
 800892e:	bf08      	it	eq
 8008930:	68ec      	ldreq	r4, [r5, #12]
 8008932:	e7ca      	b.n	80088ca <__swbuf_r+0x1a>
 8008934:	4621      	mov	r1, r4
 8008936:	4628      	mov	r0, r5
 8008938:	f000 f80c 	bl	8008954 <__swsetup_r>
 800893c:	2800      	cmp	r0, #0
 800893e:	d0cb      	beq.n	80088d8 <__swbuf_r+0x28>
 8008940:	f04f 37ff 	mov.w	r7, #4294967295
 8008944:	e7ea      	b.n	800891c <__swbuf_r+0x6c>
 8008946:	bf00      	nop
 8008948:	0800af50 	.word	0x0800af50
 800894c:	0800af70 	.word	0x0800af70
 8008950:	0800af30 	.word	0x0800af30

08008954 <__swsetup_r>:
 8008954:	4b32      	ldr	r3, [pc, #200]	; (8008a20 <__swsetup_r+0xcc>)
 8008956:	b570      	push	{r4, r5, r6, lr}
 8008958:	681d      	ldr	r5, [r3, #0]
 800895a:	4606      	mov	r6, r0
 800895c:	460c      	mov	r4, r1
 800895e:	b125      	cbz	r5, 800896a <__swsetup_r+0x16>
 8008960:	69ab      	ldr	r3, [r5, #24]
 8008962:	b913      	cbnz	r3, 800896a <__swsetup_r+0x16>
 8008964:	4628      	mov	r0, r5
 8008966:	f000 fff7 	bl	8009958 <__sinit>
 800896a:	4b2e      	ldr	r3, [pc, #184]	; (8008a24 <__swsetup_r+0xd0>)
 800896c:	429c      	cmp	r4, r3
 800896e:	d10f      	bne.n	8008990 <__swsetup_r+0x3c>
 8008970:	686c      	ldr	r4, [r5, #4]
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008978:	0719      	lsls	r1, r3, #28
 800897a:	d42c      	bmi.n	80089d6 <__swsetup_r+0x82>
 800897c:	06dd      	lsls	r5, r3, #27
 800897e:	d411      	bmi.n	80089a4 <__swsetup_r+0x50>
 8008980:	2309      	movs	r3, #9
 8008982:	6033      	str	r3, [r6, #0]
 8008984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	f04f 30ff 	mov.w	r0, #4294967295
 800898e:	e03e      	b.n	8008a0e <__swsetup_r+0xba>
 8008990:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <__swsetup_r+0xd4>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d101      	bne.n	800899a <__swsetup_r+0x46>
 8008996:	68ac      	ldr	r4, [r5, #8]
 8008998:	e7eb      	b.n	8008972 <__swsetup_r+0x1e>
 800899a:	4b24      	ldr	r3, [pc, #144]	; (8008a2c <__swsetup_r+0xd8>)
 800899c:	429c      	cmp	r4, r3
 800899e:	bf08      	it	eq
 80089a0:	68ec      	ldreq	r4, [r5, #12]
 80089a2:	e7e6      	b.n	8008972 <__swsetup_r+0x1e>
 80089a4:	0758      	lsls	r0, r3, #29
 80089a6:	d512      	bpl.n	80089ce <__swsetup_r+0x7a>
 80089a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089aa:	b141      	cbz	r1, 80089be <__swsetup_r+0x6a>
 80089ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b0:	4299      	cmp	r1, r3
 80089b2:	d002      	beq.n	80089ba <__swsetup_r+0x66>
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7ff f96f 	bl	8007c98 <_free_r>
 80089ba:	2300      	movs	r3, #0
 80089bc:	6363      	str	r3, [r4, #52]	; 0x34
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	2300      	movs	r3, #0
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f043 0308 	orr.w	r3, r3, #8
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	b94b      	cbnz	r3, 80089ee <__swsetup_r+0x9a>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089e4:	d003      	beq.n	80089ee <__swsetup_r+0x9a>
 80089e6:	4621      	mov	r1, r4
 80089e8:	4630      	mov	r0, r6
 80089ea:	f001 f87f 	bl	8009aec <__smakebuf_r>
 80089ee:	89a0      	ldrh	r0, [r4, #12]
 80089f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089f4:	f010 0301 	ands.w	r3, r0, #1
 80089f8:	d00a      	beq.n	8008a10 <__swsetup_r+0xbc>
 80089fa:	2300      	movs	r3, #0
 80089fc:	60a3      	str	r3, [r4, #8]
 80089fe:	6963      	ldr	r3, [r4, #20]
 8008a00:	425b      	negs	r3, r3
 8008a02:	61a3      	str	r3, [r4, #24]
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	b943      	cbnz	r3, 8008a1a <__swsetup_r+0xc6>
 8008a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a0c:	d1ba      	bne.n	8008984 <__swsetup_r+0x30>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	0781      	lsls	r1, r0, #30
 8008a12:	bf58      	it	pl
 8008a14:	6963      	ldrpl	r3, [r4, #20]
 8008a16:	60a3      	str	r3, [r4, #8]
 8008a18:	e7f4      	b.n	8008a04 <__swsetup_r+0xb0>
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e7f7      	b.n	8008a0e <__swsetup_r+0xba>
 8008a1e:	bf00      	nop
 8008a20:	20000308 	.word	0x20000308
 8008a24:	0800af50 	.word	0x0800af50
 8008a28:	0800af70 	.word	0x0800af70
 8008a2c:	0800af30 	.word	0x0800af30

08008a30 <quorem>:
 8008a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	6903      	ldr	r3, [r0, #16]
 8008a36:	690c      	ldr	r4, [r1, #16]
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	f2c0 8081 	blt.w	8008b42 <quorem+0x112>
 8008a40:	3c01      	subs	r4, #1
 8008a42:	f101 0814 	add.w	r8, r1, #20
 8008a46:	f100 0514 	add.w	r5, r0, #20
 8008a4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a64:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a68:	d331      	bcc.n	8008ace <quorem+0x9e>
 8008a6a:	f04f 0e00 	mov.w	lr, #0
 8008a6e:	4640      	mov	r0, r8
 8008a70:	46ac      	mov	ip, r5
 8008a72:	46f2      	mov	sl, lr
 8008a74:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a78:	b293      	uxth	r3, r2
 8008a7a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	ebaa 0303 	sub.w	r3, sl, r3
 8008a88:	f8dc a000 	ldr.w	sl, [ip]
 8008a8c:	0c12      	lsrs	r2, r2, #16
 8008a8e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a92:	fb06 e202 	mla	r2, r6, r2, lr
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	9b00      	ldr	r3, [sp, #0]
 8008a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a9e:	b292      	uxth	r2, r2
 8008aa0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aa8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008aac:	4581      	cmp	r9, r0
 8008aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ab2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ab6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aba:	d2db      	bcs.n	8008a74 <quorem+0x44>
 8008abc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ac0:	b92b      	cbnz	r3, 8008ace <quorem+0x9e>
 8008ac2:	9b01      	ldr	r3, [sp, #4]
 8008ac4:	3b04      	subs	r3, #4
 8008ac6:	429d      	cmp	r5, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	d32e      	bcc.n	8008b2a <quorem+0xfa>
 8008acc:	613c      	str	r4, [r7, #16]
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f001 fae8 	bl	800a0a4 <__mcmp>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	db24      	blt.n	8008b22 <quorem+0xf2>
 8008ad8:	3601      	adds	r6, #1
 8008ada:	4628      	mov	r0, r5
 8008adc:	f04f 0c00 	mov.w	ip, #0
 8008ae0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ae4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ae8:	b293      	uxth	r3, r2
 8008aea:	ebac 0303 	sub.w	r3, ip, r3
 8008aee:	0c12      	lsrs	r2, r2, #16
 8008af0:	fa13 f38e 	uxtah	r3, r3, lr
 8008af4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008af8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b02:	45c1      	cmp	r9, r8
 8008b04:	f840 3b04 	str.w	r3, [r0], #4
 8008b08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b0c:	d2e8      	bcs.n	8008ae0 <quorem+0xb0>
 8008b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b16:	b922      	cbnz	r2, 8008b22 <quorem+0xf2>
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	d30a      	bcc.n	8008b36 <quorem+0x106>
 8008b20:	613c      	str	r4, [r7, #16]
 8008b22:	4630      	mov	r0, r6
 8008b24:	b003      	add	sp, #12
 8008b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2a:	6812      	ldr	r2, [r2, #0]
 8008b2c:	3b04      	subs	r3, #4
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	d1cc      	bne.n	8008acc <quorem+0x9c>
 8008b32:	3c01      	subs	r4, #1
 8008b34:	e7c7      	b.n	8008ac6 <quorem+0x96>
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	3b04      	subs	r3, #4
 8008b3a:	2a00      	cmp	r2, #0
 8008b3c:	d1f0      	bne.n	8008b20 <quorem+0xf0>
 8008b3e:	3c01      	subs	r4, #1
 8008b40:	e7eb      	b.n	8008b1a <quorem+0xea>
 8008b42:	2000      	movs	r0, #0
 8008b44:	e7ee      	b.n	8008b24 <quorem+0xf4>
	...

08008b48 <_dtoa_r>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	ed2d 8b04 	vpush	{d8-d9}
 8008b50:	ec57 6b10 	vmov	r6, r7, d0
 8008b54:	b093      	sub	sp, #76	; 0x4c
 8008b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b5c:	9106      	str	r1, [sp, #24]
 8008b5e:	ee10 aa10 	vmov	sl, s0
 8008b62:	4604      	mov	r4, r0
 8008b64:	9209      	str	r2, [sp, #36]	; 0x24
 8008b66:	930c      	str	r3, [sp, #48]	; 0x30
 8008b68:	46bb      	mov	fp, r7
 8008b6a:	b975      	cbnz	r5, 8008b8a <_dtoa_r+0x42>
 8008b6c:	2010      	movs	r0, #16
 8008b6e:	f7ff f865 	bl	8007c3c <malloc>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6260      	str	r0, [r4, #36]	; 0x24
 8008b76:	b920      	cbnz	r0, 8008b82 <_dtoa_r+0x3a>
 8008b78:	4ba7      	ldr	r3, [pc, #668]	; (8008e18 <_dtoa_r+0x2d0>)
 8008b7a:	21ea      	movs	r1, #234	; 0xea
 8008b7c:	48a7      	ldr	r0, [pc, #668]	; (8008e1c <_dtoa_r+0x2d4>)
 8008b7e:	f001 fd73 	bl	800a668 <__assert_func>
 8008b82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b86:	6005      	str	r5, [r0, #0]
 8008b88:	60c5      	str	r5, [r0, #12]
 8008b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b8c:	6819      	ldr	r1, [r3, #0]
 8008b8e:	b151      	cbz	r1, 8008ba6 <_dtoa_r+0x5e>
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	604a      	str	r2, [r1, #4]
 8008b94:	2301      	movs	r3, #1
 8008b96:	4093      	lsls	r3, r2
 8008b98:	608b      	str	r3, [r1, #8]
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f001 f840 	bl	8009c20 <_Bfree>
 8008ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	1e3b      	subs	r3, r7, #0
 8008ba8:	bfaa      	itet	ge
 8008baa:	2300      	movge	r3, #0
 8008bac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008bb0:	f8c8 3000 	strge.w	r3, [r8]
 8008bb4:	4b9a      	ldr	r3, [pc, #616]	; (8008e20 <_dtoa_r+0x2d8>)
 8008bb6:	bfbc      	itt	lt
 8008bb8:	2201      	movlt	r2, #1
 8008bba:	f8c8 2000 	strlt.w	r2, [r8]
 8008bbe:	ea33 030b 	bics.w	r3, r3, fp
 8008bc2:	d11b      	bne.n	8008bfc <_dtoa_r+0xb4>
 8008bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd0:	4333      	orrs	r3, r6
 8008bd2:	f000 8592 	beq.w	80096fa <_dtoa_r+0xbb2>
 8008bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd8:	b963      	cbnz	r3, 8008bf4 <_dtoa_r+0xac>
 8008bda:	4b92      	ldr	r3, [pc, #584]	; (8008e24 <_dtoa_r+0x2dc>)
 8008bdc:	e022      	b.n	8008c24 <_dtoa_r+0xdc>
 8008bde:	4b92      	ldr	r3, [pc, #584]	; (8008e28 <_dtoa_r+0x2e0>)
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	3308      	adds	r3, #8
 8008be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	9801      	ldr	r0, [sp, #4]
 8008bea:	b013      	add	sp, #76	; 0x4c
 8008bec:	ecbd 8b04 	vpop	{d8-d9}
 8008bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf4:	4b8b      	ldr	r3, [pc, #556]	; (8008e24 <_dtoa_r+0x2dc>)
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	3303      	adds	r3, #3
 8008bfa:	e7f3      	b.n	8008be4 <_dtoa_r+0x9c>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4650      	mov	r0, sl
 8008c02:	4659      	mov	r1, fp
 8008c04:	f7f7 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c08:	ec4b ab19 	vmov	d9, sl, fp
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	b158      	cbz	r0, 8008c28 <_dtoa_r+0xe0>
 8008c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c12:	2301      	movs	r3, #1
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 856b 	beq.w	80096f4 <_dtoa_r+0xbac>
 8008c1e:	4883      	ldr	r0, [pc, #524]	; (8008e2c <_dtoa_r+0x2e4>)
 8008c20:	6018      	str	r0, [r3, #0]
 8008c22:	1e43      	subs	r3, r0, #1
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	e7df      	b.n	8008be8 <_dtoa_r+0xa0>
 8008c28:	ec4b ab10 	vmov	d0, sl, fp
 8008c2c:	aa10      	add	r2, sp, #64	; 0x40
 8008c2e:	a911      	add	r1, sp, #68	; 0x44
 8008c30:	4620      	mov	r0, r4
 8008c32:	f001 fadd 	bl	800a1f0 <__d2b>
 8008c36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c3a:	ee08 0a10 	vmov	s16, r0
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	f000 8084 	beq.w	8008d4c <_dtoa_r+0x204>
 8008c44:	ee19 3a90 	vmov	r3, s19
 8008c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c50:	4656      	mov	r6, sl
 8008c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c5e:	4b74      	ldr	r3, [pc, #464]	; (8008e30 <_dtoa_r+0x2e8>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 fb17 	bl	8000298 <__aeabi_dsub>
 8008c6a:	a365      	add	r3, pc, #404	; (adr r3, 8008e00 <_dtoa_r+0x2b8>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	a364      	add	r3, pc, #400	; (adr r3, 8008e08 <_dtoa_r+0x2c0>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fb0f 	bl	800029c <__adddf3>
 8008c7e:	4606      	mov	r6, r0
 8008c80:	4628      	mov	r0, r5
 8008c82:	460f      	mov	r7, r1
 8008c84:	f7f7 fc56 	bl	8000534 <__aeabi_i2d>
 8008c88:	a361      	add	r3, pc, #388	; (adr r3, 8008e10 <_dtoa_r+0x2c8>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fcbb 	bl	8000608 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4630      	mov	r0, r6
 8008c98:	4639      	mov	r1, r7
 8008c9a:	f7f7 faff 	bl	800029c <__adddf3>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	f7f7 ff61 	bl	8000b68 <__aeabi_d2iz>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	9000      	str	r0, [sp, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8008cb4:	b150      	cbz	r0, 8008ccc <_dtoa_r+0x184>
 8008cb6:	9800      	ldr	r0, [sp, #0]
 8008cb8:	f7f7 fc3c 	bl	8000534 <__aeabi_i2d>
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	f7f7 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cc4:	b910      	cbnz	r0, 8008ccc <_dtoa_r+0x184>
 8008cc6:	9b00      	ldr	r3, [sp, #0]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	9b00      	ldr	r3, [sp, #0]
 8008cce:	2b16      	cmp	r3, #22
 8008cd0:	d85a      	bhi.n	8008d88 <_dtoa_r+0x240>
 8008cd2:	9a00      	ldr	r2, [sp, #0]
 8008cd4:	4b57      	ldr	r3, [pc, #348]	; (8008e34 <_dtoa_r+0x2ec>)
 8008cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	ec51 0b19 	vmov	r0, r1, d9
 8008ce2:	f7f7 ff03 	bl	8000aec <__aeabi_dcmplt>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d050      	beq.n	8008d8c <_dtoa_r+0x244>
 8008cea:	9b00      	ldr	r3, [sp, #0]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cf6:	1b5d      	subs	r5, r3, r5
 8008cf8:	1e6b      	subs	r3, r5, #1
 8008cfa:	9305      	str	r3, [sp, #20]
 8008cfc:	bf45      	ittet	mi
 8008cfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d02:	9304      	strmi	r3, [sp, #16]
 8008d04:	2300      	movpl	r3, #0
 8008d06:	2300      	movmi	r3, #0
 8008d08:	bf4c      	ite	mi
 8008d0a:	9305      	strmi	r3, [sp, #20]
 8008d0c:	9304      	strpl	r3, [sp, #16]
 8008d0e:	9b00      	ldr	r3, [sp, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	db3d      	blt.n	8008d90 <_dtoa_r+0x248>
 8008d14:	9b05      	ldr	r3, [sp, #20]
 8008d16:	9a00      	ldr	r2, [sp, #0]
 8008d18:	920a      	str	r2, [sp, #40]	; 0x28
 8008d1a:	4413      	add	r3, r2
 8008d1c:	9305      	str	r3, [sp, #20]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	9b06      	ldr	r3, [sp, #24]
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	f200 8089 	bhi.w	8008e3c <_dtoa_r+0x2f4>
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	bfc4      	itt	gt
 8008d2e:	3b04      	subgt	r3, #4
 8008d30:	9306      	strgt	r3, [sp, #24]
 8008d32:	9b06      	ldr	r3, [sp, #24]
 8008d34:	f1a3 0302 	sub.w	r3, r3, #2
 8008d38:	bfcc      	ite	gt
 8008d3a:	2500      	movgt	r5, #0
 8008d3c:	2501      	movle	r5, #1
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	f200 8087 	bhi.w	8008e52 <_dtoa_r+0x30a>
 8008d44:	e8df f003 	tbb	[pc, r3]
 8008d48:	59383a2d 	.word	0x59383a2d
 8008d4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d50:	441d      	add	r5, r3
 8008d52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	bfc1      	itttt	gt
 8008d5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d62:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d6a:	bfda      	itte	le
 8008d6c:	f1c3 0320 	rsble	r3, r3, #32
 8008d70:	fa06 f003 	lslle.w	r0, r6, r3
 8008d74:	4318      	orrgt	r0, r3
 8008d76:	f7f7 fbcd 	bl	8000514 <__aeabi_ui2d>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d82:	3d01      	subs	r5, #1
 8008d84:	930e      	str	r3, [sp, #56]	; 0x38
 8008d86:	e76a      	b.n	8008c5e <_dtoa_r+0x116>
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e7b2      	b.n	8008cf2 <_dtoa_r+0x1aa>
 8008d8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d8e:	e7b1      	b.n	8008cf4 <_dtoa_r+0x1ac>
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	4253      	negs	r3, r2
 8008d9a:	9307      	str	r3, [sp, #28]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008da0:	e7bf      	b.n	8008d22 <_dtoa_r+0x1da>
 8008da2:	2300      	movs	r3, #0
 8008da4:	9308      	str	r3, [sp, #32]
 8008da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc55      	bgt.n	8008e58 <_dtoa_r+0x310>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008db2:	461a      	mov	r2, r3
 8008db4:	9209      	str	r2, [sp, #36]	; 0x24
 8008db6:	e00c      	b.n	8008dd2 <_dtoa_r+0x28a>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e7f3      	b.n	8008da4 <_dtoa_r+0x25c>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dc0:	9308      	str	r3, [sp, #32]
 8008dc2:	9b00      	ldr	r3, [sp, #0]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	bfb8      	it	lt
 8008dd0:	2301      	movlt	r3, #1
 8008dd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	6042      	str	r2, [r0, #4]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	f102 0614 	add.w	r6, r2, #20
 8008dde:	429e      	cmp	r6, r3
 8008de0:	6841      	ldr	r1, [r0, #4]
 8008de2:	d93d      	bls.n	8008e60 <_dtoa_r+0x318>
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 fedb 	bl	8009ba0 <_Balloc>
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d13b      	bne.n	8008e68 <_dtoa_r+0x320>
 8008df0:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <_dtoa_r+0x2f0>)
 8008df2:	4602      	mov	r2, r0
 8008df4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008df8:	e6c0      	b.n	8008b7c <_dtoa_r+0x34>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e7df      	b.n	8008dbe <_dtoa_r+0x276>
 8008dfe:	bf00      	nop
 8008e00:	636f4361 	.word	0x636f4361
 8008e04:	3fd287a7 	.word	0x3fd287a7
 8008e08:	8b60c8b3 	.word	0x8b60c8b3
 8008e0c:	3fc68a28 	.word	0x3fc68a28
 8008e10:	509f79fb 	.word	0x509f79fb
 8008e14:	3fd34413 	.word	0x3fd34413
 8008e18:	0800aead 	.word	0x0800aead
 8008e1c:	0800aec4 	.word	0x0800aec4
 8008e20:	7ff00000 	.word	0x7ff00000
 8008e24:	0800aea9 	.word	0x0800aea9
 8008e28:	0800aea0 	.word	0x0800aea0
 8008e2c:	0800ae7d 	.word	0x0800ae7d
 8008e30:	3ff80000 	.word	0x3ff80000
 8008e34:	0800b018 	.word	0x0800b018
 8008e38:	0800af1f 	.word	0x0800af1f
 8008e3c:	2501      	movs	r5, #1
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9306      	str	r3, [sp, #24]
 8008e42:	9508      	str	r5, [sp, #32]
 8008e44:	f04f 33ff 	mov.w	r3, #4294967295
 8008e48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2312      	movs	r3, #18
 8008e50:	e7b0      	b.n	8008db4 <_dtoa_r+0x26c>
 8008e52:	2301      	movs	r3, #1
 8008e54:	9308      	str	r3, [sp, #32]
 8008e56:	e7f5      	b.n	8008e44 <_dtoa_r+0x2fc>
 8008e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e5e:	e7b8      	b.n	8008dd2 <_dtoa_r+0x28a>
 8008e60:	3101      	adds	r1, #1
 8008e62:	6041      	str	r1, [r0, #4]
 8008e64:	0052      	lsls	r2, r2, #1
 8008e66:	e7b8      	b.n	8008dda <_dtoa_r+0x292>
 8008e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6a:	9a01      	ldr	r2, [sp, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	2b0e      	cmp	r3, #14
 8008e72:	f200 809d 	bhi.w	8008fb0 <_dtoa_r+0x468>
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	f000 809a 	beq.w	8008fb0 <_dtoa_r+0x468>
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dd32      	ble.n	8008ee8 <_dtoa_r+0x3a0>
 8008e82:	4ab7      	ldr	r2, [pc, #732]	; (8009160 <_dtoa_r+0x618>)
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	05d8      	lsls	r0, r3, #23
 8008e94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e98:	d516      	bpl.n	8008ec8 <_dtoa_r+0x380>
 8008e9a:	4bb2      	ldr	r3, [pc, #712]	; (8009164 <_dtoa_r+0x61c>)
 8008e9c:	ec51 0b19 	vmov	r0, r1, d9
 8008ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ea4:	f7f7 fcda 	bl	800085c <__aeabi_ddiv>
 8008ea8:	f007 070f 	and.w	r7, r7, #15
 8008eac:	4682      	mov	sl, r0
 8008eae:	468b      	mov	fp, r1
 8008eb0:	2503      	movs	r5, #3
 8008eb2:	4eac      	ldr	r6, [pc, #688]	; (8009164 <_dtoa_r+0x61c>)
 8008eb4:	b957      	cbnz	r7, 8008ecc <_dtoa_r+0x384>
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	464b      	mov	r3, r9
 8008eba:	4650      	mov	r0, sl
 8008ebc:	4659      	mov	r1, fp
 8008ebe:	f7f7 fccd 	bl	800085c <__aeabi_ddiv>
 8008ec2:	4682      	mov	sl, r0
 8008ec4:	468b      	mov	fp, r1
 8008ec6:	e028      	b.n	8008f1a <_dtoa_r+0x3d2>
 8008ec8:	2502      	movs	r5, #2
 8008eca:	e7f2      	b.n	8008eb2 <_dtoa_r+0x36a>
 8008ecc:	07f9      	lsls	r1, r7, #31
 8008ece:	d508      	bpl.n	8008ee2 <_dtoa_r+0x39a>
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ed8:	f7f7 fb96 	bl	8000608 <__aeabi_dmul>
 8008edc:	3501      	adds	r5, #1
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4689      	mov	r9, r1
 8008ee2:	107f      	asrs	r7, r7, #1
 8008ee4:	3608      	adds	r6, #8
 8008ee6:	e7e5      	b.n	8008eb4 <_dtoa_r+0x36c>
 8008ee8:	f000 809b 	beq.w	8009022 <_dtoa_r+0x4da>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	4f9d      	ldr	r7, [pc, #628]	; (8009164 <_dtoa_r+0x61c>)
 8008ef0:	425e      	negs	r6, r3
 8008ef2:	4b9b      	ldr	r3, [pc, #620]	; (8009160 <_dtoa_r+0x618>)
 8008ef4:	f006 020f 	and.w	r2, r6, #15
 8008ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	ec51 0b19 	vmov	r0, r1, d9
 8008f04:	f7f7 fb80 	bl	8000608 <__aeabi_dmul>
 8008f08:	1136      	asrs	r6, r6, #4
 8008f0a:	4682      	mov	sl, r0
 8008f0c:	468b      	mov	fp, r1
 8008f0e:	2300      	movs	r3, #0
 8008f10:	2502      	movs	r5, #2
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d17a      	bne.n	800900c <_dtoa_r+0x4c4>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1d3      	bne.n	8008ec2 <_dtoa_r+0x37a>
 8008f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 8082 	beq.w	8009026 <_dtoa_r+0x4de>
 8008f22:	4b91      	ldr	r3, [pc, #580]	; (8009168 <_dtoa_r+0x620>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	4650      	mov	r0, sl
 8008f28:	4659      	mov	r1, fp
 8008f2a:	f7f7 fddf 	bl	8000aec <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d079      	beq.n	8009026 <_dtoa_r+0x4de>
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d076      	beq.n	8009026 <_dtoa_r+0x4de>
 8008f38:	9b02      	ldr	r3, [sp, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dd36      	ble.n	8008fac <_dtoa_r+0x464>
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	4650      	mov	r0, sl
 8008f42:	4659      	mov	r1, fp
 8008f44:	1e5f      	subs	r7, r3, #1
 8008f46:	2200      	movs	r2, #0
 8008f48:	4b88      	ldr	r3, [pc, #544]	; (800916c <_dtoa_r+0x624>)
 8008f4a:	f7f7 fb5d 	bl	8000608 <__aeabi_dmul>
 8008f4e:	9e02      	ldr	r6, [sp, #8]
 8008f50:	4682      	mov	sl, r0
 8008f52:	468b      	mov	fp, r1
 8008f54:	3501      	adds	r5, #1
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7f7 faec 	bl	8000534 <__aeabi_i2d>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	f7f7 fb52 	bl	8000608 <__aeabi_dmul>
 8008f64:	4b82      	ldr	r3, [pc, #520]	; (8009170 <_dtoa_r+0x628>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	f7f7 f998 	bl	800029c <__adddf3>
 8008f6c:	46d0      	mov	r8, sl
 8008f6e:	46d9      	mov	r9, fp
 8008f70:	4682      	mov	sl, r0
 8008f72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	d158      	bne.n	800902c <_dtoa_r+0x4e4>
 8008f7a:	4b7e      	ldr	r3, [pc, #504]	; (8009174 <_dtoa_r+0x62c>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 f989 	bl	8000298 <__aeabi_dsub>
 8008f86:	4652      	mov	r2, sl
 8008f88:	465b      	mov	r3, fp
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	f7f7 fdcb 	bl	8000b28 <__aeabi_dcmpgt>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f040 8295 	bne.w	80094c2 <_dtoa_r+0x97a>
 8008f98:	4652      	mov	r2, sl
 8008f9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 fda3 	bl	8000aec <__aeabi_dcmplt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f040 8289 	bne.w	80094be <_dtoa_r+0x976>
 8008fac:	ec5b ab19 	vmov	sl, fp, d9
 8008fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f2c0 8148 	blt.w	8009248 <_dtoa_r+0x700>
 8008fb8:	9a00      	ldr	r2, [sp, #0]
 8008fba:	2a0e      	cmp	r2, #14
 8008fbc:	f300 8144 	bgt.w	8009248 <_dtoa_r+0x700>
 8008fc0:	4b67      	ldr	r3, [pc, #412]	; (8009160 <_dtoa_r+0x618>)
 8008fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f280 80d5 	bge.w	800917c <_dtoa_r+0x634>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f300 80d1 	bgt.w	800917c <_dtoa_r+0x634>
 8008fda:	f040 826f 	bne.w	80094bc <_dtoa_r+0x974>
 8008fde:	4b65      	ldr	r3, [pc, #404]	; (8009174 <_dtoa_r+0x62c>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	f7f7 fb0f 	bl	8000608 <__aeabi_dmul>
 8008fea:	4652      	mov	r2, sl
 8008fec:	465b      	mov	r3, fp
 8008fee:	f7f7 fd91 	bl	8000b14 <__aeabi_dcmpge>
 8008ff2:	9e03      	ldr	r6, [sp, #12]
 8008ff4:	4637      	mov	r7, r6
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f040 8245 	bne.w	8009486 <_dtoa_r+0x93e>
 8008ffc:	9d01      	ldr	r5, [sp, #4]
 8008ffe:	2331      	movs	r3, #49	; 0x31
 8009000:	f805 3b01 	strb.w	r3, [r5], #1
 8009004:	9b00      	ldr	r3, [sp, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	e240      	b.n	800948e <_dtoa_r+0x946>
 800900c:	07f2      	lsls	r2, r6, #31
 800900e:	d505      	bpl.n	800901c <_dtoa_r+0x4d4>
 8009010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009014:	f7f7 faf8 	bl	8000608 <__aeabi_dmul>
 8009018:	3501      	adds	r5, #1
 800901a:	2301      	movs	r3, #1
 800901c:	1076      	asrs	r6, r6, #1
 800901e:	3708      	adds	r7, #8
 8009020:	e777      	b.n	8008f12 <_dtoa_r+0x3ca>
 8009022:	2502      	movs	r5, #2
 8009024:	e779      	b.n	8008f1a <_dtoa_r+0x3d2>
 8009026:	9f00      	ldr	r7, [sp, #0]
 8009028:	9e03      	ldr	r6, [sp, #12]
 800902a:	e794      	b.n	8008f56 <_dtoa_r+0x40e>
 800902c:	9901      	ldr	r1, [sp, #4]
 800902e:	4b4c      	ldr	r3, [pc, #304]	; (8009160 <_dtoa_r+0x618>)
 8009030:	4431      	add	r1, r6
 8009032:	910d      	str	r1, [sp, #52]	; 0x34
 8009034:	9908      	ldr	r1, [sp, #32]
 8009036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800903a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800903e:	2900      	cmp	r1, #0
 8009040:	d043      	beq.n	80090ca <_dtoa_r+0x582>
 8009042:	494d      	ldr	r1, [pc, #308]	; (8009178 <_dtoa_r+0x630>)
 8009044:	2000      	movs	r0, #0
 8009046:	f7f7 fc09 	bl	800085c <__aeabi_ddiv>
 800904a:	4652      	mov	r2, sl
 800904c:	465b      	mov	r3, fp
 800904e:	f7f7 f923 	bl	8000298 <__aeabi_dsub>
 8009052:	9d01      	ldr	r5, [sp, #4]
 8009054:	4682      	mov	sl, r0
 8009056:	468b      	mov	fp, r1
 8009058:	4649      	mov	r1, r9
 800905a:	4640      	mov	r0, r8
 800905c:	f7f7 fd84 	bl	8000b68 <__aeabi_d2iz>
 8009060:	4606      	mov	r6, r0
 8009062:	f7f7 fa67 	bl	8000534 <__aeabi_i2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4640      	mov	r0, r8
 800906c:	4649      	mov	r1, r9
 800906e:	f7f7 f913 	bl	8000298 <__aeabi_dsub>
 8009072:	3630      	adds	r6, #48	; 0x30
 8009074:	f805 6b01 	strb.w	r6, [r5], #1
 8009078:	4652      	mov	r2, sl
 800907a:	465b      	mov	r3, fp
 800907c:	4680      	mov	r8, r0
 800907e:	4689      	mov	r9, r1
 8009080:	f7f7 fd34 	bl	8000aec <__aeabi_dcmplt>
 8009084:	2800      	cmp	r0, #0
 8009086:	d163      	bne.n	8009150 <_dtoa_r+0x608>
 8009088:	4642      	mov	r2, r8
 800908a:	464b      	mov	r3, r9
 800908c:	4936      	ldr	r1, [pc, #216]	; (8009168 <_dtoa_r+0x620>)
 800908e:	2000      	movs	r0, #0
 8009090:	f7f7 f902 	bl	8000298 <__aeabi_dsub>
 8009094:	4652      	mov	r2, sl
 8009096:	465b      	mov	r3, fp
 8009098:	f7f7 fd28 	bl	8000aec <__aeabi_dcmplt>
 800909c:	2800      	cmp	r0, #0
 800909e:	f040 80b5 	bne.w	800920c <_dtoa_r+0x6c4>
 80090a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a4:	429d      	cmp	r5, r3
 80090a6:	d081      	beq.n	8008fac <_dtoa_r+0x464>
 80090a8:	4b30      	ldr	r3, [pc, #192]	; (800916c <_dtoa_r+0x624>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	4650      	mov	r0, sl
 80090ae:	4659      	mov	r1, fp
 80090b0:	f7f7 faaa 	bl	8000608 <__aeabi_dmul>
 80090b4:	4b2d      	ldr	r3, [pc, #180]	; (800916c <_dtoa_r+0x624>)
 80090b6:	4682      	mov	sl, r0
 80090b8:	468b      	mov	fp, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	2200      	movs	r2, #0
 80090c0:	f7f7 faa2 	bl	8000608 <__aeabi_dmul>
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	e7c6      	b.n	8009058 <_dtoa_r+0x510>
 80090ca:	4650      	mov	r0, sl
 80090cc:	4659      	mov	r1, fp
 80090ce:	f7f7 fa9b 	bl	8000608 <__aeabi_dmul>
 80090d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d4:	9d01      	ldr	r5, [sp, #4]
 80090d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090d8:	4682      	mov	sl, r0
 80090da:	468b      	mov	fp, r1
 80090dc:	4649      	mov	r1, r9
 80090de:	4640      	mov	r0, r8
 80090e0:	f7f7 fd42 	bl	8000b68 <__aeabi_d2iz>
 80090e4:	4606      	mov	r6, r0
 80090e6:	f7f7 fa25 	bl	8000534 <__aeabi_i2d>
 80090ea:	3630      	adds	r6, #48	; 0x30
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4640      	mov	r0, r8
 80090f2:	4649      	mov	r1, r9
 80090f4:	f7f7 f8d0 	bl	8000298 <__aeabi_dsub>
 80090f8:	f805 6b01 	strb.w	r6, [r5], #1
 80090fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fe:	429d      	cmp	r5, r3
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	d124      	bne.n	8009154 <_dtoa_r+0x60c>
 800910a:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <_dtoa_r+0x630>)
 800910c:	4650      	mov	r0, sl
 800910e:	4659      	mov	r1, fp
 8009110:	f7f7 f8c4 	bl	800029c <__adddf3>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4640      	mov	r0, r8
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 fd04 	bl	8000b28 <__aeabi_dcmpgt>
 8009120:	2800      	cmp	r0, #0
 8009122:	d173      	bne.n	800920c <_dtoa_r+0x6c4>
 8009124:	4652      	mov	r2, sl
 8009126:	465b      	mov	r3, fp
 8009128:	4913      	ldr	r1, [pc, #76]	; (8009178 <_dtoa_r+0x630>)
 800912a:	2000      	movs	r0, #0
 800912c:	f7f7 f8b4 	bl	8000298 <__aeabi_dsub>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4640      	mov	r0, r8
 8009136:	4649      	mov	r1, r9
 8009138:	f7f7 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	f43f af35 	beq.w	8008fac <_dtoa_r+0x464>
 8009142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009144:	1e6b      	subs	r3, r5, #1
 8009146:	930f      	str	r3, [sp, #60]	; 0x3c
 8009148:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800914c:	2b30      	cmp	r3, #48	; 0x30
 800914e:	d0f8      	beq.n	8009142 <_dtoa_r+0x5fa>
 8009150:	9700      	str	r7, [sp, #0]
 8009152:	e049      	b.n	80091e8 <_dtoa_r+0x6a0>
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <_dtoa_r+0x624>)
 8009156:	f7f7 fa57 	bl	8000608 <__aeabi_dmul>
 800915a:	4680      	mov	r8, r0
 800915c:	4689      	mov	r9, r1
 800915e:	e7bd      	b.n	80090dc <_dtoa_r+0x594>
 8009160:	0800b018 	.word	0x0800b018
 8009164:	0800aff0 	.word	0x0800aff0
 8009168:	3ff00000 	.word	0x3ff00000
 800916c:	40240000 	.word	0x40240000
 8009170:	401c0000 	.word	0x401c0000
 8009174:	40140000 	.word	0x40140000
 8009178:	3fe00000 	.word	0x3fe00000
 800917c:	9d01      	ldr	r5, [sp, #4]
 800917e:	4656      	mov	r6, sl
 8009180:	465f      	mov	r7, fp
 8009182:	4642      	mov	r2, r8
 8009184:	464b      	mov	r3, r9
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fb67 	bl	800085c <__aeabi_ddiv>
 800918e:	f7f7 fceb 	bl	8000b68 <__aeabi_d2iz>
 8009192:	4682      	mov	sl, r0
 8009194:	f7f7 f9ce 	bl	8000534 <__aeabi_i2d>
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	f7f7 fa34 	bl	8000608 <__aeabi_dmul>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80091ac:	f7f7 f874 	bl	8000298 <__aeabi_dsub>
 80091b0:	f805 6b01 	strb.w	r6, [r5], #1
 80091b4:	9e01      	ldr	r6, [sp, #4]
 80091b6:	9f03      	ldr	r7, [sp, #12]
 80091b8:	1bae      	subs	r6, r5, r6
 80091ba:	42b7      	cmp	r7, r6
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	d135      	bne.n	800922e <_dtoa_r+0x6e6>
 80091c2:	f7f7 f86b 	bl	800029c <__adddf3>
 80091c6:	4642      	mov	r2, r8
 80091c8:	464b      	mov	r3, r9
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	f7f7 fcab 	bl	8000b28 <__aeabi_dcmpgt>
 80091d2:	b9d0      	cbnz	r0, 800920a <_dtoa_r+0x6c2>
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80091e0:	b110      	cbz	r0, 80091e8 <_dtoa_r+0x6a0>
 80091e2:	f01a 0f01 	tst.w	sl, #1
 80091e6:	d110      	bne.n	800920a <_dtoa_r+0x6c2>
 80091e8:	4620      	mov	r0, r4
 80091ea:	ee18 1a10 	vmov	r1, s16
 80091ee:	f000 fd17 	bl	8009c20 <_Bfree>
 80091f2:	2300      	movs	r3, #0
 80091f4:	9800      	ldr	r0, [sp, #0]
 80091f6:	702b      	strb	r3, [r5, #0]
 80091f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091fa:	3001      	adds	r0, #1
 80091fc:	6018      	str	r0, [r3, #0]
 80091fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009200:	2b00      	cmp	r3, #0
 8009202:	f43f acf1 	beq.w	8008be8 <_dtoa_r+0xa0>
 8009206:	601d      	str	r5, [r3, #0]
 8009208:	e4ee      	b.n	8008be8 <_dtoa_r+0xa0>
 800920a:	9f00      	ldr	r7, [sp, #0]
 800920c:	462b      	mov	r3, r5
 800920e:	461d      	mov	r5, r3
 8009210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009214:	2a39      	cmp	r2, #57	; 0x39
 8009216:	d106      	bne.n	8009226 <_dtoa_r+0x6de>
 8009218:	9a01      	ldr	r2, [sp, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d1f7      	bne.n	800920e <_dtoa_r+0x6c6>
 800921e:	9901      	ldr	r1, [sp, #4]
 8009220:	2230      	movs	r2, #48	; 0x30
 8009222:	3701      	adds	r7, #1
 8009224:	700a      	strb	r2, [r1, #0]
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	3201      	adds	r2, #1
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	e790      	b.n	8009150 <_dtoa_r+0x608>
 800922e:	4ba6      	ldr	r3, [pc, #664]	; (80094c8 <_dtoa_r+0x980>)
 8009230:	2200      	movs	r2, #0
 8009232:	f7f7 f9e9 	bl	8000608 <__aeabi_dmul>
 8009236:	2200      	movs	r2, #0
 8009238:	2300      	movs	r3, #0
 800923a:	4606      	mov	r6, r0
 800923c:	460f      	mov	r7, r1
 800923e:	f7f7 fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009242:	2800      	cmp	r0, #0
 8009244:	d09d      	beq.n	8009182 <_dtoa_r+0x63a>
 8009246:	e7cf      	b.n	80091e8 <_dtoa_r+0x6a0>
 8009248:	9a08      	ldr	r2, [sp, #32]
 800924a:	2a00      	cmp	r2, #0
 800924c:	f000 80d7 	beq.w	80093fe <_dtoa_r+0x8b6>
 8009250:	9a06      	ldr	r2, [sp, #24]
 8009252:	2a01      	cmp	r2, #1
 8009254:	f300 80ba 	bgt.w	80093cc <_dtoa_r+0x884>
 8009258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800925a:	2a00      	cmp	r2, #0
 800925c:	f000 80b2 	beq.w	80093c4 <_dtoa_r+0x87c>
 8009260:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009264:	9e07      	ldr	r6, [sp, #28]
 8009266:	9d04      	ldr	r5, [sp, #16]
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	441a      	add	r2, r3
 800926c:	9204      	str	r2, [sp, #16]
 800926e:	9a05      	ldr	r2, [sp, #20]
 8009270:	2101      	movs	r1, #1
 8009272:	441a      	add	r2, r3
 8009274:	4620      	mov	r0, r4
 8009276:	9205      	str	r2, [sp, #20]
 8009278:	f000 fd8a 	bl	8009d90 <__i2b>
 800927c:	4607      	mov	r7, r0
 800927e:	2d00      	cmp	r5, #0
 8009280:	dd0c      	ble.n	800929c <_dtoa_r+0x754>
 8009282:	9b05      	ldr	r3, [sp, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	dd09      	ble.n	800929c <_dtoa_r+0x754>
 8009288:	42ab      	cmp	r3, r5
 800928a:	9a04      	ldr	r2, [sp, #16]
 800928c:	bfa8      	it	ge
 800928e:	462b      	movge	r3, r5
 8009290:	1ad2      	subs	r2, r2, r3
 8009292:	9204      	str	r2, [sp, #16]
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	1aed      	subs	r5, r5, r3
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	9305      	str	r3, [sp, #20]
 800929c:	9b07      	ldr	r3, [sp, #28]
 800929e:	b31b      	cbz	r3, 80092e8 <_dtoa_r+0x7a0>
 80092a0:	9b08      	ldr	r3, [sp, #32]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 80af 	beq.w	8009406 <_dtoa_r+0x8be>
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	dd13      	ble.n	80092d4 <_dtoa_r+0x78c>
 80092ac:	4639      	mov	r1, r7
 80092ae:	4632      	mov	r2, r6
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fe2d 	bl	8009f10 <__pow5mult>
 80092b6:	ee18 2a10 	vmov	r2, s16
 80092ba:	4601      	mov	r1, r0
 80092bc:	4607      	mov	r7, r0
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fd7c 	bl	8009dbc <__multiply>
 80092c4:	ee18 1a10 	vmov	r1, s16
 80092c8:	4680      	mov	r8, r0
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 fca8 	bl	8009c20 <_Bfree>
 80092d0:	ee08 8a10 	vmov	s16, r8
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	1b9a      	subs	r2, r3, r6
 80092d8:	d006      	beq.n	80092e8 <_dtoa_r+0x7a0>
 80092da:	ee18 1a10 	vmov	r1, s16
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 fe16 	bl	8009f10 <__pow5mult>
 80092e4:	ee08 0a10 	vmov	s16, r0
 80092e8:	2101      	movs	r1, #1
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fd50 	bl	8009d90 <__i2b>
 80092f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	4606      	mov	r6, r0
 80092f6:	f340 8088 	ble.w	800940a <_dtoa_r+0x8c2>
 80092fa:	461a      	mov	r2, r3
 80092fc:	4601      	mov	r1, r0
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fe06 	bl	8009f10 <__pow5mult>
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	2b01      	cmp	r3, #1
 8009308:	4606      	mov	r6, r0
 800930a:	f340 8081 	ble.w	8009410 <_dtoa_r+0x8c8>
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	6933      	ldr	r3, [r6, #16]
 8009314:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009318:	6918      	ldr	r0, [r3, #16]
 800931a:	f000 fce9 	bl	8009cf0 <__hi0bits>
 800931e:	f1c0 0020 	rsb	r0, r0, #32
 8009322:	9b05      	ldr	r3, [sp, #20]
 8009324:	4418      	add	r0, r3
 8009326:	f010 001f 	ands.w	r0, r0, #31
 800932a:	f000 8092 	beq.w	8009452 <_dtoa_r+0x90a>
 800932e:	f1c0 0320 	rsb	r3, r0, #32
 8009332:	2b04      	cmp	r3, #4
 8009334:	f340 808a 	ble.w	800944c <_dtoa_r+0x904>
 8009338:	f1c0 001c 	rsb	r0, r0, #28
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	4403      	add	r3, r0
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	4403      	add	r3, r0
 8009346:	4405      	add	r5, r0
 8009348:	9305      	str	r3, [sp, #20]
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd07      	ble.n	8009360 <_dtoa_r+0x818>
 8009350:	ee18 1a10 	vmov	r1, s16
 8009354:	461a      	mov	r2, r3
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fe34 	bl	8009fc4 <__lshift>
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	9b05      	ldr	r3, [sp, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	dd05      	ble.n	8009372 <_dtoa_r+0x82a>
 8009366:	4631      	mov	r1, r6
 8009368:	461a      	mov	r2, r3
 800936a:	4620      	mov	r0, r4
 800936c:	f000 fe2a 	bl	8009fc4 <__lshift>
 8009370:	4606      	mov	r6, r0
 8009372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d06e      	beq.n	8009456 <_dtoa_r+0x90e>
 8009378:	ee18 0a10 	vmov	r0, s16
 800937c:	4631      	mov	r1, r6
 800937e:	f000 fe91 	bl	800a0a4 <__mcmp>
 8009382:	2800      	cmp	r0, #0
 8009384:	da67      	bge.n	8009456 <_dtoa_r+0x90e>
 8009386:	9b00      	ldr	r3, [sp, #0]
 8009388:	3b01      	subs	r3, #1
 800938a:	ee18 1a10 	vmov	r1, s16
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	220a      	movs	r2, #10
 8009392:	2300      	movs	r3, #0
 8009394:	4620      	mov	r0, r4
 8009396:	f000 fc65 	bl	8009c64 <__multadd>
 800939a:	9b08      	ldr	r3, [sp, #32]
 800939c:	ee08 0a10 	vmov	s16, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 81b1 	beq.w	8009708 <_dtoa_r+0xbc0>
 80093a6:	2300      	movs	r3, #0
 80093a8:	4639      	mov	r1, r7
 80093aa:	220a      	movs	r2, #10
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fc59 	bl	8009c64 <__multadd>
 80093b2:	9b02      	ldr	r3, [sp, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	4607      	mov	r7, r0
 80093b8:	f300 808e 	bgt.w	80094d8 <_dtoa_r+0x990>
 80093bc:	9b06      	ldr	r3, [sp, #24]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	dc51      	bgt.n	8009466 <_dtoa_r+0x91e>
 80093c2:	e089      	b.n	80094d8 <_dtoa_r+0x990>
 80093c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ca:	e74b      	b.n	8009264 <_dtoa_r+0x71c>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	1e5e      	subs	r6, r3, #1
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	42b3      	cmp	r3, r6
 80093d4:	bfbf      	itttt	lt
 80093d6:	9b07      	ldrlt	r3, [sp, #28]
 80093d8:	9607      	strlt	r6, [sp, #28]
 80093da:	1af2      	sublt	r2, r6, r3
 80093dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093de:	bfb6      	itet	lt
 80093e0:	189b      	addlt	r3, r3, r2
 80093e2:	1b9e      	subge	r6, r3, r6
 80093e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	bfb8      	it	lt
 80093ea:	2600      	movlt	r6, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bfb7      	itett	lt
 80093f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093f8:	1a9d      	sublt	r5, r3, r2
 80093fa:	2300      	movlt	r3, #0
 80093fc:	e734      	b.n	8009268 <_dtoa_r+0x720>
 80093fe:	9e07      	ldr	r6, [sp, #28]
 8009400:	9d04      	ldr	r5, [sp, #16]
 8009402:	9f08      	ldr	r7, [sp, #32]
 8009404:	e73b      	b.n	800927e <_dtoa_r+0x736>
 8009406:	9a07      	ldr	r2, [sp, #28]
 8009408:	e767      	b.n	80092da <_dtoa_r+0x792>
 800940a:	9b06      	ldr	r3, [sp, #24]
 800940c:	2b01      	cmp	r3, #1
 800940e:	dc18      	bgt.n	8009442 <_dtoa_r+0x8fa>
 8009410:	f1ba 0f00 	cmp.w	sl, #0
 8009414:	d115      	bne.n	8009442 <_dtoa_r+0x8fa>
 8009416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800941a:	b993      	cbnz	r3, 8009442 <_dtoa_r+0x8fa>
 800941c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009420:	0d1b      	lsrs	r3, r3, #20
 8009422:	051b      	lsls	r3, r3, #20
 8009424:	b183      	cbz	r3, 8009448 <_dtoa_r+0x900>
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	3301      	adds	r3, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	9b05      	ldr	r3, [sp, #20]
 800942e:	3301      	adds	r3, #1
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	f04f 0801 	mov.w	r8, #1
 8009436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009438:	2b00      	cmp	r3, #0
 800943a:	f47f af6a 	bne.w	8009312 <_dtoa_r+0x7ca>
 800943e:	2001      	movs	r0, #1
 8009440:	e76f      	b.n	8009322 <_dtoa_r+0x7da>
 8009442:	f04f 0800 	mov.w	r8, #0
 8009446:	e7f6      	b.n	8009436 <_dtoa_r+0x8ee>
 8009448:	4698      	mov	r8, r3
 800944a:	e7f4      	b.n	8009436 <_dtoa_r+0x8ee>
 800944c:	f43f af7d 	beq.w	800934a <_dtoa_r+0x802>
 8009450:	4618      	mov	r0, r3
 8009452:	301c      	adds	r0, #28
 8009454:	e772      	b.n	800933c <_dtoa_r+0x7f4>
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	dc37      	bgt.n	80094cc <_dtoa_r+0x984>
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	2b02      	cmp	r3, #2
 8009460:	dd34      	ble.n	80094cc <_dtoa_r+0x984>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	9b02      	ldr	r3, [sp, #8]
 8009468:	b96b      	cbnz	r3, 8009486 <_dtoa_r+0x93e>
 800946a:	4631      	mov	r1, r6
 800946c:	2205      	movs	r2, #5
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fbf8 	bl	8009c64 <__multadd>
 8009474:	4601      	mov	r1, r0
 8009476:	4606      	mov	r6, r0
 8009478:	ee18 0a10 	vmov	r0, s16
 800947c:	f000 fe12 	bl	800a0a4 <__mcmp>
 8009480:	2800      	cmp	r0, #0
 8009482:	f73f adbb 	bgt.w	8008ffc <_dtoa_r+0x4b4>
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009488:	9d01      	ldr	r5, [sp, #4]
 800948a:	43db      	mvns	r3, r3
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	4631      	mov	r1, r6
 8009494:	4620      	mov	r0, r4
 8009496:	f000 fbc3 	bl	8009c20 <_Bfree>
 800949a:	2f00      	cmp	r7, #0
 800949c:	f43f aea4 	beq.w	80091e8 <_dtoa_r+0x6a0>
 80094a0:	f1b8 0f00 	cmp.w	r8, #0
 80094a4:	d005      	beq.n	80094b2 <_dtoa_r+0x96a>
 80094a6:	45b8      	cmp	r8, r7
 80094a8:	d003      	beq.n	80094b2 <_dtoa_r+0x96a>
 80094aa:	4641      	mov	r1, r8
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fbb7 	bl	8009c20 <_Bfree>
 80094b2:	4639      	mov	r1, r7
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 fbb3 	bl	8009c20 <_Bfree>
 80094ba:	e695      	b.n	80091e8 <_dtoa_r+0x6a0>
 80094bc:	2600      	movs	r6, #0
 80094be:	4637      	mov	r7, r6
 80094c0:	e7e1      	b.n	8009486 <_dtoa_r+0x93e>
 80094c2:	9700      	str	r7, [sp, #0]
 80094c4:	4637      	mov	r7, r6
 80094c6:	e599      	b.n	8008ffc <_dtoa_r+0x4b4>
 80094c8:	40240000 	.word	0x40240000
 80094cc:	9b08      	ldr	r3, [sp, #32]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 80ca 	beq.w	8009668 <_dtoa_r+0xb20>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	9302      	str	r3, [sp, #8]
 80094d8:	2d00      	cmp	r5, #0
 80094da:	dd05      	ble.n	80094e8 <_dtoa_r+0x9a0>
 80094dc:	4639      	mov	r1, r7
 80094de:	462a      	mov	r2, r5
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fd6f 	bl	8009fc4 <__lshift>
 80094e6:	4607      	mov	r7, r0
 80094e8:	f1b8 0f00 	cmp.w	r8, #0
 80094ec:	d05b      	beq.n	80095a6 <_dtoa_r+0xa5e>
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 fb55 	bl	8009ba0 <_Balloc>
 80094f6:	4605      	mov	r5, r0
 80094f8:	b928      	cbnz	r0, 8009506 <_dtoa_r+0x9be>
 80094fa:	4b87      	ldr	r3, [pc, #540]	; (8009718 <_dtoa_r+0xbd0>)
 80094fc:	4602      	mov	r2, r0
 80094fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009502:	f7ff bb3b 	b.w	8008b7c <_dtoa_r+0x34>
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	3202      	adds	r2, #2
 800950a:	0092      	lsls	r2, r2, #2
 800950c:	f107 010c 	add.w	r1, r7, #12
 8009510:	300c      	adds	r0, #12
 8009512:	f000 fb2b 	bl	8009b6c <memcpy>
 8009516:	2201      	movs	r2, #1
 8009518:	4629      	mov	r1, r5
 800951a:	4620      	mov	r0, r4
 800951c:	f000 fd52 	bl	8009fc4 <__lshift>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	f103 0901 	add.w	r9, r3, #1
 8009526:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800952a:	4413      	add	r3, r2
 800952c:	9305      	str	r3, [sp, #20]
 800952e:	f00a 0301 	and.w	r3, sl, #1
 8009532:	46b8      	mov	r8, r7
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	4607      	mov	r7, r0
 8009538:	4631      	mov	r1, r6
 800953a:	ee18 0a10 	vmov	r0, s16
 800953e:	f7ff fa77 	bl	8008a30 <quorem>
 8009542:	4641      	mov	r1, r8
 8009544:	9002      	str	r0, [sp, #8]
 8009546:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800954a:	ee18 0a10 	vmov	r0, s16
 800954e:	f000 fda9 	bl	800a0a4 <__mcmp>
 8009552:	463a      	mov	r2, r7
 8009554:	9003      	str	r0, [sp, #12]
 8009556:	4631      	mov	r1, r6
 8009558:	4620      	mov	r0, r4
 800955a:	f000 fdbf 	bl	800a0dc <__mdiff>
 800955e:	68c2      	ldr	r2, [r0, #12]
 8009560:	f109 3bff 	add.w	fp, r9, #4294967295
 8009564:	4605      	mov	r5, r0
 8009566:	bb02      	cbnz	r2, 80095aa <_dtoa_r+0xa62>
 8009568:	4601      	mov	r1, r0
 800956a:	ee18 0a10 	vmov	r0, s16
 800956e:	f000 fd99 	bl	800a0a4 <__mcmp>
 8009572:	4602      	mov	r2, r0
 8009574:	4629      	mov	r1, r5
 8009576:	4620      	mov	r0, r4
 8009578:	9207      	str	r2, [sp, #28]
 800957a:	f000 fb51 	bl	8009c20 <_Bfree>
 800957e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009582:	ea43 0102 	orr.w	r1, r3, r2
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	430b      	orrs	r3, r1
 800958a:	464d      	mov	r5, r9
 800958c:	d10f      	bne.n	80095ae <_dtoa_r+0xa66>
 800958e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009592:	d02a      	beq.n	80095ea <_dtoa_r+0xaa2>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	dd02      	ble.n	80095a0 <_dtoa_r+0xa58>
 800959a:	9b02      	ldr	r3, [sp, #8]
 800959c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80095a0:	f88b a000 	strb.w	sl, [fp]
 80095a4:	e775      	b.n	8009492 <_dtoa_r+0x94a>
 80095a6:	4638      	mov	r0, r7
 80095a8:	e7ba      	b.n	8009520 <_dtoa_r+0x9d8>
 80095aa:	2201      	movs	r2, #1
 80095ac:	e7e2      	b.n	8009574 <_dtoa_r+0xa2c>
 80095ae:	9b03      	ldr	r3, [sp, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	db04      	blt.n	80095be <_dtoa_r+0xa76>
 80095b4:	9906      	ldr	r1, [sp, #24]
 80095b6:	430b      	orrs	r3, r1
 80095b8:	9904      	ldr	r1, [sp, #16]
 80095ba:	430b      	orrs	r3, r1
 80095bc:	d122      	bne.n	8009604 <_dtoa_r+0xabc>
 80095be:	2a00      	cmp	r2, #0
 80095c0:	ddee      	ble.n	80095a0 <_dtoa_r+0xa58>
 80095c2:	ee18 1a10 	vmov	r1, s16
 80095c6:	2201      	movs	r2, #1
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fcfb 	bl	8009fc4 <__lshift>
 80095ce:	4631      	mov	r1, r6
 80095d0:	ee08 0a10 	vmov	s16, r0
 80095d4:	f000 fd66 	bl	800a0a4 <__mcmp>
 80095d8:	2800      	cmp	r0, #0
 80095da:	dc03      	bgt.n	80095e4 <_dtoa_r+0xa9c>
 80095dc:	d1e0      	bne.n	80095a0 <_dtoa_r+0xa58>
 80095de:	f01a 0f01 	tst.w	sl, #1
 80095e2:	d0dd      	beq.n	80095a0 <_dtoa_r+0xa58>
 80095e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095e8:	d1d7      	bne.n	800959a <_dtoa_r+0xa52>
 80095ea:	2339      	movs	r3, #57	; 0x39
 80095ec:	f88b 3000 	strb.w	r3, [fp]
 80095f0:	462b      	mov	r3, r5
 80095f2:	461d      	mov	r5, r3
 80095f4:	3b01      	subs	r3, #1
 80095f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095fa:	2a39      	cmp	r2, #57	; 0x39
 80095fc:	d071      	beq.n	80096e2 <_dtoa_r+0xb9a>
 80095fe:	3201      	adds	r2, #1
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	e746      	b.n	8009492 <_dtoa_r+0x94a>
 8009604:	2a00      	cmp	r2, #0
 8009606:	dd07      	ble.n	8009618 <_dtoa_r+0xad0>
 8009608:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800960c:	d0ed      	beq.n	80095ea <_dtoa_r+0xaa2>
 800960e:	f10a 0301 	add.w	r3, sl, #1
 8009612:	f88b 3000 	strb.w	r3, [fp]
 8009616:	e73c      	b.n	8009492 <_dtoa_r+0x94a>
 8009618:	9b05      	ldr	r3, [sp, #20]
 800961a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800961e:	4599      	cmp	r9, r3
 8009620:	d047      	beq.n	80096b2 <_dtoa_r+0xb6a>
 8009622:	ee18 1a10 	vmov	r1, s16
 8009626:	2300      	movs	r3, #0
 8009628:	220a      	movs	r2, #10
 800962a:	4620      	mov	r0, r4
 800962c:	f000 fb1a 	bl	8009c64 <__multadd>
 8009630:	45b8      	cmp	r8, r7
 8009632:	ee08 0a10 	vmov	s16, r0
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	f04f 020a 	mov.w	r2, #10
 800963e:	4641      	mov	r1, r8
 8009640:	4620      	mov	r0, r4
 8009642:	d106      	bne.n	8009652 <_dtoa_r+0xb0a>
 8009644:	f000 fb0e 	bl	8009c64 <__multadd>
 8009648:	4680      	mov	r8, r0
 800964a:	4607      	mov	r7, r0
 800964c:	f109 0901 	add.w	r9, r9, #1
 8009650:	e772      	b.n	8009538 <_dtoa_r+0x9f0>
 8009652:	f000 fb07 	bl	8009c64 <__multadd>
 8009656:	4639      	mov	r1, r7
 8009658:	4680      	mov	r8, r0
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4620      	mov	r0, r4
 8009660:	f000 fb00 	bl	8009c64 <__multadd>
 8009664:	4607      	mov	r7, r0
 8009666:	e7f1      	b.n	800964c <_dtoa_r+0xb04>
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	9d01      	ldr	r5, [sp, #4]
 800966e:	ee18 0a10 	vmov	r0, s16
 8009672:	4631      	mov	r1, r6
 8009674:	f7ff f9dc 	bl	8008a30 <quorem>
 8009678:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	f805 ab01 	strb.w	sl, [r5], #1
 8009682:	1aea      	subs	r2, r5, r3
 8009684:	9b02      	ldr	r3, [sp, #8]
 8009686:	4293      	cmp	r3, r2
 8009688:	dd09      	ble.n	800969e <_dtoa_r+0xb56>
 800968a:	ee18 1a10 	vmov	r1, s16
 800968e:	2300      	movs	r3, #0
 8009690:	220a      	movs	r2, #10
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fae6 	bl	8009c64 <__multadd>
 8009698:	ee08 0a10 	vmov	s16, r0
 800969c:	e7e7      	b.n	800966e <_dtoa_r+0xb26>
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bfc8      	it	gt
 80096a4:	461d      	movgt	r5, r3
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	bfd8      	it	le
 80096aa:	2501      	movle	r5, #1
 80096ac:	441d      	add	r5, r3
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	ee18 1a10 	vmov	r1, s16
 80096b6:	2201      	movs	r2, #1
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fc83 	bl	8009fc4 <__lshift>
 80096be:	4631      	mov	r1, r6
 80096c0:	ee08 0a10 	vmov	s16, r0
 80096c4:	f000 fcee 	bl	800a0a4 <__mcmp>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dc91      	bgt.n	80095f0 <_dtoa_r+0xaa8>
 80096cc:	d102      	bne.n	80096d4 <_dtoa_r+0xb8c>
 80096ce:	f01a 0f01 	tst.w	sl, #1
 80096d2:	d18d      	bne.n	80095f0 <_dtoa_r+0xaa8>
 80096d4:	462b      	mov	r3, r5
 80096d6:	461d      	mov	r5, r3
 80096d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096dc:	2a30      	cmp	r2, #48	; 0x30
 80096de:	d0fa      	beq.n	80096d6 <_dtoa_r+0xb8e>
 80096e0:	e6d7      	b.n	8009492 <_dtoa_r+0x94a>
 80096e2:	9a01      	ldr	r2, [sp, #4]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d184      	bne.n	80095f2 <_dtoa_r+0xaaa>
 80096e8:	9b00      	ldr	r3, [sp, #0]
 80096ea:	3301      	adds	r3, #1
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	2331      	movs	r3, #49	; 0x31
 80096f0:	7013      	strb	r3, [r2, #0]
 80096f2:	e6ce      	b.n	8009492 <_dtoa_r+0x94a>
 80096f4:	4b09      	ldr	r3, [pc, #36]	; (800971c <_dtoa_r+0xbd4>)
 80096f6:	f7ff ba95 	b.w	8008c24 <_dtoa_r+0xdc>
 80096fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f47f aa6e 	bne.w	8008bde <_dtoa_r+0x96>
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <_dtoa_r+0xbd8>)
 8009704:	f7ff ba8e 	b.w	8008c24 <_dtoa_r+0xdc>
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dcae      	bgt.n	800966c <_dtoa_r+0xb24>
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	2b02      	cmp	r3, #2
 8009712:	f73f aea8 	bgt.w	8009466 <_dtoa_r+0x91e>
 8009716:	e7a9      	b.n	800966c <_dtoa_r+0xb24>
 8009718:	0800af1f 	.word	0x0800af1f
 800971c:	0800ae7c 	.word	0x0800ae7c
 8009720:	0800aea0 	.word	0x0800aea0

08009724 <__sflush_r>:
 8009724:	898a      	ldrh	r2, [r1, #12]
 8009726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972a:	4605      	mov	r5, r0
 800972c:	0710      	lsls	r0, r2, #28
 800972e:	460c      	mov	r4, r1
 8009730:	d458      	bmi.n	80097e4 <__sflush_r+0xc0>
 8009732:	684b      	ldr	r3, [r1, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	dc05      	bgt.n	8009744 <__sflush_r+0x20>
 8009738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800973a:	2b00      	cmp	r3, #0
 800973c:	dc02      	bgt.n	8009744 <__sflush_r+0x20>
 800973e:	2000      	movs	r0, #0
 8009740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009746:	2e00      	cmp	r6, #0
 8009748:	d0f9      	beq.n	800973e <__sflush_r+0x1a>
 800974a:	2300      	movs	r3, #0
 800974c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009750:	682f      	ldr	r7, [r5, #0]
 8009752:	602b      	str	r3, [r5, #0]
 8009754:	d032      	beq.n	80097bc <__sflush_r+0x98>
 8009756:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	075a      	lsls	r2, r3, #29
 800975c:	d505      	bpl.n	800976a <__sflush_r+0x46>
 800975e:	6863      	ldr	r3, [r4, #4]
 8009760:	1ac0      	subs	r0, r0, r3
 8009762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009764:	b10b      	cbz	r3, 800976a <__sflush_r+0x46>
 8009766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009768:	1ac0      	subs	r0, r0, r3
 800976a:	2300      	movs	r3, #0
 800976c:	4602      	mov	r2, r0
 800976e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	4628      	mov	r0, r5
 8009774:	47b0      	blx	r6
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	d106      	bne.n	800978a <__sflush_r+0x66>
 800977c:	6829      	ldr	r1, [r5, #0]
 800977e:	291d      	cmp	r1, #29
 8009780:	d82c      	bhi.n	80097dc <__sflush_r+0xb8>
 8009782:	4a2a      	ldr	r2, [pc, #168]	; (800982c <__sflush_r+0x108>)
 8009784:	40ca      	lsrs	r2, r1
 8009786:	07d6      	lsls	r6, r2, #31
 8009788:	d528      	bpl.n	80097dc <__sflush_r+0xb8>
 800978a:	2200      	movs	r2, #0
 800978c:	6062      	str	r2, [r4, #4]
 800978e:	04d9      	lsls	r1, r3, #19
 8009790:	6922      	ldr	r2, [r4, #16]
 8009792:	6022      	str	r2, [r4, #0]
 8009794:	d504      	bpl.n	80097a0 <__sflush_r+0x7c>
 8009796:	1c42      	adds	r2, r0, #1
 8009798:	d101      	bne.n	800979e <__sflush_r+0x7a>
 800979a:	682b      	ldr	r3, [r5, #0]
 800979c:	b903      	cbnz	r3, 80097a0 <__sflush_r+0x7c>
 800979e:	6560      	str	r0, [r4, #84]	; 0x54
 80097a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097a2:	602f      	str	r7, [r5, #0]
 80097a4:	2900      	cmp	r1, #0
 80097a6:	d0ca      	beq.n	800973e <__sflush_r+0x1a>
 80097a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ac:	4299      	cmp	r1, r3
 80097ae:	d002      	beq.n	80097b6 <__sflush_r+0x92>
 80097b0:	4628      	mov	r0, r5
 80097b2:	f7fe fa71 	bl	8007c98 <_free_r>
 80097b6:	2000      	movs	r0, #0
 80097b8:	6360      	str	r0, [r4, #52]	; 0x34
 80097ba:	e7c1      	b.n	8009740 <__sflush_r+0x1c>
 80097bc:	6a21      	ldr	r1, [r4, #32]
 80097be:	2301      	movs	r3, #1
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b0      	blx	r6
 80097c4:	1c41      	adds	r1, r0, #1
 80097c6:	d1c7      	bne.n	8009758 <__sflush_r+0x34>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c4      	beq.n	8009758 <__sflush_r+0x34>
 80097ce:	2b1d      	cmp	r3, #29
 80097d0:	d001      	beq.n	80097d6 <__sflush_r+0xb2>
 80097d2:	2b16      	cmp	r3, #22
 80097d4:	d101      	bne.n	80097da <__sflush_r+0xb6>
 80097d6:	602f      	str	r7, [r5, #0]
 80097d8:	e7b1      	b.n	800973e <__sflush_r+0x1a>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	e7ad      	b.n	8009740 <__sflush_r+0x1c>
 80097e4:	690f      	ldr	r7, [r1, #16]
 80097e6:	2f00      	cmp	r7, #0
 80097e8:	d0a9      	beq.n	800973e <__sflush_r+0x1a>
 80097ea:	0793      	lsls	r3, r2, #30
 80097ec:	680e      	ldr	r6, [r1, #0]
 80097ee:	bf08      	it	eq
 80097f0:	694b      	ldreq	r3, [r1, #20]
 80097f2:	600f      	str	r7, [r1, #0]
 80097f4:	bf18      	it	ne
 80097f6:	2300      	movne	r3, #0
 80097f8:	eba6 0807 	sub.w	r8, r6, r7
 80097fc:	608b      	str	r3, [r1, #8]
 80097fe:	f1b8 0f00 	cmp.w	r8, #0
 8009802:	dd9c      	ble.n	800973e <__sflush_r+0x1a>
 8009804:	6a21      	ldr	r1, [r4, #32]
 8009806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009808:	4643      	mov	r3, r8
 800980a:	463a      	mov	r2, r7
 800980c:	4628      	mov	r0, r5
 800980e:	47b0      	blx	r6
 8009810:	2800      	cmp	r0, #0
 8009812:	dc06      	bgt.n	8009822 <__sflush_r+0xfe>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	f04f 30ff 	mov.w	r0, #4294967295
 8009820:	e78e      	b.n	8009740 <__sflush_r+0x1c>
 8009822:	4407      	add	r7, r0
 8009824:	eba8 0800 	sub.w	r8, r8, r0
 8009828:	e7e9      	b.n	80097fe <__sflush_r+0xda>
 800982a:	bf00      	nop
 800982c:	20400001 	.word	0x20400001

08009830 <_fflush_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	690b      	ldr	r3, [r1, #16]
 8009834:	4605      	mov	r5, r0
 8009836:	460c      	mov	r4, r1
 8009838:	b913      	cbnz	r3, 8009840 <_fflush_r+0x10>
 800983a:	2500      	movs	r5, #0
 800983c:	4628      	mov	r0, r5
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	b118      	cbz	r0, 800984a <_fflush_r+0x1a>
 8009842:	6983      	ldr	r3, [r0, #24]
 8009844:	b90b      	cbnz	r3, 800984a <_fflush_r+0x1a>
 8009846:	f000 f887 	bl	8009958 <__sinit>
 800984a:	4b14      	ldr	r3, [pc, #80]	; (800989c <_fflush_r+0x6c>)
 800984c:	429c      	cmp	r4, r3
 800984e:	d11b      	bne.n	8009888 <_fflush_r+0x58>
 8009850:	686c      	ldr	r4, [r5, #4]
 8009852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0ef      	beq.n	800983a <_fflush_r+0xa>
 800985a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800985c:	07d0      	lsls	r0, r2, #31
 800985e:	d404      	bmi.n	800986a <_fflush_r+0x3a>
 8009860:	0599      	lsls	r1, r3, #22
 8009862:	d402      	bmi.n	800986a <_fflush_r+0x3a>
 8009864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009866:	f000 f91a 	bl	8009a9e <__retarget_lock_acquire_recursive>
 800986a:	4628      	mov	r0, r5
 800986c:	4621      	mov	r1, r4
 800986e:	f7ff ff59 	bl	8009724 <__sflush_r>
 8009872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009874:	07da      	lsls	r2, r3, #31
 8009876:	4605      	mov	r5, r0
 8009878:	d4e0      	bmi.n	800983c <_fflush_r+0xc>
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	059b      	lsls	r3, r3, #22
 800987e:	d4dd      	bmi.n	800983c <_fflush_r+0xc>
 8009880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009882:	f000 f90d 	bl	8009aa0 <__retarget_lock_release_recursive>
 8009886:	e7d9      	b.n	800983c <_fflush_r+0xc>
 8009888:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <_fflush_r+0x70>)
 800988a:	429c      	cmp	r4, r3
 800988c:	d101      	bne.n	8009892 <_fflush_r+0x62>
 800988e:	68ac      	ldr	r4, [r5, #8]
 8009890:	e7df      	b.n	8009852 <_fflush_r+0x22>
 8009892:	4b04      	ldr	r3, [pc, #16]	; (80098a4 <_fflush_r+0x74>)
 8009894:	429c      	cmp	r4, r3
 8009896:	bf08      	it	eq
 8009898:	68ec      	ldreq	r4, [r5, #12]
 800989a:	e7da      	b.n	8009852 <_fflush_r+0x22>
 800989c:	0800af50 	.word	0x0800af50
 80098a0:	0800af70 	.word	0x0800af70
 80098a4:	0800af30 	.word	0x0800af30

080098a8 <std>:
 80098a8:	2300      	movs	r3, #0
 80098aa:	b510      	push	{r4, lr}
 80098ac:	4604      	mov	r4, r0
 80098ae:	e9c0 3300 	strd	r3, r3, [r0]
 80098b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098b6:	6083      	str	r3, [r0, #8]
 80098b8:	8181      	strh	r1, [r0, #12]
 80098ba:	6643      	str	r3, [r0, #100]	; 0x64
 80098bc:	81c2      	strh	r2, [r0, #14]
 80098be:	6183      	str	r3, [r0, #24]
 80098c0:	4619      	mov	r1, r3
 80098c2:	2208      	movs	r2, #8
 80098c4:	305c      	adds	r0, #92	; 0x5c
 80098c6:	f7fe f9c9 	bl	8007c5c <memset>
 80098ca:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <std+0x38>)
 80098cc:	6263      	str	r3, [r4, #36]	; 0x24
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <std+0x3c>)
 80098d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <std+0x40>)
 80098d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <std+0x44>)
 80098d8:	6224      	str	r4, [r4, #32]
 80098da:	6323      	str	r3, [r4, #48]	; 0x30
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	bf00      	nop
 80098e0:	0800a5bd 	.word	0x0800a5bd
 80098e4:	0800a5df 	.word	0x0800a5df
 80098e8:	0800a617 	.word	0x0800a617
 80098ec:	0800a63b 	.word	0x0800a63b

080098f0 <_cleanup_r>:
 80098f0:	4901      	ldr	r1, [pc, #4]	; (80098f8 <_cleanup_r+0x8>)
 80098f2:	f000 b8af 	b.w	8009a54 <_fwalk_reent>
 80098f6:	bf00      	nop
 80098f8:	08009831 	.word	0x08009831

080098fc <__sfmoreglue>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	2268      	movs	r2, #104	; 0x68
 8009900:	1e4d      	subs	r5, r1, #1
 8009902:	4355      	muls	r5, r2
 8009904:	460e      	mov	r6, r1
 8009906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800990a:	f7fe fa31 	bl	8007d70 <_malloc_r>
 800990e:	4604      	mov	r4, r0
 8009910:	b140      	cbz	r0, 8009924 <__sfmoreglue+0x28>
 8009912:	2100      	movs	r1, #0
 8009914:	e9c0 1600 	strd	r1, r6, [r0]
 8009918:	300c      	adds	r0, #12
 800991a:	60a0      	str	r0, [r4, #8]
 800991c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009920:	f7fe f99c 	bl	8007c5c <memset>
 8009924:	4620      	mov	r0, r4
 8009926:	bd70      	pop	{r4, r5, r6, pc}

08009928 <__sfp_lock_acquire>:
 8009928:	4801      	ldr	r0, [pc, #4]	; (8009930 <__sfp_lock_acquire+0x8>)
 800992a:	f000 b8b8 	b.w	8009a9e <__retarget_lock_acquire_recursive>
 800992e:	bf00      	nop
 8009930:	20000749 	.word	0x20000749

08009934 <__sfp_lock_release>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__sfp_lock_release+0x8>)
 8009936:	f000 b8b3 	b.w	8009aa0 <__retarget_lock_release_recursive>
 800993a:	bf00      	nop
 800993c:	20000749 	.word	0x20000749

08009940 <__sinit_lock_acquire>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__sinit_lock_acquire+0x8>)
 8009942:	f000 b8ac 	b.w	8009a9e <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	2000074a 	.word	0x2000074a

0800994c <__sinit_lock_release>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__sinit_lock_release+0x8>)
 800994e:	f000 b8a7 	b.w	8009aa0 <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	2000074a 	.word	0x2000074a

08009958 <__sinit>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4604      	mov	r4, r0
 800995c:	f7ff fff0 	bl	8009940 <__sinit_lock_acquire>
 8009960:	69a3      	ldr	r3, [r4, #24]
 8009962:	b11b      	cbz	r3, 800996c <__sinit+0x14>
 8009964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009968:	f7ff bff0 	b.w	800994c <__sinit_lock_release>
 800996c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009970:	6523      	str	r3, [r4, #80]	; 0x50
 8009972:	4b13      	ldr	r3, [pc, #76]	; (80099c0 <__sinit+0x68>)
 8009974:	4a13      	ldr	r2, [pc, #76]	; (80099c4 <__sinit+0x6c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	62a2      	str	r2, [r4, #40]	; 0x28
 800997a:	42a3      	cmp	r3, r4
 800997c:	bf04      	itt	eq
 800997e:	2301      	moveq	r3, #1
 8009980:	61a3      	streq	r3, [r4, #24]
 8009982:	4620      	mov	r0, r4
 8009984:	f000 f820 	bl	80099c8 <__sfp>
 8009988:	6060      	str	r0, [r4, #4]
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f81c 	bl	80099c8 <__sfp>
 8009990:	60a0      	str	r0, [r4, #8]
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f818 	bl	80099c8 <__sfp>
 8009998:	2200      	movs	r2, #0
 800999a:	60e0      	str	r0, [r4, #12]
 800999c:	2104      	movs	r1, #4
 800999e:	6860      	ldr	r0, [r4, #4]
 80099a0:	f7ff ff82 	bl	80098a8 <std>
 80099a4:	68a0      	ldr	r0, [r4, #8]
 80099a6:	2201      	movs	r2, #1
 80099a8:	2109      	movs	r1, #9
 80099aa:	f7ff ff7d 	bl	80098a8 <std>
 80099ae:	68e0      	ldr	r0, [r4, #12]
 80099b0:	2202      	movs	r2, #2
 80099b2:	2112      	movs	r1, #18
 80099b4:	f7ff ff78 	bl	80098a8 <std>
 80099b8:	2301      	movs	r3, #1
 80099ba:	61a3      	str	r3, [r4, #24]
 80099bc:	e7d2      	b.n	8009964 <__sinit+0xc>
 80099be:	bf00      	nop
 80099c0:	0800ae68 	.word	0x0800ae68
 80099c4:	080098f1 	.word	0x080098f1

080099c8 <__sfp>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	4607      	mov	r7, r0
 80099cc:	f7ff ffac 	bl	8009928 <__sfp_lock_acquire>
 80099d0:	4b1e      	ldr	r3, [pc, #120]	; (8009a4c <__sfp+0x84>)
 80099d2:	681e      	ldr	r6, [r3, #0]
 80099d4:	69b3      	ldr	r3, [r6, #24]
 80099d6:	b913      	cbnz	r3, 80099de <__sfp+0x16>
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff ffbd 	bl	8009958 <__sinit>
 80099de:	3648      	adds	r6, #72	; 0x48
 80099e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	d503      	bpl.n	80099f0 <__sfp+0x28>
 80099e8:	6833      	ldr	r3, [r6, #0]
 80099ea:	b30b      	cbz	r3, 8009a30 <__sfp+0x68>
 80099ec:	6836      	ldr	r6, [r6, #0]
 80099ee:	e7f7      	b.n	80099e0 <__sfp+0x18>
 80099f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099f4:	b9d5      	cbnz	r5, 8009a2c <__sfp+0x64>
 80099f6:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <__sfp+0x88>)
 80099f8:	60e3      	str	r3, [r4, #12]
 80099fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009a00:	f000 f84c 	bl	8009a9c <__retarget_lock_init_recursive>
 8009a04:	f7ff ff96 	bl	8009934 <__sfp_lock_release>
 8009a08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a10:	6025      	str	r5, [r4, #0]
 8009a12:	61a5      	str	r5, [r4, #24]
 8009a14:	2208      	movs	r2, #8
 8009a16:	4629      	mov	r1, r5
 8009a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a1c:	f7fe f91e 	bl	8007c5c <memset>
 8009a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2c:	3468      	adds	r4, #104	; 0x68
 8009a2e:	e7d9      	b.n	80099e4 <__sfp+0x1c>
 8009a30:	2104      	movs	r1, #4
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff ff62 	bl	80098fc <__sfmoreglue>
 8009a38:	4604      	mov	r4, r0
 8009a3a:	6030      	str	r0, [r6, #0]
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d1d5      	bne.n	80099ec <__sfp+0x24>
 8009a40:	f7ff ff78 	bl	8009934 <__sfp_lock_release>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	e7ee      	b.n	8009a28 <__sfp+0x60>
 8009a4a:	bf00      	nop
 8009a4c:	0800ae68 	.word	0x0800ae68
 8009a50:	ffff0001 	.word	0xffff0001

08009a54 <_fwalk_reent>:
 8009a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a58:	4606      	mov	r6, r0
 8009a5a:	4688      	mov	r8, r1
 8009a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a60:	2700      	movs	r7, #0
 8009a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a66:	f1b9 0901 	subs.w	r9, r9, #1
 8009a6a:	d505      	bpl.n	8009a78 <_fwalk_reent+0x24>
 8009a6c:	6824      	ldr	r4, [r4, #0]
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d1f7      	bne.n	8009a62 <_fwalk_reent+0xe>
 8009a72:	4638      	mov	r0, r7
 8009a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a78:	89ab      	ldrh	r3, [r5, #12]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d907      	bls.n	8009a8e <_fwalk_reent+0x3a>
 8009a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a82:	3301      	adds	r3, #1
 8009a84:	d003      	beq.n	8009a8e <_fwalk_reent+0x3a>
 8009a86:	4629      	mov	r1, r5
 8009a88:	4630      	mov	r0, r6
 8009a8a:	47c0      	blx	r8
 8009a8c:	4307      	orrs	r7, r0
 8009a8e:	3568      	adds	r5, #104	; 0x68
 8009a90:	e7e9      	b.n	8009a66 <_fwalk_reent+0x12>
	...

08009a94 <_localeconv_r>:
 8009a94:	4800      	ldr	r0, [pc, #0]	; (8009a98 <_localeconv_r+0x4>)
 8009a96:	4770      	bx	lr
 8009a98:	2000045c 	.word	0x2000045c

08009a9c <__retarget_lock_init_recursive>:
 8009a9c:	4770      	bx	lr

08009a9e <__retarget_lock_acquire_recursive>:
 8009a9e:	4770      	bx	lr

08009aa0 <__retarget_lock_release_recursive>:
 8009aa0:	4770      	bx	lr

08009aa2 <__swhatbuf_r>:
 8009aa2:	b570      	push	{r4, r5, r6, lr}
 8009aa4:	460e      	mov	r6, r1
 8009aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	b096      	sub	sp, #88	; 0x58
 8009aae:	4614      	mov	r4, r2
 8009ab0:	461d      	mov	r5, r3
 8009ab2:	da08      	bge.n	8009ac6 <__swhatbuf_r+0x24>
 8009ab4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	602a      	str	r2, [r5, #0]
 8009abc:	061a      	lsls	r2, r3, #24
 8009abe:	d410      	bmi.n	8009ae2 <__swhatbuf_r+0x40>
 8009ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac4:	e00e      	b.n	8009ae4 <__swhatbuf_r+0x42>
 8009ac6:	466a      	mov	r2, sp
 8009ac8:	f000 fe0e 	bl	800a6e8 <_fstat_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	dbf1      	blt.n	8009ab4 <__swhatbuf_r+0x12>
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ada:	425a      	negs	r2, r3
 8009adc:	415a      	adcs	r2, r3
 8009ade:	602a      	str	r2, [r5, #0]
 8009ae0:	e7ee      	b.n	8009ac0 <__swhatbuf_r+0x1e>
 8009ae2:	2340      	movs	r3, #64	; 0x40
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	b016      	add	sp, #88	; 0x58
 8009aea:	bd70      	pop	{r4, r5, r6, pc}

08009aec <__smakebuf_r>:
 8009aec:	898b      	ldrh	r3, [r1, #12]
 8009aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009af0:	079d      	lsls	r5, r3, #30
 8009af2:	4606      	mov	r6, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	d507      	bpl.n	8009b08 <__smakebuf_r+0x1c>
 8009af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	6123      	str	r3, [r4, #16]
 8009b00:	2301      	movs	r3, #1
 8009b02:	6163      	str	r3, [r4, #20]
 8009b04:	b002      	add	sp, #8
 8009b06:	bd70      	pop	{r4, r5, r6, pc}
 8009b08:	ab01      	add	r3, sp, #4
 8009b0a:	466a      	mov	r2, sp
 8009b0c:	f7ff ffc9 	bl	8009aa2 <__swhatbuf_r>
 8009b10:	9900      	ldr	r1, [sp, #0]
 8009b12:	4605      	mov	r5, r0
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7fe f92b 	bl	8007d70 <_malloc_r>
 8009b1a:	b948      	cbnz	r0, 8009b30 <__smakebuf_r+0x44>
 8009b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b20:	059a      	lsls	r2, r3, #22
 8009b22:	d4ef      	bmi.n	8009b04 <__smakebuf_r+0x18>
 8009b24:	f023 0303 	bic.w	r3, r3, #3
 8009b28:	f043 0302 	orr.w	r3, r3, #2
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	e7e3      	b.n	8009af8 <__smakebuf_r+0xc>
 8009b30:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <__smakebuf_r+0x7c>)
 8009b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	6020      	str	r0, [r4, #0]
 8009b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	9b00      	ldr	r3, [sp, #0]
 8009b40:	6163      	str	r3, [r4, #20]
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	6120      	str	r0, [r4, #16]
 8009b46:	b15b      	cbz	r3, 8009b60 <__smakebuf_r+0x74>
 8009b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f000 fddd 	bl	800a70c <_isatty_r>
 8009b52:	b128      	cbz	r0, 8009b60 <__smakebuf_r+0x74>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f023 0303 	bic.w	r3, r3, #3
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	89a0      	ldrh	r0, [r4, #12]
 8009b62:	4305      	orrs	r5, r0
 8009b64:	81a5      	strh	r5, [r4, #12]
 8009b66:	e7cd      	b.n	8009b04 <__smakebuf_r+0x18>
 8009b68:	080098f1 	.word	0x080098f1

08009b6c <memcpy>:
 8009b6c:	440a      	add	r2, r1
 8009b6e:	4291      	cmp	r1, r2
 8009b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b74:	d100      	bne.n	8009b78 <memcpy+0xc>
 8009b76:	4770      	bx	lr
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b82:	4291      	cmp	r1, r2
 8009b84:	d1f9      	bne.n	8009b7a <memcpy+0xe>
 8009b86:	bd10      	pop	{r4, pc}

08009b88 <__malloc_lock>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__malloc_lock+0x8>)
 8009b8a:	f7ff bf88 	b.w	8009a9e <__retarget_lock_acquire_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20000748 	.word	0x20000748

08009b94 <__malloc_unlock>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__malloc_unlock+0x8>)
 8009b96:	f7ff bf83 	b.w	8009aa0 <__retarget_lock_release_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20000748 	.word	0x20000748

08009ba0 <_Balloc>:
 8009ba0:	b570      	push	{r4, r5, r6, lr}
 8009ba2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	b976      	cbnz	r6, 8009bc8 <_Balloc+0x28>
 8009baa:	2010      	movs	r0, #16
 8009bac:	f7fe f846 	bl	8007c3c <malloc>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	6260      	str	r0, [r4, #36]	; 0x24
 8009bb4:	b920      	cbnz	r0, 8009bc0 <_Balloc+0x20>
 8009bb6:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <_Balloc+0x78>)
 8009bb8:	4818      	ldr	r0, [pc, #96]	; (8009c1c <_Balloc+0x7c>)
 8009bba:	2166      	movs	r1, #102	; 0x66
 8009bbc:	f000 fd54 	bl	800a668 <__assert_func>
 8009bc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bc4:	6006      	str	r6, [r0, #0]
 8009bc6:	60c6      	str	r6, [r0, #12]
 8009bc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bca:	68f3      	ldr	r3, [r6, #12]
 8009bcc:	b183      	cbz	r3, 8009bf0 <_Balloc+0x50>
 8009bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bd6:	b9b8      	cbnz	r0, 8009c08 <_Balloc+0x68>
 8009bd8:	2101      	movs	r1, #1
 8009bda:	fa01 f605 	lsl.w	r6, r1, r5
 8009bde:	1d72      	adds	r2, r6, #5
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7fe f842 	bl	8007c6c <_calloc_r>
 8009be8:	b160      	cbz	r0, 8009c04 <_Balloc+0x64>
 8009bea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bee:	e00e      	b.n	8009c0e <_Balloc+0x6e>
 8009bf0:	2221      	movs	r2, #33	; 0x21
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7fe f839 	bl	8007c6c <_calloc_r>
 8009bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bfc:	60f0      	str	r0, [r6, #12]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e4      	bne.n	8009bce <_Balloc+0x2e>
 8009c04:	2000      	movs	r0, #0
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	6802      	ldr	r2, [r0, #0]
 8009c0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c14:	e7f7      	b.n	8009c06 <_Balloc+0x66>
 8009c16:	bf00      	nop
 8009c18:	0800aead 	.word	0x0800aead
 8009c1c:	0800af90 	.word	0x0800af90

08009c20 <_Bfree>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c24:	4605      	mov	r5, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	b976      	cbnz	r6, 8009c48 <_Bfree+0x28>
 8009c2a:	2010      	movs	r0, #16
 8009c2c:	f7fe f806 	bl	8007c3c <malloc>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6268      	str	r0, [r5, #36]	; 0x24
 8009c34:	b920      	cbnz	r0, 8009c40 <_Bfree+0x20>
 8009c36:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <_Bfree+0x3c>)
 8009c38:	4809      	ldr	r0, [pc, #36]	; (8009c60 <_Bfree+0x40>)
 8009c3a:	218a      	movs	r1, #138	; 0x8a
 8009c3c:	f000 fd14 	bl	800a668 <__assert_func>
 8009c40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c44:	6006      	str	r6, [r0, #0]
 8009c46:	60c6      	str	r6, [r0, #12]
 8009c48:	b13c      	cbz	r4, 8009c5a <_Bfree+0x3a>
 8009c4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c4c:	6862      	ldr	r2, [r4, #4]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c54:	6021      	str	r1, [r4, #0]
 8009c56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	0800aead 	.word	0x0800aead
 8009c60:	0800af90 	.word	0x0800af90

08009c64 <__multadd>:
 8009c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c68:	690d      	ldr	r5, [r1, #16]
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	461e      	mov	r6, r3
 8009c70:	f101 0c14 	add.w	ip, r1, #20
 8009c74:	2000      	movs	r0, #0
 8009c76:	f8dc 3000 	ldr.w	r3, [ip]
 8009c7a:	b299      	uxth	r1, r3
 8009c7c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c80:	0c1e      	lsrs	r6, r3, #16
 8009c82:	0c0b      	lsrs	r3, r1, #16
 8009c84:	fb02 3306 	mla	r3, r2, r6, r3
 8009c88:	b289      	uxth	r1, r1
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c90:	4285      	cmp	r5, r0
 8009c92:	f84c 1b04 	str.w	r1, [ip], #4
 8009c96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c9a:	dcec      	bgt.n	8009c76 <__multadd+0x12>
 8009c9c:	b30e      	cbz	r6, 8009ce2 <__multadd+0x7e>
 8009c9e:	68a3      	ldr	r3, [r4, #8]
 8009ca0:	42ab      	cmp	r3, r5
 8009ca2:	dc19      	bgt.n	8009cd8 <__multadd+0x74>
 8009ca4:	6861      	ldr	r1, [r4, #4]
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	3101      	adds	r1, #1
 8009caa:	f7ff ff79 	bl	8009ba0 <_Balloc>
 8009cae:	4680      	mov	r8, r0
 8009cb0:	b928      	cbnz	r0, 8009cbe <__multadd+0x5a>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <__multadd+0x84>)
 8009cb6:	480d      	ldr	r0, [pc, #52]	; (8009cec <__multadd+0x88>)
 8009cb8:	21b5      	movs	r1, #181	; 0xb5
 8009cba:	f000 fcd5 	bl	800a668 <__assert_func>
 8009cbe:	6922      	ldr	r2, [r4, #16]
 8009cc0:	3202      	adds	r2, #2
 8009cc2:	f104 010c 	add.w	r1, r4, #12
 8009cc6:	0092      	lsls	r2, r2, #2
 8009cc8:	300c      	adds	r0, #12
 8009cca:	f7ff ff4f 	bl	8009b6c <memcpy>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f7ff ffa5 	bl	8009c20 <_Bfree>
 8009cd6:	4644      	mov	r4, r8
 8009cd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cdc:	3501      	adds	r5, #1
 8009cde:	615e      	str	r6, [r3, #20]
 8009ce0:	6125      	str	r5, [r4, #16]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce8:	0800af1f 	.word	0x0800af1f
 8009cec:	0800af90 	.word	0x0800af90

08009cf0 <__hi0bits>:
 8009cf0:	0c03      	lsrs	r3, r0, #16
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	b9d3      	cbnz	r3, 8009d2c <__hi0bits+0x3c>
 8009cf6:	0400      	lsls	r0, r0, #16
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cfe:	bf04      	itt	eq
 8009d00:	0200      	lsleq	r0, r0, #8
 8009d02:	3308      	addeq	r3, #8
 8009d04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d08:	bf04      	itt	eq
 8009d0a:	0100      	lsleq	r0, r0, #4
 8009d0c:	3304      	addeq	r3, #4
 8009d0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d12:	bf04      	itt	eq
 8009d14:	0080      	lsleq	r0, r0, #2
 8009d16:	3302      	addeq	r3, #2
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	db05      	blt.n	8009d28 <__hi0bits+0x38>
 8009d1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d20:	f103 0301 	add.w	r3, r3, #1
 8009d24:	bf08      	it	eq
 8009d26:	2320      	moveq	r3, #32
 8009d28:	4618      	mov	r0, r3
 8009d2a:	4770      	bx	lr
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e7e4      	b.n	8009cfa <__hi0bits+0xa>

08009d30 <__lo0bits>:
 8009d30:	6803      	ldr	r3, [r0, #0]
 8009d32:	f013 0207 	ands.w	r2, r3, #7
 8009d36:	4601      	mov	r1, r0
 8009d38:	d00b      	beq.n	8009d52 <__lo0bits+0x22>
 8009d3a:	07da      	lsls	r2, r3, #31
 8009d3c:	d423      	bmi.n	8009d86 <__lo0bits+0x56>
 8009d3e:	0798      	lsls	r0, r3, #30
 8009d40:	bf49      	itett	mi
 8009d42:	085b      	lsrmi	r3, r3, #1
 8009d44:	089b      	lsrpl	r3, r3, #2
 8009d46:	2001      	movmi	r0, #1
 8009d48:	600b      	strmi	r3, [r1, #0]
 8009d4a:	bf5c      	itt	pl
 8009d4c:	600b      	strpl	r3, [r1, #0]
 8009d4e:	2002      	movpl	r0, #2
 8009d50:	4770      	bx	lr
 8009d52:	b298      	uxth	r0, r3
 8009d54:	b9a8      	cbnz	r0, 8009d82 <__lo0bits+0x52>
 8009d56:	0c1b      	lsrs	r3, r3, #16
 8009d58:	2010      	movs	r0, #16
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	b90a      	cbnz	r2, 8009d62 <__lo0bits+0x32>
 8009d5e:	3008      	adds	r0, #8
 8009d60:	0a1b      	lsrs	r3, r3, #8
 8009d62:	071a      	lsls	r2, r3, #28
 8009d64:	bf04      	itt	eq
 8009d66:	091b      	lsreq	r3, r3, #4
 8009d68:	3004      	addeq	r0, #4
 8009d6a:	079a      	lsls	r2, r3, #30
 8009d6c:	bf04      	itt	eq
 8009d6e:	089b      	lsreq	r3, r3, #2
 8009d70:	3002      	addeq	r0, #2
 8009d72:	07da      	lsls	r2, r3, #31
 8009d74:	d403      	bmi.n	8009d7e <__lo0bits+0x4e>
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	f100 0001 	add.w	r0, r0, #1
 8009d7c:	d005      	beq.n	8009d8a <__lo0bits+0x5a>
 8009d7e:	600b      	str	r3, [r1, #0]
 8009d80:	4770      	bx	lr
 8009d82:	4610      	mov	r0, r2
 8009d84:	e7e9      	b.n	8009d5a <__lo0bits+0x2a>
 8009d86:	2000      	movs	r0, #0
 8009d88:	4770      	bx	lr
 8009d8a:	2020      	movs	r0, #32
 8009d8c:	4770      	bx	lr
	...

08009d90 <__i2b>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	2101      	movs	r1, #1
 8009d96:	f7ff ff03 	bl	8009ba0 <_Balloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	b928      	cbnz	r0, 8009daa <__i2b+0x1a>
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <__i2b+0x24>)
 8009da0:	4805      	ldr	r0, [pc, #20]	; (8009db8 <__i2b+0x28>)
 8009da2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009da6:	f000 fc5f 	bl	800a668 <__assert_func>
 8009daa:	2301      	movs	r3, #1
 8009dac:	6144      	str	r4, [r0, #20]
 8009dae:	6103      	str	r3, [r0, #16]
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	0800af1f 	.word	0x0800af1f
 8009db8:	0800af90 	.word	0x0800af90

08009dbc <__multiply>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	4691      	mov	r9, r2
 8009dc2:	690a      	ldr	r2, [r1, #16]
 8009dc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	bfb8      	it	lt
 8009dcc:	460b      	movlt	r3, r1
 8009dce:	460c      	mov	r4, r1
 8009dd0:	bfbc      	itt	lt
 8009dd2:	464c      	movlt	r4, r9
 8009dd4:	4699      	movlt	r9, r3
 8009dd6:	6927      	ldr	r7, [r4, #16]
 8009dd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	6861      	ldr	r1, [r4, #4]
 8009de0:	eb07 060a 	add.w	r6, r7, sl
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	b085      	sub	sp, #20
 8009de8:	bfb8      	it	lt
 8009dea:	3101      	addlt	r1, #1
 8009dec:	f7ff fed8 	bl	8009ba0 <_Balloc>
 8009df0:	b930      	cbnz	r0, 8009e00 <__multiply+0x44>
 8009df2:	4602      	mov	r2, r0
 8009df4:	4b44      	ldr	r3, [pc, #272]	; (8009f08 <__multiply+0x14c>)
 8009df6:	4845      	ldr	r0, [pc, #276]	; (8009f0c <__multiply+0x150>)
 8009df8:	f240 115d 	movw	r1, #349	; 0x15d
 8009dfc:	f000 fc34 	bl	800a668 <__assert_func>
 8009e00:	f100 0514 	add.w	r5, r0, #20
 8009e04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e08:	462b      	mov	r3, r5
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	d321      	bcc.n	8009e54 <__multiply+0x98>
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e18:	f109 0314 	add.w	r3, r9, #20
 8009e1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	1b3a      	subs	r2, r7, r4
 8009e24:	3a15      	subs	r2, #21
 8009e26:	f022 0203 	bic.w	r2, r2, #3
 8009e2a:	3204      	adds	r2, #4
 8009e2c:	f104 0115 	add.w	r1, r4, #21
 8009e30:	428f      	cmp	r7, r1
 8009e32:	bf38      	it	cc
 8009e34:	2204      	movcc	r2, #4
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	9a02      	ldr	r2, [sp, #8]
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d80c      	bhi.n	8009e5a <__multiply+0x9e>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	dd03      	ble.n	8009e4c <__multiply+0x90>
 8009e44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d05a      	beq.n	8009f02 <__multiply+0x146>
 8009e4c:	6106      	str	r6, [r0, #16]
 8009e4e:	b005      	add	sp, #20
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	f843 2b04 	str.w	r2, [r3], #4
 8009e58:	e7d8      	b.n	8009e0c <__multiply+0x50>
 8009e5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	d024      	beq.n	8009eae <__multiply+0xf2>
 8009e64:	f104 0e14 	add.w	lr, r4, #20
 8009e68:	46a9      	mov	r9, r5
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e72:	f8d9 1000 	ldr.w	r1, [r9]
 8009e76:	fa1f fb82 	uxth.w	fp, r2
 8009e7a:	b289      	uxth	r1, r1
 8009e7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e84:	f8d9 2000 	ldr.w	r2, [r9]
 8009e88:	4461      	add	r1, ip
 8009e8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e96:	b289      	uxth	r1, r1
 8009e98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e9c:	4577      	cmp	r7, lr
 8009e9e:	f849 1b04 	str.w	r1, [r9], #4
 8009ea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ea6:	d8e2      	bhi.n	8009e6e <__multiply+0xb2>
 8009ea8:	9a01      	ldr	r2, [sp, #4]
 8009eaa:	f845 c002 	str.w	ip, [r5, r2]
 8009eae:	9a03      	ldr	r2, [sp, #12]
 8009eb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	f1b9 0f00 	cmp.w	r9, #0
 8009eba:	d020      	beq.n	8009efe <__multiply+0x142>
 8009ebc:	6829      	ldr	r1, [r5, #0]
 8009ebe:	f104 0c14 	add.w	ip, r4, #20
 8009ec2:	46ae      	mov	lr, r5
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ecc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ed0:	fb09 220b 	mla	r2, r9, fp, r2
 8009ed4:	4492      	add	sl, r2
 8009ed6:	b289      	uxth	r1, r1
 8009ed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009edc:	f84e 1b04 	str.w	r1, [lr], #4
 8009ee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ee4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ee8:	0c12      	lsrs	r2, r2, #16
 8009eea:	fb09 1102 	mla	r1, r9, r2, r1
 8009eee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ef2:	4567      	cmp	r7, ip
 8009ef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ef8:	d8e6      	bhi.n	8009ec8 <__multiply+0x10c>
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	50a9      	str	r1, [r5, r2]
 8009efe:	3504      	adds	r5, #4
 8009f00:	e79a      	b.n	8009e38 <__multiply+0x7c>
 8009f02:	3e01      	subs	r6, #1
 8009f04:	e79c      	b.n	8009e40 <__multiply+0x84>
 8009f06:	bf00      	nop
 8009f08:	0800af1f 	.word	0x0800af1f
 8009f0c:	0800af90 	.word	0x0800af90

08009f10 <__pow5mult>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4615      	mov	r5, r2
 8009f16:	f012 0203 	ands.w	r2, r2, #3
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	d007      	beq.n	8009f30 <__pow5mult+0x20>
 8009f20:	4c25      	ldr	r4, [pc, #148]	; (8009fb8 <__pow5mult+0xa8>)
 8009f22:	3a01      	subs	r2, #1
 8009f24:	2300      	movs	r3, #0
 8009f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f2a:	f7ff fe9b 	bl	8009c64 <__multadd>
 8009f2e:	4607      	mov	r7, r0
 8009f30:	10ad      	asrs	r5, r5, #2
 8009f32:	d03d      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f36:	b97c      	cbnz	r4, 8009f58 <__pow5mult+0x48>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	f7fd fe7f 	bl	8007c3c <malloc>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6270      	str	r0, [r6, #36]	; 0x24
 8009f42:	b928      	cbnz	r0, 8009f50 <__pow5mult+0x40>
 8009f44:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <__pow5mult+0xac>)
 8009f46:	481e      	ldr	r0, [pc, #120]	; (8009fc0 <__pow5mult+0xb0>)
 8009f48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f4c:	f000 fb8c 	bl	800a668 <__assert_func>
 8009f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f54:	6004      	str	r4, [r0, #0]
 8009f56:	60c4      	str	r4, [r0, #12]
 8009f58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f60:	b94c      	cbnz	r4, 8009f76 <__pow5mult+0x66>
 8009f62:	f240 2171 	movw	r1, #625	; 0x271
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ff12 	bl	8009d90 <__i2b>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f72:	4604      	mov	r4, r0
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	f04f 0900 	mov.w	r9, #0
 8009f7a:	07eb      	lsls	r3, r5, #31
 8009f7c:	d50a      	bpl.n	8009f94 <__pow5mult+0x84>
 8009f7e:	4639      	mov	r1, r7
 8009f80:	4622      	mov	r2, r4
 8009f82:	4630      	mov	r0, r6
 8009f84:	f7ff ff1a 	bl	8009dbc <__multiply>
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff fe47 	bl	8009c20 <_Bfree>
 8009f92:	4647      	mov	r7, r8
 8009f94:	106d      	asrs	r5, r5, #1
 8009f96:	d00b      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	b938      	cbnz	r0, 8009fac <__pow5mult+0x9c>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ff0b 	bl	8009dbc <__multiply>
 8009fa6:	6020      	str	r0, [r4, #0]
 8009fa8:	f8c0 9000 	str.w	r9, [r0]
 8009fac:	4604      	mov	r4, r0
 8009fae:	e7e4      	b.n	8009f7a <__pow5mult+0x6a>
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800b0e0 	.word	0x0800b0e0
 8009fbc:	0800aead 	.word	0x0800aead
 8009fc0:	0800af90 	.word	0x0800af90

08009fc4 <__lshift>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	6849      	ldr	r1, [r1, #4]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	4691      	mov	r9, r2
 8009fd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fdc:	f108 0601 	add.w	r6, r8, #1
 8009fe0:	42b3      	cmp	r3, r6
 8009fe2:	db0b      	blt.n	8009ffc <__lshift+0x38>
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff fddb 	bl	8009ba0 <_Balloc>
 8009fea:	4605      	mov	r5, r0
 8009fec:	b948      	cbnz	r0, 800a002 <__lshift+0x3e>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <__lshift+0xd8>)
 8009ff2:	482b      	ldr	r0, [pc, #172]	; (800a0a0 <__lshift+0xdc>)
 8009ff4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ff8:	f000 fb36 	bl	800a668 <__assert_func>
 8009ffc:	3101      	adds	r1, #1
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	e7ee      	b.n	8009fe0 <__lshift+0x1c>
 800a002:	2300      	movs	r3, #0
 800a004:	f100 0114 	add.w	r1, r0, #20
 800a008:	f100 0210 	add.w	r2, r0, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	4553      	cmp	r3, sl
 800a010:	db37      	blt.n	800a082 <__lshift+0xbe>
 800a012:	6920      	ldr	r0, [r4, #16]
 800a014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a018:	f104 0314 	add.w	r3, r4, #20
 800a01c:	f019 091f 	ands.w	r9, r9, #31
 800a020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a028:	d02f      	beq.n	800a08a <__lshift+0xc6>
 800a02a:	f1c9 0e20 	rsb	lr, r9, #32
 800a02e:	468a      	mov	sl, r1
 800a030:	f04f 0c00 	mov.w	ip, #0
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	fa02 f209 	lsl.w	r2, r2, r9
 800a03a:	ea42 020c 	orr.w	r2, r2, ip
 800a03e:	f84a 2b04 	str.w	r2, [sl], #4
 800a042:	f853 2b04 	ldr.w	r2, [r3], #4
 800a046:	4298      	cmp	r0, r3
 800a048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a04c:	d8f2      	bhi.n	800a034 <__lshift+0x70>
 800a04e:	1b03      	subs	r3, r0, r4
 800a050:	3b15      	subs	r3, #21
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	3304      	adds	r3, #4
 800a058:	f104 0215 	add.w	r2, r4, #21
 800a05c:	4290      	cmp	r0, r2
 800a05e:	bf38      	it	cc
 800a060:	2304      	movcc	r3, #4
 800a062:	f841 c003 	str.w	ip, [r1, r3]
 800a066:	f1bc 0f00 	cmp.w	ip, #0
 800a06a:	d001      	beq.n	800a070 <__lshift+0xac>
 800a06c:	f108 0602 	add.w	r6, r8, #2
 800a070:	3e01      	subs	r6, #1
 800a072:	4638      	mov	r0, r7
 800a074:	612e      	str	r6, [r5, #16]
 800a076:	4621      	mov	r1, r4
 800a078:	f7ff fdd2 	bl	8009c20 <_Bfree>
 800a07c:	4628      	mov	r0, r5
 800a07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a082:	f842 0f04 	str.w	r0, [r2, #4]!
 800a086:	3301      	adds	r3, #1
 800a088:	e7c1      	b.n	800a00e <__lshift+0x4a>
 800a08a:	3904      	subs	r1, #4
 800a08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a090:	f841 2f04 	str.w	r2, [r1, #4]!
 800a094:	4298      	cmp	r0, r3
 800a096:	d8f9      	bhi.n	800a08c <__lshift+0xc8>
 800a098:	e7ea      	b.n	800a070 <__lshift+0xac>
 800a09a:	bf00      	nop
 800a09c:	0800af1f 	.word	0x0800af1f
 800a0a0:	0800af90 	.word	0x0800af90

0800a0a4 <__mcmp>:
 800a0a4:	b530      	push	{r4, r5, lr}
 800a0a6:	6902      	ldr	r2, [r0, #16]
 800a0a8:	690c      	ldr	r4, [r1, #16]
 800a0aa:	1b12      	subs	r2, r2, r4
 800a0ac:	d10e      	bne.n	800a0cc <__mcmp+0x28>
 800a0ae:	f100 0314 	add.w	r3, r0, #20
 800a0b2:	3114      	adds	r1, #20
 800a0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d003      	beq.n	800a0d0 <__mcmp+0x2c>
 800a0c8:	d305      	bcc.n	800a0d6 <__mcmp+0x32>
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	bd30      	pop	{r4, r5, pc}
 800a0d0:	4283      	cmp	r3, r0
 800a0d2:	d3f3      	bcc.n	800a0bc <__mcmp+0x18>
 800a0d4:	e7fa      	b.n	800a0cc <__mcmp+0x28>
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0da:	e7f7      	b.n	800a0cc <__mcmp+0x28>

0800a0dc <__mdiff>:
 800a0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4690      	mov	r8, r2
 800a0ea:	f7ff ffdb 	bl	800a0a4 <__mcmp>
 800a0ee:	1e05      	subs	r5, r0, #0
 800a0f0:	d110      	bne.n	800a114 <__mdiff+0x38>
 800a0f2:	4629      	mov	r1, r5
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff fd53 	bl	8009ba0 <_Balloc>
 800a0fa:	b930      	cbnz	r0, 800a10a <__mdiff+0x2e>
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <__mdiff+0x10c>)
 800a0fe:	4602      	mov	r2, r0
 800a100:	f240 2132 	movw	r1, #562	; 0x232
 800a104:	4839      	ldr	r0, [pc, #228]	; (800a1ec <__mdiff+0x110>)
 800a106:	f000 faaf 	bl	800a668 <__assert_func>
 800a10a:	2301      	movs	r3, #1
 800a10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	bfa4      	itt	ge
 800a116:	4643      	movge	r3, r8
 800a118:	46a0      	movge	r8, r4
 800a11a:	4630      	mov	r0, r6
 800a11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a120:	bfa6      	itte	ge
 800a122:	461c      	movge	r4, r3
 800a124:	2500      	movge	r5, #0
 800a126:	2501      	movlt	r5, #1
 800a128:	f7ff fd3a 	bl	8009ba0 <_Balloc>
 800a12c:	b920      	cbnz	r0, 800a138 <__mdiff+0x5c>
 800a12e:	4b2e      	ldr	r3, [pc, #184]	; (800a1e8 <__mdiff+0x10c>)
 800a130:	4602      	mov	r2, r0
 800a132:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a136:	e7e5      	b.n	800a104 <__mdiff+0x28>
 800a138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a13c:	6926      	ldr	r6, [r4, #16]
 800a13e:	60c5      	str	r5, [r0, #12]
 800a140:	f104 0914 	add.w	r9, r4, #20
 800a144:	f108 0514 	add.w	r5, r8, #20
 800a148:	f100 0e14 	add.w	lr, r0, #20
 800a14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a154:	f108 0210 	add.w	r2, r8, #16
 800a158:	46f2      	mov	sl, lr
 800a15a:	2100      	movs	r1, #0
 800a15c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a164:	fa1f f883 	uxth.w	r8, r3
 800a168:	fa11 f18b 	uxtah	r1, r1, fp
 800a16c:	0c1b      	lsrs	r3, r3, #16
 800a16e:	eba1 0808 	sub.w	r8, r1, r8
 800a172:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a176:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a17a:	fa1f f888 	uxth.w	r8, r8
 800a17e:	1419      	asrs	r1, r3, #16
 800a180:	454e      	cmp	r6, r9
 800a182:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a186:	f84a 3b04 	str.w	r3, [sl], #4
 800a18a:	d8e7      	bhi.n	800a15c <__mdiff+0x80>
 800a18c:	1b33      	subs	r3, r6, r4
 800a18e:	3b15      	subs	r3, #21
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	3304      	adds	r3, #4
 800a196:	3415      	adds	r4, #21
 800a198:	42a6      	cmp	r6, r4
 800a19a:	bf38      	it	cc
 800a19c:	2304      	movcc	r3, #4
 800a19e:	441d      	add	r5, r3
 800a1a0:	4473      	add	r3, lr
 800a1a2:	469e      	mov	lr, r3
 800a1a4:	462e      	mov	r6, r5
 800a1a6:	4566      	cmp	r6, ip
 800a1a8:	d30e      	bcc.n	800a1c8 <__mdiff+0xec>
 800a1aa:	f10c 0203 	add.w	r2, ip, #3
 800a1ae:	1b52      	subs	r2, r2, r5
 800a1b0:	f022 0203 	bic.w	r2, r2, #3
 800a1b4:	3d03      	subs	r5, #3
 800a1b6:	45ac      	cmp	ip, r5
 800a1b8:	bf38      	it	cc
 800a1ba:	2200      	movcc	r2, #0
 800a1bc:	441a      	add	r2, r3
 800a1be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1c2:	b17b      	cbz	r3, 800a1e4 <__mdiff+0x108>
 800a1c4:	6107      	str	r7, [r0, #16]
 800a1c6:	e7a3      	b.n	800a110 <__mdiff+0x34>
 800a1c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1cc:	fa11 f288 	uxtah	r2, r1, r8
 800a1d0:	1414      	asrs	r4, r2, #16
 800a1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a1e0:	1421      	asrs	r1, r4, #16
 800a1e2:	e7e0      	b.n	800a1a6 <__mdiff+0xca>
 800a1e4:	3f01      	subs	r7, #1
 800a1e6:	e7ea      	b.n	800a1be <__mdiff+0xe2>
 800a1e8:	0800af1f 	.word	0x0800af1f
 800a1ec:	0800af90 	.word	0x0800af90

0800a1f0 <__d2b>:
 800a1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	4689      	mov	r9, r1
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	ec57 6b10 	vmov	r6, r7, d0
 800a1fc:	4690      	mov	r8, r2
 800a1fe:	f7ff fccf 	bl	8009ba0 <_Balloc>
 800a202:	4604      	mov	r4, r0
 800a204:	b930      	cbnz	r0, 800a214 <__d2b+0x24>
 800a206:	4602      	mov	r2, r0
 800a208:	4b25      	ldr	r3, [pc, #148]	; (800a2a0 <__d2b+0xb0>)
 800a20a:	4826      	ldr	r0, [pc, #152]	; (800a2a4 <__d2b+0xb4>)
 800a20c:	f240 310a 	movw	r1, #778	; 0x30a
 800a210:	f000 fa2a 	bl	800a668 <__assert_func>
 800a214:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a21c:	bb35      	cbnz	r5, 800a26c <__d2b+0x7c>
 800a21e:	2e00      	cmp	r6, #0
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	d028      	beq.n	800a276 <__d2b+0x86>
 800a224:	4668      	mov	r0, sp
 800a226:	9600      	str	r6, [sp, #0]
 800a228:	f7ff fd82 	bl	8009d30 <__lo0bits>
 800a22c:	9900      	ldr	r1, [sp, #0]
 800a22e:	b300      	cbz	r0, 800a272 <__d2b+0x82>
 800a230:	9a01      	ldr	r2, [sp, #4]
 800a232:	f1c0 0320 	rsb	r3, r0, #32
 800a236:	fa02 f303 	lsl.w	r3, r2, r3
 800a23a:	430b      	orrs	r3, r1
 800a23c:	40c2      	lsrs	r2, r0
 800a23e:	6163      	str	r3, [r4, #20]
 800a240:	9201      	str	r2, [sp, #4]
 800a242:	9b01      	ldr	r3, [sp, #4]
 800a244:	61a3      	str	r3, [r4, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	bf14      	ite	ne
 800a24a:	2202      	movne	r2, #2
 800a24c:	2201      	moveq	r2, #1
 800a24e:	6122      	str	r2, [r4, #16]
 800a250:	b1d5      	cbz	r5, 800a288 <__d2b+0x98>
 800a252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a256:	4405      	add	r5, r0
 800a258:	f8c9 5000 	str.w	r5, [r9]
 800a25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a260:	f8c8 0000 	str.w	r0, [r8]
 800a264:	4620      	mov	r0, r4
 800a266:	b003      	add	sp, #12
 800a268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a270:	e7d5      	b.n	800a21e <__d2b+0x2e>
 800a272:	6161      	str	r1, [r4, #20]
 800a274:	e7e5      	b.n	800a242 <__d2b+0x52>
 800a276:	a801      	add	r0, sp, #4
 800a278:	f7ff fd5a 	bl	8009d30 <__lo0bits>
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	6163      	str	r3, [r4, #20]
 800a280:	2201      	movs	r2, #1
 800a282:	6122      	str	r2, [r4, #16]
 800a284:	3020      	adds	r0, #32
 800a286:	e7e3      	b.n	800a250 <__d2b+0x60>
 800a288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a28c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a290:	f8c9 0000 	str.w	r0, [r9]
 800a294:	6918      	ldr	r0, [r3, #16]
 800a296:	f7ff fd2b 	bl	8009cf0 <__hi0bits>
 800a29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a29e:	e7df      	b.n	800a260 <__d2b+0x70>
 800a2a0:	0800af1f 	.word	0x0800af1f
 800a2a4:	0800af90 	.word	0x0800af90

0800a2a8 <_realloc_r>:
 800a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	4680      	mov	r8, r0
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	460e      	mov	r6, r1
 800a2b2:	b921      	cbnz	r1, 800a2be <_realloc_r+0x16>
 800a2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	f7fd bd59 	b.w	8007d70 <_malloc_r>
 800a2be:	b92a      	cbnz	r2, 800a2cc <_realloc_r+0x24>
 800a2c0:	f7fd fcea 	bl	8007c98 <_free_r>
 800a2c4:	4625      	mov	r5, r4
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2cc:	f000 fa6c 	bl	800a7a8 <_malloc_usable_size_r>
 800a2d0:	4284      	cmp	r4, r0
 800a2d2:	4607      	mov	r7, r0
 800a2d4:	d802      	bhi.n	800a2dc <_realloc_r+0x34>
 800a2d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2da:	d812      	bhi.n	800a302 <_realloc_r+0x5a>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4640      	mov	r0, r8
 800a2e0:	f7fd fd46 	bl	8007d70 <_malloc_r>
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d0ed      	beq.n	800a2c6 <_realloc_r+0x1e>
 800a2ea:	42bc      	cmp	r4, r7
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	bf28      	it	cs
 800a2f2:	463a      	movcs	r2, r7
 800a2f4:	f7ff fc3a 	bl	8009b6c <memcpy>
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f7fd fccc 	bl	8007c98 <_free_r>
 800a300:	e7e1      	b.n	800a2c6 <_realloc_r+0x1e>
 800a302:	4635      	mov	r5, r6
 800a304:	e7df      	b.n	800a2c6 <_realloc_r+0x1e>

0800a306 <__ssputs_r>:
 800a306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30a:	688e      	ldr	r6, [r1, #8]
 800a30c:	429e      	cmp	r6, r3
 800a30e:	4682      	mov	sl, r0
 800a310:	460c      	mov	r4, r1
 800a312:	4690      	mov	r8, r2
 800a314:	461f      	mov	r7, r3
 800a316:	d838      	bhi.n	800a38a <__ssputs_r+0x84>
 800a318:	898a      	ldrh	r2, [r1, #12]
 800a31a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a31e:	d032      	beq.n	800a386 <__ssputs_r+0x80>
 800a320:	6825      	ldr	r5, [r4, #0]
 800a322:	6909      	ldr	r1, [r1, #16]
 800a324:	eba5 0901 	sub.w	r9, r5, r1
 800a328:	6965      	ldr	r5, [r4, #20]
 800a32a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a32e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a332:	3301      	adds	r3, #1
 800a334:	444b      	add	r3, r9
 800a336:	106d      	asrs	r5, r5, #1
 800a338:	429d      	cmp	r5, r3
 800a33a:	bf38      	it	cc
 800a33c:	461d      	movcc	r5, r3
 800a33e:	0553      	lsls	r3, r2, #21
 800a340:	d531      	bpl.n	800a3a6 <__ssputs_r+0xa0>
 800a342:	4629      	mov	r1, r5
 800a344:	f7fd fd14 	bl	8007d70 <_malloc_r>
 800a348:	4606      	mov	r6, r0
 800a34a:	b950      	cbnz	r0, 800a362 <__ssputs_r+0x5c>
 800a34c:	230c      	movs	r3, #12
 800a34e:	f8ca 3000 	str.w	r3, [sl]
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	f04f 30ff 	mov.w	r0, #4294967295
 800a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a362:	6921      	ldr	r1, [r4, #16]
 800a364:	464a      	mov	r2, r9
 800a366:	f7ff fc01 	bl	8009b6c <memcpy>
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	6126      	str	r6, [r4, #16]
 800a378:	6165      	str	r5, [r4, #20]
 800a37a:	444e      	add	r6, r9
 800a37c:	eba5 0509 	sub.w	r5, r5, r9
 800a380:	6026      	str	r6, [r4, #0]
 800a382:	60a5      	str	r5, [r4, #8]
 800a384:	463e      	mov	r6, r7
 800a386:	42be      	cmp	r6, r7
 800a388:	d900      	bls.n	800a38c <__ssputs_r+0x86>
 800a38a:	463e      	mov	r6, r7
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	4632      	mov	r2, r6
 800a390:	4641      	mov	r1, r8
 800a392:	f000 f9ef 	bl	800a774 <memmove>
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	1b9b      	subs	r3, r3, r6
 800a39a:	60a3      	str	r3, [r4, #8]
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	4433      	add	r3, r6
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	e7db      	b.n	800a35e <__ssputs_r+0x58>
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	f7ff ff7e 	bl	800a2a8 <_realloc_r>
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d1e1      	bne.n	800a376 <__ssputs_r+0x70>
 800a3b2:	6921      	ldr	r1, [r4, #16]
 800a3b4:	4650      	mov	r0, sl
 800a3b6:	f7fd fc6f 	bl	8007c98 <_free_r>
 800a3ba:	e7c7      	b.n	800a34c <__ssputs_r+0x46>

0800a3bc <_svfiprintf_r>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	4698      	mov	r8, r3
 800a3c2:	898b      	ldrh	r3, [r1, #12]
 800a3c4:	061b      	lsls	r3, r3, #24
 800a3c6:	b09d      	sub	sp, #116	; 0x74
 800a3c8:	4607      	mov	r7, r0
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	d50e      	bpl.n	800a3ee <_svfiprintf_r+0x32>
 800a3d0:	690b      	ldr	r3, [r1, #16]
 800a3d2:	b963      	cbnz	r3, 800a3ee <_svfiprintf_r+0x32>
 800a3d4:	2140      	movs	r1, #64	; 0x40
 800a3d6:	f7fd fccb 	bl	8007d70 <_malloc_r>
 800a3da:	6028      	str	r0, [r5, #0]
 800a3dc:	6128      	str	r0, [r5, #16]
 800a3de:	b920      	cbnz	r0, 800a3ea <_svfiprintf_r+0x2e>
 800a3e0:	230c      	movs	r3, #12
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	e0d1      	b.n	800a58e <_svfiprintf_r+0x1d2>
 800a3ea:	2340      	movs	r3, #64	; 0x40
 800a3ec:	616b      	str	r3, [r5, #20]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f2:	2320      	movs	r3, #32
 800a3f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3fc:	2330      	movs	r3, #48	; 0x30
 800a3fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5a8 <_svfiprintf_r+0x1ec>
 800a402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a406:	f04f 0901 	mov.w	r9, #1
 800a40a:	4623      	mov	r3, r4
 800a40c:	469a      	mov	sl, r3
 800a40e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a412:	b10a      	cbz	r2, 800a418 <_svfiprintf_r+0x5c>
 800a414:	2a25      	cmp	r2, #37	; 0x25
 800a416:	d1f9      	bne.n	800a40c <_svfiprintf_r+0x50>
 800a418:	ebba 0b04 	subs.w	fp, sl, r4
 800a41c:	d00b      	beq.n	800a436 <_svfiprintf_r+0x7a>
 800a41e:	465b      	mov	r3, fp
 800a420:	4622      	mov	r2, r4
 800a422:	4629      	mov	r1, r5
 800a424:	4638      	mov	r0, r7
 800a426:	f7ff ff6e 	bl	800a306 <__ssputs_r>
 800a42a:	3001      	adds	r0, #1
 800a42c:	f000 80aa 	beq.w	800a584 <_svfiprintf_r+0x1c8>
 800a430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a432:	445a      	add	r2, fp
 800a434:	9209      	str	r2, [sp, #36]	; 0x24
 800a436:	f89a 3000 	ldrb.w	r3, [sl]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 80a2 	beq.w	800a584 <_svfiprintf_r+0x1c8>
 800a440:	2300      	movs	r3, #0
 800a442:	f04f 32ff 	mov.w	r2, #4294967295
 800a446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a44a:	f10a 0a01 	add.w	sl, sl, #1
 800a44e:	9304      	str	r3, [sp, #16]
 800a450:	9307      	str	r3, [sp, #28]
 800a452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a456:	931a      	str	r3, [sp, #104]	; 0x68
 800a458:	4654      	mov	r4, sl
 800a45a:	2205      	movs	r2, #5
 800a45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a460:	4851      	ldr	r0, [pc, #324]	; (800a5a8 <_svfiprintf_r+0x1ec>)
 800a462:	f7f5 fec5 	bl	80001f0 <memchr>
 800a466:	9a04      	ldr	r2, [sp, #16]
 800a468:	b9d8      	cbnz	r0, 800a4a2 <_svfiprintf_r+0xe6>
 800a46a:	06d0      	lsls	r0, r2, #27
 800a46c:	bf44      	itt	mi
 800a46e:	2320      	movmi	r3, #32
 800a470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a474:	0711      	lsls	r1, r2, #28
 800a476:	bf44      	itt	mi
 800a478:	232b      	movmi	r3, #43	; 0x2b
 800a47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47e:	f89a 3000 	ldrb.w	r3, [sl]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d015      	beq.n	800a4b2 <_svfiprintf_r+0xf6>
 800a486:	9a07      	ldr	r2, [sp, #28]
 800a488:	4654      	mov	r4, sl
 800a48a:	2000      	movs	r0, #0
 800a48c:	f04f 0c0a 	mov.w	ip, #10
 800a490:	4621      	mov	r1, r4
 800a492:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a496:	3b30      	subs	r3, #48	; 0x30
 800a498:	2b09      	cmp	r3, #9
 800a49a:	d94e      	bls.n	800a53a <_svfiprintf_r+0x17e>
 800a49c:	b1b0      	cbz	r0, 800a4cc <_svfiprintf_r+0x110>
 800a49e:	9207      	str	r2, [sp, #28]
 800a4a0:	e014      	b.n	800a4cc <_svfiprintf_r+0x110>
 800a4a2:	eba0 0308 	sub.w	r3, r0, r8
 800a4a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	46a2      	mov	sl, r4
 800a4b0:	e7d2      	b.n	800a458 <_svfiprintf_r+0x9c>
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	1d19      	adds	r1, r3, #4
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	9103      	str	r1, [sp, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bfbb      	ittet	lt
 800a4be:	425b      	neglt	r3, r3
 800a4c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c4:	9307      	strge	r3, [sp, #28]
 800a4c6:	9307      	strlt	r3, [sp, #28]
 800a4c8:	bfb8      	it	lt
 800a4ca:	9204      	strlt	r2, [sp, #16]
 800a4cc:	7823      	ldrb	r3, [r4, #0]
 800a4ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d0:	d10c      	bne.n	800a4ec <_svfiprintf_r+0x130>
 800a4d2:	7863      	ldrb	r3, [r4, #1]
 800a4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d6:	d135      	bne.n	800a544 <_svfiprintf_r+0x188>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	1d1a      	adds	r2, r3, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	9203      	str	r2, [sp, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bfb8      	it	lt
 800a4e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4e8:	3402      	adds	r4, #2
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5b8 <_svfiprintf_r+0x1fc>
 800a4f0:	7821      	ldrb	r1, [r4, #0]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	4650      	mov	r0, sl
 800a4f6:	f7f5 fe7b 	bl	80001f0 <memchr>
 800a4fa:	b140      	cbz	r0, 800a50e <_svfiprintf_r+0x152>
 800a4fc:	2340      	movs	r3, #64	; 0x40
 800a4fe:	eba0 000a 	sub.w	r0, r0, sl
 800a502:	fa03 f000 	lsl.w	r0, r3, r0
 800a506:	9b04      	ldr	r3, [sp, #16]
 800a508:	4303      	orrs	r3, r0
 800a50a:	3401      	adds	r4, #1
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a512:	4826      	ldr	r0, [pc, #152]	; (800a5ac <_svfiprintf_r+0x1f0>)
 800a514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a518:	2206      	movs	r2, #6
 800a51a:	f7f5 fe69 	bl	80001f0 <memchr>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d038      	beq.n	800a594 <_svfiprintf_r+0x1d8>
 800a522:	4b23      	ldr	r3, [pc, #140]	; (800a5b0 <_svfiprintf_r+0x1f4>)
 800a524:	bb1b      	cbnz	r3, 800a56e <_svfiprintf_r+0x1b2>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	3307      	adds	r3, #7
 800a52a:	f023 0307 	bic.w	r3, r3, #7
 800a52e:	3308      	adds	r3, #8
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a534:	4433      	add	r3, r6
 800a536:	9309      	str	r3, [sp, #36]	; 0x24
 800a538:	e767      	b.n	800a40a <_svfiprintf_r+0x4e>
 800a53a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a53e:	460c      	mov	r4, r1
 800a540:	2001      	movs	r0, #1
 800a542:	e7a5      	b.n	800a490 <_svfiprintf_r+0xd4>
 800a544:	2300      	movs	r3, #0
 800a546:	3401      	adds	r4, #1
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	4619      	mov	r1, r3
 800a54c:	f04f 0c0a 	mov.w	ip, #10
 800a550:	4620      	mov	r0, r4
 800a552:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a556:	3a30      	subs	r2, #48	; 0x30
 800a558:	2a09      	cmp	r2, #9
 800a55a:	d903      	bls.n	800a564 <_svfiprintf_r+0x1a8>
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0c5      	beq.n	800a4ec <_svfiprintf_r+0x130>
 800a560:	9105      	str	r1, [sp, #20]
 800a562:	e7c3      	b.n	800a4ec <_svfiprintf_r+0x130>
 800a564:	fb0c 2101 	mla	r1, ip, r1, r2
 800a568:	4604      	mov	r4, r0
 800a56a:	2301      	movs	r3, #1
 800a56c:	e7f0      	b.n	800a550 <_svfiprintf_r+0x194>
 800a56e:	ab03      	add	r3, sp, #12
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	462a      	mov	r2, r5
 800a574:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <_svfiprintf_r+0x1f8>)
 800a576:	a904      	add	r1, sp, #16
 800a578:	4638      	mov	r0, r7
 800a57a:	f7fd fd0d 	bl	8007f98 <_printf_float>
 800a57e:	1c42      	adds	r2, r0, #1
 800a580:	4606      	mov	r6, r0
 800a582:	d1d6      	bne.n	800a532 <_svfiprintf_r+0x176>
 800a584:	89ab      	ldrh	r3, [r5, #12]
 800a586:	065b      	lsls	r3, r3, #25
 800a588:	f53f af2c 	bmi.w	800a3e4 <_svfiprintf_r+0x28>
 800a58c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a58e:	b01d      	add	sp, #116	; 0x74
 800a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a594:	ab03      	add	r3, sp, #12
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	462a      	mov	r2, r5
 800a59a:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <_svfiprintf_r+0x1f8>)
 800a59c:	a904      	add	r1, sp, #16
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f7fd ff9e 	bl	80084e0 <_printf_i>
 800a5a4:	e7eb      	b.n	800a57e <_svfiprintf_r+0x1c2>
 800a5a6:	bf00      	nop
 800a5a8:	0800b0ec 	.word	0x0800b0ec
 800a5ac:	0800b0f6 	.word	0x0800b0f6
 800a5b0:	08007f99 	.word	0x08007f99
 800a5b4:	0800a307 	.word	0x0800a307
 800a5b8:	0800b0f2 	.word	0x0800b0f2

0800a5bc <__sread>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c4:	f000 fa52 	bl	800aa6c <_read_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	bfab      	itete	ge
 800a5cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a5d0:	181b      	addge	r3, r3, r0
 800a5d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5d6:	bfac      	ite	ge
 800a5d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5da:	81a3      	strhlt	r3, [r4, #12]
 800a5dc:	bd10      	pop	{r4, pc}

0800a5de <__swrite>:
 800a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	898b      	ldrh	r3, [r1, #12]
 800a5e6:	05db      	lsls	r3, r3, #23
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4616      	mov	r6, r2
 800a5ee:	d505      	bpl.n	800a5fc <__swrite+0x1e>
 800a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f000 f898 	bl	800a72c <_lseek_r>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	4632      	mov	r2, r6
 800a60a:	463b      	mov	r3, r7
 800a60c:	4628      	mov	r0, r5
 800a60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	f000 b817 	b.w	800a644 <_write_r>

0800a616 <__sseek>:
 800a616:	b510      	push	{r4, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61e:	f000 f885 	bl	800a72c <_lseek_r>
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	bf15      	itete	ne
 800a628:	6560      	strne	r0, [r4, #84]	; 0x54
 800a62a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a62e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a632:	81a3      	strheq	r3, [r4, #12]
 800a634:	bf18      	it	ne
 800a636:	81a3      	strhne	r3, [r4, #12]
 800a638:	bd10      	pop	{r4, pc}

0800a63a <__sclose>:
 800a63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63e:	f000 b831 	b.w	800a6a4 <_close_r>
	...

0800a644 <_write_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d07      	ldr	r5, [pc, #28]	; (800a664 <_write_r+0x20>)
 800a648:	4604      	mov	r4, r0
 800a64a:	4608      	mov	r0, r1
 800a64c:	4611      	mov	r1, r2
 800a64e:	2200      	movs	r2, #0
 800a650:	602a      	str	r2, [r5, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	f7f6 fc32 	bl	8000ebc <_write>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_write_r+0x1e>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_write_r+0x1e>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	2000074c 	.word	0x2000074c

0800a668 <__assert_func>:
 800a668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a66a:	4614      	mov	r4, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	4b09      	ldr	r3, [pc, #36]	; (800a694 <__assert_func+0x2c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4605      	mov	r5, r0
 800a674:	68d8      	ldr	r0, [r3, #12]
 800a676:	b14c      	cbz	r4, 800a68c <__assert_func+0x24>
 800a678:	4b07      	ldr	r3, [pc, #28]	; (800a698 <__assert_func+0x30>)
 800a67a:	9100      	str	r1, [sp, #0]
 800a67c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a680:	4906      	ldr	r1, [pc, #24]	; (800a69c <__assert_func+0x34>)
 800a682:	462b      	mov	r3, r5
 800a684:	f000 f81e 	bl	800a6c4 <fiprintf>
 800a688:	f000 fa0f 	bl	800aaaa <abort>
 800a68c:	4b04      	ldr	r3, [pc, #16]	; (800a6a0 <__assert_func+0x38>)
 800a68e:	461c      	mov	r4, r3
 800a690:	e7f3      	b.n	800a67a <__assert_func+0x12>
 800a692:	bf00      	nop
 800a694:	20000308 	.word	0x20000308
 800a698:	0800b0fd 	.word	0x0800b0fd
 800a69c:	0800b10a 	.word	0x0800b10a
 800a6a0:	0800b138 	.word	0x0800b138

0800a6a4 <_close_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d06      	ldr	r5, [pc, #24]	; (800a6c0 <_close_r+0x1c>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f7 fa0b 	bl	8001aca <_close>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_close_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_close_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	2000074c 	.word	0x2000074c

0800a6c4 <fiprintf>:
 800a6c4:	b40e      	push	{r1, r2, r3}
 800a6c6:	b503      	push	{r0, r1, lr}
 800a6c8:	4601      	mov	r1, r0
 800a6ca:	ab03      	add	r3, sp, #12
 800a6cc:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <fiprintf+0x20>)
 800a6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6d2:	6800      	ldr	r0, [r0, #0]
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f000 f899 	bl	800a80c <_vfiprintf_r>
 800a6da:	b002      	add	sp, #8
 800a6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e0:	b003      	add	sp, #12
 800a6e2:	4770      	bx	lr
 800a6e4:	20000308 	.word	0x20000308

0800a6e8 <_fstat_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_fstat_r+0x20>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	f7f7 f9f4 	bl	8001ae2 <_fstat>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d102      	bne.n	800a704 <_fstat_r+0x1c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b103      	cbz	r3, 800a704 <_fstat_r+0x1c>
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	2000074c 	.word	0x2000074c

0800a70c <_isatty_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d06      	ldr	r5, [pc, #24]	; (800a728 <_isatty_r+0x1c>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7f7 f9f3 	bl	8001b02 <_isatty>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_isatty_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_isatty_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	2000074c 	.word	0x2000074c

0800a72c <_lseek_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	; (800a74c <_lseek_r+0x20>)
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	2200      	movs	r2, #0
 800a738:	602a      	str	r2, [r5, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f7f7 f9ec 	bl	8001b18 <_lseek>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_lseek_r+0x1e>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_lseek_r+0x1e>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	2000074c 	.word	0x2000074c

0800a750 <__ascii_mbtowc>:
 800a750:	b082      	sub	sp, #8
 800a752:	b901      	cbnz	r1, 800a756 <__ascii_mbtowc+0x6>
 800a754:	a901      	add	r1, sp, #4
 800a756:	b142      	cbz	r2, 800a76a <__ascii_mbtowc+0x1a>
 800a758:	b14b      	cbz	r3, 800a76e <__ascii_mbtowc+0x1e>
 800a75a:	7813      	ldrb	r3, [r2, #0]
 800a75c:	600b      	str	r3, [r1, #0]
 800a75e:	7812      	ldrb	r2, [r2, #0]
 800a760:	1e10      	subs	r0, r2, #0
 800a762:	bf18      	it	ne
 800a764:	2001      	movne	r0, #1
 800a766:	b002      	add	sp, #8
 800a768:	4770      	bx	lr
 800a76a:	4610      	mov	r0, r2
 800a76c:	e7fb      	b.n	800a766 <__ascii_mbtowc+0x16>
 800a76e:	f06f 0001 	mvn.w	r0, #1
 800a772:	e7f8      	b.n	800a766 <__ascii_mbtowc+0x16>

0800a774 <memmove>:
 800a774:	4288      	cmp	r0, r1
 800a776:	b510      	push	{r4, lr}
 800a778:	eb01 0402 	add.w	r4, r1, r2
 800a77c:	d902      	bls.n	800a784 <memmove+0x10>
 800a77e:	4284      	cmp	r4, r0
 800a780:	4623      	mov	r3, r4
 800a782:	d807      	bhi.n	800a794 <memmove+0x20>
 800a784:	1e43      	subs	r3, r0, #1
 800a786:	42a1      	cmp	r1, r4
 800a788:	d008      	beq.n	800a79c <memmove+0x28>
 800a78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a792:	e7f8      	b.n	800a786 <memmove+0x12>
 800a794:	4402      	add	r2, r0
 800a796:	4601      	mov	r1, r0
 800a798:	428a      	cmp	r2, r1
 800a79a:	d100      	bne.n	800a79e <memmove+0x2a>
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7a6:	e7f7      	b.n	800a798 <memmove+0x24>

0800a7a8 <_malloc_usable_size_r>:
 800a7a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ac:	1f18      	subs	r0, r3, #4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bfbc      	itt	lt
 800a7b2:	580b      	ldrlt	r3, [r1, r0]
 800a7b4:	18c0      	addlt	r0, r0, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <__sfputc_r>:
 800a7b8:	6893      	ldr	r3, [r2, #8]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	b410      	push	{r4}
 800a7c0:	6093      	str	r3, [r2, #8]
 800a7c2:	da08      	bge.n	800a7d6 <__sfputc_r+0x1e>
 800a7c4:	6994      	ldr	r4, [r2, #24]
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	db01      	blt.n	800a7ce <__sfputc_r+0x16>
 800a7ca:	290a      	cmp	r1, #10
 800a7cc:	d103      	bne.n	800a7d6 <__sfputc_r+0x1e>
 800a7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d2:	f7fe b86d 	b.w	80088b0 <__swbuf_r>
 800a7d6:	6813      	ldr	r3, [r2, #0]
 800a7d8:	1c58      	adds	r0, r3, #1
 800a7da:	6010      	str	r0, [r2, #0]
 800a7dc:	7019      	strb	r1, [r3, #0]
 800a7de:	4608      	mov	r0, r1
 800a7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <__sfputs_r>:
 800a7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	18d5      	adds	r5, r2, r3
 800a7f0:	42ac      	cmp	r4, r5
 800a7f2:	d101      	bne.n	800a7f8 <__sfputs_r+0x12>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e007      	b.n	800a808 <__sfputs_r+0x22>
 800a7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fc:	463a      	mov	r2, r7
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7ff ffda 	bl	800a7b8 <__sfputc_r>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d1f3      	bne.n	800a7f0 <__sfputs_r+0xa>
 800a808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a80c <_vfiprintf_r>:
 800a80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a810:	460d      	mov	r5, r1
 800a812:	b09d      	sub	sp, #116	; 0x74
 800a814:	4614      	mov	r4, r2
 800a816:	4698      	mov	r8, r3
 800a818:	4606      	mov	r6, r0
 800a81a:	b118      	cbz	r0, 800a824 <_vfiprintf_r+0x18>
 800a81c:	6983      	ldr	r3, [r0, #24]
 800a81e:	b90b      	cbnz	r3, 800a824 <_vfiprintf_r+0x18>
 800a820:	f7ff f89a 	bl	8009958 <__sinit>
 800a824:	4b89      	ldr	r3, [pc, #548]	; (800aa4c <_vfiprintf_r+0x240>)
 800a826:	429d      	cmp	r5, r3
 800a828:	d11b      	bne.n	800a862 <_vfiprintf_r+0x56>
 800a82a:	6875      	ldr	r5, [r6, #4]
 800a82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a82e:	07d9      	lsls	r1, r3, #31
 800a830:	d405      	bmi.n	800a83e <_vfiprintf_r+0x32>
 800a832:	89ab      	ldrh	r3, [r5, #12]
 800a834:	059a      	lsls	r2, r3, #22
 800a836:	d402      	bmi.n	800a83e <_vfiprintf_r+0x32>
 800a838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a83a:	f7ff f930 	bl	8009a9e <__retarget_lock_acquire_recursive>
 800a83e:	89ab      	ldrh	r3, [r5, #12]
 800a840:	071b      	lsls	r3, r3, #28
 800a842:	d501      	bpl.n	800a848 <_vfiprintf_r+0x3c>
 800a844:	692b      	ldr	r3, [r5, #16]
 800a846:	b9eb      	cbnz	r3, 800a884 <_vfiprintf_r+0x78>
 800a848:	4629      	mov	r1, r5
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7fe f882 	bl	8008954 <__swsetup_r>
 800a850:	b1c0      	cbz	r0, 800a884 <_vfiprintf_r+0x78>
 800a852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a854:	07dc      	lsls	r4, r3, #31
 800a856:	d50e      	bpl.n	800a876 <_vfiprintf_r+0x6a>
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	b01d      	add	sp, #116	; 0x74
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a862:	4b7b      	ldr	r3, [pc, #492]	; (800aa50 <_vfiprintf_r+0x244>)
 800a864:	429d      	cmp	r5, r3
 800a866:	d101      	bne.n	800a86c <_vfiprintf_r+0x60>
 800a868:	68b5      	ldr	r5, [r6, #8]
 800a86a:	e7df      	b.n	800a82c <_vfiprintf_r+0x20>
 800a86c:	4b79      	ldr	r3, [pc, #484]	; (800aa54 <_vfiprintf_r+0x248>)
 800a86e:	429d      	cmp	r5, r3
 800a870:	bf08      	it	eq
 800a872:	68f5      	ldreq	r5, [r6, #12]
 800a874:	e7da      	b.n	800a82c <_vfiprintf_r+0x20>
 800a876:	89ab      	ldrh	r3, [r5, #12]
 800a878:	0598      	lsls	r0, r3, #22
 800a87a:	d4ed      	bmi.n	800a858 <_vfiprintf_r+0x4c>
 800a87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a87e:	f7ff f90f 	bl	8009aa0 <__retarget_lock_release_recursive>
 800a882:	e7e9      	b.n	800a858 <_vfiprintf_r+0x4c>
 800a884:	2300      	movs	r3, #0
 800a886:	9309      	str	r3, [sp, #36]	; 0x24
 800a888:	2320      	movs	r3, #32
 800a88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a892:	2330      	movs	r3, #48	; 0x30
 800a894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa58 <_vfiprintf_r+0x24c>
 800a898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a89c:	f04f 0901 	mov.w	r9, #1
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	469a      	mov	sl, r3
 800a8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a8:	b10a      	cbz	r2, 800a8ae <_vfiprintf_r+0xa2>
 800a8aa:	2a25      	cmp	r2, #37	; 0x25
 800a8ac:	d1f9      	bne.n	800a8a2 <_vfiprintf_r+0x96>
 800a8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a8b2:	d00b      	beq.n	800a8cc <_vfiprintf_r+0xc0>
 800a8b4:	465b      	mov	r3, fp
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff ff93 	bl	800a7e6 <__sfputs_r>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f000 80aa 	beq.w	800aa1a <_vfiprintf_r+0x20e>
 800a8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c8:	445a      	add	r2, fp
 800a8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 80a2 	beq.w	800aa1a <_vfiprintf_r+0x20e>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e0:	f10a 0a01 	add.w	sl, sl, #1
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	9307      	str	r3, [sp, #28]
 800a8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ee:	4654      	mov	r4, sl
 800a8f0:	2205      	movs	r2, #5
 800a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f6:	4858      	ldr	r0, [pc, #352]	; (800aa58 <_vfiprintf_r+0x24c>)
 800a8f8:	f7f5 fc7a 	bl	80001f0 <memchr>
 800a8fc:	9a04      	ldr	r2, [sp, #16]
 800a8fe:	b9d8      	cbnz	r0, 800a938 <_vfiprintf_r+0x12c>
 800a900:	06d1      	lsls	r1, r2, #27
 800a902:	bf44      	itt	mi
 800a904:	2320      	movmi	r3, #32
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90a:	0713      	lsls	r3, r2, #28
 800a90c:	bf44      	itt	mi
 800a90e:	232b      	movmi	r3, #43	; 0x2b
 800a910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a914:	f89a 3000 	ldrb.w	r3, [sl]
 800a918:	2b2a      	cmp	r3, #42	; 0x2a
 800a91a:	d015      	beq.n	800a948 <_vfiprintf_r+0x13c>
 800a91c:	9a07      	ldr	r2, [sp, #28]
 800a91e:	4654      	mov	r4, sl
 800a920:	2000      	movs	r0, #0
 800a922:	f04f 0c0a 	mov.w	ip, #10
 800a926:	4621      	mov	r1, r4
 800a928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a92c:	3b30      	subs	r3, #48	; 0x30
 800a92e:	2b09      	cmp	r3, #9
 800a930:	d94e      	bls.n	800a9d0 <_vfiprintf_r+0x1c4>
 800a932:	b1b0      	cbz	r0, 800a962 <_vfiprintf_r+0x156>
 800a934:	9207      	str	r2, [sp, #28]
 800a936:	e014      	b.n	800a962 <_vfiprintf_r+0x156>
 800a938:	eba0 0308 	sub.w	r3, r0, r8
 800a93c:	fa09 f303 	lsl.w	r3, r9, r3
 800a940:	4313      	orrs	r3, r2
 800a942:	9304      	str	r3, [sp, #16]
 800a944:	46a2      	mov	sl, r4
 800a946:	e7d2      	b.n	800a8ee <_vfiprintf_r+0xe2>
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	1d19      	adds	r1, r3, #4
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	9103      	str	r1, [sp, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	bfbb      	ittet	lt
 800a954:	425b      	neglt	r3, r3
 800a956:	f042 0202 	orrlt.w	r2, r2, #2
 800a95a:	9307      	strge	r3, [sp, #28]
 800a95c:	9307      	strlt	r3, [sp, #28]
 800a95e:	bfb8      	it	lt
 800a960:	9204      	strlt	r2, [sp, #16]
 800a962:	7823      	ldrb	r3, [r4, #0]
 800a964:	2b2e      	cmp	r3, #46	; 0x2e
 800a966:	d10c      	bne.n	800a982 <_vfiprintf_r+0x176>
 800a968:	7863      	ldrb	r3, [r4, #1]
 800a96a:	2b2a      	cmp	r3, #42	; 0x2a
 800a96c:	d135      	bne.n	800a9da <_vfiprintf_r+0x1ce>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	1d1a      	adds	r2, r3, #4
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	9203      	str	r2, [sp, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	bfb8      	it	lt
 800a97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a97e:	3402      	adds	r4, #2
 800a980:	9305      	str	r3, [sp, #20]
 800a982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa68 <_vfiprintf_r+0x25c>
 800a986:	7821      	ldrb	r1, [r4, #0]
 800a988:	2203      	movs	r2, #3
 800a98a:	4650      	mov	r0, sl
 800a98c:	f7f5 fc30 	bl	80001f0 <memchr>
 800a990:	b140      	cbz	r0, 800a9a4 <_vfiprintf_r+0x198>
 800a992:	2340      	movs	r3, #64	; 0x40
 800a994:	eba0 000a 	sub.w	r0, r0, sl
 800a998:	fa03 f000 	lsl.w	r0, r3, r0
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	4303      	orrs	r3, r0
 800a9a0:	3401      	adds	r4, #1
 800a9a2:	9304      	str	r3, [sp, #16]
 800a9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a8:	482c      	ldr	r0, [pc, #176]	; (800aa5c <_vfiprintf_r+0x250>)
 800a9aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9ae:	2206      	movs	r2, #6
 800a9b0:	f7f5 fc1e 	bl	80001f0 <memchr>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d03f      	beq.n	800aa38 <_vfiprintf_r+0x22c>
 800a9b8:	4b29      	ldr	r3, [pc, #164]	; (800aa60 <_vfiprintf_r+0x254>)
 800a9ba:	bb1b      	cbnz	r3, 800aa04 <_vfiprintf_r+0x1f8>
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	3307      	adds	r3, #7
 800a9c0:	f023 0307 	bic.w	r3, r3, #7
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	9303      	str	r3, [sp, #12]
 800a9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ca:	443b      	add	r3, r7
 800a9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ce:	e767      	b.n	800a8a0 <_vfiprintf_r+0x94>
 800a9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	2001      	movs	r0, #1
 800a9d8:	e7a5      	b.n	800a926 <_vfiprintf_r+0x11a>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	3401      	adds	r4, #1
 800a9de:	9305      	str	r3, [sp, #20]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f04f 0c0a 	mov.w	ip, #10
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ec:	3a30      	subs	r2, #48	; 0x30
 800a9ee:	2a09      	cmp	r2, #9
 800a9f0:	d903      	bls.n	800a9fa <_vfiprintf_r+0x1ee>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0c5      	beq.n	800a982 <_vfiprintf_r+0x176>
 800a9f6:	9105      	str	r1, [sp, #20]
 800a9f8:	e7c3      	b.n	800a982 <_vfiprintf_r+0x176>
 800a9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9fe:	4604      	mov	r4, r0
 800aa00:	2301      	movs	r3, #1
 800aa02:	e7f0      	b.n	800a9e6 <_vfiprintf_r+0x1da>
 800aa04:	ab03      	add	r3, sp, #12
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4b16      	ldr	r3, [pc, #88]	; (800aa64 <_vfiprintf_r+0x258>)
 800aa0c:	a904      	add	r1, sp, #16
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7fd fac2 	bl	8007f98 <_printf_float>
 800aa14:	4607      	mov	r7, r0
 800aa16:	1c78      	adds	r0, r7, #1
 800aa18:	d1d6      	bne.n	800a9c8 <_vfiprintf_r+0x1bc>
 800aa1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa1c:	07d9      	lsls	r1, r3, #31
 800aa1e:	d405      	bmi.n	800aa2c <_vfiprintf_r+0x220>
 800aa20:	89ab      	ldrh	r3, [r5, #12]
 800aa22:	059a      	lsls	r2, r3, #22
 800aa24:	d402      	bmi.n	800aa2c <_vfiprintf_r+0x220>
 800aa26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa28:	f7ff f83a 	bl	8009aa0 <__retarget_lock_release_recursive>
 800aa2c:	89ab      	ldrh	r3, [r5, #12]
 800aa2e:	065b      	lsls	r3, r3, #25
 800aa30:	f53f af12 	bmi.w	800a858 <_vfiprintf_r+0x4c>
 800aa34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa36:	e711      	b.n	800a85c <_vfiprintf_r+0x50>
 800aa38:	ab03      	add	r3, sp, #12
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <_vfiprintf_r+0x258>)
 800aa40:	a904      	add	r1, sp, #16
 800aa42:	4630      	mov	r0, r6
 800aa44:	f7fd fd4c 	bl	80084e0 <_printf_i>
 800aa48:	e7e4      	b.n	800aa14 <_vfiprintf_r+0x208>
 800aa4a:	bf00      	nop
 800aa4c:	0800af50 	.word	0x0800af50
 800aa50:	0800af70 	.word	0x0800af70
 800aa54:	0800af30 	.word	0x0800af30
 800aa58:	0800b0ec 	.word	0x0800b0ec
 800aa5c:	0800b0f6 	.word	0x0800b0f6
 800aa60:	08007f99 	.word	0x08007f99
 800aa64:	0800a7e7 	.word	0x0800a7e7
 800aa68:	0800b0f2 	.word	0x0800b0f2

0800aa6c <_read_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	; (800aa8c <_read_r+0x20>)
 800aa70:	4604      	mov	r4, r0
 800aa72:	4608      	mov	r0, r1
 800aa74:	4611      	mov	r1, r2
 800aa76:	2200      	movs	r2, #0
 800aa78:	602a      	str	r2, [r5, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f7f7 f808 	bl	8001a90 <_read>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_read_r+0x1e>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_read_r+0x1e>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	2000074c 	.word	0x2000074c

0800aa90 <__ascii_wctomb>:
 800aa90:	b149      	cbz	r1, 800aaa6 <__ascii_wctomb+0x16>
 800aa92:	2aff      	cmp	r2, #255	; 0xff
 800aa94:	bf85      	ittet	hi
 800aa96:	238a      	movhi	r3, #138	; 0x8a
 800aa98:	6003      	strhi	r3, [r0, #0]
 800aa9a:	700a      	strbls	r2, [r1, #0]
 800aa9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800aaa0:	bf98      	it	ls
 800aaa2:	2001      	movls	r0, #1
 800aaa4:	4770      	bx	lr
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	4770      	bx	lr

0800aaaa <abort>:
 800aaaa:	b508      	push	{r3, lr}
 800aaac:	2006      	movs	r0, #6
 800aaae:	f000 f82b 	bl	800ab08 <raise>
 800aab2:	2001      	movs	r0, #1
 800aab4:	f7f6 ffe2 	bl	8001a7c <_exit>

0800aab8 <_raise_r>:
 800aab8:	291f      	cmp	r1, #31
 800aaba:	b538      	push	{r3, r4, r5, lr}
 800aabc:	4604      	mov	r4, r0
 800aabe:	460d      	mov	r5, r1
 800aac0:	d904      	bls.n	800aacc <_raise_r+0x14>
 800aac2:	2316      	movs	r3, #22
 800aac4:	6003      	str	r3, [r0, #0]
 800aac6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aace:	b112      	cbz	r2, 800aad6 <_raise_r+0x1e>
 800aad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aad4:	b94b      	cbnz	r3, 800aaea <_raise_r+0x32>
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 f830 	bl	800ab3c <_getpid_r>
 800aadc:	462a      	mov	r2, r5
 800aade:	4601      	mov	r1, r0
 800aae0:	4620      	mov	r0, r4
 800aae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aae6:	f000 b817 	b.w	800ab18 <_kill_r>
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d00a      	beq.n	800ab04 <_raise_r+0x4c>
 800aaee:	1c59      	adds	r1, r3, #1
 800aaf0:	d103      	bne.n	800aafa <_raise_r+0x42>
 800aaf2:	2316      	movs	r3, #22
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	e7e7      	b.n	800aaca <_raise_r+0x12>
 800aafa:	2400      	movs	r4, #0
 800aafc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab00:	4628      	mov	r0, r5
 800ab02:	4798      	blx	r3
 800ab04:	2000      	movs	r0, #0
 800ab06:	e7e0      	b.n	800aaca <_raise_r+0x12>

0800ab08 <raise>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <raise+0xc>)
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f7ff bfd3 	b.w	800aab8 <_raise_r>
 800ab12:	bf00      	nop
 800ab14:	20000308 	.word	0x20000308

0800ab18 <_kill_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d07      	ldr	r5, [pc, #28]	; (800ab38 <_kill_r+0x20>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	4611      	mov	r1, r2
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	f7f6 ff99 	bl	8001a5c <_kill>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d102      	bne.n	800ab34 <_kill_r+0x1c>
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	b103      	cbz	r3, 800ab34 <_kill_r+0x1c>
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	2000074c 	.word	0x2000074c

0800ab3c <_getpid_r>:
 800ab3c:	f7f6 bf86 	b.w	8001a4c <_getpid>

0800ab40 <_init>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr

0800ab4c <_fini>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	bf00      	nop
 800ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab52:	bc08      	pop	{r3}
 800ab54:	469e      	mov	lr, r3
 800ab56:	4770      	bx	lr
