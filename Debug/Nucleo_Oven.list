
Nucleo_Oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c250  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  0800c3f0  0800c3f0  0001c3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb4  0800cdb4  00020538  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb4  0800cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdbc  0800cdbc  00020538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc0  0800cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000538  20000000  0800cdc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000538  0800d2fc  00020538  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800d2fc  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9f8  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003320  00000000  00000000  0003af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0003e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019584  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015808  00000000  00000000  00059934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ca6  00000000  00000000  0006f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005880  00000000  00000000  00101e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000538 	.word	0x20000538
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c3d8 	.word	0x0800c3d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000053c 	.word	0x2000053c
 80001dc:	0800c3d8 	.word	0x0800c3d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef FLAG_USE_UART_AS_PRINTF
int _write(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <_write+0x30>)
 8000fa6:	f003 fc64 	bl	8004872 <HAL_UART_Transmit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <_write+0x24>
		return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	e001      	b.n	8000fb8 <_write+0x28>
	return -1;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000750 	.word	0x20000750

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 fe90 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f85a 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 faa2 	bl	8001518 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000fd4:	f000 f8be 	bl	8001154 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000fd8:	f000 f8f2 	bl	80011c0 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000fdc:	f000 fa72 	bl	80014c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000fe0:	f000 fa46 	bl	8001470 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000fe4:	f000 f9a6 	bl	8001334 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000fe8:	f000 f922 	bl	8001230 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000fec:	f000 fa06 	bl	80013fc <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	481a      	ldr	r0, [pc, #104]	; (800105c <main+0x98>)
 8000ff4:	f002 fcca 	bl	800398c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4818      	ldr	r0, [pc, #96]	; (800105c <main+0x98>)
 8000ffc:	f002 fcc6 	bl	800398c <HAL_TIM_PWM_Start>

  /* New temperature sensor object */
  tempBottom = Custom_Tempsensor(&hspi3, TEMPSENSOR_DOWN_CS_Port, TEMPSENSOR_DOWN_CS_Pin, 300);
 8001000:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001008:	4915      	ldr	r1, [pc, #84]	; (8001060 <main+0x9c>)
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <main+0xa0>)
 800100c:	f006 fc12 	bl	8007834 <Custom_Tempsensor>
 8001010:	4603      	mov	r3, r0
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <main+0xa4>)
 8001014:	6013      	str	r3, [r2, #0]
  tempTop = Custom_Tempsensor(&hspi3, TEMPSENSOR_UP_CS_Port, TEMPSENSOR_UP_CS_Pin, 300);
 8001016:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800101a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101e:	4910      	ldr	r1, [pc, #64]	; (8001060 <main+0x9c>)
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <main+0xa0>)
 8001022:	f006 fc07 	bl	8007834 <Custom_Tempsensor>
 8001026:	4603      	mov	r3, r0
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <main+0xa8>)
 800102a:	6013      	str	r3, [r2, #0]

  /* New heater object */
  heaterTop = Custom_HeaterControl(&htim3, TIM_CHANNEL_3);	// HU
 800102c:	2108      	movs	r1, #8
 800102e:	4810      	ldr	r0, [pc, #64]	; (8001070 <main+0xac>)
 8001030:	f006 fa5e 	bl	80074f0 <Custom_HeaterControl>
 8001034:	4603      	mov	r3, r0
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <main+0xb0>)
 8001038:	6013      	str	r3, [r2, #0]
  heaterBottom = Custom_HeaterControl(&htim3, TIM_CHANNEL_2);	// HD
 800103a:	2104      	movs	r1, #4
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <main+0xac>)
 800103e:	f006 fa57 	bl	80074f0 <Custom_HeaterControl>
 8001042:	4603      	mov	r3, r0
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <main+0xb4>)
 8001046:	6013      	str	r3, [r2, #0]

  /* Start HeaterControl interrupt */
  HAL_TIM_Base_Start_IT(&htim9);
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <main+0xb8>)
 800104a:	f002 fbed 	bl	8003828 <HAL_TIM_Base_Start_IT>
  printf("Hello!\r\n");
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <main+0xbc>)
 8001050:	f009 f836 	bl	800a0c0 <puts>
  Menu();
 8001054:	f006 fe1e 	bl	8007c94 <Menu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x94>
 800105a:	bf00      	nop
 800105c:	200005d4 	.word	0x200005d4
 8001060:	40020400 	.word	0x40020400
 8001064:	2000066c 	.word	0x2000066c
 8001068:	2000061c 	.word	0x2000061c
 800106c:	20000794 	.word	0x20000794
 8001070:	20000624 	.word	0x20000624
 8001074:	20000620 	.word	0x20000620
 8001078:	200005d0 	.word	0x200005d0
 800107c:	20000708 	.word	0x20000708
 8001080:	0800c3f0 	.word	0x0800c3f0

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f008 fa7a 	bl	800958c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xc8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <SystemClock_Config+0xc8>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <SystemClock_Config+0xcc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <SystemClock_Config+0xcc>)
 80010ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010f8:	2364      	movs	r3, #100	; 0x64
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f94d 	bl	80023a8 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001114:	f000 fac2 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2103      	movs	r1, #3
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fbaf 	bl	8002898 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001140:	f000 faac 	bl	800169c <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI2_Init+0x64>)
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <MX_SPI2_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001164:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI2_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001174:	2202      	movs	r2, #2
 8001176:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI2_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_SPI2_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI2_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_SPI2_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_SPI2_Init+0x64>)
 80011a0:	220a      	movs	r2, #10
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_SPI2_Init+0x64>)
 80011a6:	f001 fd47 	bl	8002c38 <HAL_SPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011b0:	f000 fa74 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000578 	.word	0x20000578
 80011bc:	40003800 	.word	0x40003800

080011c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_SPI3_Init+0x68>)
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <MX_SPI3_Init+0x6c>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_SPI3_Init+0x68>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_SPI3_Init+0x68>)
 80011d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_SPI3_Init+0x68>)
 80011dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI3_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI3_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI3_Init+0x68>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI3_Init+0x68>)
 80011f8:	2238      	movs	r2, #56	; 0x38
 80011fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_SPI3_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI3_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_SPI3_Init+0x68>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI3_Init+0x68>)
 8001210:	220a      	movs	r2, #10
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_SPI3_Init+0x68>)
 8001216:	f001 fd0f 	bl	8002c38 <HAL_SPI_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001220:	f000 fa3c 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000066c 	.word	0x2000066c
 800122c:	40003c00 	.word	0x40003c00

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]
 800125e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <MX_TIM3_Init+0xfc>)
 8001262:	4a33      	ldr	r2, [pc, #204]	; (8001330 <MX_TIM3_Init+0x100>)
 8001264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001266:	4b31      	ldr	r3, [pc, #196]	; (800132c <MX_TIM3_Init+0xfc>)
 8001268:	f242 720f 	movw	r2, #9999	; 0x270f
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_TIM3_Init+0xfc>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <MX_TIM3_Init+0xfc>)
 8001276:	f242 720f 	movw	r2, #9999	; 0x270f
 800127a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <MX_TIM3_Init+0xfc>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <MX_TIM3_Init+0xfc>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <MX_TIM3_Init+0xfc>)
 800128a:	f002 fa7d 	bl	8003788 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001294:	f000 fa02 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4821      	ldr	r0, [pc, #132]	; (800132c <MX_TIM3_Init+0xfc>)
 80012a6:	f002 fe4f 	bl	8003f48 <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012b0:	f000 f9f4 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012b4:	481d      	ldr	r0, [pc, #116]	; (800132c <MX_TIM3_Init+0xfc>)
 80012b6:	f002 fb19 	bl	80038ec <HAL_TIM_PWM_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012c0:	f000 f9ec 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4619      	mov	r1, r3
 80012d2:	4816      	ldr	r0, [pc, #88]	; (800132c <MX_TIM3_Init+0xfc>)
 80012d4:	f003 f9fe 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012de:	f000 f9dd 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80012e2:	2370      	movs	r3, #112	; 0x70
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_TIM3_Init+0xfc>)
 80012fa:	f002 fd63 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001304:	f000 f9ca 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2208      	movs	r2, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_TIM3_Init+0xfc>)
 8001310:	f002 fd58 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800131a:	f000 f9bf 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <MX_TIM3_Init+0xfc>)
 8001320:	f000 fae8 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 8001324:	bf00      	nop
 8001326:	3738      	adds	r7, #56	; 0x38
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000624 	.word	0x20000624
 8001330:	40000400 	.word	0x40000400

08001334 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_TIM4_Init+0xc0>)
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <MX_TIM4_Init+0xc4>)
 800135a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MX_TIM4_Init+0xc0>)
 800135e:	2229      	movs	r2, #41	; 0x29
 8001360:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <MX_TIM4_Init+0xc0>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_TIM4_Init+0xc0>)
 800136a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800136e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_TIM4_Init+0xc0>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_TIM4_Init+0xc0>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800137c:	481d      	ldr	r0, [pc, #116]	; (80013f4 <MX_TIM4_Init+0xc0>)
 800137e:	f002 fab5 	bl	80038ec <HAL_TIM_PWM_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001388:	f000 f988 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4619      	mov	r1, r3
 800139a:	4816      	ldr	r0, [pc, #88]	; (80013f4 <MX_TIM4_Init+0xc0>)
 800139c:	f003 f99a 	bl	80046d4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013a6:	f000 f979 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	; 0x60
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_TIM4_Init+0xc0>)
 80013c2:	f002 fcff 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013cc:	f000 f966 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2204      	movs	r2, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM4_Init+0xc0>)
 80013d8:	f002 fcf4 	bl	8003dc4 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013e2:	f000 f95b 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM4_Init+0xc0>)
 80013e8:	f000 fa84 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200005d4 	.word	0x200005d4
 80013f8:	40000800 	.word	0x40000800

080013fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_TIM9_Init+0x6c>)
 8001410:	4a16      	ldr	r2, [pc, #88]	; (800146c <MX_TIM9_Init+0x70>)
 8001412:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_TIM9_Init+0x6c>)
 8001416:	f242 720f 	movw	r2, #9999	; 0x270f
 800141a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_TIM9_Init+0x6c>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_TIM9_Init+0x6c>)
 8001424:	f242 720f 	movw	r2, #9999	; 0x270f
 8001428:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_TIM9_Init+0x6c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <MX_TIM9_Init+0x6c>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001436:	480c      	ldr	r0, [pc, #48]	; (8001468 <MX_TIM9_Init+0x6c>)
 8001438:	f002 f9a6 	bl	8003788 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001442:	f000 f92b 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_TIM9_Init+0x6c>)
 8001452:	f002 fd79 	bl	8003f48 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800145c:	f000 f91e 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000708 	.word	0x20000708
 800146c:	40014000 	.word	0x40014000

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART1_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800147c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a8:	f003 f996 	bl	80047d8 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8f3 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200006c4 	.word	0x200006c4
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f003 f96c 	bl	80047d8 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f8c9 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000750 	.word	0x20000750
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <MX_GPIO_Init+0x174>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a55      	ldr	r2, [pc, #340]	; (800168c <MX_GPIO_Init+0x174>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <MX_GPIO_Init+0x174>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b4f      	ldr	r3, [pc, #316]	; (800168c <MX_GPIO_Init+0x174>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a4e      	ldr	r2, [pc, #312]	; (800168c <MX_GPIO_Init+0x174>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <MX_GPIO_Init+0x174>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b48      	ldr	r3, [pc, #288]	; (800168c <MX_GPIO_Init+0x174>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a47      	ldr	r2, [pc, #284]	; (800168c <MX_GPIO_Init+0x174>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b45      	ldr	r3, [pc, #276]	; (800168c <MX_GPIO_Init+0x174>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <MX_GPIO_Init+0x174>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a40      	ldr	r2, [pc, #256]	; (800168c <MX_GPIO_Init+0x174>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <MX_GPIO_Init+0x174>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2112      	movs	r1, #18
 80015a2:	483b      	ldr	r0, [pc, #236]	; (8001690 <MX_GPIO_Init+0x178>)
 80015a4:	f000 fee6 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	4839      	ldr	r0, [pc, #228]	; (8001694 <MX_GPIO_Init+0x17c>)
 80015ae:	f000 fee1 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_ADD_Pin|TEMP_ADU_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80015b8:	4836      	ldr	r0, [pc, #216]	; (8001694 <MX_GPIO_Init+0x17c>)
 80015ba:	f000 fedb 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c4:	4834      	ldr	r0, [pc, #208]	; (8001698 <MX_GPIO_Init+0x180>)
 80015c6:	f000 fed5 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor2_Pin|Motor1_Pin|LAMP_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80015d0:	482f      	ldr	r0, [pc, #188]	; (8001690 <MX_GPIO_Init+0x178>)
 80015d2:	f000 fecf 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_DC_Pin;
 80015d6:	2312      	movs	r3, #18
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4828      	ldr	r0, [pc, #160]	; (8001690 <MX_GPIO_Init+0x178>)
 80015ee:	f000 fd25 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80015f2:	2304      	movs	r3, #4
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4822      	ldr	r0, [pc, #136]	; (8001694 <MX_GPIO_Init+0x17c>)
 800160a:	f000 fd17 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_ADD_Pin TEMP_ADU_Pin */
  GPIO_InitStruct.Pin = TEMP_ADD_Pin|TEMP_ADU_Pin;
 800160e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <MX_GPIO_Init+0x17c>)
 8001628:	f000 fd08 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCFAN_Pin */
  GPIO_InitStruct.Pin = DCFAN_Pin;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001632:	2311      	movs	r3, #17
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCFAN_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4814      	ldr	r0, [pc, #80]	; (8001698 <MX_GPIO_Init+0x180>)
 8001646:	f000 fcf9 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_Pin Motor1_Pin LAMP_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin|Motor1_Pin|LAMP_Pin;
 800164a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001650:	2311      	movs	r3, #17
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <MX_GPIO_Init+0x178>)
 8001664:	f000 fcea 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001668:	f44f 734e 	mov.w	r3, #824	; 0x338
 800166c:	617b      	str	r3, [r7, #20]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_GPIO_Init+0x17c>)
 800167e:	f000 fcdd 	bl	800203c <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_SPI_MspInit+0x128>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12d      	bne.n	8001776 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a40      	ldr	r2, [pc, #256]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a39      	ldr	r2, [pc, #228]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 8001752:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001764:	2305      	movs	r3, #5
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	482e      	ldr	r0, [pc, #184]	; (8001828 <HAL_SPI_MspInit+0x130>)
 8001770:	f000 fc64 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001774:	e050      	b.n	8001818 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2c      	ldr	r2, [pc, #176]	; (800182c <HAL_SPI_MspInit+0x134>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d14b      	bne.n	8001818 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 800178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_SPI_MspInit+0x12c>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_SCK_Pin;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017e6:	2307      	movs	r3, #7
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SCK_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <HAL_SPI_MspInit+0x130>)
 80017f2:	f000 fc23 	bl	800203c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP_SO_Pin;
 80017f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001808:	2306      	movs	r3, #6
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SO_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <HAL_SPI_MspInit+0x138>)
 8001814:	f000 fc12 	bl	800203c <HAL_GPIO_Init>
}
 8001818:	bf00      	nop
 800181a:	3730      	adds	r7, #48	; 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40003800 	.word	0x40003800
 8001824:	40023800 	.word	0x40023800
 8001828:	40020400 	.word	0x40020400
 800182c:	40003c00 	.word	0x40003c00
 8001830:	40020800 	.word	0x40020800

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10e      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001862:	e01a      	b.n	800189a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_TIM_Base_MspInit+0x78>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d115      	bne.n	800189a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2018      	movs	r0, #24
 8001890:	f000 fb9d 	bl	8001fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001894:	2018      	movs	r0, #24
 8001896:	f000 fbb6 	bl	8002006 <HAL_NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40014000 	.word	0x40014000

080018b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_TIM_PWM_MspInit+0x3c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10d      	bne.n	80018de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_TIM_PWM_MspInit+0x40>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_TIM_PWM_MspInit+0x40>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_TIM_PWM_MspInit+0x40>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40000800 	.word	0x40000800
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_TIM_MspPostInit+0xb0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11f      	bne.n	8001956 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Heater_Bottom_Pin|Heater_Top_Pin;
 8001932:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001944:	2302      	movs	r3, #2
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <HAL_TIM_MspPostInit+0xb8>)
 8001950:	f000 fb74 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001954:	e022      	b.n	800199c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_TIM_MspPostInit+0xbc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d11d      	bne.n	800199c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_Pin|LEDB_Pin;
 800197c:	23c0      	movs	r3, #192	; 0xc0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800198c:	2302      	movs	r3, #2
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <HAL_TIM_MspPostInit+0xc0>)
 8001998:	f000 fb50 	bl	800203c <HAL_GPIO_Init>
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40000400 	.word	0x40000400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40000800 	.word	0x40000800
 80019b4:	40020400 	.word	0x40020400

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <HAL_UART_MspInit+0xe8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12d      	bne.n	8001a36 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001a12:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a24:	2307      	movs	r3, #7
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <HAL_UART_MspInit+0xf0>)
 8001a30:	f000 fb04 	bl	800203c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a34:	e030      	b.n	8001a98 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <HAL_UART_MspInit+0xf4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d12b      	bne.n	8001a98 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_UART_MspInit+0xec>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a78:	230c      	movs	r3, #12
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0xf0>)
 8001a94:	f000 fad2 	bl	800203c <HAL_GPIO_Init>
}
 8001a98:	bf00      	nop
 8001a9a:	3730      	adds	r7, #48	; 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40004400 	.word	0x40004400

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Systick_Sensor_IRQ();
 8001afc:	f005 fe74 	bl	80077e8 <Systick_Sensor_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f946 	bl	8001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  HeaterControl_TIM9_IRQ();
 8001b0c:	f005 fcc0 	bl	8007490 <HeaterControl_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001b12:	f002 f84f 	bl	8003bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000708 	.word	0x20000708

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b3a:	f007 fced 	bl	8009518 <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
	return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b62:	e7fe      	b.n	8001b62 <_exit+0x12>

08001b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e00a      	b.n	8001b8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b76:	f3af 8000 	nop.w
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf0      	blt.n	8001b76 <_read+0x12>
	}

return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:

int _isatty(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f007 fc6e 	bl	8009518 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20020000 	.word	0x20020000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000554 	.word	0x20000554
 8001c70:	200007b8 	.word	0x200007b8

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9e:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb4:	4c0b      	ldr	r4, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc2:	f7ff ffd7 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f007 fc2d 	bl	8009524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff f97b 	bl	8000fc4 <main>
  bx  lr    
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 8001cdc:	0800cdc4 	.word	0x0800cdc4
  ldr r2, =_sbss
 8001ce0:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 8001ce4:	200007b8 	.word	0x200007b8

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_Init+0x40>)
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_Init+0x40>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_Init+0x40>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f000 f94f 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1a:	200f      	movs	r0, #15
 8001d1c:	f000 f808 	bl	8001d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d20:	f7ff fcc2 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x54>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_InitTick+0x58>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f967 	bl	8002022 <HAL_SYSTICK_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00e      	b.n	8001d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d80a      	bhi.n	8001d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f92f 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_InitTick+0x5c>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000004 	.word	0x20000004

08001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x20>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x24>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_IncTick+0x24>)
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000008 	.word	0x20000008
 8001db4:	20000798 	.word	0x20000798

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_GetTick+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000798 	.word	0x20000798

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff ffee 	bl	8001db8 <HAL_GetTick>
 8001ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df6:	bf00      	nop
 8001df8:	f7ff ffde 	bl	8001db8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff8e 	bl	8001eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff29 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff3e 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff8e 	bl	8001f0c <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5d 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff31 	bl	8001e7c <__NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ffa2 	bl	8001f74 <SysTick_Config>
 8002030:	4603      	mov	r3, r0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e159      	b.n	800230c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	f040 8148 	bne.w	8002306 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d005      	beq.n	800208e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	2b02      	cmp	r3, #2
 800208c:	d130      	bne.n	80020f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 0201 	and.w	r2, r3, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d017      	beq.n	800212c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d123      	bne.n	8002180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	08da      	lsrs	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3208      	adds	r2, #8
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0203 	and.w	r2, r3, #3
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a2 	beq.w	8002306 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b57      	ldr	r3, [pc, #348]	; (8002324 <HAL_GPIO_Init+0x2e8>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a56      	ldr	r2, [pc, #344]	; (8002324 <HAL_GPIO_Init+0x2e8>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <HAL_GPIO_Init+0x2e8>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021de:	4a52      	ldr	r2, [pc, #328]	; (8002328 <HAL_GPIO_Init+0x2ec>)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a49      	ldr	r2, [pc, #292]	; (800232c <HAL_GPIO_Init+0x2f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x202>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a48      	ldr	r2, [pc, #288]	; (8002330 <HAL_GPIO_Init+0x2f4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x1fe>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a47      	ldr	r2, [pc, #284]	; (8002334 <HAL_GPIO_Init+0x2f8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x1fa>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a46      	ldr	r2, [pc, #280]	; (8002338 <HAL_GPIO_Init+0x2fc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x1f6>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a45      	ldr	r2, [pc, #276]	; (800233c <HAL_GPIO_Init+0x300>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x1f2>
 800222a:	2304      	movs	r3, #4
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x204>
 800222e:	2307      	movs	r3, #7
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x204>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x204>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x204>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x204>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	; (8002328 <HAL_GPIO_Init+0x2ec>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_GPIO_Init+0x304>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <HAL_GPIO_Init+0x304>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_GPIO_Init+0x304>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <HAL_GPIO_Init+0x304>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_GPIO_Init+0x304>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <HAL_GPIO_Init+0x304>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_GPIO_Init+0x304>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <HAL_GPIO_Init+0x304>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f aea2 	bls.w	8002058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e264      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d075      	beq.n	80024b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c6:	4ba3      	ldr	r3, [pc, #652]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d00c      	beq.n	80023ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4ba0      	ldr	r3, [pc, #640]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d112      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b9d      	ldr	r3, [pc, #628]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ea:	d10b      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4b99      	ldr	r3, [pc, #612]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d157      	bne.n	80024b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e23f      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x74>
 800240e:	4b91      	ldr	r3, [pc, #580]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a90      	ldr	r2, [pc, #576]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xb0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x98>
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a87      	ldr	r2, [pc, #540]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xb0>
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a83      	ldr	r2, [pc, #524]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a80      	ldr	r2, [pc, #512]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fcaa 	bl	8001db8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff fca6 	bl	8001db8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e204      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xc0>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fc96 	bl	8001db8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc92 	bl	8001db8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1f0      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0xe8>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d063      	beq.n	8002586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d11c      	bne.n	8002510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x152>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1c4      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b56      	ldr	r3, [pc, #344]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4952      	ldr	r1, [pc, #328]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	e03a      	b.n	8002586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <HAL_RCC_OscConfig+0x2b0>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff fc4b 	bl	8001db8 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff fc47 	bl	8001db8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1a5      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b43      	ldr	r3, [pc, #268]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4940      	ldr	r1, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0x2b0>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff fc2a 	bl	8001db8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002568:	f7ff fc26 	bl	8001db8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e184      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d030      	beq.n	80025f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x2b4>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7ff fc0a 	bl	8001db8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff fc06 	bl	8001db8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e164      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x200>
 80025c6:	e015      	b.n	80025f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x2b4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7ff fbf3 	bl	8001db8 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7ff fbef 	bl	8001db8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e14d      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a0 	beq.w	8002742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x2b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d121      	bne.n	8002682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_RCC_OscConfig+0x2b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_RCC_OscConfig+0x2b8>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7ff fbb5 	bl	8001db8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e011      	b.n	8002676 <HAL_RCC_OscConfig+0x2ce>
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	42470000 	.word	0x42470000
 800265c:	42470e80 	.word	0x42470e80
 8002660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7ff fba8 	bl	8001db8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e106      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <HAL_RCC_OscConfig+0x4e4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x2f0>
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a80      	ldr	r2, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	e01c      	b.n	80026d2 <HAL_RCC_OscConfig+0x32a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d10c      	bne.n	80026ba <HAL_RCC_OscConfig+0x312>
 80026a0:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e00b      	b.n	80026d2 <HAL_RCC_OscConfig+0x32a>
 80026ba:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a74      	ldr	r2, [pc, #464]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a71      	ldr	r2, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d015      	beq.n	8002706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7ff fb6d 	bl	8001db8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7ff fb69 	bl	8001db8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0c5      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ee      	beq.n	80026e2 <HAL_RCC_OscConfig+0x33a>
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7ff fb57 	bl	8001db8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff fb53 	bl	8001db8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0af      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a55      	ldr	r2, [pc, #340]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 809b 	beq.w	8002882 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	d05c      	beq.n	8002812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d141      	bne.n	80027e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff fb27 	bl	8001db8 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7ff fb23 	bl	8001db8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e081      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	019b      	lsls	r3, r3, #6
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fafc 	bl	8001db8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7ff faf8 	bl	8001db8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e056      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x41c>
 80027e2:	e04e      	b.n	8002882 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7ff fae5 	bl	8001db8 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7ff fae1 	bl	8001db8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e03f      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
 8002810:	e037      	b.n	8002882 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e032      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d028      	beq.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d121      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d11a      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002854:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d107      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40007000 	.word	0x40007000
 8002890:	40023800 	.word	0x40023800
 8002894:	42470060 	.word	0x42470060

08002898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0cc      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d90c      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d044      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d119      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d003      	beq.n	8002956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002952:	2b03      	cmp	r3, #3
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e067      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4934      	ldr	r1, [pc, #208]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002988:	f7ff fa16 	bl	8001db8 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7ff fa12 	bl	8001db8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e04f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d20c      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f976 	bl	8001d30 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00
 8002a54:	40023800 	.word	0x40023800
 8002a58:	0800c9bc 	.word	0x0800c9bc
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	20000004 	.word	0x20000004

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6079      	str	r1, [r7, #4]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	60f9      	str	r1, [r7, #12]
 8002a72:	2100      	movs	r1, #0
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a76:	2100      	movs	r1, #0
 8002a78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7a:	4952      	ldr	r1, [pc, #328]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a7c:	6889      	ldr	r1, [r1, #8]
 8002a7e:	f001 010c 	and.w	r1, r1, #12
 8002a82:	2908      	cmp	r1, #8
 8002a84:	d00d      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002a86:	2908      	cmp	r1, #8
 8002a88:	f200 8094 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x150>
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x32>
 8002a90:	2904      	cmp	r1, #4
 8002a92:	d003      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x38>
 8002a94:	e08e      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a96:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a98:	60bb      	str	r3, [r7, #8]
       break;
 8002a9a:	e08e      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002a9e:	60bb      	str	r3, [r7, #8]
      break;
 8002aa0:	e08b      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa2:	4948      	ldr	r1, [pc, #288]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aa4:	6849      	ldr	r1, [r1, #4]
 8002aa6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002aaa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aac:	4945      	ldr	r1, [pc, #276]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aae:	6849      	ldr	r1, [r1, #4]
 8002ab0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	d024      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4942      	ldr	r1, [pc, #264]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aba:	6849      	ldr	r1, [r1, #4]
 8002abc:	0989      	lsrs	r1, r1, #6
 8002abe:	4608      	mov	r0, r1
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ac8:	f04f 0500 	mov.w	r5, #0
 8002acc:	ea00 0204 	and.w	r2, r0, r4
 8002ad0:	ea01 0305 	and.w	r3, r1, r5
 8002ad4:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ad6:	fb01 f003 	mul.w	r0, r1, r3
 8002ada:	2100      	movs	r1, #0
 8002adc:	fb01 f102 	mul.w	r1, r1, r2
 8002ae0:	1844      	adds	r4, r0, r1
 8002ae2:	493a      	ldr	r1, [pc, #232]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ae4:	fba2 0101 	umull	r0, r1, r2, r1
 8002ae8:	1863      	adds	r3, r4, r1
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fe f8d0 	bl	8000c98 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e04a      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	ea02 0400 	and.w	r4, r2, r0
 8002b1a:	ea03 0501 	and.w	r5, r3, r1
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	014b      	lsls	r3, r1, #5
 8002b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b30:	0142      	lsls	r2, r0, #5
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	1b00      	subs	r0, r0, r4
 8002b38:	eb61 0105 	sbc.w	r1, r1, r5
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	018b      	lsls	r3, r1, #6
 8002b46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b4a:	0182      	lsls	r2, r0, #6
 8002b4c:	1a12      	subs	r2, r2, r0
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	00d9      	lsls	r1, r3, #3
 8002b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b60:	00d0      	lsls	r0, r2, #3
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	1912      	adds	r2, r2, r4
 8002b68:	eb45 0303 	adc.w	r3, r5, r3
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0299      	lsls	r1, r3, #10
 8002b76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b7a:	0290      	lsls	r0, r2, #10
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f7fe f884 	bl	8000c98 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bb6:	60bb      	str	r3, [r7, #8]
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	68bb      	ldr	r3, [r7, #8]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	017d7840 	.word	0x017d7840

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000000 	.word	0x20000000

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	0800c9cc 	.word	0x0800c9cc

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c14:	f7ff ffdc 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0b5b      	lsrs	r3, r3, #13
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	0800c9cc 	.word	0x0800c9cc

08002c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07b      	b.n	8002d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5a:	d009      	beq.n	8002c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
 8002c62:	e005      	b.n	8002c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fd34 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	ea42 0103 	orr.w	r1, r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	f003 0104 	and.w	r1, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	f003 0210 	and.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b088      	sub	sp, #32
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_SPI_Transmit+0x22>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e126      	b.n	8002fba <HAL_SPI_Transmit+0x270>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d74:	f7ff f820 	bl	8001db8 <HAL_GetTick>
 8002d78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d8e:	e10b      	b.n	8002fa8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_Transmit+0x52>
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002da0:	e102      	b.n	8002fa8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2203      	movs	r2, #3
 8002da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	88fa      	ldrh	r2, [r7, #6]
 8002dba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de8:	d10f      	bne.n	8002e0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d007      	beq.n	8002e28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e30:	d14b      	bne.n	8002eca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_SPI_Transmit+0xf6>
 8002e3a:	8afb      	ldrh	r3, [r7, #22]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d13e      	bne.n	8002ebe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	1c9a      	adds	r2, r3, #2
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e64:	e02b      	b.n	8002ebe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d112      	bne.n	8002e9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	1c9a      	adds	r2, r3, #2
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e98:	e011      	b.n	8002ebe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9a:	f7fe ff8d 	bl	8001db8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d803      	bhi.n	8002eb2 <HAL_SPI_Transmit+0x168>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d102      	bne.n	8002eb8 <HAL_SPI_Transmit+0x16e>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ebc:	e074      	b.n	8002fa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ce      	bne.n	8002e66 <HAL_SPI_Transmit+0x11c>
 8002ec8:	e04c      	b.n	8002f64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SPI_Transmit+0x18e>
 8002ed2:	8afb      	ldrh	r3, [r7, #22]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d140      	bne.n	8002f5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	7812      	ldrb	r2, [r2, #0]
 8002ee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002efe:	e02c      	b.n	8002f5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d113      	bne.n	8002f36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f34:	e011      	b.n	8002f5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f36:	f7fe ff3f 	bl	8001db8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d803      	bhi.n	8002f4e <HAL_SPI_Transmit+0x204>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d102      	bne.n	8002f54 <HAL_SPI_Transmit+0x20a>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f58:	e026      	b.n	8002fa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1cd      	bne.n	8002f00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fbcb 	bl	8003704 <SPI_EndRxTxTransaction>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e000      	b.n	8002fa8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b088      	sub	sp, #32
 8002fc6:	af02      	add	r7, sp, #8
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fde:	d112      	bne.n	8003006 <HAL_SPI_Receive+0x44>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10e      	bne.n	8003006 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2204      	movs	r2, #4
 8002fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f8f1 	bl	80031e4 <HAL_SPI_TransmitReceive>
 8003002:	4603      	mov	r3, r0
 8003004:	e0ea      	b.n	80031dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_SPI_Receive+0x52>
 8003010:	2302      	movs	r3, #2
 8003012:	e0e3      	b.n	80031dc <HAL_SPI_Receive+0x21a>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301c:	f7fe fecc 	bl	8001db8 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003032:	e0ca      	b.n	80031ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_Receive+0x7e>
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003044:	e0c1      	b.n	80031ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2204      	movs	r2, #4
 800304a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308c:	d10f      	bne.n	80030ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d007      	beq.n	80030cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d162      	bne.n	800319a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030d4:	e02e      	b.n	8003134 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d115      	bne.n	8003110 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f103 020c 	add.w	r2, r3, #12
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800310e:	e011      	b.n	8003134 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003110:	f7fe fe52 	bl	8001db8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d803      	bhi.n	8003128 <HAL_SPI_Receive+0x166>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d102      	bne.n	800312e <HAL_SPI_Receive+0x16c>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003132:	e04a      	b.n	80031ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cb      	bne.n	80030d6 <HAL_SPI_Receive+0x114>
 800313e:	e031      	b.n	80031a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d113      	bne.n	8003176 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003158:	b292      	uxth	r2, r2
 800315a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003174:	e011      	b.n	800319a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003176:	f7fe fe1f 	bl	8001db8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d803      	bhi.n	800318e <HAL_SPI_Receive+0x1cc>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d102      	bne.n	8003194 <HAL_SPI_Receive+0x1d2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003198:	e017      	b.n	80031ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1cd      	bne.n	8003140 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	6839      	ldr	r1, [r7, #0]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 fa45 	bl	8003638 <SPI_EndRxTransaction>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	75fb      	strb	r3, [r7, #23]
 80031c6:	e000      	b.n	80031ca <HAL_SPI_Receive+0x208>
  }

error :
 80031c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_SPI_TransmitReceive+0x26>
 8003206:	2302      	movs	r3, #2
 8003208:	e18a      	b.n	8003520 <HAL_SPI_TransmitReceive+0x33c>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003212:	f7fe fdd1 	bl	8001db8 <HAL_GetTick>
 8003216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800322c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003230:	2b01      	cmp	r3, #1
 8003232:	d00f      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x70>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323a:	d107      	bne.n	800324c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <HAL_SPI_TransmitReceive+0x68>
 8003244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003248:	2b04      	cmp	r3, #4
 800324a:	d003      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800324c:	2302      	movs	r3, #2
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003252:	e15b      	b.n	800350c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x82>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x82>
 8003260:	887b      	ldrh	r3, [r7, #2]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800326c:	e14e      	b.n	800350c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b04      	cmp	r3, #4
 8003278:	d003      	beq.n	8003282 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2205      	movs	r2, #5
 800327e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	887a      	ldrh	r2, [r7, #2]
 8003292:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	887a      	ldrh	r2, [r7, #2]
 80032aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d007      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032de:	d178      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x10a>
 80032e8:	8b7b      	ldrh	r3, [r7, #26]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d166      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	1c9a      	adds	r2, r3, #2
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003312:	e053      	b.n	80033bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d11b      	bne.n	800335a <HAL_SPI_TransmitReceive+0x176>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d016      	beq.n	800335a <HAL_SPI_TransmitReceive+0x176>
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d113      	bne.n	800335a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c9a      	adds	r2, r3, #2
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b01      	cmp	r3, #1
 8003366:	d119      	bne.n	800339c <HAL_SPI_TransmitReceive+0x1b8>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d014      	beq.n	800339c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	b292      	uxth	r2, r2
 800337e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003398:	2301      	movs	r3, #1
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800339c:	f7fe fd0c 	bl	8001db8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d807      	bhi.n	80033bc <HAL_SPI_TransmitReceive+0x1d8>
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d003      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033ba:	e0a7      	b.n	800350c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1a6      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x130>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1a1      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x130>
 80033d0:	e07c      	b.n	80034cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x1fc>
 80033da:	8b7b      	ldrh	r3, [r7, #26]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d16b      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003406:	e057      	b.n	80034b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11c      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x26c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d017      	beq.n	8003450 <HAL_SPI_TransmitReceive+0x26c>
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d114      	bne.n	8003450 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	330c      	adds	r3, #12
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d119      	bne.n	8003492 <HAL_SPI_TransmitReceive+0x2ae>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d014      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800348e:	2301      	movs	r3, #1
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003492:	f7fe fc91 	bl	8001db8 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800349e:	429a      	cmp	r2, r3
 80034a0:	d803      	bhi.n	80034aa <HAL_SPI_TransmitReceive+0x2c6>
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d102      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x2cc>
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034b6:	e029      	b.n	800350c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1a2      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x224>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d19d      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f917 	bl	8003704 <SPI_EndRxTxTransaction>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d006      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034e8:	e010      	b.n	800350c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	e000      	b.n	800350c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800350a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800351c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003520:	4618      	mov	r0, r3
 8003522:	3730      	adds	r7, #48	; 0x30
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003538:	f7fe fc3e 	bl	8001db8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4413      	add	r3, r2
 8003546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003548:	f7fe fc36 	bl	8001db8 <HAL_GetTick>
 800354c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	015b      	lsls	r3, r3, #5
 8003554:	0d1b      	lsrs	r3, r3, #20
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355e:	e054      	b.n	800360a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d050      	beq.n	800360a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003568:	f7fe fc26 	bl	8001db8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	429a      	cmp	r2, r3
 8003576:	d902      	bls.n	800357e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d13d      	bne.n	80035fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800358c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003596:	d111      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	d004      	beq.n	80035ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	d107      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d10f      	bne.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e017      	b.n	800362a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3b01      	subs	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d19b      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000

08003638 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364c:	d111      	bne.n	8003672 <SPI_EndRxTransaction+0x3a>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003656:	d004      	beq.n	8003662 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d107      	bne.n	8003672 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367a:	d12a      	bne.n	80036d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d012      	beq.n	80036ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff49 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02d      	beq.n	80036f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e026      	b.n	80036fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2101      	movs	r1, #1
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ff36 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01a      	beq.n	80036f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e013      	b.n	80036fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	2101      	movs	r1, #1
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff ff23 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e000      	b.n	80036fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <SPI_EndRxTxTransaction+0x7c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <SPI_EndRxTxTransaction+0x80>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0d5b      	lsrs	r3, r3, #21
 800371c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372e:	d112      	bne.n	8003756 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2200      	movs	r2, #0
 8003738:	2180      	movs	r1, #128	; 0x80
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff fef4 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e00f      	b.n	8003776 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3b01      	subs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d0f2      	beq.n	8003756 <SPI_EndRxTxTransaction+0x52>
 8003770:	e000      	b.n	8003774 <SPI_EndRxTxTransaction+0x70>
        break;
 8003772:	bf00      	nop
  }

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000000 	.word	0x20000000
 8003784:	165e9f81 	.word	0x165e9f81

08003788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e041      	b.n	800381e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe f840 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 fcb8 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d001      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e044      	b.n	80038ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d018      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x6c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d013      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x6c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_TIM_Base_Start_IT+0xb4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x6c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x6c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x6c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d111      	bne.n	80038b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d010      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	e007      	b.n	80038c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40000400 	.word	0x40000400
 80038e0:	40000800 	.word	0x40000800
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	40014000 	.word	0x40014000

080038ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e041      	b.n	8003982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd ffcc 	bl	80018b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	4619      	mov	r1, r3
 800392a:	4610      	mov	r0, r2
 800392c:	f000 fc06 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_TIM_PWM_Start+0x24>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e022      	b.n	80039f6 <HAL_TIM_PWM_Start+0x6a>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d109      	bne.n	80039ca <HAL_TIM_PWM_Start+0x3e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e015      	b.n	80039f6 <HAL_TIM_PWM_Start+0x6a>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d109      	bne.n	80039e4 <HAL_TIM_PWM_Start+0x58>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e008      	b.n	80039f6 <HAL_TIM_PWM_Start+0x6a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e068      	b.n	8003ad0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x82>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	e013      	b.n	8003a36 <HAL_TIM_PWM_Start+0xaa>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x92>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a1c:	e00b      	b.n	8003a36 <HAL_TIM_PWM_Start+0xaa>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Start+0xa2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	e003      	b.n	8003a36 <HAL_TIM_PWM_Start+0xaa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fe22 	bl	8004688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <HAL_TIM_PWM_Start+0x14c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d107      	bne.n	8003a5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_TIM_PWM_Start+0x14c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x10e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d013      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x10e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_TIM_PWM_Start+0x150>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x10e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_TIM_PWM_Start+0x154>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x10e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_TIM_PWM_Start+0x158>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x10e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_TIM_PWM_Start+0x15c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d111      	bne.n	8003abe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d010      	beq.n	8003ace <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	e007      	b.n	8003ace <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800
 8003ae4:	40000c00 	.word	0x40000c00
 8003ae8:	40014000 	.word	0x40014000

08003aec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fdc2 	bl	8004688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <HAL_TIM_PWM_Stop+0xc4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d117      	bne.n	8003b3e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1a      	ldr	r2, [r3, #32]
 8003b14:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_TIM_PWM_Stop+0x52>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a1a      	ldr	r2, [r3, #32]
 8003b24:	f240 4344 	movw	r3, #1092	; 0x444
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_PWM_Stop+0x52>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <HAL_TIM_PWM_Stop+0x82>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f240 4344 	movw	r3, #1092	; 0x444
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_PWM_Stop+0x82>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Stop+0x92>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7c:	e013      	b.n	8003ba6 <HAL_TIM_PWM_Stop+0xba>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Stop+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8c:	e00b      	b.n	8003ba6 <HAL_TIM_PWM_Stop+0xba>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_PWM_Stop+0xb2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	e003      	b.n	8003ba6 <HAL_TIM_PWM_Stop+0xba>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010000 	.word	0x40010000

08003bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0202 	mvn.w	r2, #2
 8003be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa81 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa73 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fa84 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0204 	mvn.w	r2, #4
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa57 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa49 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa5a 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0208 	mvn.w	r2, #8
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa2d 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa1f 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fa30 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa03 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9f5 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fa06 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0201 	mvn.w	r2, #1
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f9cf 	bl	80040d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fd30 	bl	80047c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9cb 	bl	8004126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0220 	mvn.w	r2, #32
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fcfa 	bl	80047b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0ae      	b.n	8003f40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	f200 809f 	bhi.w	8003f30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003f31 	.word	0x08003f31
 8003e00:	08003f31 	.word	0x08003f31
 8003e04:	08003f31 	.word	0x08003f31
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003f31 	.word	0x08003f31
 8003e10:	08003f31 	.word	0x08003f31
 8003e14:	08003f31 	.word	0x08003f31
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003f31 	.word	0x08003f31
 8003e20:	08003f31 	.word	0x08003f31
 8003e24:	08003f31 	.word	0x08003f31
 8003e28:	08003eef 	.word	0x08003eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fa02 	bl	800423c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	619a      	str	r2, [r3, #24]
      break;
 8003e6a:	e064      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa48 	bl	8004308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	619a      	str	r2, [r3, #24]
      break;
 8003eac:	e043      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fa93 	bl	80043e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	61da      	str	r2, [r3, #28]
      break;
 8003eec:	e023      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fadd 	bl	80044b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	021a      	lsls	r2, r3, #8
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	75fb      	strb	r3, [r7, #23]
      break;
 8003f34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_TIM_ConfigClockSource+0x1c>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e0b4      	b.n	80040ce <HAL_TIM_ConfigClockSource+0x186>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	d03e      	beq.n	800401c <HAL_TIM_ConfigClockSource+0xd4>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	f200 8087 	bhi.w	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	f000 8086 	beq.w	80040ba <HAL_TIM_ConfigClockSource+0x172>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d87f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d01a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0xa6>
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d87b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d050      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x11a>
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d877      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d03c      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xfa>
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d873      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d058      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x13a>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d86f      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d064      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d86b      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d060      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d867      	bhi.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d05c      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d05a      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	e062      	b.n	80040b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6899      	ldr	r1, [r3, #8]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f000 fb23 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	609a      	str	r2, [r3, #8]
      break;
 800401a:	e04f      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6899      	ldr	r1, [r3, #8]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f000 fb0c 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403e:	609a      	str	r2, [r3, #8]
      break;
 8004040:	e03c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	461a      	mov	r2, r3
 8004050:	f000 fa80 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2150      	movs	r1, #80	; 0x50
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fad9 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 8004060:	e02c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fa9f 	bl	80045b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2160      	movs	r1, #96	; 0x60
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fac9 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 8004080:	e01c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fa60 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fab9 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80040a0:	e00c      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f000 fab0 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 80040b2:	e003      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      break;
 80040b8:	e000      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a34      	ldr	r2, [pc, #208]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00f      	beq.n	8004174 <TIM_Base_SetConfig+0x38>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415a:	d00b      	beq.n	8004174 <TIM_Base_SetConfig+0x38>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a31      	ldr	r2, [pc, #196]	; (8004224 <TIM_Base_SetConfig+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_Base_SetConfig+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a30      	ldr	r2, [pc, #192]	; (8004228 <TIM_Base_SetConfig+0xec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_Base_SetConfig+0x38>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a2f      	ldr	r2, [pc, #188]	; (800422c <TIM_Base_SetConfig+0xf0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d108      	bne.n	8004186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a25      	ldr	r2, [pc, #148]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01b      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d017      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a22      	ldr	r2, [pc, #136]	; (8004224 <TIM_Base_SetConfig+0xe8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a21      	ldr	r2, [pc, #132]	; (8004228 <TIM_Base_SetConfig+0xec>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00f      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a20      	ldr	r2, [pc, #128]	; (800422c <TIM_Base_SetConfig+0xf0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <TIM_Base_SetConfig+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <TIM_Base_SetConfig+0xf8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <TIM_Base_SetConfig+0xfc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a08      	ldr	r2, [pc, #32]	; (8004220 <TIM_Base_SetConfig+0xe4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800

0800423c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0302 	bic.w	r3, r3, #2
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <TIM_OC1_SetConfig+0xc8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10c      	bne.n	80042b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0308 	bic.w	r3, r3, #8
 800429e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a13      	ldr	r2, [pc, #76]	; (8004304 <TIM_OC1_SetConfig+0xc8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d111      	bne.n	80042de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40010000 	.word	0x40010000

08004308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800433e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0320 	bic.w	r3, r3, #32
 8004352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <TIM_OC2_SetConfig+0xd4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10d      	bne.n	8004384 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <TIM_OC2_SetConfig+0xd4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d113      	bne.n	80043b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800439a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000

080043e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <TIM_OC3_SetConfig+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10d      	bne.n	800445a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <TIM_OC3_SetConfig+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d113      	bne.n	800448a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	621a      	str	r2, [r3, #32]
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40010000 	.word	0x40010000

080044b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	031b      	lsls	r3, r3, #12
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <TIM_OC4_SetConfig+0x9c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d109      	bne.n	8004528 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010000 	.word	0x40010000

08004554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 030a 	bic.w	r3, r3, #10
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	fa01 f303 	lsl.w	r3, r1, r3
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e050      	b.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004738:	d013      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10c      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40014000 	.word	0x40014000

080047b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e03f      	b.n	800486a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd f8da 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f929 	bl	8004a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	; 0x28
 8004876:	af02      	add	r7, sp, #8
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	d17c      	bne.n	800498c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_UART_Transmit+0x2c>
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e075      	b.n	800498e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Transmit+0x3e>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e06e      	b.n	800498e <HAL_UART_Transmit+0x11c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2221      	movs	r2, #33	; 0x21
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048c6:	f7fd fa77 	bl	8001db8 <HAL_GetTick>
 80048ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e0:	d108      	bne.n	80048f4 <HAL_UART_Transmit+0x82>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e003      	b.n	80048fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004904:	e02a      	b.n	800495c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f840 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e036      	b.n	800498e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3302      	adds	r3, #2
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e007      	b.n	800494e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1cf      	bne.n	8004906 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f810 	bl	8004996 <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b090      	sub	sp, #64	; 0x40
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	e050      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d04c      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049b6:	f7fd f9ff 	bl	8001db8 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d241      	bcs.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	330c      	adds	r3, #12
 80049e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e6:	637a      	str	r2, [r7, #52]	; 0x34
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a1a:	623a      	str	r2, [r7, #32]
 8004a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	69f9      	ldr	r1, [r7, #28]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e5      	bne.n	80049fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4013      	ands	r3, r2
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	bf0c      	ite	eq
 8004a5a:	2301      	moveq	r3, #1
 8004a5c:	2300      	movne	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d09f      	beq.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3740      	adds	r7, #64	; 0x40
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	b09f      	sub	sp, #124	; 0x7c
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	68d9      	ldr	r1, [r3, #12]
 8004a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	ea40 0301 	orr.w	r3, r0, r1
 8004a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ab8:	f021 010c 	bic.w	r1, r1, #12
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	6999      	ldr	r1, [r3, #24]
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	ea40 0301 	orr.w	r3, r0, r1
 8004adc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4bc5      	ldr	r3, [pc, #788]	; (8004df8 <UART_SetConfig+0x384>)
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d004      	beq.n	8004af2 <UART_SetConfig+0x7e>
 8004ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4bc3      	ldr	r3, [pc, #780]	; (8004dfc <UART_SetConfig+0x388>)
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d103      	bne.n	8004afa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004af2:	f7fe f88d 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8004af6:	6778      	str	r0, [r7, #116]	; 0x74
 8004af8:	e002      	b.n	8004b00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004afa:	f7fe f875 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8004afe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	f040 80b6 	bne.w	8004c78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0e:	461c      	mov	r4, r3
 8004b10:	f04f 0500 	mov.w	r5, #0
 8004b14:	4622      	mov	r2, r4
 8004b16:	462b      	mov	r3, r5
 8004b18:	1891      	adds	r1, r2, r2
 8004b1a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b1c:	415b      	adcs	r3, r3
 8004b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b24:	1912      	adds	r2, r2, r4
 8004b26:	eb45 0303 	adc.w	r3, r5, r3
 8004b2a:	f04f 0000 	mov.w	r0, #0
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	00d9      	lsls	r1, r3, #3
 8004b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b38:	00d0      	lsls	r0, r2, #3
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	1911      	adds	r1, r2, r4
 8004b40:	6639      	str	r1, [r7, #96]	; 0x60
 8004b42:	416b      	adcs	r3, r5
 8004b44:	667b      	str	r3, [r7, #100]	; 0x64
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b54:	415b      	adcs	r3, r3
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b60:	f7fc f89a 	bl	8000c98 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4ba5      	ldr	r3, [pc, #660]	; (8004e00 <UART_SetConfig+0x38c>)
 8004b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	011e      	lsls	r6, r3, #4
 8004b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b74:	461c      	mov	r4, r3
 8004b76:	f04f 0500 	mov.w	r5, #0
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	1891      	adds	r1, r2, r2
 8004b80:	6339      	str	r1, [r7, #48]	; 0x30
 8004b82:	415b      	adcs	r3, r3
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
 8004b86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b8a:	1912      	adds	r2, r2, r4
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	00d9      	lsls	r1, r3, #3
 8004b9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b9e:	00d0      	lsls	r0, r2, #3
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	1911      	adds	r1, r2, r4
 8004ba6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba8:	416b      	adcs	r3, r5
 8004baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bc6:	f7fc f867 	bl	8000c98 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b8c      	ldr	r3, [pc, #560]	; (8004e00 <UART_SetConfig+0x38c>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a87      	ldr	r2, [pc, #540]	; (8004e00 <UART_SetConfig+0x38c>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf0:	441e      	add	r6, r3
 8004bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	1894      	adds	r4, r2, r2
 8004c00:	623c      	str	r4, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	1812      	adds	r2, r2, r0
 8004c0c:	eb41 0303 	adc.w	r3, r1, r3
 8004c10:	f04f 0400 	mov.w	r4, #0
 8004c14:	f04f 0500 	mov.w	r5, #0
 8004c18:	00dd      	lsls	r5, r3, #3
 8004c1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c1e:	00d4      	lsls	r4, r2, #3
 8004c20:	4622      	mov	r2, r4
 8004c22:	462b      	mov	r3, r5
 8004c24:	1814      	adds	r4, r2, r0
 8004c26:	653c      	str	r4, [r7, #80]	; 0x50
 8004c28:	414b      	adcs	r3, r1
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	61b9      	str	r1, [r7, #24]
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c46:	f7fc f827 	bl	8000c98 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b6c      	ldr	r3, [pc, #432]	; (8004e00 <UART_SetConfig+0x38c>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a67      	ldr	r2, [pc, #412]	; (8004e00 <UART_SetConfig+0x38c>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 0207 	and.w	r2, r3, #7
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4432      	add	r2, r6
 8004c74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c76:	e0b9      	b.n	8004dec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7a:	461c      	mov	r4, r3
 8004c7c:	f04f 0500 	mov.w	r5, #0
 8004c80:	4622      	mov	r2, r4
 8004c82:	462b      	mov	r3, r5
 8004c84:	1891      	adds	r1, r2, r2
 8004c86:	6139      	str	r1, [r7, #16]
 8004c88:	415b      	adcs	r3, r3
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c90:	1912      	adds	r2, r2, r4
 8004c92:	eb45 0303 	adc.w	r3, r5, r3
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca4:	00d0      	lsls	r0, r2, #3
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	eb12 0804 	adds.w	r8, r2, r4
 8004cae:	eb43 0905 	adc.w	r9, r3, r5
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	008b      	lsls	r3, r1, #2
 8004cc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cca:	0082      	lsls	r2, r0, #2
 8004ccc:	4640      	mov	r0, r8
 8004cce:	4649      	mov	r1, r9
 8004cd0:	f7fb ffe2 	bl	8000c98 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <UART_SetConfig+0x38c>)
 8004cda:	fba3 2302 	umull	r2, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	011e      	lsls	r6, r3, #4
 8004ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	1894      	adds	r4, r2, r2
 8004cf0:	60bc      	str	r4, [r7, #8]
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfa:	1812      	adds	r2, r2, r0
 8004cfc:	eb41 0303 	adc.w	r3, r1, r3
 8004d00:	f04f 0400 	mov.w	r4, #0
 8004d04:	f04f 0500 	mov.w	r5, #0
 8004d08:	00dd      	lsls	r5, r3, #3
 8004d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d0e:	00d4      	lsls	r4, r2, #3
 8004d10:	4622      	mov	r2, r4
 8004d12:	462b      	mov	r3, r5
 8004d14:	1814      	adds	r4, r2, r0
 8004d16:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	008b      	lsls	r3, r1, #2
 8004d30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d34:	0082      	lsls	r2, r0, #2
 8004d36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d3a:	f7fb ffad 	bl	8000c98 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <UART_SetConfig+0x38c>)
 8004d44:	fba3 1302 	umull	r1, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	2164      	movs	r1, #100	; 0x64
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	3332      	adds	r3, #50	; 0x32
 8004d56:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <UART_SetConfig+0x38c>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d62:	441e      	add	r6, r3
 8004d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d66:	4618      	mov	r0, r3
 8004d68:	f04f 0100 	mov.w	r1, #0
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	1894      	adds	r4, r2, r2
 8004d72:	603c      	str	r4, [r7, #0]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d7c:	1812      	adds	r2, r2, r0
 8004d7e:	eb41 0303 	adc.w	r3, r1, r3
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	f04f 0500 	mov.w	r5, #0
 8004d8a:	00dd      	lsls	r5, r3, #3
 8004d8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d90:	00d4      	lsls	r4, r2, #3
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	eb12 0a00 	adds.w	sl, r2, r0
 8004d9a:	eb43 0b01 	adc.w	fp, r3, r1
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	008b      	lsls	r3, r1, #2
 8004db2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004db6:	0082      	lsls	r2, r0, #2
 8004db8:	4650      	mov	r0, sl
 8004dba:	4659      	mov	r1, fp
 8004dbc:	f7fb ff6c 	bl	8000c98 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <UART_SetConfig+0x38c>)
 8004dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2164      	movs	r1, #100	; 0x64
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <UART_SetConfig+0x38c>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4432      	add	r2, r6
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	377c      	adds	r7, #124	; 0x7c
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	51eb851f 	.word	0x51eb851f

08004e04 <_Graph_Print>:
#include <math.h>




void _Graph_Print(graph_t * graph_var, uint32_t color){
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b08b      	sub	sp, #44	; 0x2c
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < graph_var -> count - 1; i++){
 8004e0e:	2300      	movs	r3, #0
 8004e10:	83fb      	strh	r3, [r7, #30]
 8004e12:	e075      	b.n	8004f00 <_Graph_Print+0xfc>
		int32_t x1 = graph_var -> xAxisPos + graph_var -> xData [i] / graph_var -> xDensity;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7a9b      	ldrb	r3, [r3, #10]
 8004e18:	ee07 3a90 	vmov	s15, r3
 8004e1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	8bfb      	ldrh	r3, [r7, #30]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	ed93 6a00 	vldr	s12, [r3]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e34:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e40:	ee17 3a90 	vmov	r3, s15
 8004e44:	61bb      	str	r3, [r7, #24]
		int32_t x2 = graph_var -> xAxisPos + graph_var -> xData [i + 1] / graph_var -> xDensity;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7a9b      	ldrb	r3, [r3, #10]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	8bfb      	ldrh	r3, [r7, #30]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	ed93 6a00 	vldr	s12, [r3]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e68:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e74:	ee17 3a90 	vmov	r3, s15
 8004e78:	617b      	str	r3, [r7, #20]
		int32_t y1 = graph_var -> yAxisPos - graph_var -> yData [i] / graph_var -> yDensity;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7adb      	ldrb	r3, [r3, #11]
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	8bfb      	ldrh	r3, [r7, #30]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	ed93 6a00 	vldr	s12, [r3]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	edd3 6a04 	vldr	s13, [r3, #16]
 8004e9a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ea6:	ee17 3a90 	vmov	r3, s15
 8004eaa:	613b      	str	r3, [r7, #16]
		int32_t y2 = graph_var -> yAxisPos - graph_var -> yData [i + 1] / graph_var -> yDensity;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7adb      	ldrb	r3, [r3, #11]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	8bfb      	ldrh	r3, [r7, #30]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	ed93 6a00 	vldr	s12, [r3]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	edd3 6a04 	vldr	s13, [r3, #16]
 8004ece:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eda:	ee17 3a90 	vmov	r3, s15
 8004ede:	60fb      	str	r3, [r7, #12]
		OLED_Line(x1, y1, x2, y2, color);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	b2d8      	uxtb	r0, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	b2d9      	uxtb	r1, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	b2dc      	uxtb	r4, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	f001 fef7 	bl	8006ce8 <OLED_Line>
	for(uint16_t i = 0; i < graph_var -> count - 1; i++){
 8004efa:	8bfb      	ldrh	r3, [r7, #30]
 8004efc:	3301      	adds	r3, #1
 8004efe:	83fb      	strh	r3, [r7, #30]
 8004f00:	8bfa      	ldrh	r2, [r7, #30]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	891b      	ldrh	r3, [r3, #8]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	db83      	blt.n	8004e14 <_Graph_Print+0x10>
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}

08004f16 <_Graph_PrintPoint>:

void _Graph_PrintPoint(graph_t * graph_var, uint16_t idx, uint32_t color){
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b086      	sub	sp, #24
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	817b      	strh	r3, [r7, #10]
	int32_t x1 = graph_var -> xAxisPos + graph_var -> xData [idx] / graph_var -> xDensity;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	7a9b      	ldrb	r3, [r3, #10]
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	897b      	ldrh	r3, [r7, #10]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	ed93 6a00 	vldr	s12, [r3]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	edd3 6a03 	vldr	s13, [r3, #12]
 8004f44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f50:	ee17 3a90 	vmov	r3, s15
 8004f54:	617b      	str	r3, [r7, #20]
	int32_t y1 = graph_var -> yAxisPos - graph_var -> yData [idx] / graph_var -> yDensity;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	7adb      	ldrb	r3, [r3, #11]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	897b      	ldrh	r3, [r7, #10]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	ed93 6a00 	vldr	s12, [r3]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	edd3 6a04 	vldr	s13, [r3, #16]
 8004f76:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f82:	ee17 3a90 	vmov	r3, s15
 8004f86:	613b      	str	r3, [r7, #16]
	OLED_Dot(x1, y1, 1, color);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	b2d8      	uxtb	r0, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	b2d9      	uxtb	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f001 f9ff 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1+1, y1, 1, color);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	b2d8      	uxtb	r0, r3
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b2d9      	uxtb	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f001 f9f5 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1, y1+1, 1, color);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	b2d8      	uxtb	r0, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	b2d9      	uxtb	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f001 f9eb 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1-1, y1, 1, color);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b2d8      	uxtb	r0, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	b2d9      	uxtb	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f001 f9e1 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1, y1-1, 1, color);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	b2d8      	uxtb	r0, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b2d9      	uxtb	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f001 f9d7 	bl	8006396 <OLED_Dot>
}
 8004fe8:	bf00      	nop
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <Graph_PrintPoint>:

void Graph_PrintPoint(graph_t * graph_var, float x, float y, uint32_t color){
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ffc:	edc7 0a01 	vstr	s1, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	int32_t x1 = graph_var -> xAxisPos + x / graph_var -> xDensity;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	7a9b      	ldrb	r3, [r3, #10]
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	edd3 6a03 	vldr	s13, [r3, #12]
 8005014:	ed97 6a02 	vldr	s12, [r7, #8]
 8005018:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800501c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005024:	ee17 3a90 	vmov	r3, s15
 8005028:	617b      	str	r3, [r7, #20]
	int32_t y1 = graph_var -> yAxisPos - y / graph_var -> yDensity;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	7adb      	ldrb	r3, [r3, #11]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	edd3 6a04 	vldr	s13, [r3, #16]
 800503c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005040:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800504c:	ee17 3a90 	vmov	r3, s15
 8005050:	613b      	str	r3, [r7, #16]
	OLED_Dot(x1, y1, 1, color);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	b2d8      	uxtb	r0, r3
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	b2d9      	uxtb	r1, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	f001 f99a 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1+1, y1, 1, color);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	3301      	adds	r3, #1
 8005068:	b2d8      	uxtb	r0, r3
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	b2d9      	uxtb	r1, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	f001 f990 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1, y1+1, 1, color);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	b2d8      	uxtb	r0, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	3301      	adds	r3, #1
 8005080:	b2d9      	uxtb	r1, r3
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2201      	movs	r2, #1
 8005086:	f001 f986 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1-1, y1, 1, color);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b2d8      	uxtb	r0, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	b2d9      	uxtb	r1, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2201      	movs	r2, #1
 800509a:	f001 f97c 	bl	8006396 <OLED_Dot>
	OLED_Dot(x1, y1-1, 1, color);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	b2d8      	uxtb	r0, r3
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b2d9      	uxtb	r1, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f001 f972 	bl	8006396 <OLED_Dot>
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <_Graph_Add>:


void _Graph_Add(graph_t * graph_var, float xData, float yData){
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80050c6:	edc7 0a01 	vstr	s1, [r7, #4]
	graph_var -> xData = realloc(graph_var -> xData, (graph_var -> count + 1) * sizeof(float));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	891b      	ldrh	r3, [r3, #8]
 80050d2:	3301      	adds	r3, #1
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f004 fff9 	bl	800a0d0 <realloc>
 80050de:	4602      	mov	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]
	graph_var -> yData = realloc(graph_var -> yData, (graph_var -> count + 1) * sizeof(float));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	891b      	ldrh	r3, [r3, #8]
 80050ec:	3301      	adds	r3, #1
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f004 ffec 	bl	800a0d0 <realloc>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]
	graph_var -> xData[graph_var -> count] = xData;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	891b      	ldrh	r3, [r3, #8]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	601a      	str	r2, [r3, #0]
	graph_var -> yData[graph_var -> count] = yData;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	891b      	ldrh	r3, [r3, #8]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
	graph_var -> count += 1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	891b      	ldrh	r3, [r3, #8]
 8005122:	3301      	adds	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	811a      	strh	r2, [r3, #8]
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <_Graph_Pop>:

void _Graph_Pop(graph_t * graph_var, float * xData, float * yData){
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
	if(graph_var -> count > 0){
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	891b      	ldrh	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d03d      	beq.n	80051c2 <_Graph_Pop+0x90>
		if(xData != NULL){
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <_Graph_Pop+0x32>
			*xData = graph_var -> xData[graph_var -> count - 1];
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	891b      	ldrh	r3, [r3, #8]
 8005154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005158:	3b01      	subs	r3, #1
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	601a      	str	r2, [r3, #0]
		}
		if(yData != NULL){
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <_Graph_Pop+0x50>
			*yData = graph_var -> yData[graph_var -> count - 1];
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	891b      	ldrh	r3, [r3, #8]
 8005172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005176:	3b01      	subs	r3, #1
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
		}
		graph_var -> xData = realloc(graph_var -> xData, (graph_var -> count - 1) * sizeof(float));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	891b      	ldrh	r3, [r3, #8]
 800518a:	3b01      	subs	r3, #1
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f004 ff9d 	bl	800a0d0 <realloc>
 8005196:	4602      	mov	r2, r0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]
		graph_var -> yData = realloc(graph_var -> yData, (graph_var -> count - 1) * sizeof(float));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	891b      	ldrh	r3, [r3, #8]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f004 ff90 	bl	800a0d0 <realloc>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
		graph_var -> count -= 1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	891b      	ldrh	r3, [r3, #8]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	811a      	strh	r2, [r3, #8]
	}
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <_Graph_ChangeDensity>:

static void _Graph_ChangeDensity(struct _graphType * graph_var, float xDen, float yDen){
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80051d6:	edc7 0a01 	vstr	s1, [r7, #4]
	graph_var -> xDensity = xDen;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	60da      	str	r2, [r3, #12]
	graph_var -> yDensity = yDen;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	611a      	str	r2, [r3, #16]
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <_Graph_ChangeAxis>:

static void _Graph_ChangeAxis(struct _graphType * graph_var, uint8_t xAxisPos, uint8_t yAxisPos){
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
 80051fe:	4613      	mov	r3, r2
 8005200:	70bb      	strb	r3, [r7, #2]
	graph_var -> xAxisPos = xAxisPos;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	729a      	strb	r2, [r3, #10]
	graph_var -> yAxisPos = yAxisPos;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	78ba      	ldrb	r2, [r7, #2]
 800520c:	72da      	strb	r2, [r3, #11]
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <_Graph_Init>:


graph_t * _Graph_Init(float * xData, float * yData, uint16_t count, uint8_t xAxisPos, uint8_t yAxisPos, float xDen, float yDen){
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6178      	str	r0, [r7, #20]
 8005224:	6139      	str	r1, [r7, #16]
 8005226:	4611      	mov	r1, r2
 8005228:	461a      	mov	r2, r3
 800522a:	ed87 0a02 	vstr	s0, [r7, #8]
 800522e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	81fb      	strh	r3, [r7, #14]
 8005236:	4613      	mov	r3, r2
 8005238:	737b      	strb	r3, [r7, #13]
	//배열을 받는 경우에는 malloc로 굳이 동적할당 할 필요는 없다. 하지만 멤버변수 정도는 동적 할당을 한다.
	graph_t * graph_var = (graph_t *)malloc(sizeof(graph_t));
 800523a:	2028      	movs	r0, #40	; 0x28
 800523c:	f004 f996 	bl	800956c <malloc>
 8005240:	4603      	mov	r3, r0
 8005242:	61bb      	str	r3, [r7, #24]
	graph_var -> xData = (float *) malloc(sizeof(float) * count);
 8005244:	89fb      	ldrh	r3, [r7, #14]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4618      	mov	r0, r3
 800524a:	f004 f98f 	bl	800956c <malloc>
 800524e:	4603      	mov	r3, r0
 8005250:	461a      	mov	r2, r3
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	601a      	str	r2, [r3, #0]
	graph_var -> yData = (float *) malloc(sizeof(float) * count);
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f004 f986 	bl	800956c <malloc>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	605a      	str	r2, [r3, #4]
	for(uint16_t i = 0; i < count; i++){
 8005268:	2300      	movs	r3, #0
 800526a:	83fb      	strh	r3, [r7, #30]
 800526c:	e018      	b.n	80052a0 <_Graph_Init+0x84>
		graph_var -> xData[i] = xData[i];
 800526e:	8bfb      	ldrh	r3, [r7, #30]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	441a      	add	r2, r3
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	8bfb      	ldrh	r3, [r7, #30]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	601a      	str	r2, [r3, #0]
		graph_var -> yData[i] = yData[i];
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	441a      	add	r2, r3
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	8bfb      	ldrh	r3, [r7, #30]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < count; i++){
 800529a:	8bfb      	ldrh	r3, [r7, #30]
 800529c:	3301      	adds	r3, #1
 800529e:	83fb      	strh	r3, [r7, #30]
 80052a0:	8bfa      	ldrh	r2, [r7, #30]
 80052a2:	89fb      	ldrh	r3, [r7, #14]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d3e2      	bcc.n	800526e <_Graph_Init+0x52>
	}
	graph_var -> count = count;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	89fa      	ldrh	r2, [r7, #14]
 80052ac:	811a      	strh	r2, [r3, #8]
	graph_var -> xAxisPos = xAxisPos;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	7b7a      	ldrb	r2, [r7, #13]
 80052b2:	729a      	strb	r2, [r3, #10]
	graph_var -> yAxisPos = yAxisPos;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80052ba:	72da      	strb	r2, [r3, #11]
	graph_var -> xDensity = xDen;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	60da      	str	r2, [r3, #12]
	graph_var -> yDensity = yDen;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	611a      	str	r2, [r3, #16]
	graph_var -> Print = _Graph_Print;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <_Graph_Init+0xd4>)
 80052cc:	615a      	str	r2, [r3, #20]
	graph_var -> Add = _Graph_Add;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <_Graph_Init+0xd8>)
 80052d2:	619a      	str	r2, [r3, #24]
	graph_var -> Pop = _Graph_Pop;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <_Graph_Init+0xdc>)
 80052d8:	61da      	str	r2, [r3, #28]
	graph_var -> ChangeDensity = _Graph_ChangeDensity;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	4a07      	ldr	r2, [pc, #28]	; (80052fc <_Graph_Init+0xe0>)
 80052de:	621a      	str	r2, [r3, #32]
	graph_var -> ChangeAxis = _Graph_ChangeAxis;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	4a07      	ldr	r2, [pc, #28]	; (8005300 <_Graph_Init+0xe4>)
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

	return graph_var;
 80052e6:	69bb      	ldr	r3, [r7, #24]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	08004e05 	.word	0x08004e05
 80052f4:	080050bb 	.word	0x080050bb
 80052f8:	08005133 	.word	0x08005133
 80052fc:	080051cb 	.word	0x080051cb
 8005300:	080051f3 	.word	0x080051f3

08005304 <Graph_Delete>:
	graph_var -> Pop = _Graph_Pop;
	return graph_var;
}


void Graph_Delete(graph_t * graph_var){
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	free(graph_var -> xData);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f004 f933 	bl	800957c <free>
	free(graph_var -> yData);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	f004 f92e 	bl	800957c <free>
	free(graph_var);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f004 f92b 	bl	800957c <free>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <Graph_UI>:
	return _Graph_Init(xData, yData, number + 1, xAxisPos, yAxisPos, xDen, yDen);
}

//Graph_UI로 데이터를 조작하면 데이터 값이 바뀝니다. 만약 바뀌질 않는다면 xData, yData 배열을 복제하시기 바랍니다.
//일반적으로 이 UI는 온도 설정을 위한 목적으로 만들어졌습니다. 따라서 이걸로 설정하면 설정값이 바뀌니 유의하시기 바랍니다.
void Graph_UI(graph_t * gr){
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	6078      	str	r0, [r7, #4]
	uint16_t idx = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	82fb      	strh	r3, [r7, #22]
	OLED_Line(0, 53, 95, 53, 0xFF00FF);
 800533c:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2335      	movs	r3, #53	; 0x35
 8005344:	225f      	movs	r2, #95	; 0x5f
 8005346:	2135      	movs	r1, #53	; 0x35
 8005348:	2000      	movs	r0, #0
 800534a:	f001 fccd 	bl	8006ce8 <OLED_Line>
	gr -> Print(gr, 0x0000FF);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	21ff      	movs	r1, #255	; 0xff
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
	_Graph_PrintPoint(gr, idx, 0xFF8800);
 8005358:	8afb      	ldrh	r3, [r7, #22]
 800535a:	4a8b      	ldr	r2, [pc, #556]	; (8005588 <Graph_UI+0x258>)
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fdd9 	bl	8004f16 <_Graph_PrintPoint>
	OLED_Printf("/s/p$60<$6F>");
 8005364:	4889      	ldr	r0, [pc, #548]	; (800558c <Graph_UI+0x25c>)
 8005366:	f001 f90f 	bl	8006588 <OLED_Printf>
	OLED_Printf("/s$62/rx:%d$68/yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	8afb      	ldrh	r3, [r7, #22]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	edd3 7a00 	vldr	s15, [r3]
 8005378:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	8afb      	ldrh	r3, [r7, #22]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	edd3 7a00 	vldr	s15, [r3]
 800538a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800538e:	ee17 2a90 	vmov	r2, s15
 8005392:	ee17 1a10 	vmov	r1, s14
 8005396:	487e      	ldr	r0, [pc, #504]	; (8005590 <Graph_UI+0x260>)
 8005398:	f001 f8f6 	bl	8006588 <OLED_Printf>
	uint32_t pTime = HAL_GetTick();
 800539c:	f7fc fd0c 	bl	8001db8 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]
	uint32_t state = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
	for(;;){
		uint16_t sw = Switch_Read();
 80053a6:	f001 fe8b 	bl	80070c0 <Switch_Read>
 80053aa:	4603      	mov	r3, r0
 80053ac:	817b      	strh	r3, [r7, #10]
		if((sw == SW_TOP || sw == SW_TOP_LONG) && idx < gr->count - 1 && state == 0){
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d002      	beq.n	80053ba <Graph_UI+0x8a>
 80053b4:	897b      	ldrh	r3, [r7, #10]
 80053b6:	2b22      	cmp	r3, #34	; 0x22
 80053b8:	d141      	bne.n	800543e <Graph_UI+0x10e>
 80053ba:	8afa      	ldrh	r2, [r7, #22]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	891b      	ldrh	r3, [r3, #8]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	429a      	cmp	r2, r3
 80053c4:	da3b      	bge.n	800543e <Graph_UI+0x10e>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d138      	bne.n	800543e <Graph_UI+0x10e>
			idx ++;
 80053cc:	8afb      	ldrh	r3, [r7, #22]
 80053ce:	3301      	adds	r3, #1
 80053d0:	82fb      	strh	r3, [r7, #22]
			OLED_Clear();
 80053d2:	f000 fe7b 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 80053d6:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2335      	movs	r3, #53	; 0x35
 80053de:	225f      	movs	r2, #95	; 0x5f
 80053e0:	2135      	movs	r1, #53	; 0x35
 80053e2:	2000      	movs	r0, #0
 80053e4:	f001 fc80 	bl	8006ce8 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	21ff      	movs	r1, #255	; 0xff
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 80053f2:	8afb      	ldrh	r3, [r7, #22]
 80053f4:	4a64      	ldr	r2, [pc, #400]	; (8005588 <Graph_UI+0x258>)
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fd8c 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 80053fe:	4863      	ldr	r0, [pc, #396]	; (800558c <Graph_UI+0x25c>)
 8005400:	f001 f8c2 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/rx:%d$68/yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	8afb      	ldrh	r3, [r7, #22]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005428:	ee17 2a90 	vmov	r2, s15
 800542c:	ee17 1a10 	vmov	r1, s14
 8005430:	4857      	ldr	r0, [pc, #348]	; (8005590 <Graph_UI+0x260>)
 8005432:	f001 f8a9 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005436:	f7fc fcbf 	bl	8001db8 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]
 800543c:	e19e      	b.n	800577c <Graph_UI+0x44c>
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && idx > 0 && state == 0){
 800543e:	897b      	ldrh	r3, [r7, #10]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d002      	beq.n	800544a <Graph_UI+0x11a>
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	2b28      	cmp	r3, #40	; 0x28
 8005448:	d13e      	bne.n	80054c8 <Graph_UI+0x198>
 800544a:	8afb      	ldrh	r3, [r7, #22]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d03b      	beq.n	80054c8 <Graph_UI+0x198>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d138      	bne.n	80054c8 <Graph_UI+0x198>
			idx --;
 8005456:	8afb      	ldrh	r3, [r7, #22]
 8005458:	3b01      	subs	r3, #1
 800545a:	82fb      	strh	r3, [r7, #22]
			OLED_Clear();
 800545c:	f000 fe36 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005460:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	2335      	movs	r3, #53	; 0x35
 8005468:	225f      	movs	r2, #95	; 0x5f
 800546a:	2135      	movs	r1, #53	; 0x35
 800546c:	2000      	movs	r0, #0
 800546e:	f001 fc3b 	bl	8006ce8 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	21ff      	movs	r1, #255	; 0xff
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 800547c:	8afb      	ldrh	r3, [r7, #22]
 800547e:	4a42      	ldr	r2, [pc, #264]	; (8005588 <Graph_UI+0x258>)
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fd47 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005488:	4840      	ldr	r0, [pc, #256]	; (800558c <Graph_UI+0x25c>)
 800548a:	f001 f87d 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/rx:%d$68/yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	8afb      	ldrh	r3, [r7, #22]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	edd3 7a00 	vldr	s15, [r3]
 800549c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	8afb      	ldrh	r3, [r7, #22]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	edd3 7a00 	vldr	s15, [r3]
 80054ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b2:	ee17 2a90 	vmov	r2, s15
 80054b6:	ee17 1a10 	vmov	r1, s14
 80054ba:	4835      	ldr	r0, [pc, #212]	; (8005590 <Graph_UI+0x260>)
 80054bc:	f001 f864 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 80054c0:	f7fc fc7a 	bl	8001db8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]
 80054c6:	e159      	b.n	800577c <Graph_UI+0x44c>
		}
		else if((sw == SW_TOP || sw == SW_TOP_LONG) && gr->yData[idx] < 305.0f && state == 1){
 80054c8:	897b      	ldrh	r3, [r7, #10]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d002      	beq.n	80054d4 <Graph_UI+0x1a4>
 80054ce:	897b      	ldrh	r3, [r7, #10]
 80054d0:	2b22      	cmp	r3, #34	; 0x22
 80054d2:	d163      	bne.n	800559c <Graph_UI+0x26c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	8afb      	ldrh	r3, [r7, #22]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	edd3 7a00 	vldr	s15, [r3]
 80054e2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005594 <Graph_UI+0x264>
 80054e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	d555      	bpl.n	800559c <Graph_UI+0x26c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d152      	bne.n	800559c <Graph_UI+0x26c>
			gr->yData[idx] += 5.0f;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	edd3 7a00 	vldr	s15, [r3]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	8afb      	ldrh	r3, [r7, #22]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005516:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 800551a:	f000 fdd7 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 800551e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2335      	movs	r3, #53	; 0x35
 8005526:	225f      	movs	r2, #95	; 0x5f
 8005528:	2135      	movs	r1, #53	; 0x35
 800552a:	2000      	movs	r0, #0
 800552c:	f001 fbdc 	bl	8006ce8 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	21ff      	movs	r1, #255	; 0xff
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0x00FFFF);
 800553a:	8afb      	ldrh	r3, [r7, #22]
 800553c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fce7 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005548:	4810      	ldr	r0, [pc, #64]	; (800558c <Graph_UI+0x25c>)
 800554a:	f001 f81d 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/yx:%d$68/ry:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	edd3 7a00 	vldr	s15, [r3]
 800555c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	8afb      	ldrh	r3, [r7, #22]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005572:	ee17 2a90 	vmov	r2, s15
 8005576:	ee17 1a10 	vmov	r1, s14
 800557a:	4807      	ldr	r0, [pc, #28]	; (8005598 <Graph_UI+0x268>)
 800557c:	f001 f804 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005580:	f7fc fc1a 	bl	8001db8 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]
 8005586:	e0f9      	b.n	800577c <Graph_UI+0x44c>
 8005588:	00ff8800 	.word	0x00ff8800
 800558c:	0800c3f8 	.word	0x0800c3f8
 8005590:	0800c408 	.word	0x0800c408
 8005594:	43988000 	.word	0x43988000
 8005598:	0800c420 	.word	0x0800c420
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && gr->yData[idx] > 5.0f && state == 1){
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d002      	beq.n	80055a8 <Graph_UI+0x278>
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	2b28      	cmp	r3, #40	; 0x28
 80055a6:	d159      	bne.n	800565c <Graph_UI+0x32c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80055ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c2:	dd4b      	ble.n	800565c <Graph_UI+0x32c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d148      	bne.n	800565c <Graph_UI+0x32c>
			gr->yData[idx] -= 5.0f;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	8afb      	ldrh	r3, [r7, #22]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	edd3 7a00 	vldr	s15, [r3]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	8afb      	ldrh	r3, [r7, #22]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80055e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055ea:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 80055ee:	f000 fd6d 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 80055f2:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2335      	movs	r3, #53	; 0x35
 80055fa:	225f      	movs	r2, #95	; 0x5f
 80055fc:	2135      	movs	r1, #53	; 0x35
 80055fe:	2000      	movs	r0, #0
 8005600:	f001 fb72 	bl	8006ce8 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	21ff      	movs	r1, #255	; 0xff
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0x00FFFF);
 800560e:	8afb      	ldrh	r3, [r7, #22]
 8005610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fc7d 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 800561c:	4865      	ldr	r0, [pc, #404]	; (80057b4 <Graph_UI+0x484>)
 800561e:	f000 ffb3 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/yx:%d$68/ry:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	8afb      	ldrh	r3, [r7, #22]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	edd3 7a00 	vldr	s15, [r3]
 8005630:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	8afb      	ldrh	r3, [r7, #22]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	edd3 7a00 	vldr	s15, [r3]
 8005642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005646:	ee17 2a90 	vmov	r2, s15
 800564a:	ee17 1a10 	vmov	r1, s14
 800564e:	485a      	ldr	r0, [pc, #360]	; (80057b8 <Graph_UI+0x488>)
 8005650:	f000 ff9a 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005654:	f7fc fbb0 	bl	8001db8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]
 800565a:	e08f      	b.n	800577c <Graph_UI+0x44c>
		}
		else if(sw == SW_ENTER){
 800565c:	897b      	ldrh	r3, [r7, #10]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d14c      	bne.n	80056fc <Graph_UI+0x3cc>
			state = !state;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	60fb      	str	r3, [r7, #12]
			_Graph_PrintPoint(gr, idx, state ? 0x00FFFF : 0xFF8800);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <Graph_UI+0x34c>
 8005676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800567a:	e000      	b.n	800567e <Graph_UI+0x34e>
 800567c:	4a4f      	ldr	r2, [pc, #316]	; (80057bc <Graph_UI+0x48c>)
 800567e:	8afb      	ldrh	r3, [r7, #22]
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff fc47 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005688:	484a      	ldr	r0, [pc, #296]	; (80057b4 <Graph_UI+0x484>)
 800568a:	f000 ff7d 	bl	8006588 <OLED_Printf>
			if(state){
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d019      	beq.n	80056c8 <Graph_UI+0x398>
				OLED_Printf("/s$62/yx:%d$68/ry:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	8afb      	ldrh	r3, [r7, #22]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	edd3 7a00 	vldr	s15, [r3]
 80056a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	8afb      	ldrh	r3, [r7, #22]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	edd3 7a00 	vldr	s15, [r3]
 80056b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056b8:	ee17 2a90 	vmov	r2, s15
 80056bc:	ee17 1a10 	vmov	r1, s14
 80056c0:	483d      	ldr	r0, [pc, #244]	; (80057b8 <Graph_UI+0x488>)
 80056c2:	f000 ff61 	bl	8006588 <OLED_Printf>
 80056c6:	e059      	b.n	800577c <Graph_UI+0x44c>
			}
			else{
				OLED_Printf("/s$62/rx:%d$68/yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	8afb      	ldrh	r3, [r7, #22]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	edd3 7a00 	vldr	s15, [r3]
 80056d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	8afb      	ldrh	r3, [r7, #22]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	edd3 7a00 	vldr	s15, [r3]
 80056e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ec:	ee17 2a90 	vmov	r2, s15
 80056f0:	ee17 1a10 	vmov	r1, s14
 80056f4:	4832      	ldr	r0, [pc, #200]	; (80057c0 <Graph_UI+0x490>)
 80056f6:	f000 ff47 	bl	8006588 <OLED_Printf>
 80056fa:	e03f      	b.n	800577c <Graph_UI+0x44c>
			}
		}
		else if(sw == SW_LEFT){
 80056fc:	897b      	ldrh	r3, [r7, #10]
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d053      	beq.n	80057aa <Graph_UI+0x47a>
			break;
		}
		else if(sw == SW_RIGHT){
 8005702:	897b      	ldrh	r3, [r7, #10]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d139      	bne.n	800577c <Graph_UI+0x44c>
			Heat(gr);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f002 ffa9 	bl	8008660 <Heat>

			OLED_Clear();
 800570e:	f000 fcdd 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005712:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2335      	movs	r3, #53	; 0x35
 800571a:	225f      	movs	r2, #95	; 0x5f
 800571c:	2135      	movs	r1, #53	; 0x35
 800571e:	2000      	movs	r0, #0
 8005720:	f001 fae2 	bl	8006ce8 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	21ff      	movs	r1, #255	; 0xff
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 800572e:	8afb      	ldrh	r3, [r7, #22]
 8005730:	4a22      	ldr	r2, [pc, #136]	; (80057bc <Graph_UI+0x48c>)
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fbee 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 800573a:	481e      	ldr	r0, [pc, #120]	; (80057b4 <Graph_UI+0x484>)
 800573c:	f000 ff24 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/rx:%d$68/yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	8afb      	ldrh	r3, [r7, #22]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	edd3 7a00 	vldr	s15, [r3]
 800574e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	edd3 7a00 	vldr	s15, [r3]
 8005760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005764:	ee17 2a90 	vmov	r2, s15
 8005768:	ee17 1a10 	vmov	r1, s14
 800576c:	4814      	ldr	r0, [pc, #80]	; (80057c0 <Graph_UI+0x490>)
 800576e:	f000 ff0b 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005772:	f7fc fb21 	bl	8001db8 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]
			state = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
		}
		if(HAL_GetTick() - pTime > 10){
 800577c:	f7fc fb1c 	bl	8001db8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b0a      	cmp	r3, #10
 8005788:	f67f ae0d 	bls.w	80053a6 <Graph_UI+0x76>
			pTime += 10;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	330a      	adds	r3, #10
 8005790:	613b      	str	r3, [r7, #16]
			Switch_LED_Temperature(gr->yData[idx]);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	8afb      	ldrh	r3, [r7, #22]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	edd3 7a00 	vldr	s15, [r3]
 80057a0:	eeb0 0a67 	vmov.f32	s0, s15
 80057a4:	f001 fbce 	bl	8006f44 <Switch_LED_Temperature>
	for(;;){
 80057a8:	e5fd      	b.n	80053a6 <Graph_UI+0x76>
			break;
 80057aa:	bf00      	nop
		}

	}


}
 80057ac:	bf00      	nop
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	0800c3f8 	.word	0x0800c3f8
 80057b8:	0800c420 	.word	0x0800c420
 80057bc:	00ff8800 	.word	0x00ff8800
 80057c0:	0800c408 	.word	0x0800c408

080057c4 <Graph_UI2>:



void Graph_UI2(graph_t * gr1, graph_t * gr2){
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	uint16_t idx = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	82fb      	strh	r3, [r7, #22]
	OLED_Line(0, 53, 95, 53, 0xFF00FF);
 80057d2:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2335      	movs	r3, #53	; 0x35
 80057da:	225f      	movs	r2, #95	; 0x5f
 80057dc:	2135      	movs	r1, #53	; 0x35
 80057de:	2000      	movs	r0, #0
 80057e0:	f001 fa82 	bl	8006ce8 <OLED_Line>
	gr1 -> Print(gr1, 0x0000FF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	21ff      	movs	r1, #255	; 0xff
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
	gr2 -> Print(gr2, 0x00FF00);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80057f6:	6838      	ldr	r0, [r7, #0]
 80057f8:	4798      	blx	r3
	_Graph_PrintPoint(gr1, idx, 0xFF8800);
 80057fa:	8afb      	ldrh	r3, [r7, #22]
 80057fc:	4ab5      	ldr	r2, [pc, #724]	; (8005ad4 <Graph_UI2+0x310>)
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fb88 	bl	8004f16 <_Graph_PrintPoint>
	_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005806:	8afb      	ldrh	r3, [r7, #22]
 8005808:	4ab2      	ldr	r2, [pc, #712]	; (8005ad4 <Graph_UI2+0x310>)
 800580a:	4619      	mov	r1, r3
 800580c:	6838      	ldr	r0, [r7, #0]
 800580e:	f7ff fb82 	bl	8004f16 <_Graph_PrintPoint>
	OLED_Printf("/s/k$60<$6F>");
 8005812:	48b1      	ldr	r0, [pc, #708]	; (8005ad8 <Graph_UI2+0x314>)
 8005814:	f000 feb8 	bl	8006588 <OLED_Printf>
	OLED_Printf("/s$62/rt%03d$66/yu%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	8afb      	ldrh	r3, [r7, #22]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	8afb      	ldrh	r3, [r7, #22]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	edd3 7a00 	vldr	s15, [r3]
 8005838:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	edd3 7a00 	vldr	s15, [r3]
 800584a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800584e:	ee17 3a90 	vmov	r3, s15
 8005852:	ee16 2a90 	vmov	r2, s13
 8005856:	ee17 1a10 	vmov	r1, s14
 800585a:	48a0      	ldr	r0, [pc, #640]	; (8005adc <Graph_UI2+0x318>)
 800585c:	f000 fe94 	bl	8006588 <OLED_Printf>
	uint32_t pTime = HAL_GetTick();
 8005860:	f7fc faaa 	bl	8001db8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]
	uint32_t state = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
	for(;;){
		uint16_t sw = Switch_Read();
 800586a:	f001 fc29 	bl	80070c0 <Switch_Read>
 800586e:	4603      	mov	r3, r0
 8005870:	817b      	strh	r3, [r7, #10]
		if((sw == SW_TOP || sw == SW_TOP_LONG) && idx < gr1->count - 1 && state == 0){
 8005872:	897b      	ldrh	r3, [r7, #10]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d002      	beq.n	800587e <Graph_UI2+0xba>
 8005878:	897b      	ldrh	r3, [r7, #10]
 800587a:	2b22      	cmp	r3, #34	; 0x22
 800587c:	d158      	bne.n	8005930 <Graph_UI2+0x16c>
 800587e:	8afa      	ldrh	r2, [r7, #22]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	891b      	ldrh	r3, [r3, #8]
 8005884:	3b01      	subs	r3, #1
 8005886:	429a      	cmp	r2, r3
 8005888:	da52      	bge.n	8005930 <Graph_UI2+0x16c>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d14f      	bne.n	8005930 <Graph_UI2+0x16c>
			idx ++;
 8005890:	8afb      	ldrh	r3, [r7, #22]
 8005892:	3301      	adds	r3, #1
 8005894:	82fb      	strh	r3, [r7, #22]
			OLED_Clear();
 8005896:	f000 fc19 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 800589a:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	2335      	movs	r3, #53	; 0x35
 80058a2:	225f      	movs	r2, #95	; 0x5f
 80058a4:	2135      	movs	r1, #53	; 0x35
 80058a6:	2000      	movs	r0, #0
 80058a8:	f001 fa1e 	bl	8006ce8 <OLED_Line>
			gr1 -> Print(gr1, 0x0000FF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	21ff      	movs	r1, #255	; 0xff
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
			gr2 -> Print(gr2, 0x00FF00);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80058be:	6838      	ldr	r0, [r7, #0]
 80058c0:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 80058c2:	8afb      	ldrh	r3, [r7, #22]
 80058c4:	4a83      	ldr	r2, [pc, #524]	; (8005ad4 <Graph_UI2+0x310>)
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fb24 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 80058ce:	8afb      	ldrh	r3, [r7, #22]
 80058d0:	4a80      	ldr	r2, [pc, #512]	; (8005ad4 <Graph_UI2+0x310>)
 80058d2:	4619      	mov	r1, r3
 80058d4:	6838      	ldr	r0, [r7, #0]
 80058d6:	f7ff fb1e 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/k$60<$6F>");
 80058da:	487f      	ldr	r0, [pc, #508]	; (8005ad8 <Graph_UI2+0x314>)
 80058dc:	f000 fe54 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/rt%03d$66/yu%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	8afb      	ldrh	r3, [r7, #22]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	edd3 7a00 	vldr	s15, [r3]
 80058ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	8afb      	ldrh	r3, [r7, #22]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	edd3 7a00 	vldr	s15, [r3]
 8005900:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	8afb      	ldrh	r3, [r7, #22]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005916:	ee17 3a90 	vmov	r3, s15
 800591a:	ee16 2a90 	vmov	r2, s13
 800591e:	ee17 1a10 	vmov	r1, s14
 8005922:	486e      	ldr	r0, [pc, #440]	; (8005adc <Graph_UI2+0x318>)
 8005924:	f000 fe30 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005928:	f7fc fa46 	bl	8001db8 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]
 800592e:	e32a      	b.n	8005f86 <Graph_UI2+0x7c2>
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && idx > 0 && state == 0){
 8005930:	897b      	ldrh	r3, [r7, #10]
 8005932:	2b08      	cmp	r3, #8
 8005934:	d002      	beq.n	800593c <Graph_UI2+0x178>
 8005936:	897b      	ldrh	r3, [r7, #10]
 8005938:	2b28      	cmp	r3, #40	; 0x28
 800593a:	d155      	bne.n	80059e8 <Graph_UI2+0x224>
 800593c:	8afb      	ldrh	r3, [r7, #22]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d052      	beq.n	80059e8 <Graph_UI2+0x224>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d14f      	bne.n	80059e8 <Graph_UI2+0x224>
			idx --;
 8005948:	8afb      	ldrh	r3, [r7, #22]
 800594a:	3b01      	subs	r3, #1
 800594c:	82fb      	strh	r3, [r7, #22]
			OLED_Clear();
 800594e:	f000 fbbd 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005952:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2335      	movs	r3, #53	; 0x35
 800595a:	225f      	movs	r2, #95	; 0x5f
 800595c:	2135      	movs	r1, #53	; 0x35
 800595e:	2000      	movs	r0, #0
 8005960:	f001 f9c2 	bl	8006ce8 <OLED_Line>
			gr1 -> Print(gr1, 0x0000FF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	21ff      	movs	r1, #255	; 0xff
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
			gr2 -> Print(gr2, 0x00FF00);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005976:	6838      	ldr	r0, [r7, #0]
 8005978:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 800597a:	8afb      	ldrh	r3, [r7, #22]
 800597c:	4a55      	ldr	r2, [pc, #340]	; (8005ad4 <Graph_UI2+0x310>)
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fac8 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005986:	8afb      	ldrh	r3, [r7, #22]
 8005988:	4a52      	ldr	r2, [pc, #328]	; (8005ad4 <Graph_UI2+0x310>)
 800598a:	4619      	mov	r1, r3
 800598c:	6838      	ldr	r0, [r7, #0]
 800598e:	f7ff fac2 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005992:	4853      	ldr	r0, [pc, #332]	; (8005ae0 <Graph_UI2+0x31c>)
 8005994:	f000 fdf8 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/rt%03d$66/yu%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	8afb      	ldrh	r3, [r7, #22]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	edd3 7a00 	vldr	s15, [r3]
 80059a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	8afb      	ldrh	r3, [r7, #22]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	edd3 7a00 	vldr	s15, [r3]
 80059b8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	8afb      	ldrh	r3, [r7, #22]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	edd3 7a00 	vldr	s15, [r3]
 80059ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059ce:	ee17 3a90 	vmov	r3, s15
 80059d2:	ee16 2a90 	vmov	r2, s13
 80059d6:	ee17 1a10 	vmov	r1, s14
 80059da:	4840      	ldr	r0, [pc, #256]	; (8005adc <Graph_UI2+0x318>)
 80059dc:	f000 fdd4 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 80059e0:	f7fc f9ea 	bl	8001db8 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]
 80059e6:	e2ce      	b.n	8005f86 <Graph_UI2+0x7c2>
		}
		else if((sw == SW_TOP || sw == SW_TOP_LONG) && gr1->yData[idx] < 299.0f && state == 1){
 80059e8:	897b      	ldrh	r3, [r7, #10]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d002      	beq.n	80059f4 <Graph_UI2+0x230>
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	2b22      	cmp	r3, #34	; 0x22
 80059f2:	d17b      	bne.n	8005aec <Graph_UI2+0x328>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	8afb      	ldrh	r3, [r7, #22]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	edd3 7a00 	vldr	s15, [r3]
 8005a02:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005ae4 <Graph_UI2+0x320>
 8005a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0e:	d56d      	bpl.n	8005aec <Graph_UI2+0x328>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d16a      	bne.n	8005aec <Graph_UI2+0x328>
			gr1->yData[idx] += 5.0f;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	8afb      	ldrh	r3, [r7, #22]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	edd3 7a00 	vldr	s15, [r3]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	8afb      	ldrh	r3, [r7, #22]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a36:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 8005a3a:	f000 fb47 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005a3e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2335      	movs	r3, #53	; 0x35
 8005a46:	225f      	movs	r2, #95	; 0x5f
 8005a48:	2135      	movs	r1, #53	; 0x35
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f001 f94c 	bl	8006ce8 <OLED_Line>
			gr2 -> Print(gr2, 0x00FF00);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005a58:	6838      	ldr	r0, [r7, #0]
 8005a5a:	4798      	blx	r3
			gr1 -> Print(gr1, 0x0000FF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	21ff      	movs	r1, #255	; 0xff
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 8005a66:	8afb      	ldrh	r3, [r7, #22]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <Graph_UI2+0x310>)
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fa52 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005a72:	8afb      	ldrh	r3, [r7, #22]
 8005a74:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <Graph_UI2+0x310>)
 8005a76:	4619      	mov	r1, r3
 8005a78:	6838      	ldr	r0, [r7, #0]
 8005a7a:	f7ff fa4c 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005a7e:	4818      	ldr	r0, [pc, #96]	; (8005ae0 <Graph_UI2+0x31c>)
 8005a80:	f000 fd82 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/yt%03d$66/ru%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	8afb      	ldrh	r3, [r7, #22]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	edd3 7a00 	vldr	s15, [r3]
 8005a92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	8afb      	ldrh	r3, [r7, #22]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	edd3 7a00 	vldr	s15, [r3]
 8005aa4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	8afb      	ldrh	r3, [r7, #22]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	edd3 7a00 	vldr	s15, [r3]
 8005ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aba:	ee17 3a90 	vmov	r3, s15
 8005abe:	ee16 2a90 	vmov	r2, s13
 8005ac2:	ee17 1a10 	vmov	r1, s14
 8005ac6:	4808      	ldr	r0, [pc, #32]	; (8005ae8 <Graph_UI2+0x324>)
 8005ac8:	f000 fd5e 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005acc:	f7fc f974 	bl	8001db8 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]
 8005ad2:	e258      	b.n	8005f86 <Graph_UI2+0x7c2>
 8005ad4:	00ff8800 	.word	0x00ff8800
 8005ad8:	0800c438 	.word	0x0800c438
 8005adc:	0800c448 	.word	0x0800c448
 8005ae0:	0800c3f8 	.word	0x0800c3f8
 8005ae4:	43958000 	.word	0x43958000
 8005ae8:	0800c46c 	.word	0x0800c46c
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && gr1->yData[idx] > 4.0f && state == 1){
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d002      	beq.n	8005af8 <Graph_UI2+0x334>
 8005af2:	897b      	ldrh	r3, [r7, #10]
 8005af4:	2b28      	cmp	r3, #40	; 0x28
 8005af6:	d16f      	bne.n	8005bd8 <Graph_UI2+0x414>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	8afb      	ldrh	r3, [r7, #22]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	edd3 7a00 	vldr	s15, [r3]
 8005b06:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b12:	dd61      	ble.n	8005bd8 <Graph_UI2+0x414>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d15e      	bne.n	8005bd8 <Graph_UI2+0x414>
			gr1->yData[idx] -= 5.0f;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	8afb      	ldrh	r3, [r7, #22]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	edd3 7a00 	vldr	s15, [r3]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	8afb      	ldrh	r3, [r7, #22]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b3a:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 8005b3e:	f000 fac5 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005b42:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2335      	movs	r3, #53	; 0x35
 8005b4a:	225f      	movs	r2, #95	; 0x5f
 8005b4c:	2135      	movs	r1, #53	; 0x35
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f001 f8ca 	bl	8006ce8 <OLED_Line>
			gr2 -> Print(gr2, 0x00FF00);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005b5c:	6838      	ldr	r0, [r7, #0]
 8005b5e:	4798      	blx	r3
			gr1 -> Print(gr1, 0x0000FF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	21ff      	movs	r1, #255	; 0xff
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 8005b6a:	8afb      	ldrh	r3, [r7, #22]
 8005b6c:	4aad      	ldr	r2, [pc, #692]	; (8005e24 <Graph_UI2+0x660>)
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff f9d0 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005b76:	8afb      	ldrh	r3, [r7, #22]
 8005b78:	4aaa      	ldr	r2, [pc, #680]	; (8005e24 <Graph_UI2+0x660>)
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f7ff f9ca 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005b82:	48a9      	ldr	r0, [pc, #676]	; (8005e28 <Graph_UI2+0x664>)
 8005b84:	f000 fd00 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/yt%03d$66/ru%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	8afb      	ldrh	r3, [r7, #22]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	edd3 7a00 	vldr	s15, [r3]
 8005b96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	8afb      	ldrh	r3, [r7, #22]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	8afb      	ldrh	r3, [r7, #22]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	edd3 7a00 	vldr	s15, [r3]
 8005bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bbe:	ee17 3a90 	vmov	r3, s15
 8005bc2:	ee16 2a90 	vmov	r2, s13
 8005bc6:	ee17 1a10 	vmov	r1, s14
 8005bca:	4898      	ldr	r0, [pc, #608]	; (8005e2c <Graph_UI2+0x668>)
 8005bcc:	f000 fcdc 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005bd0:	f7fc f8f2 	bl	8001db8 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]
 8005bd6:	e1d6      	b.n	8005f86 <Graph_UI2+0x7c2>
		}
		else if((sw == SW_TOP || sw == SW_TOP_LONG) && gr2->yData[idx] < 299.0f && state == 2){
 8005bd8:	897b      	ldrh	r3, [r7, #10]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d002      	beq.n	8005be4 <Graph_UI2+0x420>
 8005bde:	897b      	ldrh	r3, [r7, #10]
 8005be0:	2b22      	cmp	r3, #34	; 0x22
 8005be2:	d16f      	bne.n	8005cc4 <Graph_UI2+0x500>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	8afb      	ldrh	r3, [r7, #22]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	edd3 7a00 	vldr	s15, [r3]
 8005bf2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005e30 <Graph_UI2+0x66c>
 8005bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfe:	d561      	bpl.n	8005cc4 <Graph_UI2+0x500>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d15e      	bne.n	8005cc4 <Graph_UI2+0x500>
			gr2->yData[idx] += 5.0f;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	8afb      	ldrh	r3, [r7, #22]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	edd3 7a00 	vldr	s15, [r3]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	8afb      	ldrh	r3, [r7, #22]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005c22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c26:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 8005c2a:	f000 fa4f 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005c2e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2335      	movs	r3, #53	; 0x35
 8005c36:	225f      	movs	r2, #95	; 0x5f
 8005c38:	2135      	movs	r1, #53	; 0x35
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f001 f854 	bl	8006ce8 <OLED_Line>
			gr1 -> Print(gr1, 0x0000FF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	21ff      	movs	r1, #255	; 0xff
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
			gr2 -> Print(gr2, 0x00FF00);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005c52:	6838      	ldr	r0, [r7, #0]
 8005c54:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 8005c56:	8afb      	ldrh	r3, [r7, #22]
 8005c58:	4a72      	ldr	r2, [pc, #456]	; (8005e24 <Graph_UI2+0x660>)
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff f95a 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005c62:	8afb      	ldrh	r3, [r7, #22]
 8005c64:	4a6f      	ldr	r2, [pc, #444]	; (8005e24 <Graph_UI2+0x660>)
 8005c66:	4619      	mov	r1, r3
 8005c68:	6838      	ldr	r0, [r7, #0]
 8005c6a:	f7ff f954 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005c6e:	486e      	ldr	r0, [pc, #440]	; (8005e28 <Graph_UI2+0x664>)
 8005c70:	f000 fc8a 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/yt%03d$66/yu%03d$6A/rd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	8afb      	ldrh	r3, [r7, #22]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	edd3 7a00 	vldr	s15, [r3]
 8005c82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	8afb      	ldrh	r3, [r7, #22]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	edd3 7a00 	vldr	s15, [r3]
 8005c94:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	8afb      	ldrh	r3, [r7, #22]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	edd3 7a00 	vldr	s15, [r3]
 8005ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005caa:	ee17 3a90 	vmov	r3, s15
 8005cae:	ee16 2a90 	vmov	r2, s13
 8005cb2:	ee17 1a10 	vmov	r1, s14
 8005cb6:	485f      	ldr	r0, [pc, #380]	; (8005e34 <Graph_UI2+0x670>)
 8005cb8:	f000 fc66 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005cbc:	f7fc f87c 	bl	8001db8 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]
 8005cc2:	e160      	b.n	8005f86 <Graph_UI2+0x7c2>
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && gr2->yData[idx] > 4.0f && state == 2){
 8005cc4:	897b      	ldrh	r3, [r7, #10]
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d002      	beq.n	8005cd0 <Graph_UI2+0x50c>
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	2b28      	cmp	r3, #40	; 0x28
 8005cce:	d16f      	bne.n	8005db0 <Graph_UI2+0x5ec>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	8afb      	ldrh	r3, [r7, #22]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	edd3 7a00 	vldr	s15, [r3]
 8005cde:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	dd61      	ble.n	8005db0 <Graph_UI2+0x5ec>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d15e      	bne.n	8005db0 <Graph_UI2+0x5ec>
			gr1->yData[idx] -= 5.0f;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	8afb      	ldrh	r3, [r7, #22]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	edd3 7a00 	vldr	s15, [r3]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	8afb      	ldrh	r3, [r7, #22]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d12:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 8005d16:	f000 f9d9 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005d1a:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	2335      	movs	r3, #53	; 0x35
 8005d22:	225f      	movs	r2, #95	; 0x5f
 8005d24:	2135      	movs	r1, #53	; 0x35
 8005d26:	2000      	movs	r0, #0
 8005d28:	f000 ffde 	bl	8006ce8 <OLED_Line>
			gr1 -> Print(gr1, 0x0000FF);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	21ff      	movs	r1, #255	; 0xff
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
			gr2 -> Print(gr2, 0x00FF00);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 8005d42:	8afb      	ldrh	r3, [r7, #22]
 8005d44:	4a37      	ldr	r2, [pc, #220]	; (8005e24 <Graph_UI2+0x660>)
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff f8e4 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	4a34      	ldr	r2, [pc, #208]	; (8005e24 <Graph_UI2+0x660>)
 8005d52:	4619      	mov	r1, r3
 8005d54:	6838      	ldr	r0, [r7, #0]
 8005d56:	f7ff f8de 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005d5a:	4833      	ldr	r0, [pc, #204]	; (8005e28 <Graph_UI2+0x664>)
 8005d5c:	f000 fc14 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/yt%03d$66/yu%03d$6A/rd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	8afb      	ldrh	r3, [r7, #22]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	8afb      	ldrh	r3, [r7, #22]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	edd3 7a00 	vldr	s15, [r3]
 8005d80:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	8afb      	ldrh	r3, [r7, #22]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	edd3 7a00 	vldr	s15, [r3]
 8005d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d96:	ee17 3a90 	vmov	r3, s15
 8005d9a:	ee16 2a90 	vmov	r2, s13
 8005d9e:	ee17 1a10 	vmov	r1, s14
 8005da2:	4824      	ldr	r0, [pc, #144]	; (8005e34 <Graph_UI2+0x670>)
 8005da4:	f000 fbf0 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005da8:	f7fc f806 	bl	8001db8 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]
 8005dae:	e0ea      	b.n	8005f86 <Graph_UI2+0x7c2>
		}
		else if(sw == SW_ENTER){
 8005db0:	897b      	ldrh	r3, [r7, #10]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	f040 808f 	bne.w	8005ed6 <Graph_UI2+0x712>
			state = (state + 1) % 3;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <Graph_UI2+0x674>)
 8005dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc2:	0859      	lsrs	r1, r3, #1
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	440b      	add	r3, r1
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
			OLED_Printf("/s/p$60<$6F>");
 8005dce:	4816      	ldr	r0, [pc, #88]	; (8005e28 <Graph_UI2+0x664>)
 8005dd0:	f000 fbda 	bl	8006588 <OLED_Printf>
			if(state==2){
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d130      	bne.n	8005e3c <Graph_UI2+0x678>
				OLED_Printf("/s$62/yt%03d$66/yu%03d$6A/rd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	8afb      	ldrh	r3, [r7, #22]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	edd3 7a00 	vldr	s15, [r3]
 8005de8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	8afb      	ldrh	r3, [r7, #22]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	edd3 7a00 	vldr	s15, [r3]
 8005dfa:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	8afb      	ldrh	r3, [r7, #22]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	edd3 7a00 	vldr	s15, [r3]
 8005e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e10:	ee17 3a90 	vmov	r3, s15
 8005e14:	ee16 2a90 	vmov	r2, s13
 8005e18:	ee17 1a10 	vmov	r1, s14
 8005e1c:	4805      	ldr	r0, [pc, #20]	; (8005e34 <Graph_UI2+0x670>)
 8005e1e:	f000 fbb3 	bl	8006588 <OLED_Printf>
 8005e22:	e0b0      	b.n	8005f86 <Graph_UI2+0x7c2>
 8005e24:	00ff8800 	.word	0x00ff8800
 8005e28:	0800c3f8 	.word	0x0800c3f8
 8005e2c:	0800c46c 	.word	0x0800c46c
 8005e30:	43958000 	.word	0x43958000
 8005e34:	0800c490 	.word	0x0800c490
 8005e38:	aaaaaaab 	.word	0xaaaaaaab
			}
			else if(state==1){
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d124      	bne.n	8005e8c <Graph_UI2+0x6c8>
				OLED_Printf("/s$62/yt%03d$66/ru%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	8afb      	ldrh	r3, [r7, #22]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	edd3 7a00 	vldr	s15, [r3]
 8005e50:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	8afb      	ldrh	r3, [r7, #22]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	edd3 7a00 	vldr	s15, [r3]
 8005e62:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	8afb      	ldrh	r3, [r7, #22]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	edd3 7a00 	vldr	s15, [r3]
 8005e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e78:	ee17 3a90 	vmov	r3, s15
 8005e7c:	ee16 2a90 	vmov	r2, s13
 8005e80:	ee17 1a10 	vmov	r1, s14
 8005e84:	4854      	ldr	r0, [pc, #336]	; (8005fd8 <Graph_UI2+0x814>)
 8005e86:	f000 fb7f 	bl	8006588 <OLED_Printf>
 8005e8a:	e07c      	b.n	8005f86 <Graph_UI2+0x7c2>
			}
			else{
				OLED_Printf("/s$62/rt%03d$66/yu%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	8afb      	ldrh	r3, [r7, #22]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	edd3 7a00 	vldr	s15, [r3]
 8005e9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	8afb      	ldrh	r3, [r7, #22]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	edd3 7a00 	vldr	s15, [r3]
 8005eac:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	8afb      	ldrh	r3, [r7, #22]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ec2:	ee17 3a90 	vmov	r3, s15
 8005ec6:	ee16 2a90 	vmov	r2, s13
 8005eca:	ee17 1a10 	vmov	r1, s14
 8005ece:	4843      	ldr	r0, [pc, #268]	; (8005fdc <Graph_UI2+0x818>)
 8005ed0:	f000 fb5a 	bl	8006588 <OLED_Printf>
 8005ed4:	e057      	b.n	8005f86 <Graph_UI2+0x7c2>
			}
		}
		else if(sw == SW_LEFT){
 8005ed6:	897b      	ldrh	r3, [r7, #10]
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d078      	beq.n	8005fce <Graph_UI2+0x80a>
			break;
		}
		else if(sw == SW_RIGHT){
 8005edc:	897b      	ldrh	r3, [r7, #10]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d151      	bne.n	8005f86 <Graph_UI2+0x7c2>
			Heat2(gr1, gr2);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 fea3 	bl	8008c30 <Heat2>

			OLED_Clear();
 8005eea:	f000 f8ef 	bl	80060cc <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005eee:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2335      	movs	r3, #53	; 0x35
 8005ef6:	225f      	movs	r2, #95	; 0x5f
 8005ef8:	2135      	movs	r1, #53	; 0x35
 8005efa:	2000      	movs	r0, #0
 8005efc:	f000 fef4 	bl	8006ce8 <OLED_Line>
			gr1 -> Print(gr1, 0x0000FF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	21ff      	movs	r1, #255	; 0xff
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
			gr2 -> Print(gr2, 0x00FF00);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005f12:	6838      	ldr	r0, [r7, #0]
 8005f14:	4798      	blx	r3
			_Graph_PrintPoint(gr1, idx, 0xFF8800);
 8005f16:	8afb      	ldrh	r3, [r7, #22]
 8005f18:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <Graph_UI2+0x81c>)
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7fe fffa 	bl	8004f16 <_Graph_PrintPoint>
			_Graph_PrintPoint(gr2, idx, 0xFF8800);
 8005f22:	8afb      	ldrh	r3, [r7, #22]
 8005f24:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <Graph_UI2+0x81c>)
 8005f26:	4619      	mov	r1, r3
 8005f28:	6838      	ldr	r0, [r7, #0]
 8005f2a:	f7fe fff4 	bl	8004f16 <_Graph_PrintPoint>
			OLED_Printf("/s/p$60<$6F>");
 8005f2e:	482d      	ldr	r0, [pc, #180]	; (8005fe4 <Graph_UI2+0x820>)
 8005f30:	f000 fb2a 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s$62/rt%03d$66/yu%03d$6A/yd%03d", (int)gr1->xData[idx], (int)gr1->yData[idx], (int)gr2->yData[idx]);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	8afb      	ldrh	r3, [r7, #22]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	edd3 7a00 	vldr	s15, [r3]
 8005f42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	edd3 7a00 	vldr	s15, [r3]
 8005f54:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	8afb      	ldrh	r3, [r7, #22]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	edd3 7a00 	vldr	s15, [r3]
 8005f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f6a:	ee17 3a90 	vmov	r3, s15
 8005f6e:	ee16 2a90 	vmov	r2, s13
 8005f72:	ee17 1a10 	vmov	r1, s14
 8005f76:	4819      	ldr	r0, [pc, #100]	; (8005fdc <Graph_UI2+0x818>)
 8005f78:	f000 fb06 	bl	8006588 <OLED_Printf>
			pTime = HAL_GetTick();
 8005f7c:	f7fb ff1c 	bl	8001db8 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]
			state = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
		}
		if(HAL_GetTick() - pTime > 10){
 8005f86:	f7fb ff17 	bl	8001db8 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b0a      	cmp	r3, #10
 8005f92:	f67f ac6a 	bls.w	800586a <Graph_UI2+0xa6>
			pTime += 10;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	330a      	adds	r3, #10
 8005f9a:	613b      	str	r3, [r7, #16]
			Switch_LED_Temperature((gr1->yData[idx] + gr2->yData[idx])/2.0);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	8afb      	ldrh	r3, [r7, #22]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	ed93 7a00 	vldr	s14, [r3]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	edd3 7a00 	vldr	s15, [r3]
 8005fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fbc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005fc0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8005fc8:	f000 ffbc 	bl	8006f44 <Switch_LED_Temperature>
	for(;;){
 8005fcc:	e44d      	b.n	800586a <Graph_UI2+0xa6>
			break;
 8005fce:	bf00      	nop
		}

	}


}
 8005fd0:	bf00      	nop
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	0800c46c 	.word	0x0800c46c
 8005fdc:	0800c448 	.word	0x0800c448
 8005fe0:	00ff8800 	.word	0x00ff8800
 8005fe4:	0800c3f8 	.word	0x0800c3f8

08005fe8 <OLED_CS_Set>:
		0x7C, 0x7C, 0x7C, 0x7C, 0x7C, //Full Square(/Q)
		0x7C, 0x44, 0x44, 0x44, 0x7C, //Empty Square(/q)
		0x38, 0x7C, 0x7C, 0x7C, 0x38, //Full Circle(/*)
};

static void inline OLED_CS_Set(uint8_t state){
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, state);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2104      	movs	r1, #4
 8005ff8:	4803      	ldr	r0, [pc, #12]	; (8006008 <OLED_CS_Set+0x20>)
 8005ffa:	f7fc f9bb 	bl	8002374 <HAL_GPIO_WritePin>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40020400 	.word	0x40020400

0800600c <OLED_DC_Set>:

static void inline OLED_DC_Set(uint8_t state){
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, state);
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	461a      	mov	r2, r3
 800601a:	2110      	movs	r1, #16
 800601c:	4803      	ldr	r0, [pc, #12]	; (800602c <OLED_DC_Set+0x20>)
 800601e:	f7fc f9a9 	bl	8002374 <HAL_GPIO_WritePin>
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40020000 	.word	0x40020000

08006030 <OLED_RS_Set>:

static void inline OLED_RS_Set(uint8_t state){
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_RS_GPIO_Port, OLED_RS_Pin, state);
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	461a      	mov	r2, r3
 800603e:	2102      	movs	r1, #2
 8006040:	4803      	ldr	r0, [pc, #12]	; (8006050 <OLED_RS_Set+0x20>)
 8006042:	f7fc f997 	bl	8002374 <HAL_GPIO_WritePin>
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40020000 	.word	0x40020000

08006054 <OLED_Send>:

static void inline OLED_Send(uint8_t data){
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800605e:	b672      	cpsid	i
}
 8006060:	bf00      	nop
	__disable_irq();//인터럽트를 중단하여 데이터 전송을 원활하게 한다.
	OLED_CS_Set(0);//OLED에 데이터를 전송하기 위해 CS를 Low신호로 만들어야 한다.
 8006062:	2000      	movs	r0, #0
 8006064:	f7ff ffc0 	bl	8005fe8 <OLED_CS_Set>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 8006068:	1df9      	adds	r1, r7, #7
 800606a:	2301      	movs	r3, #1
 800606c:	2201      	movs	r2, #1
 800606e:	4806      	ldr	r0, [pc, #24]	; (8006088 <OLED_Send+0x34>)
 8006070:	f7fc fe6b 	bl	8002d4a <HAL_SPI_Transmit>
	OLED_CS_Set(1);//데이터 전송이 끝나면 CS를 High로 만들어 신호가 들어와도 무시하도록 해야 한다.
 8006074:	2001      	movs	r0, #1
 8006076:	f7ff ffb7 	bl	8005fe8 <OLED_CS_Set>
  __ASM volatile ("cpsie i" : : : "memory");
 800607a:	b662      	cpsie	i
}
 800607c:	bf00      	nop
	__enable_irq();
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000578 	.word	0x20000578

0800608c <OLED_WriteCommand>:

static void inline OLED_WriteCommand(uint8_t data){
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(0);
 8006096:	2000      	movs	r0, #0
 8006098:	f7ff ffb8 	bl	800600c <OLED_DC_Set>
	OLED_Send(data);
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ffd8 	bl	8006054 <OLED_Send>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <OLED_WriteData>:

static void inline OLED_WriteData(uint8_t data){
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(1);
 80060b6:	2001      	movs	r0, #1
 80060b8:	f7ff ffa8 	bl	800600c <OLED_DC_Set>
	OLED_Send(data);
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff ffc8 	bl	8006054 <OLED_Send>
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <OLED_Clear>:

void OLED_Clear(){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
	OLED_row = 1;
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <OLED_Clear+0x50>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 80060d8:	4b11      	ldr	r3, [pc, #68]	; (8006120 <OLED_Clear+0x54>)
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
	OLED_charColor = 0xFFFFFF;
 80060de:	4b11      	ldr	r3, [pc, #68]	; (8006124 <OLED_Clear+0x58>)
 80060e0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80060e4:	601a      	str	r2, [r3, #0]
	OLED_charPoint = 2;
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <OLED_Clear+0x5c>)
 80060e8:	2202      	movs	r2, #2
 80060ea:	701a      	strb	r2, [r3, #0]
	OLED_AddrWindow(0, 0, 96, 64);
 80060ec:	2340      	movs	r3, #64	; 0x40
 80060ee:	2260      	movs	r2, #96	; 0x60
 80060f0:	2100      	movs	r1, #0
 80060f2:	2000      	movs	r0, #0
 80060f4:	f000 f8a1 	bl	800623a <OLED_AddrWindow>
	for(int i=0; i<12288; i++){
 80060f8:	2300      	movs	r3, #0
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	e005      	b.n	800610a <OLED_Clear+0x3e>
		OLED_WriteData(0);
 80060fe:	2000      	movs	r0, #0
 8006100:	f7ff ffd4 	bl	80060ac <OLED_WriteData>
	for(int i=0; i<12288; i++){
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006110:	dbf5      	blt.n	80060fe <OLED_Clear+0x32>
	}
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000009 	.word	0x20000009
 8006120:	2000000a 	.word	0x2000000a
 8006124:	2000000c 	.word	0x2000000c
 8006128:	20000010 	.word	0x20000010

0800612c <OLED_Begin>:

void OLED_Begin(){
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
	//15ms 이상 대기
	HAL_Delay(100);
 8006130:	2064      	movs	r0, #100	; 0x64
 8006132:	f7fb fe4d 	bl	8001dd0 <HAL_Delay>

	//초기 작업(리셋)
	OLED_CS_Set(1);
 8006136:	2001      	movs	r0, #1
 8006138:	f7ff ff56 	bl	8005fe8 <OLED_CS_Set>
	OLED_RS_Set(0);
 800613c:	2000      	movs	r0, #0
 800613e:	f7ff ff77 	bl	8006030 <OLED_RS_Set>
	HAL_Delay(3);
 8006142:	2003      	movs	r0, #3
 8006144:	f7fb fe44 	bl	8001dd0 <HAL_Delay>
	OLED_RS_Set(1);
 8006148:	2001      	movs	r0, #1
 800614a:	f7ff ff71 	bl	8006030 <OLED_RS_Set>

	//기본 설정 명령어
	OLED_WriteCommand(0xAE);
 800614e:	20ae      	movs	r0, #174	; 0xae
 8006150:	f7ff ff9c 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xA0);
 8006154:	20a0      	movs	r0, #160	; 0xa0
 8006156:	f7ff ff99 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x72);
 800615a:	2072      	movs	r0, #114	; 0x72
 800615c:	f7ff ff96 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xA1);
 8006160:	20a1      	movs	r0, #161	; 0xa1
 8006162:	f7ff ff93 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8006166:	2000      	movs	r0, #0
 8006168:	f7ff ff90 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xA2);
 800616c:	20a2      	movs	r0, #162	; 0xa2
 800616e:	f7ff ff8d 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8006172:	2000      	movs	r0, #0
 8006174:	f7ff ff8a 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xA4);
 8006178:	20a4      	movs	r0, #164	; 0xa4
 800617a:	f7ff ff87 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xA8);
 800617e:	20a8      	movs	r0, #168	; 0xa8
 8006180:	f7ff ff84 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8006184:	203f      	movs	r0, #63	; 0x3f
 8006186:	f7ff ff81 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xAD);
 800618a:	20ad      	movs	r0, #173	; 0xad
 800618c:	f7ff ff7e 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x8E);
 8006190:	208e      	movs	r0, #142	; 0x8e
 8006192:	f7ff ff7b 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xB0);
 8006196:	20b0      	movs	r0, #176	; 0xb0
 8006198:	f7ff ff78 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x0B);
 800619c:	200b      	movs	r0, #11
 800619e:	f7ff ff75 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xB1);
 80061a2:	20b1      	movs	r0, #177	; 0xb1
 80061a4:	f7ff ff72 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x31);
 80061a8:	2031      	movs	r0, #49	; 0x31
 80061aa:	f7ff ff6f 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xB3);
 80061ae:	20b3      	movs	r0, #179	; 0xb3
 80061b0:	f7ff ff6c 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xF0);
 80061b4:	20f0      	movs	r0, #240	; 0xf0
 80061b6:	f7ff ff69 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x8A);
 80061ba:	208a      	movs	r0, #138	; 0x8a
 80061bc:	f7ff ff66 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 80061c0:	2064      	movs	r0, #100	; 0x64
 80061c2:	f7ff ff63 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x8B);
 80061c6:	208b      	movs	r0, #139	; 0x8b
 80061c8:	f7ff ff60 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x78);
 80061cc:	2078      	movs	r0, #120	; 0x78
 80061ce:	f7ff ff5d 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x8C);
 80061d2:	208c      	movs	r0, #140	; 0x8c
 80061d4:	f7ff ff5a 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	f7ff ff57 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xBB);
 80061de:	20bb      	movs	r0, #187	; 0xbb
 80061e0:	f7ff ff54 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x3A);
 80061e4:	203a      	movs	r0, #58	; 0x3a
 80061e6:	f7ff ff51 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0xBE);
 80061ea:	20be      	movs	r0, #190	; 0xbe
 80061ec:	f7ff ff4e 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x3E);
 80061f0:	203e      	movs	r0, #62	; 0x3e
 80061f2:	f7ff ff4b 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x87);
 80061f6:	2087      	movs	r0, #135	; 0x87
 80061f8:	f7ff ff48 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x06);
 80061fc:	2006      	movs	r0, #6
 80061fe:	f7ff ff45 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x81);
 8006202:	2081      	movs	r0, #129	; 0x81
 8006204:	f7ff ff42 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x91);
 8006208:	2091      	movs	r0, #145	; 0x91
 800620a:	f7ff ff3f 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x82);
 800620e:	2082      	movs	r0, #130	; 0x82
 8006210:	f7ff ff3c 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x50);
 8006214:	2050      	movs	r0, #80	; 0x50
 8006216:	f7ff ff39 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x83);
 800621a:	2083      	movs	r0, #131	; 0x83
 800621c:	f7ff ff36 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x7D);
 8006220:	207d      	movs	r0, #125	; 0x7d
 8006222:	f7ff ff33 	bl	800608c <OLED_WriteCommand>

	OLED_Clear();
 8006226:	f7ff ff51 	bl	80060cc <OLED_Clear>
	OLED_WriteCommand(0xAF);
 800622a:	20af      	movs	r0, #175	; 0xaf
 800622c:	f7ff ff2e 	bl	800608c <OLED_WriteCommand>
	HAL_Delay(100);
 8006230:	2064      	movs	r0, #100	; 0x64
 8006232:	f7fb fdcd 	bl	8001dd0 <HAL_Delay>

}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}

0800623a <OLED_AddrWindow>:

void OLED_AddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 800623a:	b590      	push	{r4, r7, lr}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	4604      	mov	r4, r0
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
 8006246:	461a      	mov	r2, r3
 8006248:	4623      	mov	r3, r4
 800624a:	71fb      	strb	r3, [r7, #7]
 800624c:	4603      	mov	r3, r0
 800624e:	71bb      	strb	r3, [r7, #6]
 8006250:	460b      	mov	r3, r1
 8006252:	717b      	strb	r3, [r7, #5]
 8006254:	4613      	mov	r3, r2
 8006256:	713b      	strb	r3, [r7, #4]
	uint8_t x1 = x;
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	73fb      	strb	r3, [r7, #15]
	uint8_t y1 = y;
 800625c:	79bb      	ldrb	r3, [r7, #6]
 800625e:	73bb      	strb	r3, [r7, #14]
	if(x1 > 95){
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	2b5f      	cmp	r3, #95	; 0x5f
 8006264:	d901      	bls.n	800626a <OLED_AddrWindow+0x30>
		x1 = 95;
 8006266:	235f      	movs	r3, #95	; 0x5f
 8006268:	73fb      	strb	r3, [r7, #15]
	}
	if(y1 > 63){
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b3f      	cmp	r3, #63	; 0x3f
 800626e:	d901      	bls.n	8006274 <OLED_AddrWindow+0x3a>
		y1 = 63;
 8006270:	233f      	movs	r3, #63	; 0x3f
 8006272:	73bb      	strb	r3, [r7, #14]
	}

	uint8_t x2 = x + w - 1;
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	797b      	ldrb	r3, [r7, #5]
 8006278:	4413      	add	r3, r2
 800627a:	b2db      	uxtb	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	737b      	strb	r3, [r7, #13]
	uint8_t y2 = y + h - 1;
 8006280:	79ba      	ldrb	r2, [r7, #6]
 8006282:	793b      	ldrb	r3, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	b2db      	uxtb	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	733b      	strb	r3, [r7, #12]
	if(x2>95)
 800628c:	7b7b      	ldrb	r3, [r7, #13]
 800628e:	2b5f      	cmp	r3, #95	; 0x5f
 8006290:	d901      	bls.n	8006296 <OLED_AddrWindow+0x5c>
		x2 = 95;
 8006292:	235f      	movs	r3, #95	; 0x5f
 8006294:	737b      	strb	r3, [r7, #13]
	if(y2>63)
 8006296:	7b3b      	ldrb	r3, [r7, #12]
 8006298:	2b3f      	cmp	r3, #63	; 0x3f
 800629a:	d901      	bls.n	80062a0 <OLED_AddrWindow+0x66>
		y2 = 63;
 800629c:	233f      	movs	r3, #63	; 0x3f
 800629e:	733b      	strb	r3, [r7, #12]

	if(x1>x2){
 80062a0:	7bfa      	ldrb	r2, [r7, #15]
 80062a2:	7b7b      	ldrb	r3, [r7, #13]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d905      	bls.n	80062b4 <OLED_AddrWindow+0x7a>
		uint8_t temp = x2;
 80062a8:	7b7b      	ldrb	r3, [r7, #13]
 80062aa:	72fb      	strb	r3, [r7, #11]
		x2=x1;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	737b      	strb	r3, [r7, #13]
		x1=temp;
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	73fb      	strb	r3, [r7, #15]
	}
	if(y1>y2){
 80062b4:	7bba      	ldrb	r2, [r7, #14]
 80062b6:	7b3b      	ldrb	r3, [r7, #12]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d905      	bls.n	80062c8 <OLED_AddrWindow+0x8e>
		uint8_t temp = y2;
 80062bc:	7b3b      	ldrb	r3, [r7, #12]
 80062be:	72bb      	strb	r3, [r7, #10]
		y2=y1;
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	733b      	strb	r3, [r7, #12]
		y1=temp;
 80062c4:	7abb      	ldrb	r3, [r7, #10]
 80062c6:	73bb      	strb	r3, [r7, #14]
	}

	OLED_WriteCommand(0x15);
 80062c8:	2015      	movs	r0, #21
 80062ca:	f7ff fedf 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(x1);
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fedb 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(x2);
 80062d6:	7b7b      	ldrb	r3, [r7, #13]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fed7 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(0x75);
 80062de:	2075      	movs	r0, #117	; 0x75
 80062e0:	f7ff fed4 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(y1);
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fed0 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(y2);
 80062ec:	7b3b      	ldrb	r3, [r7, #12]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fecc 	bl	800608c <OLED_WriteCommand>
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd90      	pop	{r4, r7, pc}

080062fc <OLED_Rectangle>:



void OLED_Rectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int32_t color){
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b089      	sub	sp, #36	; 0x24
 8006300:	af00      	add	r7, sp, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	4611      	mov	r1, r2
 8006308:	461a      	mov	r2, r3
 800630a:	4623      	mov	r3, r4
 800630c:	71fb      	strb	r3, [r7, #7]
 800630e:	4603      	mov	r3, r0
 8006310:	71bb      	strb	r3, [r7, #6]
 8006312:	460b      	mov	r3, r1
 8006314:	717b      	strb	r3, [r7, #5]
 8006316:	4613      	mov	r3, r2
 8006318:	713b      	strb	r3, [r7, #4]
	OLED_AddrWindow(x, y, w, h);
 800631a:	793b      	ldrb	r3, [r7, #4]
 800631c:	797a      	ldrb	r2, [r7, #5]
 800631e:	79b9      	ldrb	r1, [r7, #6]
 8006320:	79f8      	ldrb	r0, [r7, #7]
 8006322:	f7ff ff8a 	bl	800623a <OLED_AddrWindow>
	uint32_t red = (color >> 19) & 0x1F;
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	14db      	asrs	r3, r3, #19
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	61bb      	str	r3, [r7, #24]
	uint32_t gre = (color >> 10) & 0x3F;
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	129b      	asrs	r3, r3, #10
 8006334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006338:	617b      	str	r3, [r7, #20]
	uint32_t blu = (color >> 3) & 0x1F;
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	10db      	asrs	r3, r3, #3
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	613b      	str	r3, [r7, #16]
	uint32_t data = (red << 11) | (gre << 5) | blu;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	02da      	lsls	r2, r3, #11
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	015b      	lsls	r3, r3, #5
 800634c:	4313      	orrs	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
	uint16_t size = (uint32_t)w * (uint32_t)h;
 8006354:	797b      	ldrb	r3, [r7, #5]
 8006356:	b29a      	uxth	r2, r3
 8006358:	793b      	ldrb	r3, [r7, #4]
 800635a:	b29b      	uxth	r3, r3
 800635c:	fb12 f303 	smulbb	r3, r2, r3
 8006360:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<size; i++){
 8006362:	2300      	movs	r3, #0
 8006364:	83fb      	strh	r3, [r7, #30]
 8006366:	e00d      	b.n	8006384 <OLED_Rectangle+0x88>
		OLED_WriteData(data >> 8);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	b2db      	uxtb	r3, r3
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fe9c 	bl	80060ac <OLED_WriteData>
		OLED_WriteData(data & 0xFF);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fe97 	bl	80060ac <OLED_WriteData>
	for(uint16_t i=0; i<size; i++){
 800637e:	8bfb      	ldrh	r3, [r7, #30]
 8006380:	3301      	adds	r3, #1
 8006382:	83fb      	strh	r3, [r7, #30]
 8006384:	8bfa      	ldrh	r2, [r7, #30]
 8006386:	897b      	ldrh	r3, [r7, #10]
 8006388:	429a      	cmp	r2, r3
 800638a:	d3ed      	bcc.n	8006368 <OLED_Rectangle+0x6c>
	}
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	3724      	adds	r7, #36	; 0x24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd90      	pop	{r4, r7, pc}

08006396 <OLED_Dot>:


void OLED_Dot(uint8_t x,uint8_t y,uint8_t size, uint32_t color){
 8006396:	b590      	push	{r4, r7, lr}
 8006398:	b085      	sub	sp, #20
 800639a:	af02      	add	r7, sp, #8
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
 80063a2:	460b      	mov	r3, r1
 80063a4:	71bb      	strb	r3, [r7, #6]
 80063a6:	4613      	mov	r3, r2
 80063a8:	717b      	strb	r3, [r7, #5]
	OLED_Rectangle(x, y, size, size, color);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	797c      	ldrb	r4, [r7, #5]
 80063ae:	797a      	ldrb	r2, [r7, #5]
 80063b0:	79b9      	ldrb	r1, [r7, #6]
 80063b2:	79f8      	ldrb	r0, [r7, #7]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	4623      	mov	r3, r4
 80063b8:	f7ff ffa0 	bl	80062fc <OLED_Rectangle>
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd90      	pop	{r4, r7, pc}

080063c4 <OLED_WriteChar>:


void OLED_WriteChar(int16_t ch){
 80063c4:	b590      	push	{r4, r7, lr}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	80fb      	strh	r3, [r7, #6]
	if(ch <= -1 && ch >= -3){
 80063ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da09      	bge.n	80063ea <OLED_WriteChar+0x26>
 80063d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063da:	f113 0f03 	cmn.w	r3, #3
 80063de:	db04      	blt.n	80063ea <OLED_WriteChar+0x26>
		ch = 131 + ch;
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	3383      	adds	r3, #131	; 0x83
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	80fb      	strh	r3, [r7, #6]
 80063e8:	e009      	b.n	80063fe <OLED_WriteChar+0x3a>
	}
	else if(ch < 32 || ch >= 128){
 80063ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063ee:	2b1f      	cmp	r3, #31
 80063f0:	dd03      	ble.n	80063fa <OLED_WriteChar+0x36>
 80063f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f6:	2b7f      	cmp	r3, #127	; 0x7f
 80063f8:	dd01      	ble.n	80063fe <OLED_WriteChar+0x3a>
		ch = 63;
 80063fa:	233f      	movs	r3, #63	; 0x3f
 80063fc:	80fb      	strh	r3, [r7, #6]
	}

	ch -= 32;
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	3b20      	subs	r3, #32
 8006402:	b29b      	uxth	r3, r3
 8006404:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<5; i++){
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]
 800640a:	e03d      	b.n	8006488 <OLED_WriteChar+0xc4>
		uint8_t byte = characters[ch * 5 + i];
 800640c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	4413      	add	r3, r2
 800641a:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <OLED_WriteChar+0xec>)
 800641c:	5cd3      	ldrb	r3, [r2, r3]
 800641e:	737b      	strb	r3, [r7, #13]
		for(uint8_t j=0; j<8; j++){
 8006420:	2300      	movs	r3, #0
 8006422:	73bb      	strb	r3, [r7, #14]
 8006424:	e02a      	b.n	800647c <OLED_WriteChar+0xb8>
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 8006426:	4b23      	ldr	r3, [pc, #140]	; (80064b4 <OLED_WriteChar+0xf0>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	7bfa      	ldrb	r2, [r7, #15]
 800642c:	fb12 f303 	smulbb	r3, r2, r3
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <OLED_WriteChar+0xf4>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	4413      	add	r3, r2
 8006438:	b2d8      	uxtb	r0, r3
 800643a:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <OLED_WriteChar+0xf0>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	7bba      	ldrb	r2, [r7, #14]
 8006440:	fb12 f303 	smulbb	r3, r2, r3
 8006444:	b2da      	uxtb	r2, r3
 8006446:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <OLED_WriteChar+0xf8>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	4413      	add	r3, r2
 800644c:	b2d9      	uxtb	r1, r3
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <OLED_WriteChar+0xf0>)
 8006450:	781c      	ldrb	r4, [r3, #0]
					((byte>>(7-j))&0x01) ? OLED_charColor : OLED_bgColor);
 8006452:	7b7a      	ldrb	r2, [r7, #13]
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f1c3 0307 	rsb	r3, r3, #7
 800645a:	fa42 f303 	asr.w	r3, r2, r3
 800645e:	f003 0301 	and.w	r3, r3, #1
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <OLED_WriteChar+0xa8>
 8006466:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <OLED_WriteChar+0xfc>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	e001      	b.n	8006470 <OLED_WriteChar+0xac>
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <OLED_WriteChar+0x100>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4622      	mov	r2, r4
 8006472:	f7ff ff90 	bl	8006396 <OLED_Dot>
		for(uint8_t j=0; j<8; j++){
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	3301      	adds	r3, #1
 800647a:	73bb      	strb	r3, [r7, #14]
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b07      	cmp	r3, #7
 8006480:	d9d1      	bls.n	8006426 <OLED_WriteChar+0x62>
	for(uint8_t i=0; i<5; i++){
 8006482:	7bfb      	ldrb	r3, [r7, #15]
 8006484:	3301      	adds	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d9be      	bls.n	800640c <OLED_WriteChar+0x48>
		}
	}
	OLED_col += 6 * OLED_charPoint;
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <OLED_WriteChar+0xf0>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	0052      	lsls	r2, r2, #1
 8006496:	4413      	add	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <OLED_WriteChar+0xf4>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <OLED_WriteChar+0xf4>)
 80064a6:	701a      	strb	r2, [r3, #0]

}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd90      	pop	{r4, r7, pc}
 80064b0:	20000014 	.word	0x20000014
 80064b4:	20000010 	.word	0x20000010
 80064b8:	2000000a 	.word	0x2000000a
 80064bc:	20000009 	.word	0x20000009
 80064c0:	2000000c 	.word	0x2000000c
 80064c4:	20000558 	.word	0x20000558

080064c8 <str2hex>:


static int str2hex(char * str){
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	int result = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 80064d4:	2300      	movs	r3, #0
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	e049      	b.n	800656e <str2hex+0xa6>
		if(str[i] >= '0' && str[i] <= '9'){
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b2f      	cmp	r3, #47	; 0x2f
 80064e4:	d911      	bls.n	800650a <str2hex+0x42>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b39      	cmp	r3, #57	; 0x39
 80064f0:	d80b      	bhi.n	800650a <str2hex+0x42>
			result <<= 4;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
			result |= str[i] - '0';
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	3b30      	subs	r3, #48	; 0x30
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	e02e      	b.n	8006568 <str2hex+0xa0>
		}
		else if(str[i] >= 'A' && str[i] <= 'F'){
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d911      	bls.n	800653a <str2hex+0x72>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	4413      	add	r3, r2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b46      	cmp	r3, #70	; 0x46
 8006520:	d80b      	bhi.n	800653a <str2hex+0x72>
			result <<= 4;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'A' + 10;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	3b37      	subs	r3, #55	; 0x37
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e016      	b.n	8006568 <str2hex+0xa0>
		}
		else if(str[i] >= 'a' && str[i] <= 'f'){
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b60      	cmp	r3, #96	; 0x60
 8006544:	d910      	bls.n	8006568 <str2hex+0xa0>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b66      	cmp	r3, #102	; 0x66
 8006550:	d80a      	bhi.n	8006568 <str2hex+0xa0>
			result <<= 4;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'a' + 10;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	3b57      	subs	r3, #87	; 0x57
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	3301      	adds	r3, #1
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1af      	bne.n	80064da <str2hex+0x12>
		}
	}
	return result;
 800657a:	68fb      	ldr	r3, [r7, #12]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <OLED_Printf>:

#define OLED
void OLED_Printf(const char * format, ...){
 8006588:	b40f      	push	{r0, r1, r2, r3}
 800658a:	b580      	push	{r7, lr}
 800658c:	b0c4      	sub	sp, #272	; 0x110
 800658e:	af00      	add	r7, sp, #0
	/*
	 * buffer를 많이 할당받거나 static으로 선언하면 좋겠지만, 보통 프로세스당 4GB의 메모리를 가지는 일반 컴퓨터와 다르게
	 * STM32F411의 경우 전체 메모리 공간이 오직 128kB의 저장용량만 가지므로 메모리 공간을 아껴 써야 한다.
	 */
	char buffer[256] = { 0 };
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	3304      	adds	r3, #4
 800659a:	22fc      	movs	r2, #252	; 0xfc
 800659c:	2100      	movs	r1, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f002 fff4 	bl	800958c <memset>

	// 가변 인자를 받아서 buffer에 쓴다.
	va_list args;
	va_start(args, format);
 80065a4:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80065a8:	f107 0308 	add.w	r3, r7, #8
 80065ac:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 80065ae:	f107 0308 	add.w	r3, r7, #8
 80065b2:	f107 000c 	add.w	r0, r7, #12
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80065bc:	f003 fdca 	bl	800a154 <vsiprintf>
//#ifdef OLED
//	oled_row = 0;
//	oled_col = 0;
//#endif
	// 줄바꿈 기호인 /0, /1을 만나면 커서 위치를 설정해주는 부분.
	for (char *c = buffer; *c; c++) {
 80065c0:	f107 030c 	add.w	r3, r7, #12
 80065c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065c8:	e378      	b.n	8006cbc <OLED_Printf+0x734>
		if (*c == '/' && (*(c + 1) >= '0' && *(c + 1) <= '6')) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b2f      	cmp	r3, #47	; 0x2f
 80065d2:	d13c      	bne.n	800664e <OLED_Printf+0xc6>
 80065d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d8:	3301      	adds	r3, #1
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b2f      	cmp	r3, #47	; 0x2f
 80065de:	d936      	bls.n	800664e <OLED_Printf+0xc6>
 80065e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e4:	3301      	adds	r3, #1
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b36      	cmp	r3, #54	; 0x36
 80065ea:	d830      	bhi.n	800664e <OLED_Printf+0xc6>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 80065ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f0:	3301      	adds	r3, #1
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	3b30      	subs	r3, #48	; 0x30
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	4bb8      	ldr	r3, [pc, #736]	; (80068dc <OLED_Printf+0x354>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	fb12 f303 	smulbb	r3, r2, r3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	00d2      	lsls	r2, r2, #3
 8006606:	4413      	add	r3, r2
 8006608:	b2db      	uxtb	r3, r3
 800660a:	3301      	adds	r3, #1
 800660c:	b2da      	uxtb	r2, r3
 800660e:	4bb4      	ldr	r3, [pc, #720]	; (80068e0 <OLED_Printf+0x358>)
 8006610:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 8006612:	4bb3      	ldr	r3, [pc, #716]	; (80068e0 <OLED_Printf+0x358>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b3c      	cmp	r3, #60	; 0x3c
 8006618:	d807      	bhi.n	800662a <OLED_Printf+0xa2>
 800661a:	4bb1      	ldr	r3, [pc, #708]	; (80068e0 <OLED_Printf+0x358>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b35      	cmp	r3, #53	; 0x35
 8006620:	d90c      	bls.n	800663c <OLED_Printf+0xb4>
 8006622:	4bae      	ldr	r3, [pc, #696]	; (80068dc <OLED_Printf+0x354>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d108      	bne.n	800663c <OLED_Printf+0xb4>
				OLED_row = 18 * OLED_charPoint;
 800662a:	4bac      	ldr	r3, [pc, #688]	; (80068dc <OLED_Printf+0x354>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	00d2      	lsls	r2, r2, #3
 8006632:	4413      	add	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4ba9      	ldr	r3, [pc, #676]	; (80068e0 <OLED_Printf+0x358>)
 800663a:	701a      	strb	r2, [r3, #0]
			}
			OLED_col = 1;
 800663c:	4ba9      	ldr	r3, [pc, #676]	; (80068e4 <OLED_Printf+0x35c>)
 800663e:	2201      	movs	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
			c += 1;
 8006642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006646:	3301      	adds	r3, #1
 8006648:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800664c:	e331      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '$' && (*(c + 1) >= '0' && *(c + 1) <= '6') && ((*(c + 2) >= '0' && *(c + 2) <= '9')||(*(c + 2) >= 'A' && *(c + 2) <= 'F'))) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 800664e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b24      	cmp	r3, #36	; 0x24
 8006656:	d172      	bne.n	800673e <OLED_Printf+0x1b6>
 8006658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665c:	3301      	adds	r3, #1
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b2f      	cmp	r3, #47	; 0x2f
 8006662:	d96c      	bls.n	800673e <OLED_Printf+0x1b6>
 8006664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006668:	3301      	adds	r3, #1
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b36      	cmp	r3, #54	; 0x36
 800666e:	d866      	bhi.n	800673e <OLED_Printf+0x1b6>
 8006670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006674:	3302      	adds	r3, #2
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b2f      	cmp	r3, #47	; 0x2f
 800667a:	d905      	bls.n	8006688 <OLED_Printf+0x100>
 800667c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006680:	3302      	adds	r3, #2
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b39      	cmp	r3, #57	; 0x39
 8006686:	d90b      	bls.n	80066a0 <OLED_Printf+0x118>
 8006688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668c:	3302      	adds	r3, #2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d954      	bls.n	800673e <OLED_Printf+0x1b6>
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	3302      	adds	r3, #2
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b46      	cmp	r3, #70	; 0x46
 800669e:	d84e      	bhi.n	800673e <OLED_Printf+0x1b6>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 80066a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a4:	3301      	adds	r3, #1
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	3b30      	subs	r3, #48	; 0x30
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	4b8b      	ldr	r3, [pc, #556]	; (80068dc <OLED_Printf+0x354>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	fb12 f303 	smulbb	r3, r2, r3
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	00d2      	lsls	r2, r2, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	3301      	adds	r3, #1
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	4b87      	ldr	r3, [pc, #540]	; (80068e0 <OLED_Printf+0x358>)
 80066c4:	701a      	strb	r2, [r3, #0]
			OLED_col = 1 + 6 * OLED_charPoint * (*(c + 2) >= 'A' ? (*(c + 2) - 'A' + 10) :(*(c + 2) - '0'));
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ca:	3302      	adds	r3, #2
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d906      	bls.n	80066e0 <OLED_Printf+0x158>
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d6:	3302      	adds	r3, #2
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	3b37      	subs	r3, #55	; 0x37
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e005      	b.n	80066ec <OLED_Printf+0x164>
 80066e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e4:	3302      	adds	r3, #2
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	3b30      	subs	r3, #48	; 0x30
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	4a7b      	ldr	r2, [pc, #492]	; (80068dc <OLED_Printf+0x354>)
 80066ee:	7812      	ldrb	r2, [r2, #0]
 80066f0:	fb13 f302 	smulbb	r3, r3, r2
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	0052      	lsls	r2, r2, #1
 80066fa:	4413      	add	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	3301      	adds	r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4b77      	ldr	r3, [pc, #476]	; (80068e4 <OLED_Printf+0x35c>)
 8006706:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 8006708:	4b75      	ldr	r3, [pc, #468]	; (80068e0 <OLED_Printf+0x358>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b3c      	cmp	r3, #60	; 0x3c
 800670e:	d807      	bhi.n	8006720 <OLED_Printf+0x198>
 8006710:	4b73      	ldr	r3, [pc, #460]	; (80068e0 <OLED_Printf+0x358>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b35      	cmp	r3, #53	; 0x35
 8006716:	d90c      	bls.n	8006732 <OLED_Printf+0x1aa>
 8006718:	4b70      	ldr	r3, [pc, #448]	; (80068dc <OLED_Printf+0x354>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d108      	bne.n	8006732 <OLED_Printf+0x1aa>
				OLED_row = 18 * OLED_charPoint;
 8006720:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <OLED_Printf+0x354>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	00d2      	lsls	r2, r2, #3
 8006728:	4413      	add	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b6c      	ldr	r3, [pc, #432]	; (80068e0 <OLED_Printf+0x358>)
 8006730:	701a      	strb	r2, [r3, #0]
			}
			c += 2;
 8006732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006736:	3302      	adds	r3, #2
 8006738:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800673c:	e2b9      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 800673e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b2f      	cmp	r3, #47	; 0x2f
 8006746:	d125      	bne.n	8006794 <OLED_Printf+0x20c>
 8006748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674c:	3301      	adds	r3, #1
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b23      	cmp	r3, #35	; 0x23
 8006752:	d11f      	bne.n	8006794 <OLED_Printf+0x20c>
			char str[7] = {0,0,0,0,0,0,0};
 8006754:	463b      	mov	r3, r7
 8006756:	4a64      	ldr	r2, [pc, #400]	; (80068e8 <OLED_Printf+0x360>)
 8006758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800675c:	6018      	str	r0, [r3, #0]
 800675e:	3304      	adds	r3, #4
 8006760:	8019      	strh	r1, [r3, #0]
 8006762:	3302      	adds	r3, #2
 8006764:	0c0a      	lsrs	r2, r1, #16
 8006766:	701a      	strb	r2, [r3, #0]
			strncpy(str, c+2, 6);
 8006768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676c:	1c99      	adds	r1, r3, #2
 800676e:	463b      	mov	r3, r7
 8006770:	2206      	movs	r2, #6
 8006772:	4618      	mov	r0, r3
 8006774:	f003 fcc4 	bl	800a100 <strncpy>
			OLED_charColor = str2hex(str);
 8006778:	463b      	mov	r3, r7
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fea4 	bl	80064c8 <str2hex>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <OLED_Printf+0x364>)
 8006786:	601a      	str	r2, [r3, #0]
			c += 7;
 8006788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800678c:	3307      	adds	r3, #7
 800678e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006792:	e28e      	b.n	8006cb2 <OLED_Printf+0x72a>
			continue;
		}
		else if (*c == '/' && *(c + 1) == 'S'){
 8006794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b2f      	cmp	r3, #47	; 0x2f
 800679c:	d10e      	bne.n	80067bc <OLED_Printf+0x234>
 800679e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a2:	3301      	adds	r3, #1
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b53      	cmp	r3, #83	; 0x53
 80067a8:	d108      	bne.n	80067bc <OLED_Printf+0x234>
			//Size Big
			OLED_charPoint = 2;
 80067aa:	4b4c      	ldr	r3, [pc, #304]	; (80068dc <OLED_Printf+0x354>)
 80067ac:	2202      	movs	r2, #2
 80067ae:	701a      	strb	r2, [r3, #0]
			c += 1;
 80067b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b4:	3301      	adds	r3, #1
 80067b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80067ba:	e27a      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 's'){
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b2f      	cmp	r3, #47	; 0x2f
 80067c4:	d10e      	bne.n	80067e4 <OLED_Printf+0x25c>
 80067c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ca:	3301      	adds	r3, #1
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b73      	cmp	r3, #115	; 0x73
 80067d0:	d108      	bne.n	80067e4 <OLED_Printf+0x25c>
			//Size Big
			OLED_charPoint = 1;
 80067d2:	4b42      	ldr	r3, [pc, #264]	; (80068dc <OLED_Printf+0x354>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
			c += 1;
 80067d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067dc:	3301      	adds	r3, #1
 80067de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80067e2:	e266      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'r'){//RGBCMY는 오직 2색 이상 OLED만 지원(예외로 노랑색 라인이 있는 파랑 OLED는 조금 다르게 취급)
 80067e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b2f      	cmp	r3, #47	; 0x2f
 80067ec:	d10f      	bne.n	800680e <OLED_Printf+0x286>
 80067ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f2:	3301      	adds	r3, #1
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b72      	cmp	r3, #114	; 0x72
 80067f8:	d109      	bne.n	800680e <OLED_Printf+0x286>
			OLED_charColor = 0xFF0000;
 80067fa:	4b3c      	ldr	r3, [pc, #240]	; (80068ec <OLED_Printf+0x364>)
 80067fc:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006800:	601a      	str	r2, [r3, #0]
			c += 1;
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006806:	3301      	adds	r3, #1
 8006808:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800680c:	e251      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'g'){
 800680e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b2f      	cmp	r3, #47	; 0x2f
 8006816:	d10f      	bne.n	8006838 <OLED_Printf+0x2b0>
 8006818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800681c:	3301      	adds	r3, #1
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b67      	cmp	r3, #103	; 0x67
 8006822:	d109      	bne.n	8006838 <OLED_Printf+0x2b0>
			OLED_charColor = 0x00FF00;
 8006824:	4b31      	ldr	r3, [pc, #196]	; (80068ec <OLED_Printf+0x364>)
 8006826:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800682a:	601a      	str	r2, [r3, #0]
			c += 1;
 800682c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006830:	3301      	adds	r3, #1
 8006832:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006836:	e23c      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'b'){
 8006838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b2f      	cmp	r3, #47	; 0x2f
 8006840:	d10e      	bne.n	8006860 <OLED_Printf+0x2d8>
 8006842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006846:	3301      	adds	r3, #1
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b62      	cmp	r3, #98	; 0x62
 800684c:	d108      	bne.n	8006860 <OLED_Printf+0x2d8>
			OLED_charColor = 0x0000FF;
 800684e:	4b27      	ldr	r3, [pc, #156]	; (80068ec <OLED_Printf+0x364>)
 8006850:	22ff      	movs	r2, #255	; 0xff
 8006852:	601a      	str	r2, [r3, #0]
			c += 1;
 8006854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006858:	3301      	adds	r3, #1
 800685a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800685e:	e228      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'y'){
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b2f      	cmp	r3, #47	; 0x2f
 8006868:	d10e      	bne.n	8006888 <OLED_Printf+0x300>
 800686a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800686e:	3301      	adds	r3, #1
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b79      	cmp	r3, #121	; 0x79
 8006874:	d108      	bne.n	8006888 <OLED_Printf+0x300>
			OLED_charColor = 0xFFFF00;
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <OLED_Printf+0x364>)
 8006878:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <OLED_Printf+0x368>)
 800687a:	601a      	str	r2, [r3, #0]
			c += 1;
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	3301      	adds	r3, #1
 8006882:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006886:	e214      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'c'){
 8006888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b2f      	cmp	r3, #47	; 0x2f
 8006890:	d10f      	bne.n	80068b2 <OLED_Printf+0x32a>
 8006892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006896:	3301      	adds	r3, #1
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b63      	cmp	r3, #99	; 0x63
 800689c:	d109      	bne.n	80068b2 <OLED_Printf+0x32a>
			OLED_charColor = 0x00FFFF;
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <OLED_Printf+0x364>)
 80068a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068a4:	601a      	str	r2, [r3, #0]
			c += 1;
 80068a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068aa:	3301      	adds	r3, #1
 80068ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80068b0:	e1ff      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'm'){
 80068b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b2f      	cmp	r3, #47	; 0x2f
 80068ba:	d11b      	bne.n	80068f4 <OLED_Printf+0x36c>
 80068bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c0:	3301      	adds	r3, #1
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b6d      	cmp	r3, #109	; 0x6d
 80068c6:	d115      	bne.n	80068f4 <OLED_Printf+0x36c>
			OLED_charColor = 0xFF00FF;
 80068c8:	4b08      	ldr	r3, [pc, #32]	; (80068ec <OLED_Printf+0x364>)
 80068ca:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80068ce:	601a      	str	r2, [r3, #0]
			c += 1;
 80068d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068d4:	3301      	adds	r3, #1
 80068d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80068da:	e1ea      	b.n	8006cb2 <OLED_Printf+0x72a>
 80068dc:	20000010 	.word	0x20000010
 80068e0:	20000009 	.word	0x20000009
 80068e4:	2000000a 	.word	0x2000000a
 80068e8:	0800c4b4 	.word	0x0800c4b4
 80068ec:	2000000c 	.word	0x2000000c
 80068f0:	00ffff00 	.word	0x00ffff00
		}
		else if (*c == '/' && *(c + 1) == 'w'){//White는 단색 OLED에서는 켜짐을 의미
 80068f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b2f      	cmp	r3, #47	; 0x2f
 80068fc:	d10f      	bne.n	800691e <OLED_Printf+0x396>
 80068fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006902:	3301      	adds	r3, #1
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b77      	cmp	r3, #119	; 0x77
 8006908:	d109      	bne.n	800691e <OLED_Printf+0x396>
			OLED_charColor = 0xFFFFFF;
 800690a:	4bb0      	ldr	r3, [pc, #704]	; (8006bcc <OLED_Printf+0x644>)
 800690c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006910:	601a      	str	r2, [r3, #0]
			c += 1;
 8006912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006916:	3301      	adds	r3, #1
 8006918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800691c:	e1c9      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'k'){//key color는 단색 OLED에서도 지원
 800691e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b2f      	cmp	r3, #47	; 0x2f
 8006926:	d10e      	bne.n	8006946 <OLED_Printf+0x3be>
 8006928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692c:	3301      	adds	r3, #1
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b6b      	cmp	r3, #107	; 0x6b
 8006932:	d108      	bne.n	8006946 <OLED_Printf+0x3be>
			OLED_charColor = 0x000000;
 8006934:	4ba5      	ldr	r3, [pc, #660]	; (8006bcc <OLED_Printf+0x644>)
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
			c += 1;
 800693a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800693e:	3301      	adds	r3, #1
 8006940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006944:	e1b5      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'R'){
 8006946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b2f      	cmp	r3, #47	; 0x2f
 800694e:	d10e      	bne.n	800696e <OLED_Printf+0x3e6>
 8006950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006954:	3301      	adds	r3, #1
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b52      	cmp	r3, #82	; 0x52
 800695a:	d108      	bne.n	800696e <OLED_Printf+0x3e6>
			OLED_charColor = 0xFF7777;
 800695c:	4b9b      	ldr	r3, [pc, #620]	; (8006bcc <OLED_Printf+0x644>)
 800695e:	4a9c      	ldr	r2, [pc, #624]	; (8006bd0 <OLED_Printf+0x648>)
 8006960:	601a      	str	r2, [r3, #0]
			c += 1;
 8006962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006966:	3301      	adds	r3, #1
 8006968:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800696c:	e1a1      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'G'){
 800696e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b2f      	cmp	r3, #47	; 0x2f
 8006976:	d10e      	bne.n	8006996 <OLED_Printf+0x40e>
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697c:	3301      	adds	r3, #1
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b47      	cmp	r3, #71	; 0x47
 8006982:	d108      	bne.n	8006996 <OLED_Printf+0x40e>
			OLED_charColor = 0x77FF77;
 8006984:	4b91      	ldr	r3, [pc, #580]	; (8006bcc <OLED_Printf+0x644>)
 8006986:	4a93      	ldr	r2, [pc, #588]	; (8006bd4 <OLED_Printf+0x64c>)
 8006988:	601a      	str	r2, [r3, #0]
			c += 1;
 800698a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800698e:	3301      	adds	r3, #1
 8006990:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006994:	e18d      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'B'){
 8006996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b2f      	cmp	r3, #47	; 0x2f
 800699e:	d10e      	bne.n	80069be <OLED_Printf+0x436>
 80069a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a4:	3301      	adds	r3, #1
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b42      	cmp	r3, #66	; 0x42
 80069aa:	d108      	bne.n	80069be <OLED_Printf+0x436>
			OLED_charColor = 0x7777FF;
 80069ac:	4b87      	ldr	r3, [pc, #540]	; (8006bcc <OLED_Printf+0x644>)
 80069ae:	4a8a      	ldr	r2, [pc, #552]	; (8006bd8 <OLED_Printf+0x650>)
 80069b0:	601a      	str	r2, [r3, #0]
			c += 1;
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b6:	3301      	adds	r3, #1
 80069b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80069bc:	e179      	b.n	8006cb2 <OLED_Printf+0x72a>
		}

		//Additional Color : 비표준 색상입니다.
		else if (*c == '/' && *(c + 1) == 'o'){
 80069be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b2f      	cmp	r3, #47	; 0x2f
 80069c6:	d10e      	bne.n	80069e6 <OLED_Printf+0x45e>
 80069c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069cc:	3301      	adds	r3, #1
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	2b6f      	cmp	r3, #111	; 0x6f
 80069d2:	d108      	bne.n	80069e6 <OLED_Printf+0x45e>
			OLED_charColor = 0xFF7700;
 80069d4:	4b7d      	ldr	r3, [pc, #500]	; (8006bcc <OLED_Printf+0x644>)
 80069d6:	4a81      	ldr	r2, [pc, #516]	; (8006bdc <OLED_Printf+0x654>)
 80069d8:	601a      	str	r2, [r3, #0]
			c += 1;
 80069da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069de:	3301      	adds	r3, #1
 80069e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80069e4:	e165      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'l'){
 80069e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b2f      	cmp	r3, #47	; 0x2f
 80069ee:	d10e      	bne.n	8006a0e <OLED_Printf+0x486>
 80069f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f4:	3301      	adds	r3, #1
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b6c      	cmp	r3, #108	; 0x6c
 80069fa:	d108      	bne.n	8006a0e <OLED_Printf+0x486>
			OLED_charColor = 0x77FF00;
 80069fc:	4b73      	ldr	r3, [pc, #460]	; (8006bcc <OLED_Printf+0x644>)
 80069fe:	4a78      	ldr	r2, [pc, #480]	; (8006be0 <OLED_Printf+0x658>)
 8006a00:	601a      	str	r2, [r3, #0]
			c += 1;
 8006a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a06:	3301      	adds	r3, #1
 8006a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006a0c:	e151      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 't'){
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b2f      	cmp	r3, #47	; 0x2f
 8006a16:	d10f      	bne.n	8006a38 <OLED_Printf+0x4b0>
 8006a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b74      	cmp	r3, #116	; 0x74
 8006a22:	d109      	bne.n	8006a38 <OLED_Printf+0x4b0>
			OLED_charColor = 0x00FF77;
 8006a24:	4b69      	ldr	r3, [pc, #420]	; (8006bcc <OLED_Printf+0x644>)
 8006a26:	f64f 7277 	movw	r2, #65399	; 0xff77
 8006a2a:	601a      	str	r2, [r3, #0]
			c += 1;
 8006a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006a36:	e13c      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'e'){
 8006a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b2f      	cmp	r3, #47	; 0x2f
 8006a40:	d10f      	bne.n	8006a62 <OLED_Printf+0x4da>
 8006a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a46:	3301      	adds	r3, #1
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b65      	cmp	r3, #101	; 0x65
 8006a4c:	d109      	bne.n	8006a62 <OLED_Printf+0x4da>
			OLED_charColor = 0x0077FF;
 8006a4e:	4b5f      	ldr	r3, [pc, #380]	; (8006bcc <OLED_Printf+0x644>)
 8006a50:	f247 72ff 	movw	r2, #30719	; 0x77ff
 8006a54:	601a      	str	r2, [r3, #0]
			c += 1;
 8006a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006a60:	e127      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'p'){
 8006a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b2f      	cmp	r3, #47	; 0x2f
 8006a6a:	d10e      	bne.n	8006a8a <OLED_Printf+0x502>
 8006a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a70:	3301      	adds	r3, #1
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b70      	cmp	r3, #112	; 0x70
 8006a76:	d108      	bne.n	8006a8a <OLED_Printf+0x502>
			OLED_charColor = 0x7700FF;
 8006a78:	4b54      	ldr	r3, [pc, #336]	; (8006bcc <OLED_Printf+0x644>)
 8006a7a:	4a5a      	ldr	r2, [pc, #360]	; (8006be4 <OLED_Printf+0x65c>)
 8006a7c:	601a      	str	r2, [r3, #0]
			c += 1;
 8006a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a82:	3301      	adds	r3, #1
 8006a84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006a88:	e113      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'M'){
 8006a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b2f      	cmp	r3, #47	; 0x2f
 8006a92:	d10e      	bne.n	8006ab2 <OLED_Printf+0x52a>
 8006a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a98:	3301      	adds	r3, #1
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b4d      	cmp	r3, #77	; 0x4d
 8006a9e:	d108      	bne.n	8006ab2 <OLED_Printf+0x52a>
			OLED_charColor = 0xFF0077;
 8006aa0:	4b4a      	ldr	r3, [pc, #296]	; (8006bcc <OLED_Printf+0x644>)
 8006aa2:	4a51      	ldr	r2, [pc, #324]	; (8006be8 <OLED_Printf+0x660>)
 8006aa4:	601a      	str	r2, [r3, #0]
			c += 1;
 8006aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006ab0:	e0ff      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'A'){
 8006ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8006aba:	d10e      	bne.n	8006ada <OLED_Printf+0x552>
 8006abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b41      	cmp	r3, #65	; 0x41
 8006ac6:	d108      	bne.n	8006ada <OLED_Printf+0x552>
			OLED_charColor = 0x888888;
 8006ac8:	4b40      	ldr	r3, [pc, #256]	; (8006bcc <OLED_Printf+0x644>)
 8006aca:	4a48      	ldr	r2, [pc, #288]	; (8006bec <OLED_Printf+0x664>)
 8006acc:	601a      	str	r2, [r3, #0]
			c += 1;
 8006ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006ad8:	e0eb      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		else if (*c == '/' && *(c + 1) == 'a'){
 8006ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b2f      	cmp	r3, #47	; 0x2f
 8006ae2:	d10e      	bne.n	8006b02 <OLED_Printf+0x57a>
 8006ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ae8:	3301      	adds	r3, #1
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b61      	cmp	r3, #97	; 0x61
 8006aee:	d108      	bne.n	8006b02 <OLED_Printf+0x57a>
			OLED_charColor = 0x444444;
 8006af0:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <OLED_Printf+0x644>)
 8006af2:	4a3f      	ldr	r2, [pc, #252]	; (8006bf0 <OLED_Printf+0x668>)
 8006af4:	601a      	str	r2, [r3, #0]
			c += 1;
 8006af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afa:	3301      	adds	r3, #1
 8006afc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8006b00:	e0d7      	b.n	8006cb2 <OLED_Printf+0x72a>
		}

		else if (*c == '/' && *(c + 1) == '/'){
 8006b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b2f      	cmp	r3, #47	; 0x2f
 8006b0a:	d10b      	bne.n	8006b24 <OLED_Printf+0x59c>
 8006b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b10:	3301      	adds	r3, #1
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b2f      	cmp	r3, #47	; 0x2f
 8006b16:	d105      	bne.n	8006b24 <OLED_Printf+0x59c>
			c += 1;
 8006b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b22:	e013      	b.n	8006b4c <OLED_Printf+0x5c4>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b2f      	cmp	r3, #47	; 0x2f
 8006b2c:	d10e      	bne.n	8006b4c <OLED_Printf+0x5c4>
 8006b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b32:	3301      	adds	r3, #1
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b23      	cmp	r3, #35	; 0x23
 8006b38:	d108      	bne.n	8006b4c <OLED_Printf+0x5c4>
			*c = '#';
 8006b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b3e:	2223      	movs	r2, #35	; 0x23
 8006b40:	701a      	strb	r2, [r3, #0]
			c += 1;
 8006b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b46:	3301      	adds	r3, #1
 8006b48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		// \n, \r 등은 깨져서 출력되므로 무시한다.
		if (*c == '\r') continue;
 8006b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b0d      	cmp	r3, #13
 8006b54:	f000 80ac 	beq.w	8006cb0 <OLED_Printf+0x728>
		if (*c == '\n') {
 8006b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b0a      	cmp	r3, #10
 8006b60:	d10f      	bne.n	8006b82 <OLED_Printf+0x5fa>
			OLED_row += 9 * OLED_charPoint;
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <OLED_Printf+0x66c>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	00d2      	lsls	r2, r2, #3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <OLED_Printf+0x670>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	4b20      	ldr	r3, [pc, #128]	; (8006bf8 <OLED_Printf+0x670>)
 8006b78:	701a      	strb	r2, [r3, #0]
			OLED_col = 1;
 8006b7a:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <OLED_Printf+0x674>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
			continue;
 8006b80:	e097      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		if (*c == '\t') {
 8006b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b09      	cmp	r3, #9
 8006b8a:	d14a      	bne.n	8006c22 <OLED_Printf+0x69a>
			if(OLED_col < 25 && OLED_charPoint == 1){
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <OLED_Printf+0x674>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b18      	cmp	r3, #24
 8006b92:	d807      	bhi.n	8006ba4 <OLED_Printf+0x61c>
 8006b94:	4b17      	ldr	r3, [pc, #92]	; (8006bf4 <OLED_Printf+0x66c>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d103      	bne.n	8006ba4 <OLED_Printf+0x61c>
				OLED_col = 25;
 8006b9c:	4b17      	ldr	r3, [pc, #92]	; (8006bfc <OLED_Printf+0x674>)
 8006b9e:	2219      	movs	r2, #25
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e03d      	b.n	8006c20 <OLED_Printf+0x698>
			}
			else if(OLED_col < 49){
 8006ba4:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <OLED_Printf+0x674>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b30      	cmp	r3, #48	; 0x30
 8006baa:	d803      	bhi.n	8006bb4 <OLED_Printf+0x62c>
				OLED_col = 49;
 8006bac:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <OLED_Printf+0x674>)
 8006bae:	2231      	movs	r2, #49	; 0x31
 8006bb0:	701a      	strb	r2, [r3, #0]
			}
			else{
				OLED_col = 1;
				OLED_row += 9 * OLED_charPoint;
			}
			continue;
 8006bb2:	e07e      	b.n	8006cb2 <OLED_Printf+0x72a>
			else if(OLED_col < 73 && OLED_charPoint == 1){
 8006bb4:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <OLED_Printf+0x674>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b48      	cmp	r3, #72	; 0x48
 8006bba:	d821      	bhi.n	8006c00 <OLED_Printf+0x678>
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <OLED_Printf+0x66c>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d11d      	bne.n	8006c00 <OLED_Printf+0x678>
				OLED_col = 75;
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <OLED_Printf+0x674>)
 8006bc6:	224b      	movs	r2, #75	; 0x4b
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e029      	b.n	8006c20 <OLED_Printf+0x698>
 8006bcc:	2000000c 	.word	0x2000000c
 8006bd0:	00ff7777 	.word	0x00ff7777
 8006bd4:	0077ff77 	.word	0x0077ff77
 8006bd8:	007777ff 	.word	0x007777ff
 8006bdc:	00ff7700 	.word	0x00ff7700
 8006be0:	0077ff00 	.word	0x0077ff00
 8006be4:	007700ff 	.word	0x007700ff
 8006be8:	00ff0077 	.word	0x00ff0077
 8006bec:	00888888 	.word	0x00888888
 8006bf0:	00444444 	.word	0x00444444
 8006bf4:	20000010 	.word	0x20000010
 8006bf8:	20000009 	.word	0x20000009
 8006bfc:	2000000a 	.word	0x2000000a
				OLED_col = 1;
 8006c00:	4b36      	ldr	r3, [pc, #216]	; (8006cdc <OLED_Printf+0x754>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	701a      	strb	r2, [r3, #0]
				OLED_row += 9 * OLED_charPoint;
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <OLED_Printf+0x758>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	00d2      	lsls	r2, r2, #3
 8006c0e:	4413      	add	r3, r2
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	4b34      	ldr	r3, [pc, #208]	; (8006ce4 <OLED_Printf+0x75c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4413      	add	r3, r2
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <OLED_Printf+0x75c>)
 8006c1c:	701a      	strb	r2, [r3, #0]
			continue;
 8006c1e:	e048      	b.n	8006cb2 <OLED_Printf+0x72a>
 8006c20:	e047      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		if (*c == '/' && *(c+1) == '*'){
 8006c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b2f      	cmp	r3, #47	; 0x2f
 8006c2a:	d10f      	bne.n	8006c4c <OLED_Printf+0x6c4>
 8006c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c30:	3301      	adds	r3, #1
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b2a      	cmp	r3, #42	; 0x2a
 8006c36:	d109      	bne.n	8006c4c <OLED_Printf+0x6c4>
			c += 1;
 8006c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-1);
 8006c42:	f04f 30ff 	mov.w	r0, #4294967295
 8006c46:	f7ff fbbd 	bl	80063c4 <OLED_WriteChar>
			continue;
 8006c4a:	e032      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		if (*c == '/' && *(c+1) == 'q'){
 8006c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b2f      	cmp	r3, #47	; 0x2f
 8006c54:	d10f      	bne.n	8006c76 <OLED_Printf+0x6ee>
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b71      	cmp	r3, #113	; 0x71
 8006c60:	d109      	bne.n	8006c76 <OLED_Printf+0x6ee>
			c += 1;
 8006c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c66:	3301      	adds	r3, #1
 8006c68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-2);
 8006c6c:	f06f 0001 	mvn.w	r0, #1
 8006c70:	f7ff fba8 	bl	80063c4 <OLED_WriteChar>
			continue;
 8006c74:	e01d      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		if (*c == '/' && *(c+1) == 'Q'){
 8006c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8006c7e:	d10f      	bne.n	8006ca0 <OLED_Printf+0x718>
 8006c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c84:	3301      	adds	r3, #1
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b51      	cmp	r3, #81	; 0x51
 8006c8a:	d109      	bne.n	8006ca0 <OLED_Printf+0x718>
			c += 1;
 8006c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c90:	3301      	adds	r3, #1
 8006c92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-3);
 8006c96:	f06f 0002 	mvn.w	r0, #2
 8006c9a:	f7ff fb93 	bl	80063c4 <OLED_WriteChar>
			continue;
 8006c9e:	e008      	b.n	8006cb2 <OLED_Printf+0x72a>
		}
		OLED_WriteChar(*c);
 8006ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b21b      	sxth	r3, r3
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fb8b 	bl	80063c4 <OLED_WriteChar>
 8006cae:	e000      	b.n	8006cb2 <OLED_Printf+0x72a>
		if (*c == '\r') continue;
 8006cb0:	bf00      	nop
	for (char *c = buffer; *c; c++) {
 8006cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f47f ac81 	bne.w	80065ca <OLED_Printf+0x42>
	}
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cd6:	b004      	add	sp, #16
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	2000000a 	.word	0x2000000a
 8006ce0:	20000010 	.word	0x20000010
 8006ce4:	20000009 	.word	0x20000009

08006ce8 <OLED_Line>:

void OLED_Line(uint8_t xi, uint8_t yi, uint8_t xe, uint8_t ye, int32_t color){
 8006ce8:	b590      	push	{r4, r7, lr}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4604      	mov	r4, r0
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4623      	mov	r3, r4
 8006cf8:	71fb      	strb	r3, [r7, #7]
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71bb      	strb	r3, [r7, #6]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	717b      	strb	r3, [r7, #5]
 8006d02:	4613      	mov	r3, r2
 8006d04:	713b      	strb	r3, [r7, #4]
	uint8_t red = (color >> 16) & 0xF8;
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	141b      	asrs	r3, r3, #16
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f023 0307 	bic.w	r3, r3, #7
 8006d10:	73fb      	strb	r3, [r7, #15]
	uint8_t gre = (color >> 8) & 0xFC;
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	121b      	asrs	r3, r3, #8
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f023 0303 	bic.w	r3, r3, #3
 8006d1c:	73bb      	strb	r3, [r7, #14]
	uint8_t blu = color & 0xF8;
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f023 0307 	bic.w	r3, r3, #7
 8006d26:	737b      	strb	r3, [r7, #13]

	//선을 그리기 위해서는 0x21 신호가 필요합니다.
	OLED_WriteCommand(0x21);
 8006d28:	2021      	movs	r0, #33	; 0x21
 8006d2a:	f7ff f9af 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(xi);
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff f9ab 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(yi);
 8006d36:	79bb      	ldrb	r3, [r7, #6]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff f9a7 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(xe);
 8006d3e:	797b      	ldrb	r3, [r7, #5]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff f9a3 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(ye);
 8006d46:	793b      	ldrb	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff f99f 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(red>>2);
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff f999 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(gre>>2);
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	089b      	lsrs	r3, r3, #2
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff f993 	bl	800608c <OLED_WriteCommand>
	OLED_WriteCommand(blu>>2);
 8006d66:	7b7b      	ldrb	r3, [r7, #13]
 8006d68:	089b      	lsrs	r3, r3, #2
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff f98d 	bl	800608c <OLED_WriteCommand>
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd90      	pop	{r4, r7, pc}
	...

08006d7c <OLED_MenuUI>:

void OLED_MenuUI(char * title, uint32_t titleBgColor, uint32_t titleTextColor, Menu_t * menu, uint32_t count, uint32_t textColor){
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
	OLED_Rectangle(0, 0, 96, 9, titleBgColor);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2309      	movs	r3, #9
 8006d90:	2260      	movs	r2, #96	; 0x60
 8006d92:	2100      	movs	r1, #0
 8006d94:	2000      	movs	r0, #0
 8006d96:	f7ff fab1 	bl	80062fc <OLED_Rectangle>
	OLED_row = 1;
 8006d9a:	4b19      	ldr	r3, [pc, #100]	; (8006e00 <OLED_MenuUI+0x84>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8006da0:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <OLED_MenuUI+0x88>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
	OLED_charColor = titleTextColor;
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <OLED_MenuUI+0x8c>)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6013      	str	r3, [r2, #0]
	OLED_bgColor = titleBgColor;
 8006dac:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <OLED_MenuUI+0x90>)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6013      	str	r3, [r2, #0]
	OLED_Printf("/s%s\n", title);
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	4816      	ldr	r0, [pc, #88]	; (8006e10 <OLED_MenuUI+0x94>)
 8006db6:	f7ff fbe7 	bl	8006588 <OLED_Printf>
	OLED_charColor = textColor;
 8006dba:	4a13      	ldr	r2, [pc, #76]	; (8006e08 <OLED_MenuUI+0x8c>)
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	6013      	str	r3, [r2, #0]
	OLED_bgColor = 0;
 8006dc0:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <OLED_MenuUI+0x90>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < count; i++){
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]
 8006dca:	e00f      	b.n	8006dec <OLED_MenuUI+0x70>
		OLED_Printf("/s%s\n", menu[i].message);
 8006dcc:	7dfa      	ldrb	r2, [r7, #23]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	4413      	add	r3, r2
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4619      	mov	r1, r3
 8006de0:	480b      	ldr	r0, [pc, #44]	; (8006e10 <OLED_MenuUI+0x94>)
 8006de2:	f7ff fbd1 	bl	8006588 <OLED_Printf>
	for(uint8_t i = 0; i < count; i++){
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	3301      	adds	r3, #1
 8006dea:	75fb      	strb	r3, [r7, #23]
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	6a3a      	ldr	r2, [r7, #32]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d8eb      	bhi.n	8006dcc <OLED_MenuUI+0x50>
	}
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000009 	.word	0x20000009
 8006e04:	2000000a 	.word	0x2000000a
 8006e08:	2000000c 	.word	0x2000000c
 8006e0c:	20000558 	.word	0x20000558
 8006e10:	0800c4bc 	.word	0x0800c4bc

08006e14 <OLED_Cursor>:

void OLED_Cursor(uint8_t n, uint32_t color){
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
	//Line Erase
	for(uint8_t i = 9; i < 64; i+=9){
 8006e20:	2309      	movs	r3, #9
 8006e22:	73fb      	strb	r3, [r7, #15]
 8006e24:	e00a      	b.n	8006e3c <OLED_Cursor+0x28>
		OLED_Line(0, i, 95, i, 0);
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	7bf9      	ldrb	r1, [r7, #15]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	9200      	str	r2, [sp, #0]
 8006e2e:	225f      	movs	r2, #95	; 0x5f
 8006e30:	2000      	movs	r0, #0
 8006e32:	f7ff ff59 	bl	8006ce8 <OLED_Line>
	for(uint8_t i = 9; i < 64; i+=9){
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	3309      	adds	r3, #9
 8006e3a:	73fb      	strb	r3, [r7, #15]
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8006e40:	d9f1      	bls.n	8006e26 <OLED_Cursor+0x12>
	}
	OLED_Line(0, 9, 0, 63, 0);
 8006e42:	2300      	movs	r3, #0
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	233f      	movs	r3, #63	; 0x3f
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2109      	movs	r1, #9
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f7ff ff4b 	bl	8006ce8 <OLED_Line>
	OLED_Line(95, 9, 95, 63, 0);
 8006e52:	2300      	movs	r3, #0
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	233f      	movs	r3, #63	; 0x3f
 8006e58:	225f      	movs	r2, #95	; 0x5f
 8006e5a:	2109      	movs	r1, #9
 8006e5c:	205f      	movs	r0, #95	; 0x5f
 8006e5e:	f7ff ff43 	bl	8006ce8 <OLED_Line>

	//Line Drawing
	OLED_Line(0, 9 + 9 * n, 95, 9 + 9 * n, color);
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	00d2      	lsls	r2, r2, #3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	b2d9      	uxtb	r1, r3
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	3301      	adds	r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	00d2      	lsls	r2, r2, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4613      	mov	r3, r2
 8006e84:	225f      	movs	r2, #95	; 0x5f
 8006e86:	2000      	movs	r0, #0
 8006e88:	f7ff ff2e 	bl	8006ce8 <OLED_Line>
	OLED_Line(0, 18 + 9 * n, 95, 18 + 9 * n, color);
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	00d2      	lsls	r2, r2, #3
 8006e92:	4413      	add	r3, r2
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	3312      	adds	r3, #18
 8006e98:	b2d9      	uxtb	r1, r3
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	00d2      	lsls	r2, r2, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	3312      	adds	r3, #18
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	4613      	mov	r3, r2
 8006eae:	225f      	movs	r2, #95	; 0x5f
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f7ff ff19 	bl	8006ce8 <OLED_Line>
	OLED_Line(0, 9 + 9 * n, 0, 18 + 9 * n, color);
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	00d2      	lsls	r2, r2, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b2d9      	uxtb	r1, r3
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	00d2      	lsls	r2, r2, #3
 8006eca:	4413      	add	r3, r2
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	3312      	adds	r3, #18
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2000      	movs	r0, #0
 8006edc:	f7ff ff04 	bl	8006ce8 <OLED_Line>
	OLED_Line(95, 9 + 9 * n, 95, 18 + 9 * n, color);
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	00d2      	lsls	r2, r2, #3
 8006eea:	4413      	add	r3, r2
 8006eec:	b2d9      	uxtb	r1, r3
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	00d2      	lsls	r2, r2, #3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	3312      	adds	r3, #18
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	225f      	movs	r2, #95	; 0x5f
 8006f04:	205f      	movs	r0, #95	; 0x5f
 8006f06:	f7ff feef 	bl	8006ce8 <OLED_Line>
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <Switch_LED>:
#define LONG_FLAG 0x20

#define LINE_TRACER_SWITCH
extern TIM_HandleTypeDef htim4;

void Switch_LED(uint16_t red, uint16_t blue){
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	460a      	mov	r2, r1
 8006f1e:	80fb      	strh	r3, [r7, #6]
 8006f20:	4613      	mov	r3, r2
 8006f22:	80bb      	strh	r3, [r7, #4]
	htim4.Instance -> CCR1 = red;
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <Switch_LED+0x2c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	88fa      	ldrh	r2, [r7, #6]
 8006f2a:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance -> CCR2 = blue;
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <Switch_LED+0x2c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	88ba      	ldrh	r2, [r7, #4]
 8006f32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	200005d4 	.word	0x200005d4

08006f44 <Switch_LED_Temperature>:

void Switch_LED_Temperature(float temp){
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	ed87 0a01 	vstr	s0, [r7, #4]
	//250도일 때 빨강
	//50도일 때 흰색
	//0도일 때 파랑
	static float temp_v;
	if(temp_v < temp){
 8006f4e:	4b56      	ldr	r3, [pc, #344]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006f50:	edd3 7a00 	vldr	s15, [r3]
 8006f54:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f60:	dd17      	ble.n	8006f92 <Switch_LED_Temperature+0x4e>
		temp_v += 1.0f;
 8006f62:	4b51      	ldr	r3, [pc, #324]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006f64:	edd3 7a00 	vldr	s15, [r3]
 8006f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f70:	4b4d      	ldr	r3, [pc, #308]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006f72:	edc3 7a00 	vstr	s15, [r3]
		if(temp_v > temp){
 8006f76:	4b4c      	ldr	r3, [pc, #304]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006f78:	edd3 7a00 	vldr	s15, [r3]
 8006f7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f88:	d524      	bpl.n	8006fd4 <Switch_LED_Temperature+0x90>
			temp_v = temp;
 8006f8a:	4a47      	ldr	r2, [pc, #284]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	e020      	b.n	8006fd4 <Switch_LED_Temperature+0x90>
		}
	}
	else if(temp_v > temp){
 8006f92:	4b45      	ldr	r3, [pc, #276]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006f94:	edd3 7a00 	vldr	s15, [r3]
 8006f98:	ed97 7a01 	vldr	s14, [r7, #4]
 8006f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa4:	d516      	bpl.n	8006fd4 <Switch_LED_Temperature+0x90>
		temp_v -= 1.0f;
 8006fa6:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006fa8:	edd3 7a00 	vldr	s15, [r3]
 8006fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fb4:	4b3c      	ldr	r3, [pc, #240]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006fb6:	edc3 7a00 	vstr	s15, [r3]
		if(temp_v < temp){
 8006fba:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006fbc:	edd3 7a00 	vldr	s15, [r3]
 8006fc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8006fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fcc:	dd02      	ble.n	8006fd4 <Switch_LED_Temperature+0x90>
			temp_v = temp;
 8006fce:	4a36      	ldr	r2, [pc, #216]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6013      	str	r3, [r2, #0]
		}
	}


	if(temp_v > 250.00f){
 8006fd4:	4b34      	ldr	r3, [pc, #208]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006fd6:	edd3 7a00 	vldr	s15, [r3]
 8006fda:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80070ac <Switch_LED_Temperature+0x168>
 8006fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe6:	dd05      	ble.n	8006ff4 <Switch_LED_Temperature+0xb0>
		Switch_LED(1023, 0);
 8006fe8:	2100      	movs	r1, #0
 8006fea:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8006fee:	f7ff ff91 	bl	8006f14 <Switch_LED>
		Switch_LED(temp_v * temp_v * 1023.00f / 2500.0f, 1023);
	}
	else{
		Switch_LED(0, 1023);
	}
}
 8006ff2:	e054      	b.n	800709e <Switch_LED_Temperature+0x15a>
	else if(temp_v > 50.00f){
 8006ff4:	4b2c      	ldr	r3, [pc, #176]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8006ff6:	edd3 7a00 	vldr	s15, [r3]
 8006ffa:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80070b0 <Switch_LED_Temperature+0x16c>
 8006ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007006:	dd22      	ble.n	800704e <Switch_LED_Temperature+0x10a>
		Switch_LED(1023, (250.00f - temp_v) * (250.00f - temp_v) * 1023.00f / 40000.0f);
 8007008:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <Switch_LED_Temperature+0x164>)
 800700a:	edd3 7a00 	vldr	s15, [r3]
 800700e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80070ac <Switch_LED_Temperature+0x168>
 8007012:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8007018:	edd3 7a00 	vldr	s15, [r3]
 800701c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80070ac <Switch_LED_Temperature+0x168>
 8007020:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007028:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80070b4 <Switch_LED_Temperature+0x170>
 800702c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007030:	eddf 6a21 	vldr	s13, [pc, #132]	; 80070b8 <Switch_LED_Temperature+0x174>
 8007034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800703c:	ee17 3a90 	vmov	r3, s15
 8007040:	b29b      	uxth	r3, r3
 8007042:	4619      	mov	r1, r3
 8007044:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8007048:	f7ff ff64 	bl	8006f14 <Switch_LED>
}
 800704c:	e027      	b.n	800709e <Switch_LED_Temperature+0x15a>
	else if(temp_v > 0){
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8007050:	edd3 7a00 	vldr	s15, [r3]
 8007054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705c:	dd1a      	ble.n	8007094 <Switch_LED_Temperature+0x150>
		Switch_LED(temp_v * temp_v * 1023.00f / 2500.0f, 1023);
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8007060:	ed93 7a00 	vldr	s14, [r3]
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <Switch_LED_Temperature+0x164>)
 8007066:	edd3 7a00 	vldr	s15, [r3]
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80070b4 <Switch_LED_Temperature+0x170>
 8007072:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007076:	eddf 6a11 	vldr	s13, [pc, #68]	; 80070bc <Switch_LED_Temperature+0x178>
 800707a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800707e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007082:	ee17 3a90 	vmov	r3, s15
 8007086:	b29b      	uxth	r3, r3
 8007088:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff ff41 	bl	8006f14 <Switch_LED>
}
 8007092:	e004      	b.n	800709e <Switch_LED_Temperature+0x15a>
		Switch_LED(0, 1023);
 8007094:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007098:	2000      	movs	r0, #0
 800709a:	f7ff ff3b 	bl	8006f14 <Switch_LED>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	2000055c 	.word	0x2000055c
 80070ac:	437a0000 	.word	0x437a0000
 80070b0:	42480000 	.word	0x42480000
 80070b4:	447fc000 	.word	0x447fc000
 80070b8:	471c4000 	.word	0x471c4000
 80070bc:	451c4000 	.word	0x451c4000

080070c0 <Switch_Read>:




uint16_t Switch_Read(){
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
	static uint16_t Switch_sum = 0;
	static uint16_t Switch_input = 0;
	static uint32_t Switch_time = 0;
	static uint32_t Switch_lowTime = 0;
#ifdef LINE_TRACER_SWITCH
	uint8_t sw1 = !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 80070c6:	2108      	movs	r1, #8
 80070c8:	4893      	ldr	r0, [pc, #588]	; (8007318 <Switch_Read+0x258>)
 80070ca:	f7fb f93b 	bl	8002344 <HAL_GPIO_ReadPin>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2 = !HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 80070dc:	2110      	movs	r1, #16
 80070de:	488e      	ldr	r0, [pc, #568]	; (8007318 <Switch_Read+0x258>)
 80070e0:	f7fb f930 	bl	8002344 <HAL_GPIO_ReadPin>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bf0c      	ite	eq
 80070ea:	2301      	moveq	r3, #1
 80070ec:	2300      	movne	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3 = !HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 80070f2:	2120      	movs	r1, #32
 80070f4:	4888      	ldr	r0, [pc, #544]	; (8007318 <Switch_Read+0x258>)
 80070f6:	f7fb f925 	bl	8002344 <HAL_GPIO_ReadPin>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	717b      	strb	r3, [r7, #5]
	uint8_t sw4 = !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin);
 8007108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800710c:	4882      	ldr	r0, [pc, #520]	; (8007318 <Switch_Read+0x258>)
 800710e:	f7fb f919 	bl	8002344 <HAL_GPIO_ReadPin>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	713b      	strb	r3, [r7, #4]
	uint8_t sw5 = !HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin);
 8007120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007124:	487c      	ldr	r0, [pc, #496]	; (8007318 <Switch_Read+0x258>)
 8007126:	f7fb f90d 	bl	8002344 <HAL_GPIO_ReadPin>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	bf0c      	ite	eq
 8007130:	2301      	moveq	r3, #1
 8007132:	2300      	movne	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	70fb      	strb	r3, [r7, #3]
	Switch_input = sw1 | (sw2 << 1) | (sw3 << 2) | (sw4 << 3) | (sw5 << 4);
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	b21a      	sxth	r2, r3
 800713c:	79bb      	ldrb	r3, [r7, #6]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	b21b      	sxth	r3, r3
 8007142:	4313      	orrs	r3, r2
 8007144:	b21a      	sxth	r2, r3
 8007146:	797b      	ldrb	r3, [r7, #5]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	b21b      	sxth	r3, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	b21a      	sxth	r2, r3
 8007150:	793b      	ldrb	r3, [r7, #4]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	b21b      	sxth	r3, r3
 8007156:	4313      	orrs	r3, r2
 8007158:	b21a      	sxth	r2, r3
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	b21b      	sxth	r3, r3
 8007160:	4313      	orrs	r3, r2
 8007162:	b21b      	sxth	r3, r3
 8007164:	b29a      	uxth	r2, r3
 8007166:	4b6d      	ldr	r3, [pc, #436]	; (800731c <Switch_Read+0x25c>)
 8007168:	801a      	strh	r2, [r3, #0]
#endif
	switch(Switch_state){
 800716a:	4b6d      	ldr	r3, [pc, #436]	; (8007320 <Switch_Read+0x260>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b05      	cmp	r3, #5
 8007170:	f200 80cd 	bhi.w	800730e <Switch_Read+0x24e>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <Switch_Read+0xbc>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	08007195 	.word	0x08007195
 8007180:	080071c1 	.word	0x080071c1
 8007184:	08007205 	.word	0x08007205
 8007188:	0800724d 	.word	0x0800724d
 800718c:	08007285 	.word	0x08007285
 8007190:	080072c5 	.word	0x080072c5
	case SWITCH_STATE_IDLE:
		if(Switch_input){
 8007194:	4b61      	ldr	r3, [pc, #388]	; (800731c <Switch_Read+0x25c>)
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80af 	beq.w	80072fc <Switch_Read+0x23c>
			Switch_time = HAL_GetTick();
 800719e:	f7fa fe0b 	bl	8001db8 <HAL_GetTick>
 80071a2:	4603      	mov	r3, r0
 80071a4:	4a5f      	ldr	r2, [pc, #380]	; (8007324 <Switch_Read+0x264>)
 80071a6:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_DOWN;
 80071a8:	4b5d      	ldr	r3, [pc, #372]	; (8007320 <Switch_Read+0x260>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
			Switch_sum |= Switch_input;
 80071ae:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <Switch_Read+0x268>)
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	4b5a      	ldr	r3, [pc, #360]	; (800731c <Switch_Read+0x25c>)
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	4b5b      	ldr	r3, [pc, #364]	; (8007328 <Switch_Read+0x268>)
 80071bc:	801a      	strh	r2, [r3, #0]
		}
		break;
 80071be:	e09d      	b.n	80072fc <Switch_Read+0x23c>
	case SWITCH_STATE_PRE_DOWN:
		if(Switch_input){
 80071c0:	4b56      	ldr	r3, [pc, #344]	; (800731c <Switch_Read+0x25c>)
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d016      	beq.n	80071f6 <Switch_Read+0x136>
			if(HAL_GetTick() - Switch_time > 80){
 80071c8:	f7fa fdf6 	bl	8001db8 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b55      	ldr	r3, [pc, #340]	; (8007324 <Switch_Read+0x264>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b50      	cmp	r3, #80	; 0x50
 80071d6:	d905      	bls.n	80071e4 <Switch_Read+0x124>
				Switch_state = SWITCH_STATE_DOWN;
 80071d8:	4b51      	ldr	r3, [pc, #324]	; (8007320 <Switch_Read+0x260>)
 80071da:	2202      	movs	r2, #2
 80071dc:	701a      	strb	r2, [r3, #0]
				return Switch_sum;
 80071de:	4b52      	ldr	r3, [pc, #328]	; (8007328 <Switch_Read+0x268>)
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	e095      	b.n	8007310 <Switch_Read+0x250>
			}
			Switch_sum |= Switch_input;
 80071e4:	4b50      	ldr	r3, [pc, #320]	; (8007328 <Switch_Read+0x268>)
 80071e6:	881a      	ldrh	r2, [r3, #0]
 80071e8:	4b4c      	ldr	r3, [pc, #304]	; (800731c <Switch_Read+0x25c>)
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	4b4d      	ldr	r3, [pc, #308]	; (8007328 <Switch_Read+0x268>)
 80071f2:	801a      	strh	r2, [r3, #0]
		}
		else{
			Switch_state = SWITCH_STATE_IDLE;
			Switch_sum = 0;
		}
		break;
 80071f4:	e08b      	b.n	800730e <Switch_Read+0x24e>
			Switch_state = SWITCH_STATE_IDLE;
 80071f6:	4b4a      	ldr	r3, [pc, #296]	; (8007320 <Switch_Read+0x260>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
			Switch_sum = 0;
 80071fc:	4b4a      	ldr	r3, [pc, #296]	; (8007328 <Switch_Read+0x268>)
 80071fe:	2200      	movs	r2, #0
 8007200:	801a      	strh	r2, [r3, #0]
		break;
 8007202:	e084      	b.n	800730e <Switch_Read+0x24e>
	case SWITCH_STATE_DOWN:
		if(!Switch_input){
 8007204:	4b45      	ldr	r3, [pc, #276]	; (800731c <Switch_Read+0x25c>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d108      	bne.n	800721e <Switch_Read+0x15e>
			Switch_lowTime = HAL_GetTick();
 800720c:	f7fa fdd4 	bl	8001db8 <HAL_GetTick>
 8007210:	4603      	mov	r3, r0
 8007212:	4a46      	ldr	r2, [pc, #280]	; (800732c <Switch_Read+0x26c>)
 8007214:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE;
 8007216:	4b42      	ldr	r3, [pc, #264]	; (8007320 <Switch_Read+0x260>)
 8007218:	2203      	movs	r2, #3
 800721a:	701a      	strb	r2, [r3, #0]
		else if(HAL_GetTick() - Switch_time > 400){
			Switch_time = HAL_GetTick();
			Switch_state = SWITCH_STATE_LONG;
			return Switch_sum | LONG_FLAG;
		}
		break;
 800721c:	e070      	b.n	8007300 <Switch_Read+0x240>
		else if(HAL_GetTick() - Switch_time > 400){
 800721e:	f7fa fdcb 	bl	8001db8 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	4b3f      	ldr	r3, [pc, #252]	; (8007324 <Switch_Read+0x264>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800722e:	d967      	bls.n	8007300 <Switch_Read+0x240>
			Switch_time = HAL_GetTick();
 8007230:	f7fa fdc2 	bl	8001db8 <HAL_GetTick>
 8007234:	4603      	mov	r3, r0
 8007236:	4a3b      	ldr	r2, [pc, #236]	; (8007324 <Switch_Read+0x264>)
 8007238:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_LONG;
 800723a:	4b39      	ldr	r3, [pc, #228]	; (8007320 <Switch_Read+0x260>)
 800723c:	2204      	movs	r2, #4
 800723e:	701a      	strb	r2, [r3, #0]
			return Switch_sum | LONG_FLAG;
 8007240:	4b39      	ldr	r3, [pc, #228]	; (8007328 <Switch_Read+0x268>)
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	f043 0320 	orr.w	r3, r3, #32
 8007248:	b29b      	uxth	r3, r3
 800724a:	e061      	b.n	8007310 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE:
		if(!Switch_input){
 800724c:	4b33      	ldr	r3, [pc, #204]	; (800731c <Switch_Read+0x25c>)
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d113      	bne.n	800727c <Switch_Read+0x1bc>
			if(HAL_GetTick() - Switch_lowTime > 80){
 8007254:	f7fa fdb0 	bl	8001db8 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	4b34      	ldr	r3, [pc, #208]	; (800732c <Switch_Read+0x26c>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b50      	cmp	r3, #80	; 0x50
 8007262:	d94f      	bls.n	8007304 <Switch_Read+0x244>
				Switch_time = HAL_GetTick();
 8007264:	f7fa fda8 	bl	8001db8 <HAL_GetTick>
 8007268:	4603      	mov	r3, r0
 800726a:	4a2e      	ldr	r2, [pc, #184]	; (8007324 <Switch_Read+0x264>)
 800726c:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 800726e:	4b2c      	ldr	r3, [pc, #176]	; (8007320 <Switch_Read+0x260>)
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 8007274:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <Switch_Read+0x268>)
 8007276:	2200      	movs	r2, #0
 8007278:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_DOWN;
		}
		break;
 800727a:	e043      	b.n	8007304 <Switch_Read+0x244>
			Switch_state = SWITCH_STATE_DOWN;
 800727c:	4b28      	ldr	r3, [pc, #160]	; (8007320 <Switch_Read+0x260>)
 800727e:	2202      	movs	r2, #2
 8007280:	701a      	strb	r2, [r3, #0]
		break;
 8007282:	e03f      	b.n	8007304 <Switch_Read+0x244>
	case SWITCH_STATE_LONG:
		if(!Switch_input){
 8007284:	4b25      	ldr	r3, [pc, #148]	; (800731c <Switch_Read+0x25c>)
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d108      	bne.n	800729e <Switch_Read+0x1de>
			Switch_lowTime = HAL_GetTick();
 800728c:	f7fa fd94 	bl	8001db8 <HAL_GetTick>
 8007290:	4603      	mov	r3, r0
 8007292:	4a26      	ldr	r2, [pc, #152]	; (800732c <Switch_Read+0x26c>)
 8007294:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE_LONG;
 8007296:	4b22      	ldr	r3, [pc, #136]	; (8007320 <Switch_Read+0x260>)
 8007298:	2205      	movs	r2, #5
 800729a:	701a      	strb	r2, [r3, #0]
		}
		else if(HAL_GetTick() - Switch_time > 100){
			Switch_time = HAL_GetTick();
			return Switch_sum | LONG_FLAG;
		}
		break;
 800729c:	e034      	b.n	8007308 <Switch_Read+0x248>
		else if(HAL_GetTick() - Switch_time > 100){
 800729e:	f7fa fd8b 	bl	8001db8 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b1f      	ldr	r3, [pc, #124]	; (8007324 <Switch_Read+0x264>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	; 0x64
 80072ac:	d92c      	bls.n	8007308 <Switch_Read+0x248>
			Switch_time = HAL_GetTick();
 80072ae:	f7fa fd83 	bl	8001db8 <HAL_GetTick>
 80072b2:	4603      	mov	r3, r0
 80072b4:	4a1b      	ldr	r2, [pc, #108]	; (8007324 <Switch_Read+0x264>)
 80072b6:	6013      	str	r3, [r2, #0]
			return Switch_sum | LONG_FLAG;
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <Switch_Read+0x268>)
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	f043 0320 	orr.w	r3, r3, #32
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	e025      	b.n	8007310 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE_LONG:
		if(!Switch_input){
 80072c4:	4b15      	ldr	r3, [pc, #84]	; (800731c <Switch_Read+0x25c>)
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d113      	bne.n	80072f4 <Switch_Read+0x234>
			if(HAL_GetTick() - Switch_lowTime > 80){
 80072cc:	f7fa fd74 	bl	8001db8 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <Switch_Read+0x26c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b50      	cmp	r3, #80	; 0x50
 80072da:	d917      	bls.n	800730c <Switch_Read+0x24c>
				Switch_time = HAL_GetTick();
 80072dc:	f7fa fd6c 	bl	8001db8 <HAL_GetTick>
 80072e0:	4603      	mov	r3, r0
 80072e2:	4a10      	ldr	r2, [pc, #64]	; (8007324 <Switch_Read+0x264>)
 80072e4:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 80072e6:	4b0e      	ldr	r3, [pc, #56]	; (8007320 <Switch_Read+0x260>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <Switch_Read+0x268>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_LONG;
		}
		break;
 80072f2:	e00b      	b.n	800730c <Switch_Read+0x24c>
			Switch_state = SWITCH_STATE_LONG;
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <Switch_Read+0x260>)
 80072f6:	2204      	movs	r2, #4
 80072f8:	701a      	strb	r2, [r3, #0]
		break;
 80072fa:	e007      	b.n	800730c <Switch_Read+0x24c>
		break;
 80072fc:	bf00      	nop
 80072fe:	e006      	b.n	800730e <Switch_Read+0x24e>
		break;
 8007300:	bf00      	nop
 8007302:	e004      	b.n	800730e <Switch_Read+0x24e>
		break;
 8007304:	bf00      	nop
 8007306:	e002      	b.n	800730e <Switch_Read+0x24e>
		break;
 8007308:	bf00      	nop
 800730a:	e000      	b.n	800730e <Switch_Read+0x24e>
		break;
 800730c:	bf00      	nop
	}
	return 0;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40020400 	.word	0x40020400
 800731c:	20000560 	.word	0x20000560
 8007320:	20000562 	.word	0x20000562
 8007324:	20000564 	.word	0x20000564
 8007328:	20000568 	.word	0x20000568
 800732c:	2000056c 	.word	0x2000056c

08007330 <Control_PID>:
		10.f,		// filterConst
		10.f,		// antiWindUpConst
		.25f		// deadBandConst
};

float Control_PID(heater_t *heaterobj, PIDConst PIDMode){
 8007330:	b084      	sub	sp, #16
 8007332:	b480      	push	{r7}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800733e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float duty;

	// Proportional term
	float temperatureError = heaterobj->target - heaterobj->current;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	ed93 7a04 	vldr	s14, [r3, #16]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	edd3 7a05 	vldr	s15, [r3, #20]
 800734e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007352:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative term
	float temperatureDifferential = (heaterobj->current - heaterobj->prev) / PERIOD;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	ed93 7a05 	vldr	s14, [r3, #20]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007366:	edc7 7a03 	vstr	s15, [r7, #12]

	// Integral term
	if (temperatureError < -PIDMode.deadBandConst) heaterobj->errorSum += (temperatureError + PIDMode.deadBandConst) * PERIOD;
 800736a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800736e:	eef1 7a67 	vneg.f32	s15, s15
 8007372:	ed97 7a04 	vldr	s14, [r7, #16]
 8007376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	d50e      	bpl.n	800739e <Control_PID+0x6e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	ed93 7a07 	vldr	s14, [r3, #28]
 8007386:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800738a:	edd7 7a04 	vldr	s15, [r7, #16]
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	edc3 7a07 	vstr	s15, [r3, #28]
 800739c:	e016      	b.n	80073cc <Control_PID+0x9c>
	else if (temperatureError > PIDMode.deadBandConst) heaterobj->errorSum += (temperatureError - PIDMode.deadBandConst) * PERIOD;
 800739e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80073a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80073a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	dd0d      	ble.n	80073cc <Control_PID+0x9c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	ed93 7a07 	vldr	s14, [r3, #28]
 80073b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80073ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80073be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80073c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	edc3 7a07 	vstr	s15, [r3, #28]

	// anti wind-up
	if (heaterobj->errorSum > PIDMode.antiWindUpConst) heaterobj->errorSum = PIDMode.antiWindUpConst;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80073d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80073d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	dd03      	ble.n	80073e8 <Control_PID+0xb8>
 80073e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	61da      	str	r2, [r3, #28]
 80073e6:	e012      	b.n	800740e <Control_PID+0xde>
	else if (heaterobj->errorSum < -PIDMode.antiWindUpConst) heaterobj->errorSum = -PIDMode.antiWindUpConst;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	ed93 7a07 	vldr	s14, [r3, #28]
 80073ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80073f2:	eef1 7a67 	vneg.f32	s15, s15
 80073f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fe:	d506      	bpl.n	800740e <Control_PID+0xde>
 8007400:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007404:	eef1 7a67 	vneg.f32	s15, s15
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	edc3 7a07 	vstr	s15, [r3, #28]

	// PID control
	duty = (temperatureError * PIDMode.kp - temperatureDifferential * PIDMode.kd + heaterobj->errorSum * PIDMode.ki);
 800740e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007412:	edd7 7a04 	vldr	s15, [r7, #16]
 8007416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800741a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800741e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	edd3 6a07 	vldr	s13, [r3, #28]
 8007430:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800743c:	edc7 7a05 	vstr	s15, [r7, #20]

	// output limit
	if (duty < 0.01f) duty = 0.f;
 8007440:	edd7 7a05 	vldr	s15, [r7, #20]
 8007444:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007488 <Control_PID+0x158>
 8007448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	d502      	bpl.n	8007458 <Control_PID+0x128>
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	617b      	str	r3, [r7, #20]
	if (duty > 0.99f) duty = 1.f;
 8007458:	edd7 7a05 	vldr	s15, [r7, #20]
 800745c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800748c <Control_PID+0x15c>
 8007460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	dd02      	ble.n	8007470 <Control_PID+0x140>
 800746a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800746e:	617b      	str	r3, [r7, #20]
	return duty;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	ee07 3a90 	vmov	s15, r3
}
 8007476:	eeb0 0a67 	vmov.f32	s0, s15
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	b004      	add	sp, #16
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	3c23d70a 	.word	0x3c23d70a
 800748c:	3f7d70a4 	.word	0x3f7d70a4

08007490 <HeaterControl_TIM9_IRQ>:
static void heater_stop(heater_t *heaterobj);
static void heater_set_target_temp(heater_t *heaterobj, float targetTemp);
__STATIC_INLINE void __Heater_SetDuty(heater_t *heaterobj);
static void Heater_Controller(tempsensor_t *tempsensor, heater_t *heaterobj);

void HeaterControl_TIM9_IRQ(){
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
	Heater_Controller(tempTop, heaterTop);
 8007494:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <HeaterControl_TIM9_IRQ+0x50>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a12      	ldr	r2, [pc, #72]	; (80074e4 <HeaterControl_TIM9_IRQ+0x54>)
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f8e8 	bl	8007674 <Heater_Controller>
	Heater_Controller(tempBottom, heaterBottom);
 80074a4:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <HeaterControl_TIM9_IRQ+0x58>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a10      	ldr	r2, [pc, #64]	; (80074ec <HeaterControl_TIM9_IRQ+0x5c>)
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f8e0 	bl	8007674 <Heater_Controller>
	if(heaterTop->state)
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <HeaterControl_TIM9_IRQ+0x54>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <HeaterControl_TIM9_IRQ+0x38>
		__Heater_SetDuty(heaterTop);
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HeaterControl_TIM9_IRQ+0x54>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f891 	bl	80075ea <__Heater_SetDuty>
	if(heaterBottom->state)
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <HeaterControl_TIM9_IRQ+0x5c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <HeaterControl_TIM9_IRQ+0x4c>
		__Heater_SetDuty(heaterBottom);
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <HeaterControl_TIM9_IRQ+0x5c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f887 	bl	80075ea <__Heater_SetDuty>
}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000794 	.word	0x20000794
 80074e4:	20000620 	.word	0x20000620
 80074e8:	2000061c 	.word	0x2000061c
 80074ec:	200005d0 	.word	0x200005d0

080074f0 <Custom_HeaterControl>:

heater_t *Custom_HeaterControl(TIM_HandleTypeDef *htim, uint32_t Channel){
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
	//
	heater_t *heaterobj = (heater_t*) calloc(1, sizeof(heater_t));
 80074fa:	2130      	movs	r1, #48	; 0x30
 80074fc:	2001      	movs	r0, #1
 80074fe:	f002 f803 	bl	8009508 <calloc>
 8007502:	4603      	mov	r3, r0
 8007504:	60fb      	str	r3, [r7, #12]

	// Setting methods
	heaterobj->channel = Channel;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	605a      	str	r2, [r3, #4]
	heaterobj->current = .0f;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	615a      	str	r2, [r3, #20]
	heaterobj->duty = .0f;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	60da      	str	r2, [r3, #12]
	heaterobj->errorSum = .0f;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	61da      	str	r2, [r3, #28]
	heaterobj->htim = htim;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
	heaterobj->onFlag = false;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2020 	strb.w	r2, [r3, #32]
	heaterobj->prev = .0f;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
	heaterobj->state = OFF;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	609a      	str	r2, [r3, #8]
	heaterobj->target = .0f;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	611a      	str	r2, [r3, #16]

	// Setting fields
	heaterobj->start = heater_start;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4a06      	ldr	r2, [pc, #24]	; (8007564 <Custom_HeaterControl+0x74>)
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
	heaterobj->stop = heater_stop;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a05      	ldr	r2, [pc, #20]	; (8007568 <Custom_HeaterControl+0x78>)
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
	heaterobj->set_target_temp = heater_set_target_temp;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a05      	ldr	r2, [pc, #20]	; (800756c <Custom_HeaterControl+0x7c>)
 8007558:	62da      	str	r2, [r3, #44]	; 0x2c

	return heaterobj;
 800755a:	68fb      	ldr	r3, [r7, #12]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	08007571 	.word	0x08007571
 8007568:	08007599 	.word	0x08007599
 800756c:	080075cd 	.word	0x080075cd

08007570 <heater_start>:

static void heater_start(heater_t *heaterobj){
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = true;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_TIM_PWM_Start(heaterobj->htim, heaterobj->channel);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f7fc f9fe 	bl	800398c <HAL_TIM_PWM_Start>
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <heater_stop>:

static void heater_stop(heater_t *heaterobj){
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = false;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2020 	strb.w	r2, [r3, #32]
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 80075a8:	e007      	b.n	80075ba <heater_stop+0x22>
	HAL_TIM_PWM_Stop(heaterobj->htim, heaterobj->channel);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fc fa99 	bl	8003aec <HAL_TIM_PWM_Stop>
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f3      	bne.n	80075aa <heater_stop+0x12>
}
 80075c2:	bf00      	nop
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <heater_set_target_temp>:

static void heater_set_target_temp(heater_t *heaterobj, float targetTemp){
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	ed87 0a00 	vstr	s0, [r7]
	heaterobj->target = targetTemp;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	611a      	str	r2, [r3, #16]
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <__Heater_SetDuty>:

__STATIC_INLINE void __Heater_SetDuty(heater_t *heaterobj){
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
	// Duty ratio to duty cycle conversion
	uint32_t dutycycle = heaterobj->duty * (__HAL_TIM_GET_AUTORELOAD(heaterobj->htim)+1) - 1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	3301      	adds	r3, #1
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761a:	ee17 3a90 	vmov	r3, s15
 800761e:	60fb      	str	r3, [r7, #12]
	// Set duty rate of PWM
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <__Heater_SetDuty+0x4a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007632:	e018      	b.n	8007666 <__Heater_SetDuty+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b04      	cmp	r3, #4
 800763a:	d105      	bne.n	8007648 <__Heater_SetDuty+0x5e>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007646:	e00e      	b.n	8007666 <__Heater_SetDuty+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b08      	cmp	r3, #8
 800764e:	d105      	bne.n	800765c <__Heater_SetDuty+0x72>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800765a:	e004      	b.n	8007666 <__Heater_SetDuty+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6413      	str	r3, [r2, #64]	; 0x40
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <Heater_Controller>:

static void Heater_Controller(tempsensor_t *tempsensorobj, heater_t *heaterobj){
 8007674:	b590      	push	{r4, r7, lr}
 8007676:	b089      	sub	sp, #36	; 0x24
 8007678:	af04      	add	r7, sp, #16
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
	float sensorADCRead = tempsensorobj->read(tempsensorobj);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
 8007686:	ed87 0a03 	vstr	s0, [r7, #12]
	if (sensorADCRead == NAN)
		return;
	heaterobj->prev = heaterobj->current;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	619a      	str	r2, [r3, #24]
	heaterobj->current = sensorADCRead;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	615a      	str	r2, [r3, #20]

	switch (heaterobj->state){
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d058      	beq.n	8007752 <Heater_Controller+0xde>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	f200 8091 	bhi.w	80077c8 <Heater_Controller+0x154>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <Heater_Controller+0x3c>
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d012      	beq.n	80076d4 <Heater_Controller+0x60>
 80076ae:	e08b      	b.n	80077c8 <Heater_Controller+0x154>
		case OFF:
			heaterobj->duty = 0.f;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	60da      	str	r2, [r3, #12]
			heaterobj->errorSum = 0.f;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	61da      	str	r2, [r3, #28]
			if (heaterobj->onFlag) {
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8086 	beq.w	80077d8 <Heater_Controller+0x164>
				heaterobj->state = TRANSIENT;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2202      	movs	r2, #2
 80076d0:	609a      	str	r2, [r3, #8]
			}
			break;
 80076d2:	e081      	b.n	80077d8 <Heater_Controller+0x164>

		case TRANSIENT:
			heaterobj->errorSum = .0f;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	61da      	str	r2, [r3, #28]
			heaterobj->duty = Control_PID(heaterobj, PIDTransient);
 80076dc:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <Heater_Controller+0x16c>)
 80076de:	466c      	mov	r4, sp
 80076e0:	f103 020c 	add.w	r2, r3, #12
 80076e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80076e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ec:	6838      	ldr	r0, [r7, #0]
 80076ee:	f7ff fe1f 	bl	8007330 <Control_PID>
 80076f2:	eef0 7a40 	vmov.f32	s15, s0
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007702:	f083 0301 	eor.w	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <Heater_Controller+0xa0>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
			else if (abs(heaterobj->target - heaterobj->current) <= DEVIATION) heaterobj->state = STEADY;
			break;
 8007712:	e062      	b.n	80077da <Heater_Controller+0x166>
			else if (abs(heaterobj->target - heaterobj->current) <= DEVIATION) heaterobj->state = STEADY;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	ed93 7a04 	vldr	s14, [r3, #16]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007728:	ee17 3a90 	vmov	r3, s15
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfb8      	it	lt
 8007730:	425b      	neglt	r3, r3
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800773a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800773e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007746:	d900      	bls.n	800774a <Heater_Controller+0xd6>
			break;
 8007748:	e047      	b.n	80077da <Heater_Controller+0x166>
			else if (abs(heaterobj->target - heaterobj->current) <= DEVIATION) heaterobj->state = STEADY;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2203      	movs	r2, #3
 800774e:	609a      	str	r2, [r3, #8]
			break;
 8007750:	e043      	b.n	80077da <Heater_Controller+0x166>

		case STEADY:
			heaterobj->duty = Control_PID(heaterobj, PIDSteady);
 8007752:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <Heater_Controller+0x170>)
 8007754:	466c      	mov	r4, sp
 8007756:	f103 020c 	add.w	r2, r3, #12
 800775a:	ca07      	ldmia	r2, {r0, r1, r2}
 800775c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007762:	6838      	ldr	r0, [r7, #0]
 8007764:	f7ff fde4 	bl	8007330 <Control_PID>
 8007768:	eef0 7a40 	vmov.f32	s15, s0
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007778:	f083 0301 	eor.w	r3, r3, #1
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <Heater_Controller+0x116>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2200      	movs	r2, #0
 8007786:	609a      	str	r2, [r3, #8]
			else if (abs(heaterobj->target - heaterobj->current) > DEVIATION) heaterobj->state = TRANSIENT;
			break;
 8007788:	e027      	b.n	80077da <Heater_Controller+0x166>
			else if (abs(heaterobj->target - heaterobj->current) > DEVIATION) heaterobj->state = TRANSIENT;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	ed93 7a04 	vldr	s14, [r3, #16]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	edd3 7a05 	vldr	s15, [r3, #20]
 8007796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800779a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800779e:	ee17 3a90 	vmov	r3, s15
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	425b      	neglt	r3, r3
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077bc:	dc00      	bgt.n	80077c0 <Heater_Controller+0x14c>
			break;
 80077be:	e00c      	b.n	80077da <Heater_Controller+0x166>
			else if (abs(heaterobj->target - heaterobj->current) > DEVIATION) heaterobj->state = TRANSIENT;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2202      	movs	r2, #2
 80077c4:	609a      	str	r2, [r3, #8]
			break;
 80077c6:	e008      	b.n	80077da <Heater_Controller+0x166>

		default:
			heaterobj->onFlag = 0;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2020 	strb.w	r2, [r3, #32]
			heaterobj->state = OFF;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]
 80077d6:	e000      	b.n	80077da <Heater_Controller+0x166>
			break;
 80077d8:	bf00      	nop
	}
}
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}
 80077e0:	20000204 	.word	0x20000204
 80077e4:	2000021c 	.word	0x2000021c

080077e8 <Systick_Sensor_IRQ>:
/* Functions */

// 카운트 값을 1씩 줄이기 위한 인터럽트 핸들러.
// HAL_InitTick 함수에서 Systick 인터럽트가 1ms마다 실행되도록 설정되므로,
// 핸들러의 실행주기도 1ms이다.
void Systick_Sensor_IRQ() {
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
	// 카운트가 0이 아니면, waitcount의 값을 1 감소시킨다.
	// 현재 카운트 node를 읽으면, next node가 없을 때까지 다음으로 넘어가 읽기를 반복한다.
	if (waitcount_node_storage.size > 0) {
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <Systick_Sensor_IRQ+0x48>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d015      	beq.n	8007822 <Systick_Sensor_IRQ+0x3a>
		waitcount_node *cur_node = waitcount_node_storage.frontPtr;
 80077f6:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <Systick_Sensor_IRQ+0x48>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 80077fc:	e00e      	b.n	800781c <Systick_Sensor_IRQ+0x34>
			cur_node->data -= (cur_node->data == 0) ? 0 : 1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	2a00      	cmp	r2, #0
 8007808:	bf14      	ite	ne
 800780a:	2201      	movne	r2, #1
 800780c:	2200      	moveq	r2, #0
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	1a9a      	subs	r2, r3, r2
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	601a      	str	r2, [r3, #0]
			cur_node = cur_node->next;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1ed      	bne.n	80077fe <Systick_Sensor_IRQ+0x16>
		}
	}
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	2000079c 	.word	0x2000079c

08007834 <Custom_Tempsensor>:

tempsensor_t* Custom_Tempsensor(SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t interval) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	80fb      	strh	r3, [r7, #6]
	// Setting methods
	tempsensor_t *sensorobj = (tempsensor_t*) calloc(1, sizeof(tempsensor_t));
 8007844:	212c      	movs	r1, #44	; 0x2c
 8007846:	2001      	movs	r0, #1
 8007848:	f001 fe5e 	bl	8009508 <calloc>
 800784c:	4603      	mov	r3, r0
 800784e:	617b      	str	r3, [r7, #20]

	sensorobj->read = sensor_read;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <Custom_Tempsensor+0x8c>)
 8007854:	619a      	str	r2, [r3, #24]
	sensorobj->is_readable = sensor_is_readable;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4a1a      	ldr	r2, [pc, #104]	; (80078c4 <Custom_Tempsensor+0x90>)
 800785a:	61da      	str	r2, [r3, #28]
	sensorobj->set_interval = sensor_set_interval;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <Custom_Tempsensor+0x94>)
 8007860:	621a      	str	r2, [r3, #32]
	sensorobj->get_interval = sensor_get_interval;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4a19      	ldr	r2, [pc, #100]	; (80078cc <Custom_Tempsensor+0x98>)
 8007866:	625a      	str	r2, [r3, #36]	; 0x24
	sensorobj->read_waitcount = sensor_read_waitcount;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <Custom_Tempsensor+0x9c>)
 800786c:	629a      	str	r2, [r3, #40]	; 0x28


	// Setting fields
	sensorobj->hspi = hspi;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	601a      	str	r2, [r3, #0]
	sensorobj->__sensor_interval = interval;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	60da      	str	r2, [r3, #12]

	// Setting CS pin
	sensorobj->csPin = GPIO_Pin;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	829a      	strh	r2, [r3, #20]
	sensorobj->csPort = GPIOx;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	605a      	str	r2, [r3, #4]

	// Pulling up CS pin
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	6858      	ldr	r0, [r3, #4]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	8a9b      	ldrh	r3, [r3, #20]
 800788e:	2201      	movs	r2, #1
 8007890:	4619      	mov	r1, r3
 8007892:	f7fa fd6f 	bl	8002374 <HAL_GPIO_WritePin>

	// setting waitCount object
	waitcount_node *waitCntNode = (waitcount_node*) calloc(1, sizeof(waitcount_node));
 8007896:	2108      	movs	r1, #8
 8007898:	2001      	movs	r0, #1
 800789a:	f001 fe35 	bl	8009508 <calloc>
 800789e:	4603      	mov	r3, r0
 80078a0:	613b      	str	r3, [r7, #16]
	sensorobj->waitCount = &(waitCntNode->data);
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	609a      	str	r2, [r3, #8]
	*(sensorobj->waitCount) = 10;	// for initialize&interrupt working test
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	220a      	movs	r2, #10
 80078ae:	601a      	str	r2, [r3, #0]
	Add_GlobalWaitCountNode(waitCntNode);
 80078b0:	6938      	ldr	r0, [r7, #16]
 80078b2:	f000 f80f 	bl	80078d4 <Add_GlobalWaitCountNode>

	return sensorobj;
 80078b6:	697b      	ldr	r3, [r7, #20]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	080079a5 	.word	0x080079a5
 80078c4:	080079f3 	.word	0x080079f3
 80078c8:	08007a17 	.word	0x08007a17
 80078cc:	08007a33 	.word	0x08007a33
 80078d0:	08007a4b 	.word	0x08007a4b

080078d4 <Add_GlobalWaitCountNode>:

void Add_GlobalWaitCountNode(waitcount_node *waitCntNode) {
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	if (waitCntNode != NULL) {
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d013      	beq.n	800790a <Add_GlobalWaitCountNode+0x36>

		if (waitcount_node_storage.size == 0) {
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <Add_GlobalWaitCountNode+0x44>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <Add_GlobalWaitCountNode+0x1e>
			waitcount_node_storage.frontPtr = waitCntNode;
 80078ea:	4a0b      	ldr	r2, [pc, #44]	; (8007918 <Add_GlobalWaitCountNode+0x44>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	e003      	b.n	80078fa <Add_GlobalWaitCountNode+0x26>
		} else {
			waitcount_node_storage.backPtr->next = waitCntNode;
 80078f2:	4b09      	ldr	r3, [pc, #36]	; (8007918 <Add_GlobalWaitCountNode+0x44>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	605a      	str	r2, [r3, #4]

		}
		waitcount_node_storage.backPtr = waitCntNode;
 80078fa:	4a07      	ldr	r2, [pc, #28]	; (8007918 <Add_GlobalWaitCountNode+0x44>)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6053      	str	r3, [r2, #4]
		waitcount_node_storage.size++;
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <Add_GlobalWaitCountNode+0x44>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	3301      	adds	r3, #1
 8007906:	4a04      	ldr	r2, [pc, #16]	; (8007918 <Add_GlobalWaitCountNode+0x44>)
 8007908:	6093      	str	r3, [r2, #8]
	}
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000079c 	.word	0x2000079c

0800791c <__sensor_read>:

/* Methods */
__weak float __sensor_read(tempsensor_t *sensorobj) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float temp = 0;
 8007924:	f04f 0300 	mov.w	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]

	// 16비트 데이터를 MSB부터 차례대로 받는다.
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_RESET);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6858      	ldr	r0, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	8a9b      	ldrh	r3, [r3, #20]
 8007932:	2200      	movs	r2, #0
 8007934:	4619      	mov	r1, r3
 8007936:	f7fa fd1d 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(sensorobj->hspi, pData, 1, 50);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f107 0108 	add.w	r1, r7, #8
 8007942:	2332      	movs	r3, #50	; 0x32
 8007944:	2201      	movs	r2, #1
 8007946:	f7fb fb3c 	bl	8002fc2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6858      	ldr	r0, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8a9b      	ldrh	r3, [r3, #20]
 8007952:	2201      	movs	r2, #1
 8007954:	4619      	mov	r1, r3
 8007956:	f7fa fd0d 	bl	8002374 <HAL_GPIO_WritePin>

	if (((pData[0]|(pData[1]<<8))>>2)& 0x0001)
 800795a:	7a3b      	ldrb	r3, [r7, #8]
 800795c:	461a      	mov	r2, r3
 800795e:	7a7b      	ldrb	r3, [r7, #9]
 8007960:	021b      	lsls	r3, r3, #8
 8007962:	4313      	orrs	r3, r2
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <__sensor_read+0x56>
	   return NAN;
 800796c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80079a0 <__sensor_read+0x84>
 8007970:	e011      	b.n	8007996 <__sensor_read+0x7a>
	temp = ((((pData[0]|pData[1]<<8)))>>3);
 8007972:	7a3b      	ldrb	r3, [r7, #8]
 8007974:	461a      	mov	r2, r3
 8007976:	7a7b      	ldrb	r3, [r7, #9]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4313      	orrs	r3, r2
 800797c:	10db      	asrs	r3, r3, #3
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007986:	edc7 7a03 	vstr	s15, [r7, #12]

	return temp * 0.25f;
 800798a:	edd7 7a03 	vldr	s15, [r7, #12]
 800798e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8007992:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007996:	eeb0 0a67 	vmov.f32	s0, s15
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	7fc00000 	.word	0x7fc00000

080079a4 <sensor_read>:
float sensor_read(tempsensor_t *sensorobj) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
	float data = .0f;
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
	if (sensorobj->is_readable(sensorobj)) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00d      	beq.n	80079dc <sensor_read+0x38>
		data = __sensor_read(sensorobj);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff ffab 	bl	800791c <__sensor_read>
 80079c6:	ed87 0a03 	vstr	s0, [r7, #12]
		*(sensorobj->waitCount) = sensorobj->__sensor_interval;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	68d2      	ldr	r2, [r2, #12]
 80079d2:	601a      	str	r2, [r3, #0]
		sensorobj->lastTemp = data;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	611a      	str	r2, [r3, #16]
 80079da:	e002      	b.n	80079e2 <sensor_read+0x3e>
	} else {
		data = sensorobj->lastTemp;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	ee07 3a90 	vmov	s15, r3
}
 80079e8:	eeb0 0a67 	vmov.f32	s0, s15
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <sensor_is_readable>:
bool sensor_is_readable(tempsensor_t *sensorobj) {
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
	return !(sensorobj->read_waitcount(sensorobj));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bf0c      	ite	eq
 8007a08:	2301      	moveq	r3, #1
 8007a0a:	2300      	movne	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <sensor_set_interval>:

void sensor_set_interval(tempsensor_t *sensorobj, uint32_t interval) {
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
	sensorobj->__sensor_interval = interval;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	60da      	str	r2, [r3, #12]
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <sensor_get_interval>:
uint32_t sensor_get_interval(tempsensor_t *sensorobj) {
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
	return sensorobj->__sensor_interval;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <sensor_read_waitcount>:
uint32_t sensor_read_waitcount(tempsensor_t *sensorobj) {
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
	return *(sensorobj->waitCount);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	681b      	ldr	r3, [r3, #0]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <testTemp>:

extern heater_t *heaterTop;
extern heater_t *heaterBottom;

void testTemp();
void testTemp(){
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
	SwitchLED(COLOR_BLACK);
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f7ff fa51 	bl	8006f14 <Switch_LED>
	for(;;){
		uint16_t sw = Switch_Read();
 8007a72:	f7ff fb25 	bl	80070c0 <Switch_Read>
 8007a76:	4603      	mov	r3, r0
 8007a78:	81fb      	strh	r3, [r7, #14]
		if(sw) break;
 8007a7a:	89fb      	ldrh	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d136      	bne.n	8007aee <testTemp+0x8a>
		if (tempTop->is_readable(tempTop) && tempBottom->is_readable(tempBottom)) {
 8007a80:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <testTemp+0x94>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	4a1c      	ldr	r2, [pc, #112]	; (8007af8 <testTemp+0x94>)
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4798      	blx	r3
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0ee      	beq.n	8007a72 <testTemp+0xe>
 8007a94:	4b19      	ldr	r3, [pc, #100]	; (8007afc <testTemp+0x98>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	4a18      	ldr	r2, [pc, #96]	; (8007afc <testTemp+0x98>)
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4798      	blx	r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0e4      	beq.n	8007a72 <testTemp+0xe>
			float temp1 = tempTop->read(tempTop);
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <testTemp+0x94>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	4a12      	ldr	r2, [pc, #72]	; (8007af8 <testTemp+0x94>)
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4798      	blx	r3
 8007ab6:	ed87 0a02 	vstr	s0, [r7, #8]
			float temp2 = tempBottom->read(tempBottom);
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <testTemp+0x98>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	4a0e      	ldr	r2, [pc, #56]	; (8007afc <testTemp+0x98>)
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	ed87 0a01 	vstr	s0, [r7, #4]
			OLED_Printf("/s/0/rtempU: /y%f\r\n", temp1);
 8007acc:	68b8      	ldr	r0, [r7, #8]
 8007ace:	f7f8 fd43 	bl	8000558 <__aeabi_f2d>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	480a      	ldr	r0, [pc, #40]	; (8007b00 <testTemp+0x9c>)
 8007ad8:	f7fe fd56 	bl	8006588 <OLED_Printf>
			OLED_Printf("/s/1/rtempD: /y%f\r\n", temp2);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7f8 fd3b 	bl	8000558 <__aeabi_f2d>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4807      	ldr	r0, [pc, #28]	; (8007b04 <testTemp+0xa0>)
 8007ae8:	f7fe fd4e 	bl	8006588 <OLED_Printf>
	for(;;){
 8007aec:	e7c1      	b.n	8007a72 <testTemp+0xe>
		if(sw) break;
 8007aee:	bf00      	nop
//			printf("temp: %f\r\n", temp1->read(temp1));
		}
	}
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000794 	.word	0x20000794
 8007afc:	2000061c 	.word	0x2000061c
 8007b00:	0800c4c4 	.word	0x0800c4c4
 8007b04:	0800c4d8 	.word	0x0800c4d8

08007b08 <GraphUITest>:


void profile();
void test();
void DCFan_Set(uint8_t level);
void GraphUITest(){
 8007b08:	b5b0      	push	{r4, r5, r7, lr}
 8007b0a:	b098      	sub	sp, #96	; 0x60
 8007b0c:	af02      	add	r7, sp, #8
	float xData[10] = {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0};
 8007b0e:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <GraphUITest+0x64>)
 8007b10:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8007b14:	461d      	mov	r5, r3
 8007b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b22:	e884 0003 	stmia.w	r4, {r0, r1}
	float yData[10] = {30.0, 80.0, 50.0, 80.0, 50.0, 80.0, 50.0, 60.0, 80.0, 60.0};
 8007b26:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <GraphUITest+0x68>)
 8007b28:	1d3c      	adds	r4, r7, #4
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b38:	e884 0003 	stmia.w	r4, {r0, r1}
	graph_t * g = Graph_InitEdge(xData, yData, 1.0, 6.0);
 8007b3c:	1d39      	adds	r1, r7, #4
 8007b3e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8007b42:	2334      	movs	r3, #52	; 0x34
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8007b4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007b4e:	2301      	movs	r3, #1
 8007b50:	220a      	movs	r2, #10
 8007b52:	f7fd fb63 	bl	800521c <_Graph_Init>
 8007b56:	6578      	str	r0, [r7, #84]	; 0x54
	Graph_UI(g);
 8007b58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007b5a:	f7fd fbe9 	bl	8005330 <Graph_UI>
	Graph_Delete(g);
 8007b5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007b60:	f7fd fbd0 	bl	8005304 <Graph_Delete>
}
 8007b64:	bf00      	nop
 8007b66:	3758      	adds	r7, #88	; 0x58
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b6c:	0800c4ec 	.word	0x0800c4ec
 8007b70:	0800c514 	.word	0x0800c514

08007b74 <profile>:

void profile(){
 8007b74:	b5b0      	push	{r4, r5, r7, lr}
 8007b76:	b0a2      	sub	sp, #136	; 0x88
 8007b78:	af02      	add	r7, sp, #8
	float tData[10] = {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0};
 8007b7a:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <profile+0xa4>)
 8007b7c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007b80:	461d      	mov	r5, r3
 8007b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b8e:	e884 0003 	stmia.w	r4, {r0, r1}
	float uData[10] = {30.0, 80.0, 50.0, 80.0, 50.0, 80.0, 50.0, 60.0, 80.0, 30.0};
 8007b92:	4b22      	ldr	r3, [pc, #136]	; (8007c1c <profile+0xa8>)
 8007b94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007b98:	461d      	mov	r5, r3
 8007b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ba6:	e884 0003 	stmia.w	r4, {r0, r1}
	float dData[10] = {30.0, 100.0, 70.0, 100.0, 70.0, 90.0, 70.0, 60.0, 50.0, 30.0};
 8007baa:	4b1d      	ldr	r3, [pc, #116]	; (8007c20 <profile+0xac>)
 8007bac:	463c      	mov	r4, r7
 8007bae:	461d      	mov	r5, r3
 8007bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007bbc:	e884 0003 	stmia.w	r4, {r0, r1}
	graph_t * g1 = Graph_InitEdge(tData, uData, 1.0, 6.0);
 8007bc0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007bc4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007bc8:	2334      	movs	r3, #52	; 0x34
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8007bd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	220a      	movs	r2, #10
 8007bd8:	f7fd fb20 	bl	800521c <_Graph_Init>
 8007bdc:	67f8      	str	r0, [r7, #124]	; 0x7c
	graph_t * g2 = Graph_InitEdge(tData, dData, 1.0, 6.0);
 8007bde:	4639      	mov	r1, r7
 8007be0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8007be4:	2334      	movs	r3, #52	; 0x34
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8007bec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	220a      	movs	r2, #10
 8007bf4:	f7fd fb12 	bl	800521c <_Graph_Init>
 8007bf8:	67b8      	str	r0, [r7, #120]	; 0x78
	Graph_UI2(g1, g2);
 8007bfa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007bfc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007bfe:	f7fd fde1 	bl	80057c4 <Graph_UI2>
	Graph_Delete(g1);
 8007c02:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007c04:	f7fd fb7e 	bl	8005304 <Graph_Delete>
	Graph_Delete(g2);
 8007c08:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8007c0a:	f7fd fb7b 	bl	8005304 <Graph_Delete>
}
 8007c0e:	bf00      	nop
 8007c10:	3780      	adds	r7, #128	; 0x80
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bdb0      	pop	{r4, r5, r7, pc}
 8007c16:	bf00      	nop
 8007c18:	0800c4ec 	.word	0x0800c4ec
 8007c1c:	0800c53c 	.word	0x0800c53c
 8007c20:	0800c564 	.word	0x0800c564

08007c24 <Menu_Setup>:

};

const uint8_t menuCnt = sizeof(menuList) / sizeof(Menu_t);

void Menu_Setup(){
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af02      	add	r7, sp, #8
	OLED_Begin();
 8007c2a:	f7fe fa7f 	bl	800612c <OLED_Begin>
	OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt > 6 ? 6 : menuCnt, 0xFFFF00);
 8007c2e:	2305      	movs	r3, #5
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	bf28      	it	cs
 8007c34:	2306      	movcs	r3, #6
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <Menu_Setup+0x60>)
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	9200      	str	r2, [sp, #0]
 8007c40:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <Menu_Setup+0x64>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	4911      	ldr	r1, [pc, #68]	; (8007c8c <Menu_Setup+0x68>)
 8007c46:	4812      	ldr	r0, [pc, #72]	; (8007c90 <Menu_Setup+0x6c>)
 8007c48:	f7ff f898 	bl	8006d7c <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8007c4c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007c50:	2000      	movs	r0, #0
 8007c52:	f7ff f8df 	bl	8006e14 <OLED_Cursor>
	SwitchLED(menuList[0].color);
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <Menu_Setup+0x64>)
 8007c58:	891b      	ldrh	r3, [r3, #8]
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <Menu_Setup+0x64>)
 8007c6a:	891b      	ldrh	r3, [r3, #8]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7ff f94b 	bl	8006f14 <Switch_LED>
}
 8007c7e:	bf00      	nop
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	00ffff00 	.word	0x00ffff00
 8007c88:	20000234 	.word	0x20000234
 8007c8c:	00ff8800 	.word	0x00ff8800
 8007c90:	0800c5e8 	.word	0x0800c5e8

08007c94 <Menu>:

void Menu(){
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af02      	add	r7, sp, #8
	Menu_Setup();
 8007c9a:	f7ff ffc3 	bl	8007c24 <Menu_Setup>
	uint8_t idx = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	71fb      	strb	r3, [r7, #7]
	for(;;){
		uint16_t sw = Switch_Read();
 8007ca2:	f7ff fa0d 	bl	80070c0 <Switch_Read>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8007caa:	88bb      	ldrh	r3, [r7, #4]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d002      	beq.n	8007cb6 <Menu+0x22>
 8007cb0:	88bb      	ldrh	r3, [r7, #4]
 8007cb2:	2b22      	cmp	r3, #34	; 0x22
 8007cb4:	d17f      	bne.n	8007db6 <Menu+0x122>
			idx+=menuCnt - 1;
 8007cb6:	2205      	movs	r2, #5
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	4413      	add	r3, r2
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8007cc2:	2205      	movs	r2, #5
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cca:	fb02 f201 	mul.w	r2, r2, r1
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && (idx % 6 == 5 || idx == menuCnt - 1)){
 8007cd2:	2305      	movs	r3, #5
 8007cd4:	2b06      	cmp	r3, #6
 8007cd6:	d93c      	bls.n	8007d52 <Menu+0xbe>
 8007cd8:	79fa      	ldrb	r2, [r7, #7]
 8007cda:	4b95      	ldr	r3, [pc, #596]	; (8007f30 <Menu+0x29c>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	0899      	lsrs	r1, r3, #2
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	440b      	add	r3, r1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d004      	beq.n	8007cfc <Menu+0x68>
 8007cf2:	79fa      	ldrb	r2, [r7, #7]
 8007cf4:	2305      	movs	r3, #5
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d12a      	bne.n	8007d52 <Menu+0xbe>
				OLED_Clear();
 8007cfc:	f7fe f9e6 	bl	80060cc <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + (idx / 6) * 6, menuCnt - (idx / 6) * 6 > 6 ? 6 : menuCnt - (idx / 6) * 6, 0xFFFF00);
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	4a8b      	ldr	r2, [pc, #556]	; (8007f30 <Menu+0x29c>)
 8007d04:	fba2 2303 	umull	r2, r3, r2, r3
 8007d08:	089b      	lsrs	r3, r3, #2
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4613      	mov	r3, r2
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	4413      	add	r3, r2
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	461a      	mov	r2, r3
 8007d18:	4b86      	ldr	r3, [pc, #536]	; (8007f34 <Menu+0x2a0>)
 8007d1a:	18d1      	adds	r1, r2, r3
 8007d1c:	2305      	movs	r3, #5
 8007d1e:	4618      	mov	r0, r3
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	4a83      	ldr	r2, [pc, #524]	; (8007f30 <Menu+0x29c>)
 8007d24:	fba2 2303 	umull	r2, r3, r2, r3
 8007d28:	089b      	lsrs	r3, r3, #2
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4613      	mov	r3, r2
 8007d30:	0092      	lsls	r2, r2, #2
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	4403      	add	r3, r0
 8007d38:	2b06      	cmp	r3, #6
 8007d3a:	bfa8      	it	ge
 8007d3c:	2306      	movge	r3, #6
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b7d      	ldr	r3, [pc, #500]	; (8007f38 <Menu+0x2a4>)
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	9200      	str	r2, [sp, #0]
 8007d46:	460b      	mov	r3, r1
 8007d48:	2200      	movs	r2, #0
 8007d4a:	497c      	ldr	r1, [pc, #496]	; (8007f3c <Menu+0x2a8>)
 8007d4c:	487c      	ldr	r0, [pc, #496]	; (8007f40 <Menu+0x2ac>)
 8007d4e:	f7ff f815 	bl	8006d7c <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 8007d52:	79fa      	ldrb	r2, [r7, #7]
 8007d54:	4b76      	ldr	r3, [pc, #472]	; (8007f30 <Menu+0x29c>)
 8007d56:	fba3 1302 	umull	r1, r3, r3, r2
 8007d5a:	0899      	lsrs	r1, r3, #2
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	440b      	add	r3, r1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff f851 	bl	8006e14 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8007d72:	79fa      	ldrb	r2, [r7, #7]
 8007d74:	496f      	ldr	r1, [pc, #444]	; (8007f34 <Menu+0x2a0>)
 8007d76:	4613      	mov	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	3308      	adds	r3, #8
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007d90:	b298      	uxth	r0, r3
 8007d92:	79fa      	ldrb	r2, [r7, #7]
 8007d94:	4967      	ldr	r1, [pc, #412]	; (8007f34 <Menu+0x2a0>)
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	3308      	adds	r3, #8
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	4619      	mov	r1, r3
 8007db0:	f7ff f8b0 	bl	8006f14 <Switch_LED>
 8007db4:	e0ba      	b.n	8007f2c <Menu+0x298>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8007db6:	88bb      	ldrh	r3, [r7, #4]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d002      	beq.n	8007dc2 <Menu+0x12e>
 8007dbc:	88bb      	ldrh	r3, [r7, #4]
 8007dbe:	2b28      	cmp	r3, #40	; 0x28
 8007dc0:	d167      	bne.n	8007e92 <Menu+0x1fe>
			idx+=1;
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8007dc8:	2205      	movs	r2, #5
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dd0:	fb02 f201 	mul.w	r2, r2, r1
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && idx % 6 == 0){
 8007dd8:	2305      	movs	r3, #5
 8007dda:	2b06      	cmp	r3, #6
 8007ddc:	d927      	bls.n	8007e2e <Menu+0x19a>
 8007dde:	79fa      	ldrb	r2, [r7, #7]
 8007de0:	4b53      	ldr	r3, [pc, #332]	; (8007f30 <Menu+0x29c>)
 8007de2:	fba3 1302 	umull	r1, r3, r3, r2
 8007de6:	0899      	lsrs	r1, r3, #2
 8007de8:	460b      	mov	r3, r1
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	440b      	add	r3, r1
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d11a      	bne.n	8007e2e <Menu+0x19a>
				OLED_Clear();
 8007df8:	f7fe f968 	bl	80060cc <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + idx, menuCnt - idx > 6 ? 6 : menuCnt - idx, 0xFFFF00);
 8007dfc:	79fa      	ldrb	r2, [r7, #7]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	461a      	mov	r2, r3
 8007e08:	4b4a      	ldr	r3, [pc, #296]	; (8007f34 <Menu+0x2a0>)
 8007e0a:	441a      	add	r2, r3
 8007e0c:	2305      	movs	r3, #5
 8007e0e:	4619      	mov	r1, r3
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	1acb      	subs	r3, r1, r3
 8007e14:	2b06      	cmp	r3, #6
 8007e16:	bfa8      	it	ge
 8007e18:	2306      	movge	r3, #6
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4b46      	ldr	r3, [pc, #280]	; (8007f38 <Menu+0x2a4>)
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	9100      	str	r1, [sp, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	2200      	movs	r2, #0
 8007e26:	4945      	ldr	r1, [pc, #276]	; (8007f3c <Menu+0x2a8>)
 8007e28:	4845      	ldr	r0, [pc, #276]	; (8007f40 <Menu+0x2ac>)
 8007e2a:	f7fe ffa7 	bl	8006d7c <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 8007e2e:	79fa      	ldrb	r2, [r7, #7]
 8007e30:	4b3f      	ldr	r3, [pc, #252]	; (8007f30 <Menu+0x29c>)
 8007e32:	fba3 1302 	umull	r1, r3, r3, r2
 8007e36:	0899      	lsrs	r1, r3, #2
 8007e38:	460b      	mov	r3, r1
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	440b      	add	r3, r1
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe ffe3 	bl	8006e14 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8007e4e:	79fa      	ldrb	r2, [r7, #7]
 8007e50:	4938      	ldr	r1, [pc, #224]	; (8007f34 <Menu+0x2a0>)
 8007e52:	4613      	mov	r3, r2
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	0a1b      	lsrs	r3, r3, #8
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007e6c:	b298      	uxth	r0, r3
 8007e6e:	79fa      	ldrb	r2, [r7, #7]
 8007e70:	4930      	ldr	r1, [pc, #192]	; (8007f34 <Menu+0x2a0>)
 8007e72:	4613      	mov	r3, r2
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	f7ff f842 	bl	8006f14 <Switch_LED>
 8007e90:	e04c      	b.n	8007f2c <Menu+0x298>
		}
		else if(sw == SW_RIGHT){
 8007e92:	88bb      	ldrh	r3, [r7, #4]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	f47f af04 	bne.w	8007ca2 <Menu+0xe>
			OLED_Clear();//OLED를 지웁니다.
 8007e9a:	f7fe f917 	bl	80060cc <OLED_Clear>
			menuList[idx].function();
 8007e9e:	79fa      	ldrb	r2, [r7, #7]
 8007ea0:	4924      	ldr	r1, [pc, #144]	; (8007f34 <Menu+0x2a0>)
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4798      	blx	r3
			OLED_Clear();//OLED를 지웁니다.
 8007eb0:	f7fe f90c 	bl	80060cc <OLED_Clear>
			OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt, 0xFFFF00);
 8007eb4:	2305      	movs	r3, #5
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <Menu+0x2a4>)
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	9200      	str	r2, [sp, #0]
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <Menu+0x2a0>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	491e      	ldr	r1, [pc, #120]	; (8007f3c <Menu+0x2a8>)
 8007ec4:	481e      	ldr	r0, [pc, #120]	; (8007f40 <Menu+0x2ac>)
 8007ec6:	f7fe ff59 	bl	8006d7c <OLED_MenuUI>
			OLED_Cursor(idx % 6, 0xFF0000);
 8007eca:	79fa      	ldrb	r2, [r7, #7]
 8007ecc:	4b18      	ldr	r3, [pc, #96]	; (8007f30 <Menu+0x29c>)
 8007ece:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed2:	0899      	lsrs	r1, r3, #2
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	440b      	add	r3, r1
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe ff95 	bl	8006e14 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8007eea:	79fa      	ldrb	r2, [r7, #7]
 8007eec:	4911      	ldr	r1, [pc, #68]	; (8007f34 <Menu+0x2a0>)
 8007eee:	4613      	mov	r3, r2
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3308      	adds	r3, #8
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007f08:	b298      	uxth	r0, r3
 8007f0a:	79fa      	ldrb	r2, [r7, #7]
 8007f0c:	4909      	ldr	r1, [pc, #36]	; (8007f34 <Menu+0x2a0>)
 8007f0e:	4613      	mov	r3, r2
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	3308      	adds	r3, #8
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	4619      	mov	r1, r3
 8007f28:	f7fe fff4 	bl	8006f14 <Switch_LED>
	for(;;){
 8007f2c:	e6b9      	b.n	8007ca2 <Menu+0xe>
 8007f2e:	bf00      	nop
 8007f30:	aaaaaaab 	.word	0xaaaaaaab
 8007f34:	20000234 	.word	0x20000234
 8007f38:	00ffff00 	.word	0x00ffff00
 8007f3c:	00ff8800 	.word	0x00ff8800
 8007f40:	0800c5e8 	.word	0x0800c5e8

08007f44 <test>:
		{NULL, "HD    : OFF", COLOR_RED},
		{NULL, "FAN   : OFF", COLOR_RED},
};

//출력 단자가 잘 동작하는지 테스트합니다.
void test(){
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af02      	add	r7, sp, #8
	uint8_t idx = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	71fb      	strb	r3, [r7, #7]
	OLED_MenuUI("< TEST", 0xFF00FF, 0x000000, testList, 6, 0x6600FF);
 8007f4e:	4bc1      	ldr	r3, [pc, #772]	; (8008254 <test+0x310>)
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	2306      	movs	r3, #6
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	4bc0      	ldr	r3, [pc, #768]	; (8008258 <test+0x314>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
 8007f5e:	48bf      	ldr	r0, [pc, #764]	; (800825c <test+0x318>)
 8007f60:	f7fe ff0c 	bl	8006d7c <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8007f64:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007f68:	2000      	movs	r0, #0
 8007f6a:	f7fe ff53 	bl	8006e14 <OLED_Cursor>
	SwitchLED(testList[0].color);
 8007f6e:	4bba      	ldr	r3, [pc, #744]	; (8008258 <test+0x314>)
 8007f70:	891b      	ldrh	r3, [r3, #8]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	4bb5      	ldr	r3, [pc, #724]	; (8008258 <test+0x314>)
 8007f82:	891b      	ldrh	r3, [r3, #8]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fe ffbf 	bl	8006f14 <Switch_LED>
	testList[0].color = COLOR_RED;
 8007f96:	4bb0      	ldr	r3, [pc, #704]	; (8008258 <test+0x314>)
 8007f98:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007f9c:	811a      	strh	r2, [r3, #8]
	testList[1].color = COLOR_RED;
 8007f9e:	4bae      	ldr	r3, [pc, #696]	; (8008258 <test+0x314>)
 8007fa0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007fa4:	829a      	strh	r2, [r3, #20]
	testList[2].color = COLOR_RED;
 8007fa6:	4bac      	ldr	r3, [pc, #688]	; (8008258 <test+0x314>)
 8007fa8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007fac:	841a      	strh	r2, [r3, #32]
	testList[3].color = COLOR_RED;
 8007fae:	4baa      	ldr	r3, [pc, #680]	; (8008258 <test+0x314>)
 8007fb0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007fb4:	859a      	strh	r2, [r3, #44]	; 0x2c
	testList[4].color = COLOR_RED;
 8007fb6:	4ba8      	ldr	r3, [pc, #672]	; (8008258 <test+0x314>)
 8007fb8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007fbc:	871a      	strh	r2, [r3, #56]	; 0x38
	testList[5].color = COLOR_RED;
 8007fbe:	4ba6      	ldr	r3, [pc, #664]	; (8008258 <test+0x314>)
 8007fc0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	for(;;){
		uint16_t sw = Switch_Read();
 8007fc8:	f7ff f87a 	bl	80070c0 <Switch_Read>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8007fd0:	88bb      	ldrh	r3, [r7, #4]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d002      	beq.n	8007fdc <test+0x98>
 8007fd6:	88bb      	ldrh	r3, [r7, #4]
 8007fd8:	2b22      	cmp	r3, #34	; 0x22
 8007fda:	d135      	bne.n	8008048 <test+0x104>
			idx+=5;
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	3305      	adds	r3, #5
 8007fe0:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 8007fe2:	79fa      	ldrb	r2, [r7, #7]
 8007fe4:	4b9e      	ldr	r3, [pc, #632]	; (8008260 <test+0x31c>)
 8007fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8007fea:	0899      	lsrs	r1, r3, #2
 8007fec:	460b      	mov	r3, r1
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	440b      	add	r3, r1
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe ff08 	bl	8006e14 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 8008004:	79fa      	ldrb	r2, [r7, #7]
 8008006:	4994      	ldr	r1, [pc, #592]	; (8008258 <test+0x314>)
 8008008:	4613      	mov	r3, r2
 800800a:	005b      	lsls	r3, r3, #1
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	3308      	adds	r3, #8
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	0a1b      	lsrs	r3, r3, #8
 8008018:	b29b      	uxth	r3, r3
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	b29b      	uxth	r3, r3
 800801e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8008022:	b298      	uxth	r0, r3
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	498c      	ldr	r1, [pc, #560]	; (8008258 <test+0x314>)
 8008028:	4613      	mov	r3, r2
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	3308      	adds	r3, #8
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	b29b      	uxth	r3, r3
 800803a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800803e:	b29b      	uxth	r3, r3
 8008040:	4619      	mov	r1, r3
 8008042:	f7fe ff67 	bl	8006f14 <Switch_LED>
 8008046:	e153      	b.n	80082f0 <test+0x3ac>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8008048:	88bb      	ldrh	r3, [r7, #4]
 800804a:	2b08      	cmp	r3, #8
 800804c:	d002      	beq.n	8008054 <test+0x110>
 800804e:	88bb      	ldrh	r3, [r7, #4]
 8008050:	2b28      	cmp	r3, #40	; 0x28
 8008052:	d135      	bne.n	80080c0 <test+0x17c>
			idx+=1;
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	3301      	adds	r3, #1
 8008058:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 800805a:	79fa      	ldrb	r2, [r7, #7]
 800805c:	4b80      	ldr	r3, [pc, #512]	; (8008260 <test+0x31c>)
 800805e:	fba3 1302 	umull	r1, r3, r3, r2
 8008062:	0899      	lsrs	r1, r3, #2
 8008064:	460b      	mov	r3, r1
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	440b      	add	r3, r1
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fecc 	bl	8006e14 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 800807c:	79fa      	ldrb	r2, [r7, #7]
 800807e:	4976      	ldr	r1, [pc, #472]	; (8008258 <test+0x314>)
 8008080:	4613      	mov	r3, r2
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	3308      	adds	r3, #8
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	b29b      	uxth	r3, r3
 8008096:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800809a:	b298      	uxth	r0, r3
 800809c:	79fa      	ldrb	r2, [r7, #7]
 800809e:	496e      	ldr	r1, [pc, #440]	; (8008258 <test+0x314>)
 80080a0:	4613      	mov	r3, r2
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	3308      	adds	r3, #8
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	4619      	mov	r1, r3
 80080ba:	f7fe ff2b 	bl	8006f14 <Switch_LED>
 80080be:	e117      	b.n	80082f0 <test+0x3ac>
		}
		else if(sw == SW_LEFT){
 80080c0:	88bb      	ldrh	r3, [r7, #4]
 80080c2:	2b10      	cmp	r3, #16
 80080c4:	f000 8115 	beq.w	80082f2 <test+0x3ae>
			break;
		}
		else if(sw == SW_ENTER){
 80080c8:	88bb      	ldrh	r3, [r7, #4]
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	f47f af7c 	bne.w	8007fc8 <test+0x84>
			if(testList[idx].color == COLOR_RED){
 80080d0:	79fa      	ldrb	r2, [r7, #7]
 80080d2:	4961      	ldr	r1, [pc, #388]	; (8008258 <test+0x314>)
 80080d4:	4613      	mov	r3, r2
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	3308      	adds	r3, #8
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080e6:	d158      	bne.n	800819a <test+0x256>
				testList[idx].color = COLOR_WHITE;
 80080e8:	79fa      	ldrb	r2, [r7, #7]
 80080ea:	495b      	ldr	r1, [pc, #364]	; (8008258 <test+0x314>)
 80080ec:	4613      	mov	r3, r2
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	440b      	add	r3, r1
 80080f6:	3308      	adds	r3, #8
 80080f8:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 80080fc:	801a      	strh	r2, [r3, #0]
				switch(idx){
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	2b05      	cmp	r3, #5
 8008102:	f200 80d4 	bhi.w	80082ae <test+0x36a>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <test+0x1c8>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008125 	.word	0x08008125
 8008110:	08008139 	.word	0x08008139
 8008114:	0800814d 	.word	0x0800814d
 8008118:	08008161 	.word	0x08008161
 800811c:	08008175 	.word	0x08008175
 8008120:	08008187 	.word	0x08008187
				case 0:
					// Convection Fan
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 8008124:	2200      	movs	r2, #0
 8008126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800812a:	484e      	ldr	r0, [pc, #312]	; (8008264 <test+0x320>)
 800812c:	f7fa f922 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: ON ");
 8008130:	484d      	ldr	r0, [pc, #308]	; (8008268 <test+0x324>)
 8008132:	f7fe fa29 	bl	8006588 <OLED_Printf>
					break;
 8008136:	e0ba      	b.n	80082ae <test+0x36a>
				case 1:
					// Rotisserie Motor
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 8008138:	2200      	movs	r2, #0
 800813a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800813e:	4849      	ldr	r0, [pc, #292]	; (8008264 <test+0x320>)
 8008140:	f7fa f918 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: ON ");
 8008144:	4849      	ldr	r0, [pc, #292]	; (800826c <test+0x328>)
 8008146:	f7fe fa1f 	bl	8006588 <OLED_Printf>
					break;
 800814a:	e0b0      	b.n	80082ae <test+0x36a>
				case 2:
					// Lamp
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 0);
 800814c:	2200      	movs	r2, #0
 800814e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008152:	4844      	ldr	r0, [pc, #272]	; (8008264 <test+0x320>)
 8008154:	f7fa f90e 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : ON ");
 8008158:	4845      	ldr	r0, [pc, #276]	; (8008270 <test+0x32c>)
 800815a:	f7fe fa15 	bl	8006588 <OLED_Printf>
					break;
 800815e:	e0a6      	b.n	80082ae <test+0x36a>
				case 3:
					// Heater Top
					HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 0);
 8008160:	2200      	movs	r2, #0
 8008162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008166:	4843      	ldr	r0, [pc, #268]	; (8008274 <test+0x330>)
 8008168:	f7fa f904 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : ON ");
 800816c:	4842      	ldr	r0, [pc, #264]	; (8008278 <test+0x334>)
 800816e:	f7fe fa0b 	bl	8006588 <OLED_Printf>
					break;
 8008172:	e09c      	b.n	80082ae <test+0x36a>
				case 4:
					// Heater Bottom
					HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 0);
 8008174:	2200      	movs	r2, #0
 8008176:	2180      	movs	r1, #128	; 0x80
 8008178:	483e      	ldr	r0, [pc, #248]	; (8008274 <test+0x330>)
 800817a:	f7fa f8fb 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : ON ");
 800817e:	483f      	ldr	r0, [pc, #252]	; (800827c <test+0x338>)
 8008180:	f7fe fa02 	bl	8006588 <OLED_Printf>
					break;
 8008184:	e093      	b.n	80082ae <test+0x36a>
				case 5:
					// Mainboard Fan
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 1);
 8008186:	2201      	movs	r2, #1
 8008188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800818c:	4839      	ldr	r0, [pc, #228]	; (8008274 <test+0x330>)
 800818e:	f7fa f8f1 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : ON ");
 8008192:	483b      	ldr	r0, [pc, #236]	; (8008280 <test+0x33c>)
 8008194:	f7fe f9f8 	bl	8006588 <OLED_Printf>
					break;
 8008198:	e089      	b.n	80082ae <test+0x36a>
				}
			}
			else if(testList[idx].color == COLOR_WHITE){
 800819a:	79fa      	ldrb	r2, [r7, #7]
 800819c:	492e      	ldr	r1, [pc, #184]	; (8008258 <test+0x314>)
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3308      	adds	r3, #8
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d17b      	bne.n	80082ac <test+0x368>
				testList[idx].color = COLOR_RED;
 80081b4:	79fa      	ldrb	r2, [r7, #7]
 80081b6:	4928      	ldr	r1, [pc, #160]	; (8008258 <test+0x314>)
 80081b8:	4613      	mov	r3, r2
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3308      	adds	r3, #8
 80081c4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80081c8:	801a      	strh	r2, [r3, #0]
				switch(idx){
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	2b05      	cmp	r3, #5
 80081ce:	d86e      	bhi.n	80082ae <test+0x36a>
 80081d0:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <test+0x294>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	080081f1 	.word	0x080081f1
 80081dc:	08008205 	.word	0x08008205
 80081e0:	08008219 	.word	0x08008219
 80081e4:	0800822d 	.word	0x0800822d
 80081e8:	08008241 	.word	0x08008241
 80081ec:	08008299 	.word	0x08008299
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80081f0:	2201      	movs	r2, #1
 80081f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081f6:	481b      	ldr	r0, [pc, #108]	; (8008264 <test+0x320>)
 80081f8:	f7fa f8bc 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: OFF");
 80081fc:	4821      	ldr	r0, [pc, #132]	; (8008284 <test+0x340>)
 80081fe:	f7fe f9c3 	bl	8006588 <OLED_Printf>
					break;
 8008202:	e054      	b.n	80082ae <test+0x36a>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 8008204:	2201      	movs	r2, #1
 8008206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800820a:	4816      	ldr	r0, [pc, #88]	; (8008264 <test+0x320>)
 800820c:	f7fa f8b2 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: OFF");
 8008210:	481d      	ldr	r0, [pc, #116]	; (8008288 <test+0x344>)
 8008212:	f7fe f9b9 	bl	8006588 <OLED_Printf>
					break;
 8008216:	e04a      	b.n	80082ae <test+0x36a>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 8008218:	2201      	movs	r2, #1
 800821a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800821e:	4811      	ldr	r0, [pc, #68]	; (8008264 <test+0x320>)
 8008220:	f7fa f8a8 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : OFF");
 8008224:	4819      	ldr	r0, [pc, #100]	; (800828c <test+0x348>)
 8008226:	f7fe f9af 	bl	8006588 <OLED_Printf>
					break;
 800822a:	e040      	b.n	80082ae <test+0x36a>
				case 3:
					HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 1);
 800822c:	2201      	movs	r2, #1
 800822e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008232:	4810      	ldr	r0, [pc, #64]	; (8008274 <test+0x330>)
 8008234:	f7fa f89e 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : OFF");
 8008238:	4815      	ldr	r0, [pc, #84]	; (8008290 <test+0x34c>)
 800823a:	f7fe f9a5 	bl	8006588 <OLED_Printf>
					break;
 800823e:	e036      	b.n	80082ae <test+0x36a>
				case 4:
					HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 1);
 8008240:	2201      	movs	r2, #1
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	480b      	ldr	r0, [pc, #44]	; (8008274 <test+0x330>)
 8008246:	f7fa f895 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : OFF");
 800824a:	4812      	ldr	r0, [pc, #72]	; (8008294 <test+0x350>)
 800824c:	f7fe f99c 	bl	8006588 <OLED_Printf>
					break;
 8008250:	e02d      	b.n	80082ae <test+0x36a>
 8008252:	bf00      	nop
 8008254:	006600ff 	.word	0x006600ff
 8008258:	20000270 	.word	0x20000270
 800825c:	0800c63c 	.word	0x0800c63c
 8008260:	aaaaaaab 	.word	0xaaaaaaab
 8008264:	40020000 	.word	0x40020000
 8008268:	0800c644 	.word	0x0800c644
 800826c:	0800c654 	.word	0x0800c654
 8008270:	0800c664 	.word	0x0800c664
 8008274:	40020800 	.word	0x40020800
 8008278:	0800c674 	.word	0x0800c674
 800827c:	0800c684 	.word	0x0800c684
 8008280:	0800c694 	.word	0x0800c694
 8008284:	0800c6a4 	.word	0x0800c6a4
 8008288:	0800c6b4 	.word	0x0800c6b4
 800828c:	0800c6c4 	.word	0x0800c6c4
 8008290:	0800c6d4 	.word	0x0800c6d4
 8008294:	0800c6e4 	.word	0x0800c6e4
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 8008298:	2200      	movs	r2, #0
 800829a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800829e:	4829      	ldr	r0, [pc, #164]	; (8008344 <test+0x400>)
 80082a0:	f7fa f868 	bl	8002374 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : OFF");
 80082a4:	4828      	ldr	r0, [pc, #160]	; (8008348 <test+0x404>)
 80082a6:	f7fe f96f 	bl	8006588 <OLED_Printf>
					break;
 80082aa:	e000      	b.n	80082ae <test+0x36a>
				}
			}
 80082ac:	bf00      	nop

			SwitchLED(testList[idx].color);
 80082ae:	79fa      	ldrb	r2, [r7, #7]
 80082b0:	4926      	ldr	r1, [pc, #152]	; (800834c <test+0x408>)
 80082b2:	4613      	mov	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	3308      	adds	r3, #8
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80082cc:	b298      	uxth	r0, r3
 80082ce:	79fa      	ldrb	r2, [r7, #7]
 80082d0:	491e      	ldr	r1, [pc, #120]	; (800834c <test+0x408>)
 80082d2:	4613      	mov	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	440b      	add	r3, r1
 80082dc:	3308      	adds	r3, #8
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	4619      	mov	r1, r3
 80082ec:	f7fe fe12 	bl	8006f14 <Switch_LED>
	for(;;){
 80082f0:	e66a      	b.n	8007fc8 <test+0x84>
			break;
 80082f2:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80082f4:	2201      	movs	r2, #1
 80082f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082fa:	4815      	ldr	r0, [pc, #84]	; (8008350 <test+0x40c>)
 80082fc:	f7fa f83a 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 8008300:	2201      	movs	r2, #1
 8008302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008306:	4812      	ldr	r0, [pc, #72]	; (8008350 <test+0x40c>)
 8008308:	f7fa f834 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 800830c:	2201      	movs	r2, #1
 800830e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008312:	480f      	ldr	r0, [pc, #60]	; (8008350 <test+0x40c>)
 8008314:	f7fa f82e 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 1);
 8008318:	2201      	movs	r2, #1
 800831a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800831e:	4809      	ldr	r0, [pc, #36]	; (8008344 <test+0x400>)
 8008320:	f7fa f828 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 1);
 8008324:	2201      	movs	r2, #1
 8008326:	2180      	movs	r1, #128	; 0x80
 8008328:	4806      	ldr	r0, [pc, #24]	; (8008344 <test+0x400>)
 800832a:	f7fa f823 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 800832e:	2200      	movs	r2, #0
 8008330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008334:	4803      	ldr	r0, [pc, #12]	; (8008344 <test+0x400>)
 8008336:	f7fa f81d 	bl	8002374 <HAL_GPIO_WritePin>

}
 800833a:	bf00      	nop
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40020800 	.word	0x40020800
 8008348:	0800c6f4 	.word	0x0800c6f4
 800834c:	20000270 	.word	0x20000270
 8008350:	40020000 	.word	0x40020000

08008354 <testHeat>:

// FLAG_TEMPSENSOR_DEBUG가 설정되면 온도를 직접 제어할 수 있음.
// 디버깅을 위한 state to string 저장소
char *heaterStateStr[] = {"OFF", "PREHEATING", "TRANSIENT", "STEADY"};
char *heaterStateStr2[] = {"OFF  ", "PREHT", "TRANS", "STEAD"};
void testHeat(){
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af02      	add	r7, sp, #8
	SwitchLED(COLOR_SKY);
 800835a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800835e:	20d4      	movs	r0, #212	; 0xd4
 8008360:	f7fe fdd8 	bl	8006f14 <Switch_LED>
	OLED_MenuUI("< TEST HEAT", 0xFF0000, 0x000000, testHeatList, 6, 0xFFFF00);
 8008364:	4ba7      	ldr	r3, [pc, #668]	; (8008604 <testHeat+0x2b0>)
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	2306      	movs	r3, #6
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	4ba6      	ldr	r3, [pc, #664]	; (8008608 <testHeat+0x2b4>)
 800836e:	2200      	movs	r2, #0
 8008370:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8008374:	48a5      	ldr	r0, [pc, #660]	; (800860c <testHeat+0x2b8>)
 8008376:	f7fe fd01 	bl	8006d7c <OLED_MenuUI>
	OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 800837a:	4ba5      	ldr	r3, [pc, #660]	; (8008610 <testHeat+0x2bc>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	4618      	mov	r0, r3
 8008382:	f7f8 f8e9 	bl	8000558 <__aeabi_f2d>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	48a2      	ldr	r0, [pc, #648]	; (8008614 <testHeat+0x2c0>)
 800838c:	f7fe f8fc 	bl	8006588 <OLED_Printf>
	OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 8008390:	4ba1      	ldr	r3, [pc, #644]	; (8008618 <testHeat+0x2c4>)
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <testHeat+0x4c>
 800839c:	4b9f      	ldr	r3, [pc, #636]	; (800861c <testHeat+0x2c8>)
 800839e:	e000      	b.n	80083a2 <testHeat+0x4e>
 80083a0:	4b9f      	ldr	r3, [pc, #636]	; (8008620 <testHeat+0x2cc>)
 80083a2:	4619      	mov	r1, r3
 80083a4:	489f      	ldr	r0, [pc, #636]	; (8008624 <testHeat+0x2d0>)
 80083a6:	f7fe f8ef 	bl	8006588 <OLED_Printf>
	OLED_Cursor(0, 0xFF6600);
 80083aa:	499f      	ldr	r1, [pc, #636]	; (8008628 <testHeat+0x2d4>)
 80083ac:	2000      	movs	r0, #0
 80083ae:	f7fe fd31 	bl	8006e14 <OLED_Cursor>
	int idx = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]
	heaterTop->start(heaterTop);
 80083b6:	4b96      	ldr	r3, [pc, #600]	; (8008610 <testHeat+0x2bc>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	4a94      	ldr	r2, [pc, #592]	; (8008610 <testHeat+0x2bc>)
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);	// Convection 팬 끄기
 80083c4:	2201      	movs	r2, #1
 80083c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083ca:	4893      	ldr	r0, [pc, #588]	; (8008618 <testHeat+0x2c4>)
 80083cc:	f7f9 ffd2 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_SET);	// 냉각팬 켜기
 80083d0:	2201      	movs	r2, #1
 80083d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083d6:	4895      	ldr	r0, [pc, #596]	; (800862c <testHeat+0x2d8>)
 80083d8:	f7f9 ffcc 	bl	8002374 <HAL_GPIO_WritePin>
	uint32_t pTime = HAL_GetTick();
 80083dc:	f7f9 fcec 	bl	8001db8 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]
	uint32_t adjust = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
	for(;;){
		uint16_t sw = Switch_Read();
 80083e6:	f7fe fe6b 	bl	80070c0 <Switch_Read>
 80083ea:	4603      	mov	r3, r0
 80083ec:	817b      	strh	r3, [r7, #10]

		if(sw==SW_LEFT) break;
 80083ee:	897b      	ldrh	r3, [r7, #10]
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	f000 80fa 	beq.w	80085ea <testHeat+0x296>
		else if (sw==SW_TOP && !adjust) {
 80083f6:	897b      	ldrh	r3, [r7, #10]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d113      	bne.n	8008424 <testHeat+0xd0>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d110      	bne.n	8008424 <testHeat+0xd0>
			idx -= (idx>0)?1:0;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	bfcc      	ite	gt
 8008408:	2301      	movgt	r3, #1
 800840a:	2300      	movle	r3, #0
 800840c:	b2db      	uxtb	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	617b      	str	r3, [r7, #20]
			OLED_Cursor(idx, 0xFF6600);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	4983      	ldr	r1, [pc, #524]	; (8008628 <testHeat+0x2d4>)
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe fcf9 	bl	8006e14 <OLED_Cursor>
 8008422:	e0a2      	b.n	800856a <testHeat+0x216>
		}
		else if (sw==SW_BOTTOM && !adjust) {
 8008424:	897b      	ldrh	r3, [r7, #10]
 8008426:	2b08      	cmp	r3, #8
 8008428:	d113      	bne.n	8008452 <testHeat+0xfe>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d110      	bne.n	8008452 <testHeat+0xfe>
			idx += (idx<2)?1:0;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b01      	cmp	r3, #1
 8008434:	bfd4      	ite	le
 8008436:	2301      	movle	r3, #1
 8008438:	2300      	movgt	r3, #0
 800843a:	b2db      	uxtb	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	617b      	str	r3, [r7, #20]
			OLED_Cursor(idx, 0xFF6600);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	4977      	ldr	r1, [pc, #476]	; (8008628 <testHeat+0x2d4>)
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fce2 	bl	8006e14 <OLED_Cursor>
 8008450:	e08b      	b.n	800856a <testHeat+0x216>
		}
		else if ((sw==SW_TOP || sw==SW_TOP_LONG) && adjust) {
 8008452:	897b      	ldrh	r3, [r7, #10]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d002      	beq.n	800845e <testHeat+0x10a>
 8008458:	897b      	ldrh	r3, [r7, #10]
 800845a:	2b22      	cmp	r3, #34	; 0x22
 800845c:	d11e      	bne.n	800849c <testHeat+0x148>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d01b      	beq.n	800849c <testHeat+0x148>
			switch(idx) {
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d17f      	bne.n	800856a <testHeat+0x216>
			case 0:
				tempTop->lastTemp += 10.0f;
				break;
#endif
			case 1:
				heaterTop->target += 1.0f;
 800846a:	4b69      	ldr	r3, [pc, #420]	; (8008610 <testHeat+0x2bc>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008472:	4b67      	ldr	r3, [pc, #412]	; (8008610 <testHeat+0x2bc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800847e:	edc3 7a04 	vstr	s15, [r3, #16]
				OLED_Printf("/s$29/r%3.2f  \r\n", heaterTop->target);
 8008482:	4b63      	ldr	r3, [pc, #396]	; (8008610 <testHeat+0x2bc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	4618      	mov	r0, r3
 800848a:	f7f8 f865 	bl	8000558 <__aeabi_f2d>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4867      	ldr	r0, [pc, #412]	; (8008630 <testHeat+0x2dc>)
 8008494:	f7fe f878 	bl	8006588 <OLED_Printf>
				break;
 8008498:	bf00      	nop
			switch(idx) {
 800849a:	e066      	b.n	800856a <testHeat+0x216>
			}
		}
		else if ((sw==SW_BOTTOM || sw==SW_BOTTOM_LONG) && adjust) {
 800849c:	897b      	ldrh	r3, [r7, #10]
 800849e:	2b08      	cmp	r3, #8
 80084a0:	d002      	beq.n	80084a8 <testHeat+0x154>
 80084a2:	897b      	ldrh	r3, [r7, #10]
 80084a4:	2b28      	cmp	r3, #40	; 0x28
 80084a6:	d11e      	bne.n	80084e6 <testHeat+0x192>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01b      	beq.n	80084e6 <testHeat+0x192>
			switch(idx) {
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d15a      	bne.n	800856a <testHeat+0x216>
			case 0:
				tempTop->lastTemp -= 10.0f;
				break;
#endif
			case 1:
				heaterTop->target -= 1.0f;
 80084b4:	4b56      	ldr	r3, [pc, #344]	; (8008610 <testHeat+0x2bc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80084bc:	4b54      	ldr	r3, [pc, #336]	; (8008610 <testHeat+0x2bc>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084c8:	edc3 7a04 	vstr	s15, [r3, #16]
				OLED_Printf("/s$29/r%3.2f  \r\n", heaterTop->target);
 80084cc:	4b50      	ldr	r3, [pc, #320]	; (8008610 <testHeat+0x2bc>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f8 f840 	bl	8000558 <__aeabi_f2d>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4854      	ldr	r0, [pc, #336]	; (8008630 <testHeat+0x2dc>)
 80084de:	f7fe f853 	bl	8006588 <OLED_Printf>
				break;
 80084e2:	bf00      	nop
			switch(idx) {
 80084e4:	e041      	b.n	800856a <testHeat+0x216>
			}
		}
		else if(sw == SW_ENTER){
 80084e6:	897b      	ldrh	r3, [r7, #10]
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d13d      	bne.n	8008568 <testHeat+0x214>
			switch(idx){
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d003      	beq.n	80084fa <testHeat+0x1a6>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d01a      	beq.n	800852e <testHeat+0x1da>
 80084f8:	e037      	b.n	800856a <testHeat+0x216>
			case 1:
				adjust = !adjust;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	60fb      	str	r3, [r7, #12]
				OLED_Printf("/s$29%s%3.2f  \r\n", adjust?"/r":"/y", heaterTop->target);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <testHeat+0x1be>
 800850e:	4c49      	ldr	r4, [pc, #292]	; (8008634 <testHeat+0x2e0>)
 8008510:	e000      	b.n	8008514 <testHeat+0x1c0>
 8008512:	4c49      	ldr	r4, [pc, #292]	; (8008638 <testHeat+0x2e4>)
 8008514:	4b3e      	ldr	r3, [pc, #248]	; (8008610 <testHeat+0x2bc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	4618      	mov	r0, r3
 800851c:	f7f8 f81c 	bl	8000558 <__aeabi_f2d>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4621      	mov	r1, r4
 8008526:	4845      	ldr	r0, [pc, #276]	; (800863c <testHeat+0x2e8>)
 8008528:	f7fe f82e 	bl	8006588 <OLED_Printf>
				break;
 800852c:	e01d      	b.n	800856a <testHeat+0x216>
			case 2:
				HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, (Motor1_GPIO_Port->ODR) & Motor1_Pin?0:1);
 800852e:	4b3a      	ldr	r3, [pc, #232]	; (8008618 <testHeat+0x2c4>)
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008536:	2b00      	cmp	r3, #0
 8008538:	bf0c      	ite	eq
 800853a:	2301      	moveq	r3, #1
 800853c:	2300      	movne	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008546:	4834      	ldr	r0, [pc, #208]	; (8008618 <testHeat+0x2c4>)
 8008548:	f7f9 ff14 	bl	8002374 <HAL_GPIO_WritePin>
				OLED_Printf("/s$39/r%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 800854c:	4b32      	ldr	r3, [pc, #200]	; (8008618 <testHeat+0x2c4>)
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <testHeat+0x208>
 8008558:	4b30      	ldr	r3, [pc, #192]	; (800861c <testHeat+0x2c8>)
 800855a:	e000      	b.n	800855e <testHeat+0x20a>
 800855c:	4b30      	ldr	r3, [pc, #192]	; (8008620 <testHeat+0x2cc>)
 800855e:	4619      	mov	r1, r3
 8008560:	4837      	ldr	r0, [pc, #220]	; (8008640 <testHeat+0x2ec>)
 8008562:	f7fe f811 	bl	8006588 <OLED_Printf>
				break;
 8008566:	e000      	b.n	800856a <testHeat+0x216>
			}
		}
 8008568:	bf00      	nop
		float temp = tempTop->read(tempTop);
 800856a:	4b36      	ldr	r3, [pc, #216]	; (8008644 <testHeat+0x2f0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	4a34      	ldr	r2, [pc, #208]	; (8008644 <testHeat+0x2f0>)
 8008572:	6812      	ldr	r2, [r2, #0]
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	ed87 0a01 	vstr	s0, [r7, #4]
		if(HAL_GetTick() - pTime > 50){
 800857c:	f7f9 fc1c 	bl	8001db8 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b32      	cmp	r3, #50	; 0x32
 8008588:	d906      	bls.n	8008598 <testHeat+0x244>
			pTime += 50;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3332      	adds	r3, #50	; 0x32
 800858e:	613b      	str	r3, [r7, #16]
			Switch_LED_Temperature(temp);
 8008590:	ed97 0a01 	vldr	s0, [r7, #4]
 8008594:	f7fe fcd6 	bl	8006f44 <Switch_LED_Temperature>
		}
		OLED_Printf("/s$19/y%3.2f  \r\n", temp);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7f7 ffdd 	bl	8000558 <__aeabi_f2d>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4829      	ldr	r0, [pc, #164]	; (8008648 <testHeat+0x2f4>)
 80085a4:	f7fd fff0 	bl	8006588 <OLED_Printf>
		OLED_Printf("/s$49/p%3.2f  \r\n", heaterTop->duty);
 80085a8:	4b19      	ldr	r3, [pc, #100]	; (8008610 <testHeat+0x2bc>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7f7 ffd2 	bl	8000558 <__aeabi_f2d>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4824      	ldr	r0, [pc, #144]	; (800864c <testHeat+0x2f8>)
 80085ba:	f7fd ffe5 	bl	8006588 <OLED_Printf>
		OLED_Printf("/s$59/p%s     \r\n", heaterStateStr[heaterTop->state]);
 80085be:	4b14      	ldr	r3, [pc, #80]	; (8008610 <testHeat+0x2bc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	4a22      	ldr	r2, [pc, #136]	; (8008650 <testHeat+0x2fc>)
 80085c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ca:	4619      	mov	r1, r3
 80085cc:	4821      	ldr	r0, [pc, #132]	; (8008654 <testHeat+0x300>)
 80085ce:	f7fd ffdb 	bl	8006588 <OLED_Printf>
		OLED_Printf("/s$69/p%3.2f  \r\n", heaterTop->errorSum);
 80085d2:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <testHeat+0x2bc>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7f7 ffbd 	bl	8000558 <__aeabi_f2d>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	481d      	ldr	r0, [pc, #116]	; (8008658 <testHeat+0x304>)
 80085e4:	f7fd ffd0 	bl	8006588 <OLED_Printf>
	for(;;){
 80085e8:	e6fd      	b.n	80083e6 <testHeat+0x92>
		if(sw==SW_LEFT) break;
 80085ea:	bf00      	nop
	}
	heaterTop->stop(heaterTop);
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <testHeat+0x2bc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	4a07      	ldr	r2, [pc, #28]	; (8008610 <testHeat+0x2bc>)
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	4610      	mov	r0, r2
 80085f8:	4798      	blx	r3
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd90      	pop	{r4, r7, pc}
 8008602:	bf00      	nop
 8008604:	00ffff00 	.word	0x00ffff00
 8008608:	200002b8 	.word	0x200002b8
 800860c:	0800c7a8 	.word	0x0800c7a8
 8008610:	20000620 	.word	0x20000620
 8008614:	0800c7b4 	.word	0x0800c7b4
 8008618:	40020000 	.word	0x40020000
 800861c:	0800c764 	.word	0x0800c764
 8008620:	0800c7c8 	.word	0x0800c7c8
 8008624:	0800c7cc 	.word	0x0800c7cc
 8008628:	00ff6600 	.word	0x00ff6600
 800862c:	40020800 	.word	0x40020800
 8008630:	0800c7d8 	.word	0x0800c7d8
 8008634:	0800c7ec 	.word	0x0800c7ec
 8008638:	0800c7f0 	.word	0x0800c7f0
 800863c:	0800c7f4 	.word	0x0800c7f4
 8008640:	0800c808 	.word	0x0800c808
 8008644:	20000794 	.word	0x20000794
 8008648:	0800c814 	.word	0x0800c814
 800864c:	0800c828 	.word	0x0800c828
 8008650:	20000300 	.word	0x20000300
 8008654:	0800c83c 	.word	0x0800c83c
 8008658:	0800c850 	.word	0x0800c850
 800865c:	00000000 	.word	0x00000000

08008660 <Heat>:
		{NULL, "/s/3/wConvect:", COLOR_SKY},
		{NULL, "/s/4/wdutyU:", COLOR_SKY},
		{NULL, "/s/5/wstateU:", COLOR_SKY},
		{NULL, "/s/6/wEsumU:", COLOR_SKY}
};
void Heat(graph_t * gr){//Graph에 따라 분 단위로 시간 경과에 따라 온도를 설정합니다.
 8008660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008664:	b08e      	sub	sp, #56	; 0x38
 8008666:	af02      	add	r7, sp, #8
 8008668:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 800866a:	f7fd fd2f 	bl	80060cc <OLED_Clear>
	OLED_MenuUI("< HEAT$0F>", 0xFF0000, 0x000000, testHeatList, 6, 0xFFFF00);
 800866e:	4b6c      	ldr	r3, [pc, #432]	; (8008820 <Heat+0x1c0>)
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	2306      	movs	r3, #6
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	4b6b      	ldr	r3, [pc, #428]	; (8008824 <Heat+0x1c4>)
 8008678:	2200      	movs	r2, #0
 800867a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800867e:	486a      	ldr	r0, [pc, #424]	; (8008828 <Heat+0x1c8>)
 8008680:	f7fe fb7c 	bl	8006d7c <OLED_MenuUI>
	heaterTop -> target = gr->yData[0];
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	4b68      	ldr	r3, [pc, #416]	; (800882c <Heat+0x1cc>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6812      	ldr	r2, [r2, #0]
 800868e:	611a      	str	r2, [r3, #16]
	OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 8008690:	4b66      	ldr	r3, [pc, #408]	; (800882c <Heat+0x1cc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 ff5e 	bl	8000558 <__aeabi_f2d>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4863      	ldr	r0, [pc, #396]	; (8008830 <Heat+0x1d0>)
 80086a2:	f7fd ff71 	bl	8006588 <OLED_Printf>
	OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 80086a6:	4b63      	ldr	r3, [pc, #396]	; (8008834 <Heat+0x1d4>)
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <Heat+0x56>
 80086b2:	4b61      	ldr	r3, [pc, #388]	; (8008838 <Heat+0x1d8>)
 80086b4:	e000      	b.n	80086b8 <Heat+0x58>
 80086b6:	4b61      	ldr	r3, [pc, #388]	; (800883c <Heat+0x1dc>)
 80086b8:	4619      	mov	r1, r3
 80086ba:	4861      	ldr	r0, [pc, #388]	; (8008840 <Heat+0x1e0>)
 80086bc:	f7fd ff64 	bl	8006588 <OLED_Printf>
	OLED_Cursor(2, 0xFF6600);
 80086c0:	4960      	ldr	r1, [pc, #384]	; (8008844 <Heat+0x1e4>)
 80086c2:	2002      	movs	r0, #2
 80086c4:	f7fe fba6 	bl	8006e14 <OLED_Cursor>
	int idx = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	float interval = (gr->xData[idx + 1] - gr->xData[idx]) * 60000.00;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	3301      	adds	r3, #1
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	ed93 7a00 	vldr	s14, [r3]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	edd3 7a00 	vldr	s15, [r3]
 80086ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086ee:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008848 <Heat+0x1e8>
 80086f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float target1 = gr->yData[idx];
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
	float target2 = gr->yData[idx + 1];
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	3301      	adds	r3, #1
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	623b      	str	r3, [r7, #32]
	heaterTop->start(heaterTop);
 8008718:	4b44      	ldr	r3, [pc, #272]	; (800882c <Heat+0x1cc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	4a43      	ldr	r2, [pc, #268]	; (800882c <Heat+0x1cc>)
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	4610      	mov	r0, r2
 8008724:	4798      	blx	r3
	HAL_Delay(500);
 8008726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800872a:	f7f9 fb51 	bl	8001dd0 <HAL_Delay>
	heaterTop -> target = target1;
 800872e:	4b3f      	ldr	r3, [pc, #252]	; (800882c <Heat+0x1cc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008734:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);	// Convection 팬 끄기
 8008736:	2201      	movs	r2, #1
 8008738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800873c:	483d      	ldr	r0, [pc, #244]	; (8008834 <Heat+0x1d4>)
 800873e:	f7f9 fe19 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_SET);	// 냉각팬 켜기
 8008742:	2201      	movs	r2, #1
 8008744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008748:	4840      	ldr	r0, [pc, #256]	; (800884c <Heat+0x1ec>)
 800874a:	f7f9 fe13 	bl	8002374 <HAL_GPIO_WritePin>
	uint32_t heatTime = HAL_GetTick();
 800874e:	f7f9 fb33 	bl	8001db8 <HAL_GetTick>
 8008752:	6138      	str	r0, [r7, #16]
	uint32_t pTime = HAL_GetTick();
 8008754:	f7f9 fb30 	bl	8001db8 <HAL_GetTick>
 8008758:	61f8      	str	r0, [r7, #28]
	uint32_t gTime = HAL_GetTick();
 800875a:	f7f9 fb2d 	bl	8001db8 <HAL_GetTick>
 800875e:	61b8      	str	r0, [r7, #24]
	uint32_t graphmode = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
	for(;;){
		uint16_t sw = Switch_Read();
 8008764:	f7fe fcac 	bl	80070c0 <Switch_Read>
 8008768:	4603      	mov	r3, r0
 800876a:	81fb      	strh	r3, [r7, #14]
		if(sw==SW_LEFT) break;
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	2b10      	cmp	r3, #16
 8008770:	f000 8249 	beq.w	8008c06 <Heat+0x5a6>
		else if(sw == SW_ENTER && !graphmode){
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	2b04      	cmp	r3, #4
 8008778:	d11f      	bne.n	80087ba <Heat+0x15a>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11c      	bne.n	80087ba <Heat+0x15a>
			HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, (Motor1_GPIO_Port->ODR) & Motor1_Pin?0:1);
 8008780:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <Heat+0x1d4>)
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf0c      	ite	eq
 800878c:	2301      	moveq	r3, #1
 800878e:	2300      	movne	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008798:	4826      	ldr	r0, [pc, #152]	; (8008834 <Heat+0x1d4>)
 800879a:	f7f9 fdeb 	bl	8002374 <HAL_GPIO_WritePin>
			OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 800879e:	4b25      	ldr	r3, [pc, #148]	; (8008834 <Heat+0x1d4>)
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <Heat+0x14e>
 80087aa:	4b23      	ldr	r3, [pc, #140]	; (8008838 <Heat+0x1d8>)
 80087ac:	e000      	b.n	80087b0 <Heat+0x150>
 80087ae:	4b23      	ldr	r3, [pc, #140]	; (800883c <Heat+0x1dc>)
 80087b0:	4619      	mov	r1, r3
 80087b2:	4823      	ldr	r0, [pc, #140]	; (8008840 <Heat+0x1e0>)
 80087b4:	f7fd fee8 	bl	8006588 <OLED_Printf>
 80087b8:	e053      	b.n	8008862 <Heat+0x202>
		}
		else if(sw == SW_RIGHT){
 80087ba:	89fb      	ldrh	r3, [r7, #14]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d150      	bne.n	8008862 <Heat+0x202>
			graphmode = !graphmode;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bf0c      	ite	eq
 80087c6:	2301      	moveq	r3, #1
 80087c8:	2300      	movne	r3, #0
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	617b      	str	r3, [r7, #20]
			OLED_Clear();
 80087ce:	f7fd fc7d 	bl	80060cc <OLED_Clear>
			gTime = HAL_GetTick();
 80087d2:	f7f9 faf1 	bl	8001db8 <HAL_GetTick>
 80087d6:	61b8      	str	r0, [r7, #24]
			if(!graphmode){
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d141      	bne.n	8008862 <Heat+0x202>
				OLED_Clear();
 80087de:	f7fd fc75 	bl	80060cc <OLED_Clear>
				OLED_MenuUI("< HEAT$0F>", 0xFF0000, 0x000000, testHeatList, 6, 0xFFFF00);
 80087e2:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <Heat+0x1c0>)
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	2306      	movs	r3, #6
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	4b0e      	ldr	r3, [pc, #56]	; (8008824 <Heat+0x1c4>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80087f2:	480d      	ldr	r0, [pc, #52]	; (8008828 <Heat+0x1c8>)
 80087f4:	f7fe fac2 	bl	8006d7c <OLED_MenuUI>
				OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <Heat+0x1cc>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7f7 feaa 	bl	8000558 <__aeabi_f2d>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4809      	ldr	r0, [pc, #36]	; (8008830 <Heat+0x1d0>)
 800880a:	f7fd febd 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <Heat+0x1d4>)
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01a      	beq.n	8008850 <Heat+0x1f0>
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <Heat+0x1d8>)
 800881c:	e019      	b.n	8008852 <Heat+0x1f2>
 800881e:	bf00      	nop
 8008820:	00ffff00 	.word	0x00ffff00
 8008824:	200002b8 	.word	0x200002b8
 8008828:	0800c864 	.word	0x0800c864
 800882c:	20000620 	.word	0x20000620
 8008830:	0800c7b4 	.word	0x0800c7b4
 8008834:	40020000 	.word	0x40020000
 8008838:	0800c764 	.word	0x0800c764
 800883c:	0800c7c8 	.word	0x0800c7c8
 8008840:	0800c7cc 	.word	0x0800c7cc
 8008844:	00ff6600 	.word	0x00ff6600
 8008848:	476a6000 	.word	0x476a6000
 800884c:	40020800 	.word	0x40020800
 8008850:	4bb5      	ldr	r3, [pc, #724]	; (8008b28 <Heat+0x4c8>)
 8008852:	4619      	mov	r1, r3
 8008854:	48b5      	ldr	r0, [pc, #724]	; (8008b2c <Heat+0x4cc>)
 8008856:	f7fd fe97 	bl	8006588 <OLED_Printf>
				OLED_Cursor(2, 0xFF6600);
 800885a:	49b5      	ldr	r1, [pc, #724]	; (8008b30 <Heat+0x4d0>)
 800885c:	2002      	movs	r0, #2
 800885e:	f7fe fad9 	bl	8006e14 <OLED_Cursor>
			}
		}

		float temp = tempTop->read(tempTop);
 8008862:	4bb4      	ldr	r3, [pc, #720]	; (8008b34 <Heat+0x4d4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	4ab2      	ldr	r2, [pc, #712]	; (8008b34 <Heat+0x4d4>)
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	ed87 0a02 	vstr	s0, [r7, #8]
		if(HAL_GetTick() - heatTime > (uint32_t)(gr->xData[idx + 1] * 60000.0) && idx < gr->count - 2){
 8008874:	f7f9 faa0 	bl	8001db8 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad4      	subs	r4, r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	3301      	adds	r3, #1
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f7f7 fe63 	bl	8000558 <__aeabi_f2d>
 8008892:	a3a3      	add	r3, pc, #652	; (adr r3, 8008b20 <Heat+0x4c0>)
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f7 feb6 	bl	8000608 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4610      	mov	r0, r2
 80088a2:	4619      	mov	r1, r3
 80088a4:	f7f8 f988 	bl	8000bb8 <__aeabi_d2uiz>
 80088a8:	4603      	mov	r3, r0
 80088aa:	429c      	cmp	r4, r3
 80088ac:	d92e      	bls.n	800890c <Heat+0x2ac>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	891b      	ldrh	r3, [r3, #8]
 80088b2:	3b02      	subs	r3, #2
 80088b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b6:	429a      	cmp	r2, r3
 80088b8:	da28      	bge.n	800890c <Heat+0x2ac>
			idx++;
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	3301      	adds	r3, #1
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c
			interval = (gr->xData[idx + 1] - gr->xData[idx]) * 60000.00;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	3301      	adds	r3, #1
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	ed93 7a00 	vldr	s14, [r3]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	edd3 7a00 	vldr	s15, [r3]
 80088de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088e2:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8008b58 <Heat+0x4f8>
 80088e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			target1 = gr->yData[idx];
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
			target2 = gr->yData[idx + 1];
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	3301      	adds	r3, #1
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	623b      	str	r3, [r7, #32]
		}
		if(HAL_GetTick() - pTime > 100){
 800890c:	f7f9 fa54 	bl	8001db8 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b64      	cmp	r3, #100	; 0x64
 8008918:	f240 8120 	bls.w	8008b5c <Heat+0x4fc>
			pTime += 100;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	3364      	adds	r3, #100	; 0x64
 8008920:	61fb      	str	r3, [r7, #28]
			Switch_LED_Temperature(temp);
 8008922:	ed97 0a02 	vldr	s0, [r7, #8]
 8008926:	f7fe fb0d 	bl	8006f44 <Switch_LED_Temperature>
			//온도 프로필에서 설정한 값의 2배 속도로 움직이게 하여 안정적으로 작동시킵니다.
			if(heaterTop->target < target2){
 800892a:	4b83      	ldr	r3, [pc, #524]	; (8008b38 <Heat+0x4d8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008932:	ed97 7a08 	vldr	s14, [r7, #32]
 8008936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893e:	dd55      	ble.n	80089ec <Heat+0x38c>
				heaterTop->target += 200.0 * ((target2 - target1) > 0? (target2 - target1) : (target1 - target2)) / interval;
 8008940:	4b7d      	ldr	r3, [pc, #500]	; (8008b38 <Heat+0x4d8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	4618      	mov	r0, r3
 8008948:	f7f7 fe06 	bl	8000558 <__aeabi_f2d>
 800894c:	4604      	mov	r4, r0
 800894e:	460d      	mov	r5, r1
 8008950:	ed97 7a08 	vldr	s14, [r7, #32]
 8008954:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800895c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008964:	dd06      	ble.n	8008974 <Heat+0x314>
 8008966:	ed97 7a08 	vldr	s14, [r7, #32]
 800896a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800896e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008972:	e005      	b.n	8008980 <Heat+0x320>
 8008974:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008978:	edd7 7a08 	vldr	s15, [r7, #32]
 800897c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008980:	ee17 0a90 	vmov	r0, s15
 8008984:	f7f7 fde8 	bl	8000558 <__aeabi_f2d>
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	4b6b      	ldr	r3, [pc, #428]	; (8008b3c <Heat+0x4dc>)
 800898e:	f7f7 fe3b 	bl	8000608 <__aeabi_dmul>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4690      	mov	r8, r2
 8008998:	4699      	mov	r9, r3
 800899a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899c:	f7f7 fddc 	bl	8000558 <__aeabi_f2d>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4640      	mov	r0, r8
 80089a6:	4649      	mov	r1, r9
 80089a8:	f7f7 ff58 	bl	800085c <__aeabi_ddiv>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4620      	mov	r0, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	f7f7 fc72 	bl	800029c <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	495e      	ldr	r1, [pc, #376]	; (8008b38 <Heat+0x4d8>)
 80089be:	680c      	ldr	r4, [r1, #0]
 80089c0:	4610      	mov	r0, r2
 80089c2:	4619      	mov	r1, r3
 80089c4:	f7f8 f918 	bl	8000bf8 <__aeabi_d2f>
 80089c8:	4603      	mov	r3, r0
 80089ca:	6123      	str	r3, [r4, #16]
				if(heaterTop -> target > target2){
 80089cc:	4b5a      	ldr	r3, [pc, #360]	; (8008b38 <Heat+0x4d8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80089d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80089d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e0:	d564      	bpl.n	8008aac <Heat+0x44c>
					heaterTop->target = target2;
 80089e2:	4b55      	ldr	r3, [pc, #340]	; (8008b38 <Heat+0x4d8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	611a      	str	r2, [r3, #16]
 80089ea:	e05f      	b.n	8008aac <Heat+0x44c>
				}
			}
			else if(heaterTop->target > target2){
 80089ec:	4b52      	ldr	r3, [pc, #328]	; (8008b38 <Heat+0x4d8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80089f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80089f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a00:	d554      	bpl.n	8008aac <Heat+0x44c>
				heaterTop->target -= 200.0 * ((target2 - target1) > 0? (target2 - target1) : (target1 - target2)) / interval;
 8008a02:	4b4d      	ldr	r3, [pc, #308]	; (8008b38 <Heat+0x4d8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f7 fda5 	bl	8000558 <__aeabi_f2d>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	ed97 7a08 	vldr	s14, [r7, #32]
 8008a16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a26:	dd06      	ble.n	8008a36 <Heat+0x3d6>
 8008a28:	ed97 7a08 	vldr	s14, [r7, #32]
 8008a2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a34:	e005      	b.n	8008a42 <Heat+0x3e2>
 8008a36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008a3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a42:	ee17 0a90 	vmov	r0, s15
 8008a46:	f7f7 fd87 	bl	8000558 <__aeabi_f2d>
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	4b3b      	ldr	r3, [pc, #236]	; (8008b3c <Heat+0x4dc>)
 8008a50:	f7f7 fdda 	bl	8000608 <__aeabi_dmul>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4690      	mov	r8, r2
 8008a5a:	4699      	mov	r9, r3
 8008a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5e:	f7f7 fd7b 	bl	8000558 <__aeabi_f2d>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 fef7 	bl	800085c <__aeabi_ddiv>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fc0f 	bl	8000298 <__aeabi_dsub>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	492e      	ldr	r1, [pc, #184]	; (8008b38 <Heat+0x4d8>)
 8008a80:	680c      	ldr	r4, [r1, #0]
 8008a82:	4610      	mov	r0, r2
 8008a84:	4619      	mov	r1, r3
 8008a86:	f7f8 f8b7 	bl	8000bf8 <__aeabi_d2f>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6123      	str	r3, [r4, #16]
				if(heaterTop -> target < target2){
 8008a8e:	4b2a      	ldr	r3, [pc, #168]	; (8008b38 <Heat+0x4d8>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	edd3 7a04 	vldr	s15, [r3, #16]
 8008a96:	ed97 7a08 	vldr	s14, [r7, #32]
 8008a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa2:	dd03      	ble.n	8008aac <Heat+0x44c>
					heaterTop->target = target2;
 8008aa4:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <Heat+0x4d8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	611a      	str	r2, [r3, #16]
				}
			}
			if(!graphmode){
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f47f ae58 	bne.w	8008764 <Heat+0x104>
				OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <Heat+0x4d8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f7 fd4c 	bl	8000558 <__aeabi_f2d>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	481e      	ldr	r0, [pc, #120]	; (8008b40 <Heat+0x4e0>)
 8008ac6:	f7fd fd5f 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$19/y%3.2f  \r\n", temp);
 8008aca:	68b8      	ldr	r0, [r7, #8]
 8008acc:	f7f7 fd44 	bl	8000558 <__aeabi_f2d>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	481b      	ldr	r0, [pc, #108]	; (8008b44 <Heat+0x4e4>)
 8008ad6:	f7fd fd57 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$49/p%3.2f  \r\n", heaterTop->duty);
 8008ada:	4b17      	ldr	r3, [pc, #92]	; (8008b38 <Heat+0x4d8>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7f7 fd39 	bl	8000558 <__aeabi_f2d>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4817      	ldr	r0, [pc, #92]	; (8008b48 <Heat+0x4e8>)
 8008aec:	f7fd fd4c 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$59/p%s     \r\n", heaterStateStr[heaterTop->state]);
 8008af0:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <Heat+0x4d8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	4a15      	ldr	r2, [pc, #84]	; (8008b4c <Heat+0x4ec>)
 8008af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008afc:	4619      	mov	r1, r3
 8008afe:	4814      	ldr	r0, [pc, #80]	; (8008b50 <Heat+0x4f0>)
 8008b00:	f7fd fd42 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$69/p%3.2f  \r\n", heaterTop->errorSum);
 8008b04:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <Heat+0x4d8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f7 fd24 	bl	8000558 <__aeabi_f2d>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	480f      	ldr	r0, [pc, #60]	; (8008b54 <Heat+0x4f4>)
 8008b16:	f7fd fd37 	bl	8006588 <OLED_Printf>
 8008b1a:	e623      	b.n	8008764 <Heat+0x104>
 8008b1c:	f3af 8000 	nop.w
 8008b20:	00000000 	.word	0x00000000
 8008b24:	40ed4c00 	.word	0x40ed4c00
 8008b28:	0800c7c8 	.word	0x0800c7c8
 8008b2c:	0800c7cc 	.word	0x0800c7cc
 8008b30:	00ff6600 	.word	0x00ff6600
 8008b34:	20000794 	.word	0x20000794
 8008b38:	20000620 	.word	0x20000620
 8008b3c:	40690000 	.word	0x40690000
 8008b40:	0800c7b4 	.word	0x0800c7b4
 8008b44:	0800c814 	.word	0x0800c814
 8008b48:	0800c828 	.word	0x0800c828
 8008b4c:	20000300 	.word	0x20000300
 8008b50:	0800c83c 	.word	0x0800c83c
 8008b54:	0800c850 	.word	0x0800c850
 8008b58:	476a6000 	.word	0x476a6000
			}
		}
		else if(graphmode){
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f43f ae00 	beq.w	8008764 <Heat+0x104>
			if(HAL_GetTick() - gTime > 500){
 8008b64:	f7f9 f928 	bl	8001db8 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008b72:	d925      	bls.n	8008bc0 <Heat+0x560>
				gTime += 500;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008b7a:	61bb      	str	r3, [r7, #24]
				OLED_Clear();
 8008b7c:	f7fd faa6 	bl	80060cc <OLED_Clear>
				gr ->Print(gr, 0xFF0000);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	4798      	blx	r3
				Graph_PrintPoint(gr, (float) (HAL_GetTick() - heatTime) / 60000.0f, heaterTop->target, 0x00FF00);
 8008b8c:	f7f9 f914 	bl	8001db8 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	ed5f 6a12 	vldr	s13, [pc, #-72]	; 8008b58 <Heat+0x4f8>
 8008ba2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ba6:	4b1e      	ldr	r3, [pc, #120]	; (8008c20 <Heat+0x5c0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	edd3 7a04 	vldr	s15, [r3, #16]
 8008bae:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8008bb2:	eef0 0a67 	vmov.f32	s1, s15
 8008bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fc fa18 	bl	8004ff0 <Graph_PrintPoint>
			}

			OLED_Line(0, 53, 95, 53, 0xFFFF00);
 8008bc0:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <Heat+0x5c4>)
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	2335      	movs	r3, #53	; 0x35
 8008bc6:	225f      	movs	r2, #95	; 0x5f
 8008bc8:	2135      	movs	r1, #53	; 0x35
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f7fe f88c 	bl	8006ce8 <OLED_Line>
			OLED_Printf("/s$60/g%d:$64/y%d/$68/r%d[\'c]", (HAL_GetTick() - heatTime) / 60000, (int)temp, (int)heaterTop->target);
 8008bd0:	f7f9 f8f2 	bl	8001db8 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <Heat+0x5c8>)
 8008bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008be0:	0b99      	lsrs	r1, r3, #14
 8008be2:	edd7 7a02 	vldr	s15, [r7, #8]
 8008be6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bea:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <Heat+0x5c0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	edd3 7a04 	vldr	s15, [r3, #16]
 8008bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bf6:	ee17 3a90 	vmov	r3, s15
 8008bfa:	ee17 2a10 	vmov	r2, s14
 8008bfe:	480b      	ldr	r0, [pc, #44]	; (8008c2c <Heat+0x5cc>)
 8008c00:	f7fd fcc2 	bl	8006588 <OLED_Printf>
	for(;;){
 8008c04:	e5ae      	b.n	8008764 <Heat+0x104>
		if(sw==SW_LEFT) break;
 8008c06:	bf00      	nop
		}
	}
	heaterTop->stop(heaterTop);
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <Heat+0x5c0>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	4a04      	ldr	r2, [pc, #16]	; (8008c20 <Heat+0x5c0>)
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	4610      	mov	r0, r2
 8008c14:	4798      	blx	r3
}
 8008c16:	bf00      	nop
 8008c18:	3730      	adds	r7, #48	; 0x30
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008c20:	20000620 	.word	0x20000620
 8008c24:	00ffff00 	.word	0x00ffff00
 8008c28:	45e7b273 	.word	0x45e7b273
 8008c2c:	0800c870 	.word	0x0800c870

08008c30 <Heat2>:
		{NULL, "/s/4/wDUTY", COLOR_SKY},
		{NULL, "/s/5/wSTAT", COLOR_SKY},
		{NULL, "/s/6/wESUM", COLOR_SKY}
};
extern uint32_t OLED_bgColor;
void Heat2(graph_t * gr1, graph_t * gr2){//Graph에 따라 분 단위로 시간 경과에 따라 온도를 설정합니다.
 8008c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c34:	b092      	sub	sp, #72	; 0x48
 8008c36:	af02      	add	r7, sp, #8
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
	OLED_Clear();
 8008c3c:	f7fd fa46 	bl	80060cc <OLED_Clear>
	OLED_MenuUI("< HEAT  CONV.0 >", 0xFF0000, 0x000000, HeatList2, 6, 0xFFFF00);
 8008c40:	4b6d      	ldr	r3, [pc, #436]	; (8008df8 <Heat2+0x1c8>)
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	2306      	movs	r3, #6
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	4b6c      	ldr	r3, [pc, #432]	; (8008dfc <Heat2+0x1cc>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8008c50:	486b      	ldr	r0, [pc, #428]	; (8008e00 <Heat2+0x1d0>)
 8008c52:	f7fe f893 	bl	8006d7c <OLED_MenuUI>
	heaterTop -> target = gr1->yData[0];
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <Heat2+0x1d4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	611a      	str	r2, [r3, #16]
	heaterBottom -> target = gr2->yData[0];
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b68      	ldr	r3, [pc, #416]	; (8008e08 <Heat2+0x1d8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6812      	ldr	r2, [r2, #0]
 8008c6c:	611a      	str	r2, [r3, #16]
	OLED_Printf("/s$35/y%3.1f  \r\n", heaterTop->target);
 8008c6e:	4b65      	ldr	r3, [pc, #404]	; (8008e04 <Heat2+0x1d4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7f7 fc6f 	bl	8000558 <__aeabi_f2d>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4863      	ldr	r0, [pc, #396]	; (8008e0c <Heat2+0x1dc>)
 8008c80:	f7fd fc82 	bl	8006588 <OLED_Printf>
	OLED_Printf("/s$3B/y%3.1f  \r\n", heaterTop->target);
 8008c84:	4b5f      	ldr	r3, [pc, #380]	; (8008e04 <Heat2+0x1d4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7f7 fc64 	bl	8000558 <__aeabi_f2d>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	485e      	ldr	r0, [pc, #376]	; (8008e10 <Heat2+0x1e0>)
 8008c96:	f7fd fc77 	bl	8006588 <OLED_Printf>
	OLED_bgColor = 0xFF0000;
 8008c9a:	4b5e      	ldr	r3, [pc, #376]	; (8008e14 <Heat2+0x1e4>)
 8008c9c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008ca0:	601a      	str	r2, [r3, #0]
	OLED_Printf("/s/k$0D%d", (Motor1_GPIO_Port->ODR) & Motor1_Pin?0:1);
 8008ca2:	4b5d      	ldr	r3, [pc, #372]	; (8008e18 <Heat2+0x1e8>)
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf0c      	ite	eq
 8008cae:	2301      	moveq	r3, #1
 8008cb0:	2300      	movne	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4859      	ldr	r0, [pc, #356]	; (8008e1c <Heat2+0x1ec>)
 8008cb8:	f7fd fc66 	bl	8006588 <OLED_Printf>
	OLED_bgColor = 0x000000;
 8008cbc:	4b55      	ldr	r3, [pc, #340]	; (8008e14 <Heat2+0x1e4>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
	int idx = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	float interval = (gr1->xData[idx + 1] - gr1->xData[idx]) * 60000.00;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ccc:	3301      	adds	r3, #1
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	ed93 7a00 	vldr	s14, [r3]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	edd3 7a00 	vldr	s15, [r3]
 8008ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ce8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8008e20 <Heat2+0x1f0>
 8008cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008cf0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float target1U = gr1->yData[idx];
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
	float target2U = gr1->yData[idx + 1];
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	3301      	adds	r3, #1
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	633b      	str	r3, [r7, #48]	; 0x30
	float target1D = gr2->yData[idx];
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float target2D = gr2->yData[idx + 1];
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d26:	3301      	adds	r3, #1
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	heaterTop->start(heaterTop);
 8008d30:	4b34      	ldr	r3, [pc, #208]	; (8008e04 <Heat2+0x1d4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	4a33      	ldr	r2, [pc, #204]	; (8008e04 <Heat2+0x1d4>)
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4798      	blx	r3
	heaterBottom->start(heaterBottom);
 8008d3e:	4b32      	ldr	r3, [pc, #200]	; (8008e08 <Heat2+0x1d8>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	4a30      	ldr	r2, [pc, #192]	; (8008e08 <Heat2+0x1d8>)
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
	HAL_Delay(500);
 8008d4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d50:	f7f9 f83e 	bl	8001dd0 <HAL_Delay>
	heaterTop -> target = target1U;
 8008d54:	4b2b      	ldr	r3, [pc, #172]	; (8008e04 <Heat2+0x1d4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5a:	611a      	str	r2, [r3, #16]
	heaterBottom -> target = target1D;
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <Heat2+0x1d8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d62:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);	// Convection 팬 끄기
 8008d64:	2201      	movs	r2, #1
 8008d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d6a:	482b      	ldr	r0, [pc, #172]	; (8008e18 <Heat2+0x1e8>)
 8008d6c:	f7f9 fb02 	bl	8002374 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_SET);	// 냉각팬 켜기
 8008d70:	2201      	movs	r2, #1
 8008d72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d76:	482b      	ldr	r0, [pc, #172]	; (8008e24 <Heat2+0x1f4>)
 8008d78:	f7f9 fafc 	bl	8002374 <HAL_GPIO_WritePin>
	uint32_t heatTime = HAL_GetTick();
 8008d7c:	f7f9 f81c 	bl	8001db8 <HAL_GetTick>
 8008d80:	61b8      	str	r0, [r7, #24]
	uint32_t pTime = HAL_GetTick();
 8008d82:	f7f9 f819 	bl	8001db8 <HAL_GetTick>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t gTime = HAL_GetTick();
 8008d88:	f7f9 f816 	bl	8001db8 <HAL_GetTick>
 8008d8c:	6238      	str	r0, [r7, #32]
	uint32_t graphmode = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	61fb      	str	r3, [r7, #28]
	for(;;){
		uint16_t sw = Switch_Read();
 8008d92:	f7fe f995 	bl	80070c0 <Switch_Read>
 8008d96:	4603      	mov	r3, r0
 8008d98:	82fb      	strh	r3, [r7, #22]
		if(sw==SW_LEFT) break;
 8008d9a:	8afb      	ldrh	r3, [r7, #22]
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	f000 8395 	beq.w	80094cc <Heat2+0x89c>
		else if(sw == SW_ENTER && !graphmode){//콘벡숀 모오터 돌리기!
 8008da2:	8afb      	ldrh	r3, [r7, #22]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d13f      	bne.n	8008e28 <Heat2+0x1f8>
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d13c      	bne.n	8008e28 <Heat2+0x1f8>
			HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, (Motor1_GPIO_Port->ODR) & Motor1_Pin?0:1);
 8008dae:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <Heat2+0x1e8>)
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bf0c      	ite	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	2300      	movne	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dc6:	4814      	ldr	r0, [pc, #80]	; (8008e18 <Heat2+0x1e8>)
 8008dc8:	f7f9 fad4 	bl	8002374 <HAL_GPIO_WritePin>
			OLED_bgColor = 0xFF0000;
 8008dcc:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <Heat2+0x1e4>)
 8008dce:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008dd2:	601a      	str	r2, [r3, #0]
			OLED_Printf("/s/k$0D%d", (Motor1_GPIO_Port->ODR) & Motor1_Pin?0:1);
 8008dd4:	4b10      	ldr	r3, [pc, #64]	; (8008e18 <Heat2+0x1e8>)
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bf0c      	ite	eq
 8008de0:	2301      	moveq	r3, #1
 8008de2:	2300      	movne	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	4619      	mov	r1, r3
 8008de8:	480c      	ldr	r0, [pc, #48]	; (8008e1c <Heat2+0x1ec>)
 8008dea:	f7fd fbcd 	bl	8006588 <OLED_Printf>
			OLED_bgColor = 0x000000;
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <Heat2+0x1e4>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	e061      	b.n	8008eba <Heat2+0x28a>
 8008df6:	bf00      	nop
 8008df8:	00ffff00 	.word	0x00ffff00
 8008dfc:	20000320 	.word	0x20000320
 8008e00:	0800c8e4 	.word	0x0800c8e4
 8008e04:	20000620 	.word	0x20000620
 8008e08:	200005d0 	.word	0x200005d0
 8008e0c:	0800c8f8 	.word	0x0800c8f8
 8008e10:	0800c90c 	.word	0x0800c90c
 8008e14:	20000558 	.word	0x20000558
 8008e18:	40020000 	.word	0x40020000
 8008e1c:	0800c920 	.word	0x0800c920
 8008e20:	476a6000 	.word	0x476a6000
 8008e24:	40020800 	.word	0x40020800
		}
		else if(sw == SW_RIGHT){//그래프 띄우기
 8008e28:	8afb      	ldrh	r3, [r7, #22]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d145      	bne.n	8008eba <Heat2+0x28a>
			graphmode = !graphmode;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	bf0c      	ite	eq
 8008e34:	2301      	moveq	r3, #1
 8008e36:	2300      	movne	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	61fb      	str	r3, [r7, #28]
			OLED_Clear();
 8008e3c:	f7fd f946 	bl	80060cc <OLED_Clear>
			gTime = HAL_GetTick();
 8008e40:	f7f8 ffba 	bl	8001db8 <HAL_GetTick>
 8008e44:	6238      	str	r0, [r7, #32]
			if(!graphmode){
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d136      	bne.n	8008eba <Heat2+0x28a>
				OLED_Clear();
 8008e4c:	f7fd f93e 	bl	80060cc <OLED_Clear>
				OLED_MenuUI("< HEAT  CONV.0 >", 0xFF0000, 0x000000, HeatList2, 6, 0xFFFF00);
 8008e50:	4ba3      	ldr	r3, [pc, #652]	; (80090e0 <Heat2+0x4b0>)
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	2306      	movs	r3, #6
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4ba2      	ldr	r3, [pc, #648]	; (80090e4 <Heat2+0x4b4>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8008e60:	48a1      	ldr	r0, [pc, #644]	; (80090e8 <Heat2+0x4b8>)
 8008e62:	f7fd ff8b 	bl	8006d7c <OLED_MenuUI>
				OLED_bgColor = 0xFF0000;
 8008e66:	4ba1      	ldr	r3, [pc, #644]	; (80090ec <Heat2+0x4bc>)
 8008e68:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008e6c:	601a      	str	r2, [r3, #0]
				OLED_Printf("/s/k$0D%d", (Motor1_GPIO_Port->ODR) & Motor1_Pin?0:1);
 8008e6e:	4ba0      	ldr	r3, [pc, #640]	; (80090f0 <Heat2+0x4c0>)
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	bf0c      	ite	eq
 8008e7a:	2301      	moveq	r3, #1
 8008e7c:	2300      	movne	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	4619      	mov	r1, r3
 8008e82:	489c      	ldr	r0, [pc, #624]	; (80090f4 <Heat2+0x4c4>)
 8008e84:	f7fd fb80 	bl	8006588 <OLED_Printf>
				OLED_bgColor = 0x000000;
 8008e88:	4b98      	ldr	r3, [pc, #608]	; (80090ec <Heat2+0x4bc>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]

				OLED_Printf("/s$35/y%3.1f  \r\n", heaterTop->target);
 8008e8e:	4b9a      	ldr	r3, [pc, #616]	; (80090f8 <Heat2+0x4c8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7f7 fb5f 	bl	8000558 <__aeabi_f2d>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4897      	ldr	r0, [pc, #604]	; (80090fc <Heat2+0x4cc>)
 8008ea0:	f7fd fb72 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$3B/y%3.1f  \r\n", heaterTop->target);
 8008ea4:	4b94      	ldr	r3, [pc, #592]	; (80090f8 <Heat2+0x4c8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7f7 fb54 	bl	8000558 <__aeabi_f2d>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4892      	ldr	r0, [pc, #584]	; (8009100 <Heat2+0x4d0>)
 8008eb6:	f7fd fb67 	bl	8006588 <OLED_Printf>
			}
		}

		float tempU = tempTop->read(tempTop);
 8008eba:	4b92      	ldr	r3, [pc, #584]	; (8009104 <Heat2+0x4d4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	4a90      	ldr	r2, [pc, #576]	; (8009104 <Heat2+0x4d4>)
 8008ec2:	6812      	ldr	r2, [r2, #0]
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	ed87 0a04 	vstr	s0, [r7, #16]
		float tempD = tempBottom->read(tempBottom);
 8008ecc:	4b8e      	ldr	r3, [pc, #568]	; (8009108 <Heat2+0x4d8>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	4a8d      	ldr	r2, [pc, #564]	; (8009108 <Heat2+0x4d8>)
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4798      	blx	r3
 8008eda:	ed87 0a03 	vstr	s0, [r7, #12]
		if(HAL_GetTick() - heatTime > (uint32_t)(gr1->xData[idx + 1] * 60000.0) && idx < gr1->count - 2){
 8008ede:	f7f8 ff6b 	bl	8001db8 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	1ad4      	subs	r4, r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eee:	3301      	adds	r3, #1
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7f7 fb2e 	bl	8000558 <__aeabi_f2d>
 8008efc:	a376      	add	r3, pc, #472	; (adr r3, 80090d8 <Heat2+0x4a8>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 fb81 	bl	8000608 <__aeabi_dmul>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f7f7 fe53 	bl	8000bb8 <__aeabi_d2uiz>
 8008f12:	4603      	mov	r3, r0
 8008f14:	429c      	cmp	r4, r3
 8008f16:	d93d      	bls.n	8008f94 <Heat2+0x364>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	891b      	ldrh	r3, [r3, #8]
 8008f1c:	3b02      	subs	r3, #2
 8008f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f20:	429a      	cmp	r2, r3
 8008f22:	da37      	bge.n	8008f94 <Heat2+0x364>
			idx++;
 8008f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f26:	3301      	adds	r3, #1
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
			interval = (gr1->xData[idx + 1] - gr1->xData[idx]) * 60000.00;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f30:	3301      	adds	r3, #1
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	ed93 7a00 	vldr	s14, [r3]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	edd3 7a00 	vldr	s15, [r3]
 8008f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f4c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800910c <Heat2+0x4dc>
 8008f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f54:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			target1U = gr1->yData[idx];
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34
			target2U = gr1->yData[idx + 1];
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
			target1D = gr2->yData[idx];
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
			target2D = gr2->yData[idx + 1];
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(HAL_GetTick() - pTime > 100){
 8008f94:	f7f8 ff10 	bl	8001db8 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b64      	cmp	r3, #100	; 0x64
 8008fa0:	f240 823c 	bls.w	800941c <Heat2+0x7ec>
			pTime += 100;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	3364      	adds	r3, #100	; 0x64
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
			Switch_LED_Temperature((tempU + tempD) / 2.0);
 8008faa:	ed97 7a04 	vldr	s14, [r7, #16]
 8008fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008fbe:	eeb0 0a47 	vmov.f32	s0, s14
 8008fc2:	f7fd ffbf 	bl	8006f44 <Switch_LED_Temperature>
			//온도 프로필에서 설정한 값의 2배 속도로 움직이게 하여 안정적으로 작동시킵니다.
			if(heaterTop->target < target2U){
 8008fc6:	4b4c      	ldr	r3, [pc, #304]	; (80090f8 <Heat2+0x4c8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	edd3 7a04 	vldr	s15, [r3, #16]
 8008fce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fda:	dd56      	ble.n	800908a <Heat2+0x45a>
				heaterTop->target += 200.0 * ((target2U - target1U) > 0? (target2U - target1U) : (target1U - target2U)) / interval;
 8008fdc:	4b46      	ldr	r3, [pc, #280]	; (80090f8 <Heat2+0x4c8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7f7 fab8 	bl	8000558 <__aeabi_f2d>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	460d      	mov	r5, r1
 8008fec:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008ff0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009000:	dd06      	ble.n	8009010 <Heat2+0x3e0>
 8009002:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009006:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800900a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800900e:	e005      	b.n	800901c <Heat2+0x3ec>
 8009010:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009014:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800901c:	ee17 0a90 	vmov	r0, s15
 8009020:	f7f7 fa9a 	bl	8000558 <__aeabi_f2d>
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	4b39      	ldr	r3, [pc, #228]	; (8009110 <Heat2+0x4e0>)
 800902a:	f7f7 faed 	bl	8000608 <__aeabi_dmul>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4690      	mov	r8, r2
 8009034:	4699      	mov	r9, r3
 8009036:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009038:	f7f7 fa8e 	bl	8000558 <__aeabi_f2d>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4640      	mov	r0, r8
 8009042:	4649      	mov	r1, r9
 8009044:	f7f7 fc0a 	bl	800085c <__aeabi_ddiv>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 f924 	bl	800029c <__adddf3>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4927      	ldr	r1, [pc, #156]	; (80090f8 <Heat2+0x4c8>)
 800905a:	680c      	ldr	r4, [r1, #0]
 800905c:	4610      	mov	r0, r2
 800905e:	4619      	mov	r1, r3
 8009060:	f7f7 fdca 	bl	8000bf8 <__aeabi_d2f>
 8009064:	4603      	mov	r3, r0
 8009066:	6123      	str	r3, [r4, #16]
				if(heaterTop -> target > target2U){
 8009068:	4b23      	ldr	r3, [pc, #140]	; (80090f8 <Heat2+0x4c8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009070:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907c:	f140 8085 	bpl.w	800918a <Heat2+0x55a>
					heaterTop->target = target2U;
 8009080:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <Heat2+0x4c8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009086:	611a      	str	r2, [r3, #16]
 8009088:	e07f      	b.n	800918a <Heat2+0x55a>
				}
			}
			else if(heaterTop->target > target2U){
 800908a:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <Heat2+0x4c8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009092:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	d574      	bpl.n	800918a <Heat2+0x55a>
				heaterTop->target -= 200.0 * ((target2U - target1U) > 0? (target2U - target1U) : (target1U - target2U)) / interval;
 80090a0:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <Heat2+0x4c8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f7 fa56 	bl	8000558 <__aeabi_f2d>
 80090ac:	4604      	mov	r4, r0
 80090ae:	460d      	mov	r5, r1
 80090b0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80090b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80090b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	dd26      	ble.n	8009114 <Heat2+0x4e4>
 80090c6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80090ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80090ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090d2:	e025      	b.n	8009120 <Heat2+0x4f0>
 80090d4:	f3af 8000 	nop.w
 80090d8:	00000000 	.word	0x00000000
 80090dc:	40ed4c00 	.word	0x40ed4c00
 80090e0:	00ffff00 	.word	0x00ffff00
 80090e4:	20000320 	.word	0x20000320
 80090e8:	0800c8e4 	.word	0x0800c8e4
 80090ec:	20000558 	.word	0x20000558
 80090f0:	40020000 	.word	0x40020000
 80090f4:	0800c920 	.word	0x0800c920
 80090f8:	20000620 	.word	0x20000620
 80090fc:	0800c8f8 	.word	0x0800c8f8
 8009100:	0800c90c 	.word	0x0800c90c
 8009104:	20000794 	.word	0x20000794
 8009108:	2000061c 	.word	0x2000061c
 800910c:	476a6000 	.word	0x476a6000
 8009110:	40690000 	.word	0x40690000
 8009114:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009118:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800911c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009120:	ee17 0a90 	vmov	r0, s15
 8009124:	f7f7 fa18 	bl	8000558 <__aeabi_f2d>
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	4bad      	ldr	r3, [pc, #692]	; (80093e4 <Heat2+0x7b4>)
 800912e:	f7f7 fa6b 	bl	8000608 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4690      	mov	r8, r2
 8009138:	4699      	mov	r9, r3
 800913a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800913c:	f7f7 fa0c 	bl	8000558 <__aeabi_f2d>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 fb88 	bl	800085c <__aeabi_ddiv>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4620      	mov	r0, r4
 8009152:	4629      	mov	r1, r5
 8009154:	f7f7 f8a0 	bl	8000298 <__aeabi_dsub>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	49a2      	ldr	r1, [pc, #648]	; (80093e8 <Heat2+0x7b8>)
 800915e:	680c      	ldr	r4, [r1, #0]
 8009160:	4610      	mov	r0, r2
 8009162:	4619      	mov	r1, r3
 8009164:	f7f7 fd48 	bl	8000bf8 <__aeabi_d2f>
 8009168:	4603      	mov	r3, r0
 800916a:	6123      	str	r3, [r4, #16]
				if(heaterTop -> target < target2U){
 800916c:	4b9e      	ldr	r3, [pc, #632]	; (80093e8 <Heat2+0x7b8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	edd3 7a04 	vldr	s15, [r3, #16]
 8009174:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	dd03      	ble.n	800918a <Heat2+0x55a>
					heaterTop->target = target2U;
 8009182:	4b99      	ldr	r3, [pc, #612]	; (80093e8 <Heat2+0x7b8>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009188:	611a      	str	r2, [r3, #16]
				}
			}
			if(heaterBottom->target < target2D){
 800918a:	4b98      	ldr	r3, [pc, #608]	; (80093ec <Heat2+0x7bc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009192:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919e:	dd55      	ble.n	800924c <Heat2+0x61c>
				heaterBottom->target += 200.0 * ((target2D - target1D) > 0? (target2D - target1D) : (target1D - target2D)) / interval;
 80091a0:	4b92      	ldr	r3, [pc, #584]	; (80093ec <Heat2+0x7bc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7f7 f9d6 	bl	8000558 <__aeabi_f2d>
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80091b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80091b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c4:	dd06      	ble.n	80091d4 <Heat2+0x5a4>
 80091c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80091ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80091ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091d2:	e005      	b.n	80091e0 <Heat2+0x5b0>
 80091d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80091d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80091dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091e0:	ee17 0a90 	vmov	r0, s15
 80091e4:	f7f7 f9b8 	bl	8000558 <__aeabi_f2d>
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	4b7d      	ldr	r3, [pc, #500]	; (80093e4 <Heat2+0x7b4>)
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4690      	mov	r8, r2
 80091f8:	4699      	mov	r9, r3
 80091fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091fc:	f7f7 f9ac 	bl	8000558 <__aeabi_f2d>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4640      	mov	r0, r8
 8009206:	4649      	mov	r1, r9
 8009208:	f7f7 fb28 	bl	800085c <__aeabi_ddiv>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4620      	mov	r0, r4
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f842 	bl	800029c <__adddf3>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4973      	ldr	r1, [pc, #460]	; (80093ec <Heat2+0x7bc>)
 800921e:	680c      	ldr	r4, [r1, #0]
 8009220:	4610      	mov	r0, r2
 8009222:	4619      	mov	r1, r3
 8009224:	f7f7 fce8 	bl	8000bf8 <__aeabi_d2f>
 8009228:	4603      	mov	r3, r0
 800922a:	6123      	str	r3, [r4, #16]
				if(heaterBottom -> target > target2D){
 800922c:	4b6f      	ldr	r3, [pc, #444]	; (80093ec <Heat2+0x7bc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	edd3 7a04 	vldr	s15, [r3, #16]
 8009234:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800923c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009240:	d564      	bpl.n	800930c <Heat2+0x6dc>
					heaterBottom->target = target2D;
 8009242:	4b6a      	ldr	r3, [pc, #424]	; (80093ec <Heat2+0x7bc>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009248:	611a      	str	r2, [r3, #16]
 800924a:	e05f      	b.n	800930c <Heat2+0x6dc>
				}
			}
			else if(heaterBottom->target > target2D){
 800924c:	4b67      	ldr	r3, [pc, #412]	; (80093ec <Heat2+0x7bc>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	edd3 7a04 	vldr	s15, [r3, #16]
 8009254:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800925c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009260:	d554      	bpl.n	800930c <Heat2+0x6dc>
				heaterBottom->target -= 200.0 * ((target2D - target1D) > 0? (target2D - target1D) : (target1D - target2D)) / interval;
 8009262:	4b62      	ldr	r3, [pc, #392]	; (80093ec <Heat2+0x7bc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	4618      	mov	r0, r3
 800926a:	f7f7 f975 	bl	8000558 <__aeabi_f2d>
 800926e:	4604      	mov	r4, r0
 8009270:	460d      	mov	r5, r1
 8009272:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009276:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800927a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800927e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	dd06      	ble.n	8009296 <Heat2+0x666>
 8009288:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800928c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009294:	e005      	b.n	80092a2 <Heat2+0x672>
 8009296:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800929a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800929e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092a2:	ee17 0a90 	vmov	r0, s15
 80092a6:	f7f7 f957 	bl	8000558 <__aeabi_f2d>
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	4b4d      	ldr	r3, [pc, #308]	; (80093e4 <Heat2+0x7b4>)
 80092b0:	f7f7 f9aa 	bl	8000608 <__aeabi_dmul>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4690      	mov	r8, r2
 80092ba:	4699      	mov	r9, r3
 80092bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092be:	f7f7 f94b 	bl	8000558 <__aeabi_f2d>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fac7 	bl	800085c <__aeabi_ddiv>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f6 ffdf 	bl	8000298 <__aeabi_dsub>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4943      	ldr	r1, [pc, #268]	; (80093ec <Heat2+0x7bc>)
 80092e0:	680c      	ldr	r4, [r1, #0]
 80092e2:	4610      	mov	r0, r2
 80092e4:	4619      	mov	r1, r3
 80092e6:	f7f7 fc87 	bl	8000bf8 <__aeabi_d2f>
 80092ea:	4603      	mov	r3, r0
 80092ec:	6123      	str	r3, [r4, #16]
				if(heaterBottom -> target < target2D){
 80092ee:	4b3f      	ldr	r3, [pc, #252]	; (80093ec <Heat2+0x7bc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80092f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80092fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009302:	dd03      	ble.n	800930c <Heat2+0x6dc>
					heaterBottom->target = target2D;
 8009304:	4b39      	ldr	r3, [pc, #228]	; (80093ec <Heat2+0x7bc>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800930a:	611a      	str	r2, [r3, #16]
				}
			}
			if(!graphmode){
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f47f ad3f 	bne.w	8008d92 <Heat2+0x162>
				OLED_Printf("/s$25/y%3.1f  \r\n", tempU);
 8009314:	6938      	ldr	r0, [r7, #16]
 8009316:	f7f7 f91f 	bl	8000558 <__aeabi_f2d>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4834      	ldr	r0, [pc, #208]	; (80093f0 <Heat2+0x7c0>)
 8009320:	f7fd f932 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$2B/y%3.1f  \r\n", tempD);
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7f7 f917 	bl	8000558 <__aeabi_f2d>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	4831      	ldr	r0, [pc, #196]	; (80093f4 <Heat2+0x7c4>)
 8009330:	f7fd f92a 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$35/y%3.1f  \r\n", heaterTop->target);
 8009334:	4b2c      	ldr	r3, [pc, #176]	; (80093e8 <Heat2+0x7b8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	4618      	mov	r0, r3
 800933c:	f7f7 f90c 	bl	8000558 <__aeabi_f2d>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	482c      	ldr	r0, [pc, #176]	; (80093f8 <Heat2+0x7c8>)
 8009346:	f7fd f91f 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$3B/y%3.1f  \r\n", heaterBottom->target);
 800934a:	4b28      	ldr	r3, [pc, #160]	; (80093ec <Heat2+0x7bc>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	4618      	mov	r0, r3
 8009352:	f7f7 f901 	bl	8000558 <__aeabi_f2d>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4828      	ldr	r0, [pc, #160]	; (80093fc <Heat2+0x7cc>)
 800935c:	f7fd f914 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$45/p%3.1f  \r\n", heaterTop->duty);
 8009360:	4b21      	ldr	r3, [pc, #132]	; (80093e8 <Heat2+0x7b8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	4618      	mov	r0, r3
 8009368:	f7f7 f8f6 	bl	8000558 <__aeabi_f2d>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4823      	ldr	r0, [pc, #140]	; (8009400 <Heat2+0x7d0>)
 8009372:	f7fd f909 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$4B/p%3.1f  \r\n", heaterBottom->duty);
 8009376:	4b1d      	ldr	r3, [pc, #116]	; (80093ec <Heat2+0x7bc>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	4618      	mov	r0, r3
 800937e:	f7f7 f8eb 	bl	8000558 <__aeabi_f2d>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	481f      	ldr	r0, [pc, #124]	; (8009404 <Heat2+0x7d4>)
 8009388:	f7fd f8fe 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$55/p%s\r\n", heaterStateStr2[heaterTop->state]);
 800938c:	4b16      	ldr	r3, [pc, #88]	; (80093e8 <Heat2+0x7b8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	4a1d      	ldr	r2, [pc, #116]	; (8009408 <Heat2+0x7d8>)
 8009394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009398:	4619      	mov	r1, r3
 800939a:	481c      	ldr	r0, [pc, #112]	; (800940c <Heat2+0x7dc>)
 800939c:	f7fd f8f4 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$5B/p%s\r\n", heaterStateStr2[heaterBottom->state]);
 80093a0:	4b12      	ldr	r3, [pc, #72]	; (80093ec <Heat2+0x7bc>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	4a18      	ldr	r2, [pc, #96]	; (8009408 <Heat2+0x7d8>)
 80093a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ac:	4619      	mov	r1, r3
 80093ae:	4818      	ldr	r0, [pc, #96]	; (8009410 <Heat2+0x7e0>)
 80093b0:	f7fd f8ea 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$65/p%3.1f  \r\n", heaterTop->errorSum);
 80093b4:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <Heat2+0x7b8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7f7 f8cc 	bl	8000558 <__aeabi_f2d>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4813      	ldr	r0, [pc, #76]	; (8009414 <Heat2+0x7e4>)
 80093c6:	f7fd f8df 	bl	8006588 <OLED_Printf>
				OLED_Printf("/s$6B/p%3.1f  \r\n", heaterBottom->errorSum);
 80093ca:	4b08      	ldr	r3, [pc, #32]	; (80093ec <Heat2+0x7bc>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7f7 f8c1 	bl	8000558 <__aeabi_f2d>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	480f      	ldr	r0, [pc, #60]	; (8009418 <Heat2+0x7e8>)
 80093dc:	f7fd f8d4 	bl	8006588 <OLED_Printf>
 80093e0:	e4d7      	b.n	8008d92 <Heat2+0x162>
 80093e2:	bf00      	nop
 80093e4:	40690000 	.word	0x40690000
 80093e8:	20000620 	.word	0x20000620
 80093ec:	200005d0 	.word	0x200005d0
 80093f0:	0800c92c 	.word	0x0800c92c
 80093f4:	0800c940 	.word	0x0800c940
 80093f8:	0800c8f8 	.word	0x0800c8f8
 80093fc:	0800c90c 	.word	0x0800c90c
 8009400:	0800c954 	.word	0x0800c954
 8009404:	0800c968 	.word	0x0800c968
 8009408:	20000310 	.word	0x20000310
 800940c:	0800c97c 	.word	0x0800c97c
 8009410:	0800c988 	.word	0x0800c988
 8009414:	0800c994 	.word	0x0800c994
 8009418:	0800c9a8 	.word	0x0800c9a8
			}
		}
		else if(graphmode){
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f43f acb7 	beq.w	8008d92 <Heat2+0x162>
			if(HAL_GetTick() - gTime > 500){
 8009424:	f7f8 fcc8 	bl	8001db8 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009432:	d942      	bls.n	80094ba <Heat2+0x88a>
				gTime += 500;
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800943a:	623b      	str	r3, [r7, #32]
				OLED_Clear();
 800943c:	f7fc fe46 	bl	80060cc <OLED_Clear>
				gr1 ->Print(gr1, 0xFF0000);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
				gr2 ->Print(gr2, 0xFFFF00);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	4928      	ldr	r1, [pc, #160]	; (80094f4 <Heat2+0x8c4>)
 8009452:	6838      	ldr	r0, [r7, #0]
 8009454:	4798      	blx	r3
				Graph_PrintPoint(gr1, (float) (HAL_GetTick() - heatTime) / 60000.0f, heaterTop->target, 0xFF8000);
 8009456:	f7f8 fcaf 	bl	8001db8 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	ee07 3a90 	vmov	s15, r3
 8009464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009468:	eddf 6a23 	vldr	s13, [pc, #140]	; 80094f8 <Heat2+0x8c8>
 800946c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009470:	4b22      	ldr	r3, [pc, #136]	; (80094fc <Heat2+0x8cc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	edd3 7a04 	vldr	s15, [r3, #16]
 8009478:	4921      	ldr	r1, [pc, #132]	; (8009500 <Heat2+0x8d0>)
 800947a:	eef0 0a67 	vmov.f32	s1, s15
 800947e:	eeb0 0a47 	vmov.f32	s0, s14
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7fb fdb4 	bl	8004ff0 <Graph_PrintPoint>
				Graph_PrintPoint(gr2, (float) (HAL_GetTick() - heatTime) / 60000.0f, heaterBottom->target, 0xFF8000);
 8009488:	f7f8 fc96 	bl	8001db8 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eddf 6a17 	vldr	s13, [pc, #92]	; 80094f8 <Heat2+0x8c8>
 800949e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80094a2:	4b18      	ldr	r3, [pc, #96]	; (8009504 <Heat2+0x8d4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80094aa:	4915      	ldr	r1, [pc, #84]	; (8009500 <Heat2+0x8d0>)
 80094ac:	eef0 0a67 	vmov.f32	s1, s15
 80094b0:	eeb0 0a47 	vmov.f32	s0, s14
 80094b4:	6838      	ldr	r0, [r7, #0]
 80094b6:	f7fb fd9b 	bl	8004ff0 <Graph_PrintPoint>
			}

			OLED_Line(0, 53, 95, 53, 0xFFFF00);
 80094ba:	4b0e      	ldr	r3, [pc, #56]	; (80094f4 <Heat2+0x8c4>)
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	2335      	movs	r3, #53	; 0x35
 80094c0:	225f      	movs	r2, #95	; 0x5f
 80094c2:	2135      	movs	r1, #53	; 0x35
 80094c4:	2000      	movs	r0, #0
 80094c6:	f7fd fc0f 	bl	8006ce8 <OLED_Line>
	for(;;){
 80094ca:	e462      	b.n	8008d92 <Heat2+0x162>
		if(sw==SW_LEFT) break;
 80094cc:	bf00      	nop
//			OLED_Printf("/s$60/g%d:$64/y%d/$68/r%d[\'c]", (HAL_GetTick() - heatTime) / 60000, (int)temp, (int)heaterTop->target);
		}
	}
	heaterTop->stop(heaterTop);
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <Heat2+0x8cc>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	4a09      	ldr	r2, [pc, #36]	; (80094fc <Heat2+0x8cc>)
 80094d6:	6812      	ldr	r2, [r2, #0]
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
	heaterBottom->stop(heaterBottom);
 80094dc:	4b09      	ldr	r3, [pc, #36]	; (8009504 <Heat2+0x8d4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	4a08      	ldr	r2, [pc, #32]	; (8009504 <Heat2+0x8d4>)
 80094e4:	6812      	ldr	r2, [r2, #0]
 80094e6:	4610      	mov	r0, r2
 80094e8:	4798      	blx	r3
}
 80094ea:	bf00      	nop
 80094ec:	3740      	adds	r7, #64	; 0x40
 80094ee:	46bd      	mov	sp, r7
 80094f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80094f4:	00ffff00 	.word	0x00ffff00
 80094f8:	476a6000 	.word	0x476a6000
 80094fc:	20000620 	.word	0x20000620
 8009500:	00ff8000 	.word	0x00ff8000
 8009504:	200005d0 	.word	0x200005d0

08009508 <calloc>:
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <calloc+0xc>)
 800950a:	460a      	mov	r2, r1
 800950c:	4601      	mov	r1, r0
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	f000 b844 	b.w	800959c <_calloc_r>
 8009514:	20000368 	.word	0x20000368

08009518 <__errno>:
 8009518:	4b01      	ldr	r3, [pc, #4]	; (8009520 <__errno+0x8>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	20000368 	.word	0x20000368

08009524 <__libc_init_array>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4d0d      	ldr	r5, [pc, #52]	; (800955c <__libc_init_array+0x38>)
 8009528:	4c0d      	ldr	r4, [pc, #52]	; (8009560 <__libc_init_array+0x3c>)
 800952a:	1b64      	subs	r4, r4, r5
 800952c:	10a4      	asrs	r4, r4, #2
 800952e:	2600      	movs	r6, #0
 8009530:	42a6      	cmp	r6, r4
 8009532:	d109      	bne.n	8009548 <__libc_init_array+0x24>
 8009534:	4d0b      	ldr	r5, [pc, #44]	; (8009564 <__libc_init_array+0x40>)
 8009536:	4c0c      	ldr	r4, [pc, #48]	; (8009568 <__libc_init_array+0x44>)
 8009538:	f002 ff4e 	bl	800c3d8 <_init>
 800953c:	1b64      	subs	r4, r4, r5
 800953e:	10a4      	asrs	r4, r4, #2
 8009540:	2600      	movs	r6, #0
 8009542:	42a6      	cmp	r6, r4
 8009544:	d105      	bne.n	8009552 <__libc_init_array+0x2e>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	f855 3b04 	ldr.w	r3, [r5], #4
 800954c:	4798      	blx	r3
 800954e:	3601      	adds	r6, #1
 8009550:	e7ee      	b.n	8009530 <__libc_init_array+0xc>
 8009552:	f855 3b04 	ldr.w	r3, [r5], #4
 8009556:	4798      	blx	r3
 8009558:	3601      	adds	r6, #1
 800955a:	e7f2      	b.n	8009542 <__libc_init_array+0x1e>
 800955c:	0800cdbc 	.word	0x0800cdbc
 8009560:	0800cdbc 	.word	0x0800cdbc
 8009564:	0800cdbc 	.word	0x0800cdbc
 8009568:	0800cdc0 	.word	0x0800cdc0

0800956c <malloc>:
 800956c:	4b02      	ldr	r3, [pc, #8]	; (8009578 <malloc+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f000 b873 	b.w	800965c <_malloc_r>
 8009576:	bf00      	nop
 8009578:	20000368 	.word	0x20000368

0800957c <free>:
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <free+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f000 b81b 	b.w	80095bc <_free_r>
 8009586:	bf00      	nop
 8009588:	20000368 	.word	0x20000368

0800958c <memset>:
 800958c:	4402      	add	r2, r0
 800958e:	4603      	mov	r3, r0
 8009590:	4293      	cmp	r3, r2
 8009592:	d100      	bne.n	8009596 <memset+0xa>
 8009594:	4770      	bx	lr
 8009596:	f803 1b01 	strb.w	r1, [r3], #1
 800959a:	e7f9      	b.n	8009590 <memset+0x4>

0800959c <_calloc_r>:
 800959c:	b513      	push	{r0, r1, r4, lr}
 800959e:	434a      	muls	r2, r1
 80095a0:	4611      	mov	r1, r2
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	f000 f85a 	bl	800965c <_malloc_r>
 80095a8:	4604      	mov	r4, r0
 80095aa:	b118      	cbz	r0, 80095b4 <_calloc_r+0x18>
 80095ac:	9a01      	ldr	r2, [sp, #4]
 80095ae:	2100      	movs	r1, #0
 80095b0:	f7ff ffec 	bl	800958c <memset>
 80095b4:	4620      	mov	r0, r4
 80095b6:	b002      	add	sp, #8
 80095b8:	bd10      	pop	{r4, pc}
	...

080095bc <_free_r>:
 80095bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095be:	2900      	cmp	r1, #0
 80095c0:	d048      	beq.n	8009654 <_free_r+0x98>
 80095c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c6:	9001      	str	r0, [sp, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f1a1 0404 	sub.w	r4, r1, #4
 80095ce:	bfb8      	it	lt
 80095d0:	18e4      	addlt	r4, r4, r3
 80095d2:	f001 ff33 	bl	800b43c <__malloc_lock>
 80095d6:	4a20      	ldr	r2, [pc, #128]	; (8009658 <_free_r+0x9c>)
 80095d8:	9801      	ldr	r0, [sp, #4]
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	4615      	mov	r5, r2
 80095de:	b933      	cbnz	r3, 80095ee <_free_r+0x32>
 80095e0:	6063      	str	r3, [r4, #4]
 80095e2:	6014      	str	r4, [r2, #0]
 80095e4:	b003      	add	sp, #12
 80095e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095ea:	f001 bf2d 	b.w	800b448 <__malloc_unlock>
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	d90b      	bls.n	800960a <_free_r+0x4e>
 80095f2:	6821      	ldr	r1, [r4, #0]
 80095f4:	1862      	adds	r2, r4, r1
 80095f6:	4293      	cmp	r3, r2
 80095f8:	bf04      	itt	eq
 80095fa:	681a      	ldreq	r2, [r3, #0]
 80095fc:	685b      	ldreq	r3, [r3, #4]
 80095fe:	6063      	str	r3, [r4, #4]
 8009600:	bf04      	itt	eq
 8009602:	1852      	addeq	r2, r2, r1
 8009604:	6022      	streq	r2, [r4, #0]
 8009606:	602c      	str	r4, [r5, #0]
 8009608:	e7ec      	b.n	80095e4 <_free_r+0x28>
 800960a:	461a      	mov	r2, r3
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	b10b      	cbz	r3, 8009614 <_free_r+0x58>
 8009610:	42a3      	cmp	r3, r4
 8009612:	d9fa      	bls.n	800960a <_free_r+0x4e>
 8009614:	6811      	ldr	r1, [r2, #0]
 8009616:	1855      	adds	r5, r2, r1
 8009618:	42a5      	cmp	r5, r4
 800961a:	d10b      	bne.n	8009634 <_free_r+0x78>
 800961c:	6824      	ldr	r4, [r4, #0]
 800961e:	4421      	add	r1, r4
 8009620:	1854      	adds	r4, r2, r1
 8009622:	42a3      	cmp	r3, r4
 8009624:	6011      	str	r1, [r2, #0]
 8009626:	d1dd      	bne.n	80095e4 <_free_r+0x28>
 8009628:	681c      	ldr	r4, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	6053      	str	r3, [r2, #4]
 800962e:	4421      	add	r1, r4
 8009630:	6011      	str	r1, [r2, #0]
 8009632:	e7d7      	b.n	80095e4 <_free_r+0x28>
 8009634:	d902      	bls.n	800963c <_free_r+0x80>
 8009636:	230c      	movs	r3, #12
 8009638:	6003      	str	r3, [r0, #0]
 800963a:	e7d3      	b.n	80095e4 <_free_r+0x28>
 800963c:	6825      	ldr	r5, [r4, #0]
 800963e:	1961      	adds	r1, r4, r5
 8009640:	428b      	cmp	r3, r1
 8009642:	bf04      	itt	eq
 8009644:	6819      	ldreq	r1, [r3, #0]
 8009646:	685b      	ldreq	r3, [r3, #4]
 8009648:	6063      	str	r3, [r4, #4]
 800964a:	bf04      	itt	eq
 800964c:	1949      	addeq	r1, r1, r5
 800964e:	6021      	streq	r1, [r4, #0]
 8009650:	6054      	str	r4, [r2, #4]
 8009652:	e7c7      	b.n	80095e4 <_free_r+0x28>
 8009654:	b003      	add	sp, #12
 8009656:	bd30      	pop	{r4, r5, pc}
 8009658:	20000570 	.word	0x20000570

0800965c <_malloc_r>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	1ccd      	adds	r5, r1, #3
 8009660:	f025 0503 	bic.w	r5, r5, #3
 8009664:	3508      	adds	r5, #8
 8009666:	2d0c      	cmp	r5, #12
 8009668:	bf38      	it	cc
 800966a:	250c      	movcc	r5, #12
 800966c:	2d00      	cmp	r5, #0
 800966e:	4606      	mov	r6, r0
 8009670:	db01      	blt.n	8009676 <_malloc_r+0x1a>
 8009672:	42a9      	cmp	r1, r5
 8009674:	d903      	bls.n	800967e <_malloc_r+0x22>
 8009676:	230c      	movs	r3, #12
 8009678:	6033      	str	r3, [r6, #0]
 800967a:	2000      	movs	r0, #0
 800967c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967e:	f001 fedd 	bl	800b43c <__malloc_lock>
 8009682:	4921      	ldr	r1, [pc, #132]	; (8009708 <_malloc_r+0xac>)
 8009684:	680a      	ldr	r2, [r1, #0]
 8009686:	4614      	mov	r4, r2
 8009688:	b99c      	cbnz	r4, 80096b2 <_malloc_r+0x56>
 800968a:	4f20      	ldr	r7, [pc, #128]	; (800970c <_malloc_r+0xb0>)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	b923      	cbnz	r3, 800969a <_malloc_r+0x3e>
 8009690:	4621      	mov	r1, r4
 8009692:	4630      	mov	r0, r6
 8009694:	f000 fd24 	bl	800a0e0 <_sbrk_r>
 8009698:	6038      	str	r0, [r7, #0]
 800969a:	4629      	mov	r1, r5
 800969c:	4630      	mov	r0, r6
 800969e:	f000 fd1f 	bl	800a0e0 <_sbrk_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	d123      	bne.n	80096ee <_malloc_r+0x92>
 80096a6:	230c      	movs	r3, #12
 80096a8:	6033      	str	r3, [r6, #0]
 80096aa:	4630      	mov	r0, r6
 80096ac:	f001 fecc 	bl	800b448 <__malloc_unlock>
 80096b0:	e7e3      	b.n	800967a <_malloc_r+0x1e>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	1b5b      	subs	r3, r3, r5
 80096b6:	d417      	bmi.n	80096e8 <_malloc_r+0x8c>
 80096b8:	2b0b      	cmp	r3, #11
 80096ba:	d903      	bls.n	80096c4 <_malloc_r+0x68>
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	441c      	add	r4, r3
 80096c0:	6025      	str	r5, [r4, #0]
 80096c2:	e004      	b.n	80096ce <_malloc_r+0x72>
 80096c4:	6863      	ldr	r3, [r4, #4]
 80096c6:	42a2      	cmp	r2, r4
 80096c8:	bf0c      	ite	eq
 80096ca:	600b      	streq	r3, [r1, #0]
 80096cc:	6053      	strne	r3, [r2, #4]
 80096ce:	4630      	mov	r0, r6
 80096d0:	f001 feba 	bl	800b448 <__malloc_unlock>
 80096d4:	f104 000b 	add.w	r0, r4, #11
 80096d8:	1d23      	adds	r3, r4, #4
 80096da:	f020 0007 	bic.w	r0, r0, #7
 80096de:	1ac2      	subs	r2, r0, r3
 80096e0:	d0cc      	beq.n	800967c <_malloc_r+0x20>
 80096e2:	1a1b      	subs	r3, r3, r0
 80096e4:	50a3      	str	r3, [r4, r2]
 80096e6:	e7c9      	b.n	800967c <_malloc_r+0x20>
 80096e8:	4622      	mov	r2, r4
 80096ea:	6864      	ldr	r4, [r4, #4]
 80096ec:	e7cc      	b.n	8009688 <_malloc_r+0x2c>
 80096ee:	1cc4      	adds	r4, r0, #3
 80096f0:	f024 0403 	bic.w	r4, r4, #3
 80096f4:	42a0      	cmp	r0, r4
 80096f6:	d0e3      	beq.n	80096c0 <_malloc_r+0x64>
 80096f8:	1a21      	subs	r1, r4, r0
 80096fa:	4630      	mov	r0, r6
 80096fc:	f000 fcf0 	bl	800a0e0 <_sbrk_r>
 8009700:	3001      	adds	r0, #1
 8009702:	d1dd      	bne.n	80096c0 <_malloc_r+0x64>
 8009704:	e7cf      	b.n	80096a6 <_malloc_r+0x4a>
 8009706:	bf00      	nop
 8009708:	20000570 	.word	0x20000570
 800970c:	20000574 	.word	0x20000574

08009710 <__cvt>:
 8009710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	ec55 4b10 	vmov	r4, r5, d0
 8009718:	2d00      	cmp	r5, #0
 800971a:	460e      	mov	r6, r1
 800971c:	4619      	mov	r1, r3
 800971e:	462b      	mov	r3, r5
 8009720:	bfbb      	ittet	lt
 8009722:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009726:	461d      	movlt	r5, r3
 8009728:	2300      	movge	r3, #0
 800972a:	232d      	movlt	r3, #45	; 0x2d
 800972c:	700b      	strb	r3, [r1, #0]
 800972e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009730:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009734:	4691      	mov	r9, r2
 8009736:	f023 0820 	bic.w	r8, r3, #32
 800973a:	bfbc      	itt	lt
 800973c:	4622      	movlt	r2, r4
 800973e:	4614      	movlt	r4, r2
 8009740:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009744:	d005      	beq.n	8009752 <__cvt+0x42>
 8009746:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800974a:	d100      	bne.n	800974e <__cvt+0x3e>
 800974c:	3601      	adds	r6, #1
 800974e:	2102      	movs	r1, #2
 8009750:	e000      	b.n	8009754 <__cvt+0x44>
 8009752:	2103      	movs	r1, #3
 8009754:	ab03      	add	r3, sp, #12
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	ab02      	add	r3, sp, #8
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	ec45 4b10 	vmov	d0, r4, r5
 8009760:	4653      	mov	r3, sl
 8009762:	4632      	mov	r2, r6
 8009764:	f000 fe4c 	bl	800a400 <_dtoa_r>
 8009768:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800976c:	4607      	mov	r7, r0
 800976e:	d102      	bne.n	8009776 <__cvt+0x66>
 8009770:	f019 0f01 	tst.w	r9, #1
 8009774:	d022      	beq.n	80097bc <__cvt+0xac>
 8009776:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800977a:	eb07 0906 	add.w	r9, r7, r6
 800977e:	d110      	bne.n	80097a2 <__cvt+0x92>
 8009780:	783b      	ldrb	r3, [r7, #0]
 8009782:	2b30      	cmp	r3, #48	; 0x30
 8009784:	d10a      	bne.n	800979c <__cvt+0x8c>
 8009786:	2200      	movs	r2, #0
 8009788:	2300      	movs	r3, #0
 800978a:	4620      	mov	r0, r4
 800978c:	4629      	mov	r1, r5
 800978e:	f7f7 f9a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009792:	b918      	cbnz	r0, 800979c <__cvt+0x8c>
 8009794:	f1c6 0601 	rsb	r6, r6, #1
 8009798:	f8ca 6000 	str.w	r6, [sl]
 800979c:	f8da 3000 	ldr.w	r3, [sl]
 80097a0:	4499      	add	r9, r3
 80097a2:	2200      	movs	r2, #0
 80097a4:	2300      	movs	r3, #0
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7f7 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ae:	b108      	cbz	r0, 80097b4 <__cvt+0xa4>
 80097b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80097b4:	2230      	movs	r2, #48	; 0x30
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	454b      	cmp	r3, r9
 80097ba:	d307      	bcc.n	80097cc <__cvt+0xbc>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097c0:	1bdb      	subs	r3, r3, r7
 80097c2:	4638      	mov	r0, r7
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	b004      	add	sp, #16
 80097c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097cc:	1c59      	adds	r1, r3, #1
 80097ce:	9103      	str	r1, [sp, #12]
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e7f0      	b.n	80097b6 <__cvt+0xa6>

080097d4 <__exponent>:
 80097d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097d6:	4603      	mov	r3, r0
 80097d8:	2900      	cmp	r1, #0
 80097da:	bfb8      	it	lt
 80097dc:	4249      	neglt	r1, r1
 80097de:	f803 2b02 	strb.w	r2, [r3], #2
 80097e2:	bfb4      	ite	lt
 80097e4:	222d      	movlt	r2, #45	; 0x2d
 80097e6:	222b      	movge	r2, #43	; 0x2b
 80097e8:	2909      	cmp	r1, #9
 80097ea:	7042      	strb	r2, [r0, #1]
 80097ec:	dd2a      	ble.n	8009844 <__exponent+0x70>
 80097ee:	f10d 0407 	add.w	r4, sp, #7
 80097f2:	46a4      	mov	ip, r4
 80097f4:	270a      	movs	r7, #10
 80097f6:	46a6      	mov	lr, r4
 80097f8:	460a      	mov	r2, r1
 80097fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80097fe:	fb07 1516 	mls	r5, r7, r6, r1
 8009802:	3530      	adds	r5, #48	; 0x30
 8009804:	2a63      	cmp	r2, #99	; 0x63
 8009806:	f104 34ff 	add.w	r4, r4, #4294967295
 800980a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800980e:	4631      	mov	r1, r6
 8009810:	dcf1      	bgt.n	80097f6 <__exponent+0x22>
 8009812:	3130      	adds	r1, #48	; 0x30
 8009814:	f1ae 0502 	sub.w	r5, lr, #2
 8009818:	f804 1c01 	strb.w	r1, [r4, #-1]
 800981c:	1c44      	adds	r4, r0, #1
 800981e:	4629      	mov	r1, r5
 8009820:	4561      	cmp	r1, ip
 8009822:	d30a      	bcc.n	800983a <__exponent+0x66>
 8009824:	f10d 0209 	add.w	r2, sp, #9
 8009828:	eba2 020e 	sub.w	r2, r2, lr
 800982c:	4565      	cmp	r5, ip
 800982e:	bf88      	it	hi
 8009830:	2200      	movhi	r2, #0
 8009832:	4413      	add	r3, r2
 8009834:	1a18      	subs	r0, r3, r0
 8009836:	b003      	add	sp, #12
 8009838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800983a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800983e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009842:	e7ed      	b.n	8009820 <__exponent+0x4c>
 8009844:	2330      	movs	r3, #48	; 0x30
 8009846:	3130      	adds	r1, #48	; 0x30
 8009848:	7083      	strb	r3, [r0, #2]
 800984a:	70c1      	strb	r1, [r0, #3]
 800984c:	1d03      	adds	r3, r0, #4
 800984e:	e7f1      	b.n	8009834 <__exponent+0x60>

08009850 <_printf_float>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	ed2d 8b02 	vpush	{d8}
 8009858:	b08d      	sub	sp, #52	; 0x34
 800985a:	460c      	mov	r4, r1
 800985c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009860:	4616      	mov	r6, r2
 8009862:	461f      	mov	r7, r3
 8009864:	4605      	mov	r5, r0
 8009866:	f001 fd6f 	bl	800b348 <_localeconv_r>
 800986a:	f8d0 a000 	ldr.w	sl, [r0]
 800986e:	4650      	mov	r0, sl
 8009870:	f7f6 fcb6 	bl	80001e0 <strlen>
 8009874:	2300      	movs	r3, #0
 8009876:	930a      	str	r3, [sp, #40]	; 0x28
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	9305      	str	r3, [sp, #20]
 800987c:	f8d8 3000 	ldr.w	r3, [r8]
 8009880:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009884:	3307      	adds	r3, #7
 8009886:	f023 0307 	bic.w	r3, r3, #7
 800988a:	f103 0208 	add.w	r2, r3, #8
 800988e:	f8c8 2000 	str.w	r2, [r8]
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800989a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800989e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098a2:	9307      	str	r3, [sp, #28]
 80098a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80098a8:	ee08 0a10 	vmov	s16, r0
 80098ac:	4b9f      	ldr	r3, [pc, #636]	; (8009b2c <_printf_float+0x2dc>)
 80098ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098b2:	f04f 32ff 	mov.w	r2, #4294967295
 80098b6:	f7f7 f941 	bl	8000b3c <__aeabi_dcmpun>
 80098ba:	bb88      	cbnz	r0, 8009920 <_printf_float+0xd0>
 80098bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098c0:	4b9a      	ldr	r3, [pc, #616]	; (8009b2c <_printf_float+0x2dc>)
 80098c2:	f04f 32ff 	mov.w	r2, #4294967295
 80098c6:	f7f7 f91b 	bl	8000b00 <__aeabi_dcmple>
 80098ca:	bb48      	cbnz	r0, 8009920 <_printf_float+0xd0>
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	4640      	mov	r0, r8
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f7 f90a 	bl	8000aec <__aeabi_dcmplt>
 80098d8:	b110      	cbz	r0, 80098e0 <_printf_float+0x90>
 80098da:	232d      	movs	r3, #45	; 0x2d
 80098dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e0:	4b93      	ldr	r3, [pc, #588]	; (8009b30 <_printf_float+0x2e0>)
 80098e2:	4894      	ldr	r0, [pc, #592]	; (8009b34 <_printf_float+0x2e4>)
 80098e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80098e8:	bf94      	ite	ls
 80098ea:	4698      	movls	r8, r3
 80098ec:	4680      	movhi	r8, r0
 80098ee:	2303      	movs	r3, #3
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	f023 0204 	bic.w	r2, r3, #4
 80098f8:	6022      	str	r2, [r4, #0]
 80098fa:	f04f 0900 	mov.w	r9, #0
 80098fe:	9700      	str	r7, [sp, #0]
 8009900:	4633      	mov	r3, r6
 8009902:	aa0b      	add	r2, sp, #44	; 0x2c
 8009904:	4621      	mov	r1, r4
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f9d8 	bl	8009cbc <_printf_common>
 800990c:	3001      	adds	r0, #1
 800990e:	f040 8090 	bne.w	8009a32 <_printf_float+0x1e2>
 8009912:	f04f 30ff 	mov.w	r0, #4294967295
 8009916:	b00d      	add	sp, #52	; 0x34
 8009918:	ecbd 8b02 	vpop	{d8}
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	4642      	mov	r2, r8
 8009922:	464b      	mov	r3, r9
 8009924:	4640      	mov	r0, r8
 8009926:	4649      	mov	r1, r9
 8009928:	f7f7 f908 	bl	8000b3c <__aeabi_dcmpun>
 800992c:	b140      	cbz	r0, 8009940 <_printf_float+0xf0>
 800992e:	464b      	mov	r3, r9
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfbc      	itt	lt
 8009934:	232d      	movlt	r3, #45	; 0x2d
 8009936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800993a:	487f      	ldr	r0, [pc, #508]	; (8009b38 <_printf_float+0x2e8>)
 800993c:	4b7f      	ldr	r3, [pc, #508]	; (8009b3c <_printf_float+0x2ec>)
 800993e:	e7d1      	b.n	80098e4 <_printf_float+0x94>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009946:	9206      	str	r2, [sp, #24]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	d13f      	bne.n	80099cc <_printf_float+0x17c>
 800994c:	2306      	movs	r3, #6
 800994e:	6063      	str	r3, [r4, #4]
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	6861      	ldr	r1, [r4, #4]
 8009954:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009958:	2300      	movs	r3, #0
 800995a:	9303      	str	r3, [sp, #12]
 800995c:	ab0a      	add	r3, sp, #40	; 0x28
 800995e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009962:	ab09      	add	r3, sp, #36	; 0x24
 8009964:	ec49 8b10 	vmov	d0, r8, r9
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	6022      	str	r2, [r4, #0]
 800996c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009970:	4628      	mov	r0, r5
 8009972:	f7ff fecd 	bl	8009710 <__cvt>
 8009976:	9b06      	ldr	r3, [sp, #24]
 8009978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800997a:	2b47      	cmp	r3, #71	; 0x47
 800997c:	4680      	mov	r8, r0
 800997e:	d108      	bne.n	8009992 <_printf_float+0x142>
 8009980:	1cc8      	adds	r0, r1, #3
 8009982:	db02      	blt.n	800998a <_printf_float+0x13a>
 8009984:	6863      	ldr	r3, [r4, #4]
 8009986:	4299      	cmp	r1, r3
 8009988:	dd41      	ble.n	8009a0e <_printf_float+0x1be>
 800998a:	f1ab 0b02 	sub.w	fp, fp, #2
 800998e:	fa5f fb8b 	uxtb.w	fp, fp
 8009992:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009996:	d820      	bhi.n	80099da <_printf_float+0x18a>
 8009998:	3901      	subs	r1, #1
 800999a:	465a      	mov	r2, fp
 800999c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099a0:	9109      	str	r1, [sp, #36]	; 0x24
 80099a2:	f7ff ff17 	bl	80097d4 <__exponent>
 80099a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099a8:	1813      	adds	r3, r2, r0
 80099aa:	2a01      	cmp	r2, #1
 80099ac:	4681      	mov	r9, r0
 80099ae:	6123      	str	r3, [r4, #16]
 80099b0:	dc02      	bgt.n	80099b8 <_printf_float+0x168>
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	07d2      	lsls	r2, r2, #31
 80099b6:	d501      	bpl.n	80099bc <_printf_float+0x16c>
 80099b8:	3301      	adds	r3, #1
 80099ba:	6123      	str	r3, [r4, #16]
 80099bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d09c      	beq.n	80098fe <_printf_float+0xae>
 80099c4:	232d      	movs	r3, #45	; 0x2d
 80099c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099ca:	e798      	b.n	80098fe <_printf_float+0xae>
 80099cc:	9a06      	ldr	r2, [sp, #24]
 80099ce:	2a47      	cmp	r2, #71	; 0x47
 80099d0:	d1be      	bne.n	8009950 <_printf_float+0x100>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1bc      	bne.n	8009950 <_printf_float+0x100>
 80099d6:	2301      	movs	r3, #1
 80099d8:	e7b9      	b.n	800994e <_printf_float+0xfe>
 80099da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80099de:	d118      	bne.n	8009a12 <_printf_float+0x1c2>
 80099e0:	2900      	cmp	r1, #0
 80099e2:	6863      	ldr	r3, [r4, #4]
 80099e4:	dd0b      	ble.n	80099fe <_printf_float+0x1ae>
 80099e6:	6121      	str	r1, [r4, #16]
 80099e8:	b913      	cbnz	r3, 80099f0 <_printf_float+0x1a0>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	07d0      	lsls	r0, r2, #31
 80099ee:	d502      	bpl.n	80099f6 <_printf_float+0x1a6>
 80099f0:	3301      	adds	r3, #1
 80099f2:	440b      	add	r3, r1
 80099f4:	6123      	str	r3, [r4, #16]
 80099f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80099f8:	f04f 0900 	mov.w	r9, #0
 80099fc:	e7de      	b.n	80099bc <_printf_float+0x16c>
 80099fe:	b913      	cbnz	r3, 8009a06 <_printf_float+0x1b6>
 8009a00:	6822      	ldr	r2, [r4, #0]
 8009a02:	07d2      	lsls	r2, r2, #31
 8009a04:	d501      	bpl.n	8009a0a <_printf_float+0x1ba>
 8009a06:	3302      	adds	r3, #2
 8009a08:	e7f4      	b.n	80099f4 <_printf_float+0x1a4>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e7f2      	b.n	80099f4 <_printf_float+0x1a4>
 8009a0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a14:	4299      	cmp	r1, r3
 8009a16:	db05      	blt.n	8009a24 <_printf_float+0x1d4>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	6121      	str	r1, [r4, #16]
 8009a1c:	07d8      	lsls	r0, r3, #31
 8009a1e:	d5ea      	bpl.n	80099f6 <_printf_float+0x1a6>
 8009a20:	1c4b      	adds	r3, r1, #1
 8009a22:	e7e7      	b.n	80099f4 <_printf_float+0x1a4>
 8009a24:	2900      	cmp	r1, #0
 8009a26:	bfd4      	ite	le
 8009a28:	f1c1 0202 	rsble	r2, r1, #2
 8009a2c:	2201      	movgt	r2, #1
 8009a2e:	4413      	add	r3, r2
 8009a30:	e7e0      	b.n	80099f4 <_printf_float+0x1a4>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	055a      	lsls	r2, r3, #21
 8009a36:	d407      	bmi.n	8009a48 <_printf_float+0x1f8>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	d12c      	bne.n	8009aa0 <_printf_float+0x250>
 8009a46:	e764      	b.n	8009912 <_printf_float+0xc2>
 8009a48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a4c:	f240 80e0 	bls.w	8009c10 <_printf_float+0x3c0>
 8009a50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a54:	2200      	movs	r2, #0
 8009a56:	2300      	movs	r3, #0
 8009a58:	f7f7 f83e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d034      	beq.n	8009aca <_printf_float+0x27a>
 8009a60:	4a37      	ldr	r2, [pc, #220]	; (8009b40 <_printf_float+0x2f0>)
 8009a62:	2301      	movs	r3, #1
 8009a64:	4631      	mov	r1, r6
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b8      	blx	r7
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	f43f af51 	beq.w	8009912 <_printf_float+0xc2>
 8009a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a74:	429a      	cmp	r2, r3
 8009a76:	db02      	blt.n	8009a7e <_printf_float+0x22e>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	07d8      	lsls	r0, r3, #31
 8009a7c:	d510      	bpl.n	8009aa0 <_printf_float+0x250>
 8009a7e:	ee18 3a10 	vmov	r3, s16
 8009a82:	4652      	mov	r2, sl
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f af41 	beq.w	8009912 <_printf_float+0xc2>
 8009a90:	f04f 0800 	mov.w	r8, #0
 8009a94:	f104 091a 	add.w	r9, r4, #26
 8009a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	4543      	cmp	r3, r8
 8009a9e:	dc09      	bgt.n	8009ab4 <_printf_float+0x264>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	079b      	lsls	r3, r3, #30
 8009aa4:	f100 8105 	bmi.w	8009cb2 <_printf_float+0x462>
 8009aa8:	68e0      	ldr	r0, [r4, #12]
 8009aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aac:	4298      	cmp	r0, r3
 8009aae:	bfb8      	it	lt
 8009ab0:	4618      	movlt	r0, r3
 8009ab2:	e730      	b.n	8009916 <_printf_float+0xc6>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	464a      	mov	r2, r9
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4628      	mov	r0, r5
 8009abc:	47b8      	blx	r7
 8009abe:	3001      	adds	r0, #1
 8009ac0:	f43f af27 	beq.w	8009912 <_printf_float+0xc2>
 8009ac4:	f108 0801 	add.w	r8, r8, #1
 8009ac8:	e7e6      	b.n	8009a98 <_printf_float+0x248>
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dc39      	bgt.n	8009b44 <_printf_float+0x2f4>
 8009ad0:	4a1b      	ldr	r2, [pc, #108]	; (8009b40 <_printf_float+0x2f0>)
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f af19 	beq.w	8009912 <_printf_float+0xc2>
 8009ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	d102      	bne.n	8009aee <_printf_float+0x29e>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	d5d8      	bpl.n	8009aa0 <_printf_float+0x250>
 8009aee:	ee18 3a10 	vmov	r3, s16
 8009af2:	4652      	mov	r2, sl
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	f43f af09 	beq.w	8009912 <_printf_float+0xc2>
 8009b00:	f04f 0900 	mov.w	r9, #0
 8009b04:	f104 0a1a 	add.w	sl, r4, #26
 8009b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b0a:	425b      	negs	r3, r3
 8009b0c:	454b      	cmp	r3, r9
 8009b0e:	dc01      	bgt.n	8009b14 <_printf_float+0x2c4>
 8009b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b12:	e792      	b.n	8009a3a <_printf_float+0x1ea>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4652      	mov	r2, sl
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f aef7 	beq.w	8009912 <_printf_float+0xc2>
 8009b24:	f109 0901 	add.w	r9, r9, #1
 8009b28:	e7ee      	b.n	8009b08 <_printf_float+0x2b8>
 8009b2a:	bf00      	nop
 8009b2c:	7fefffff 	.word	0x7fefffff
 8009b30:	0800c9d8 	.word	0x0800c9d8
 8009b34:	0800c9dc 	.word	0x0800c9dc
 8009b38:	0800c9e4 	.word	0x0800c9e4
 8009b3c:	0800c9e0 	.word	0x0800c9e0
 8009b40:	0800c9e8 	.word	0x0800c9e8
 8009b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	bfa8      	it	ge
 8009b4c:	461a      	movge	r2, r3
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	4691      	mov	r9, r2
 8009b52:	dc37      	bgt.n	8009bc4 <_printf_float+0x374>
 8009b54:	f04f 0b00 	mov.w	fp, #0
 8009b58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b5c:	f104 021a 	add.w	r2, r4, #26
 8009b60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b62:	9305      	str	r3, [sp, #20]
 8009b64:	eba3 0309 	sub.w	r3, r3, r9
 8009b68:	455b      	cmp	r3, fp
 8009b6a:	dc33      	bgt.n	8009bd4 <_printf_float+0x384>
 8009b6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b70:	429a      	cmp	r2, r3
 8009b72:	db3b      	blt.n	8009bec <_printf_float+0x39c>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	07da      	lsls	r2, r3, #31
 8009b78:	d438      	bmi.n	8009bec <_printf_float+0x39c>
 8009b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b7c:	9b05      	ldr	r3, [sp, #20]
 8009b7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	eba2 0901 	sub.w	r9, r2, r1
 8009b86:	4599      	cmp	r9, r3
 8009b88:	bfa8      	it	ge
 8009b8a:	4699      	movge	r9, r3
 8009b8c:	f1b9 0f00 	cmp.w	r9, #0
 8009b90:	dc35      	bgt.n	8009bfe <_printf_float+0x3ae>
 8009b92:	f04f 0800 	mov.w	r8, #0
 8009b96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b9a:	f104 0a1a 	add.w	sl, r4, #26
 8009b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba2:	1a9b      	subs	r3, r3, r2
 8009ba4:	eba3 0309 	sub.w	r3, r3, r9
 8009ba8:	4543      	cmp	r3, r8
 8009baa:	f77f af79 	ble.w	8009aa0 <_printf_float+0x250>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4652      	mov	r2, sl
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b8      	blx	r7
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f43f aeaa 	beq.w	8009912 <_printf_float+0xc2>
 8009bbe:	f108 0801 	add.w	r8, r8, #1
 8009bc2:	e7ec      	b.n	8009b9e <_printf_float+0x34e>
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4642      	mov	r2, r8
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d1c0      	bne.n	8009b54 <_printf_float+0x304>
 8009bd2:	e69e      	b.n	8009912 <_printf_float+0xc2>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	4628      	mov	r0, r5
 8009bda:	9205      	str	r2, [sp, #20]
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f ae97 	beq.w	8009912 <_printf_float+0xc2>
 8009be4:	9a05      	ldr	r2, [sp, #20]
 8009be6:	f10b 0b01 	add.w	fp, fp, #1
 8009bea:	e7b9      	b.n	8009b60 <_printf_float+0x310>
 8009bec:	ee18 3a10 	vmov	r3, s16
 8009bf0:	4652      	mov	r2, sl
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b8      	blx	r7
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d1be      	bne.n	8009b7a <_printf_float+0x32a>
 8009bfc:	e689      	b.n	8009912 <_printf_float+0xc2>
 8009bfe:	9a05      	ldr	r2, [sp, #20]
 8009c00:	464b      	mov	r3, r9
 8009c02:	4442      	add	r2, r8
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d1c1      	bne.n	8009b92 <_printf_float+0x342>
 8009c0e:	e680      	b.n	8009912 <_printf_float+0xc2>
 8009c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c12:	2a01      	cmp	r2, #1
 8009c14:	dc01      	bgt.n	8009c1a <_printf_float+0x3ca>
 8009c16:	07db      	lsls	r3, r3, #31
 8009c18:	d538      	bpl.n	8009c8c <_printf_float+0x43c>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4642      	mov	r2, r8
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4628      	mov	r0, r5
 8009c22:	47b8      	blx	r7
 8009c24:	3001      	adds	r0, #1
 8009c26:	f43f ae74 	beq.w	8009912 <_printf_float+0xc2>
 8009c2a:	ee18 3a10 	vmov	r3, s16
 8009c2e:	4652      	mov	r2, sl
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f ae6b 	beq.w	8009912 <_printf_float+0xc2>
 8009c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	f7f6 ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c48:	b9d8      	cbnz	r0, 8009c82 <_printf_float+0x432>
 8009c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4c:	f108 0201 	add.w	r2, r8, #1
 8009c50:	3b01      	subs	r3, #1
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	47b8      	blx	r7
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d10e      	bne.n	8009c7a <_printf_float+0x42a>
 8009c5c:	e659      	b.n	8009912 <_printf_float+0xc2>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4652      	mov	r2, sl
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f ae52 	beq.w	8009912 <_printf_float+0xc2>
 8009c6e:	f108 0801 	add.w	r8, r8, #1
 8009c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c74:	3b01      	subs	r3, #1
 8009c76:	4543      	cmp	r3, r8
 8009c78:	dcf1      	bgt.n	8009c5e <_printf_float+0x40e>
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c80:	e6dc      	b.n	8009a3c <_printf_float+0x1ec>
 8009c82:	f04f 0800 	mov.w	r8, #0
 8009c86:	f104 0a1a 	add.w	sl, r4, #26
 8009c8a:	e7f2      	b.n	8009c72 <_printf_float+0x422>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	4642      	mov	r2, r8
 8009c90:	e7df      	b.n	8009c52 <_printf_float+0x402>
 8009c92:	2301      	movs	r3, #1
 8009c94:	464a      	mov	r2, r9
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	f43f ae38 	beq.w	8009912 <_printf_float+0xc2>
 8009ca2:	f108 0801 	add.w	r8, r8, #1
 8009ca6:	68e3      	ldr	r3, [r4, #12]
 8009ca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009caa:	1a5b      	subs	r3, r3, r1
 8009cac:	4543      	cmp	r3, r8
 8009cae:	dcf0      	bgt.n	8009c92 <_printf_float+0x442>
 8009cb0:	e6fa      	b.n	8009aa8 <_printf_float+0x258>
 8009cb2:	f04f 0800 	mov.w	r8, #0
 8009cb6:	f104 0919 	add.w	r9, r4, #25
 8009cba:	e7f4      	b.n	8009ca6 <_printf_float+0x456>

08009cbc <_printf_common>:
 8009cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	4699      	mov	r9, r3
 8009cc4:	688a      	ldr	r2, [r1, #8]
 8009cc6:	690b      	ldr	r3, [r1, #16]
 8009cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	bfb8      	it	lt
 8009cd0:	4613      	movlt	r3, r2
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cd8:	4607      	mov	r7, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	b10a      	cbz	r2, 8009ce2 <_printf_common+0x26>
 8009cde:	3301      	adds	r3, #1
 8009ce0:	6033      	str	r3, [r6, #0]
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	0699      	lsls	r1, r3, #26
 8009ce6:	bf42      	ittt	mi
 8009ce8:	6833      	ldrmi	r3, [r6, #0]
 8009cea:	3302      	addmi	r3, #2
 8009cec:	6033      	strmi	r3, [r6, #0]
 8009cee:	6825      	ldr	r5, [r4, #0]
 8009cf0:	f015 0506 	ands.w	r5, r5, #6
 8009cf4:	d106      	bne.n	8009d04 <_printf_common+0x48>
 8009cf6:	f104 0a19 	add.w	sl, r4, #25
 8009cfa:	68e3      	ldr	r3, [r4, #12]
 8009cfc:	6832      	ldr	r2, [r6, #0]
 8009cfe:	1a9b      	subs	r3, r3, r2
 8009d00:	42ab      	cmp	r3, r5
 8009d02:	dc26      	bgt.n	8009d52 <_printf_common+0x96>
 8009d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d08:	1e13      	subs	r3, r2, #0
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	bf18      	it	ne
 8009d0e:	2301      	movne	r3, #1
 8009d10:	0692      	lsls	r2, r2, #26
 8009d12:	d42b      	bmi.n	8009d6c <_printf_common+0xb0>
 8009d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d18:	4649      	mov	r1, r9
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	47c0      	blx	r8
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d01e      	beq.n	8009d60 <_printf_common+0xa4>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	68e5      	ldr	r5, [r4, #12]
 8009d26:	6832      	ldr	r2, [r6, #0]
 8009d28:	f003 0306 	and.w	r3, r3, #6
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	bf08      	it	eq
 8009d30:	1aad      	subeq	r5, r5, r2
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	6922      	ldr	r2, [r4, #16]
 8009d36:	bf0c      	ite	eq
 8009d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d3c:	2500      	movne	r5, #0
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	bfc4      	itt	gt
 8009d42:	1a9b      	subgt	r3, r3, r2
 8009d44:	18ed      	addgt	r5, r5, r3
 8009d46:	2600      	movs	r6, #0
 8009d48:	341a      	adds	r4, #26
 8009d4a:	42b5      	cmp	r5, r6
 8009d4c:	d11a      	bne.n	8009d84 <_printf_common+0xc8>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e008      	b.n	8009d64 <_printf_common+0xa8>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4652      	mov	r2, sl
 8009d56:	4649      	mov	r1, r9
 8009d58:	4638      	mov	r0, r7
 8009d5a:	47c0      	blx	r8
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	d103      	bne.n	8009d68 <_printf_common+0xac>
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d68:	3501      	adds	r5, #1
 8009d6a:	e7c6      	b.n	8009cfa <_printf_common+0x3e>
 8009d6c:	18e1      	adds	r1, r4, r3
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	2030      	movs	r0, #48	; 0x30
 8009d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d76:	4422      	add	r2, r4
 8009d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d80:	3302      	adds	r3, #2
 8009d82:	e7c7      	b.n	8009d14 <_printf_common+0x58>
 8009d84:	2301      	movs	r3, #1
 8009d86:	4622      	mov	r2, r4
 8009d88:	4649      	mov	r1, r9
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	47c0      	blx	r8
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d0e6      	beq.n	8009d60 <_printf_common+0xa4>
 8009d92:	3601      	adds	r6, #1
 8009d94:	e7d9      	b.n	8009d4a <_printf_common+0x8e>
	...

08009d98 <_printf_i>:
 8009d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	4691      	mov	r9, r2
 8009da0:	7e27      	ldrb	r7, [r4, #24]
 8009da2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009da4:	2f78      	cmp	r7, #120	; 0x78
 8009da6:	4680      	mov	r8, r0
 8009da8:	469a      	mov	sl, r3
 8009daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dae:	d807      	bhi.n	8009dc0 <_printf_i+0x28>
 8009db0:	2f62      	cmp	r7, #98	; 0x62
 8009db2:	d80a      	bhi.n	8009dca <_printf_i+0x32>
 8009db4:	2f00      	cmp	r7, #0
 8009db6:	f000 80d8 	beq.w	8009f6a <_printf_i+0x1d2>
 8009dba:	2f58      	cmp	r7, #88	; 0x58
 8009dbc:	f000 80a3 	beq.w	8009f06 <_printf_i+0x16e>
 8009dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dc8:	e03a      	b.n	8009e40 <_printf_i+0xa8>
 8009dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dce:	2b15      	cmp	r3, #21
 8009dd0:	d8f6      	bhi.n	8009dc0 <_printf_i+0x28>
 8009dd2:	a001      	add	r0, pc, #4	; (adr r0, 8009dd8 <_printf_i+0x40>)
 8009dd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009dd8:	08009e31 	.word	0x08009e31
 8009ddc:	08009e45 	.word	0x08009e45
 8009de0:	08009dc1 	.word	0x08009dc1
 8009de4:	08009dc1 	.word	0x08009dc1
 8009de8:	08009dc1 	.word	0x08009dc1
 8009dec:	08009dc1 	.word	0x08009dc1
 8009df0:	08009e45 	.word	0x08009e45
 8009df4:	08009dc1 	.word	0x08009dc1
 8009df8:	08009dc1 	.word	0x08009dc1
 8009dfc:	08009dc1 	.word	0x08009dc1
 8009e00:	08009dc1 	.word	0x08009dc1
 8009e04:	08009f51 	.word	0x08009f51
 8009e08:	08009e75 	.word	0x08009e75
 8009e0c:	08009f33 	.word	0x08009f33
 8009e10:	08009dc1 	.word	0x08009dc1
 8009e14:	08009dc1 	.word	0x08009dc1
 8009e18:	08009f73 	.word	0x08009f73
 8009e1c:	08009dc1 	.word	0x08009dc1
 8009e20:	08009e75 	.word	0x08009e75
 8009e24:	08009dc1 	.word	0x08009dc1
 8009e28:	08009dc1 	.word	0x08009dc1
 8009e2c:	08009f3b 	.word	0x08009f3b
 8009e30:	680b      	ldr	r3, [r1, #0]
 8009e32:	1d1a      	adds	r2, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	600a      	str	r2, [r1, #0]
 8009e38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0a3      	b.n	8009f8c <_printf_i+0x1f4>
 8009e44:	6825      	ldr	r5, [r4, #0]
 8009e46:	6808      	ldr	r0, [r1, #0]
 8009e48:	062e      	lsls	r6, r5, #24
 8009e4a:	f100 0304 	add.w	r3, r0, #4
 8009e4e:	d50a      	bpl.n	8009e66 <_printf_i+0xce>
 8009e50:	6805      	ldr	r5, [r0, #0]
 8009e52:	600b      	str	r3, [r1, #0]
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	da03      	bge.n	8009e60 <_printf_i+0xc8>
 8009e58:	232d      	movs	r3, #45	; 0x2d
 8009e5a:	426d      	negs	r5, r5
 8009e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e60:	485e      	ldr	r0, [pc, #376]	; (8009fdc <_printf_i+0x244>)
 8009e62:	230a      	movs	r3, #10
 8009e64:	e019      	b.n	8009e9a <_printf_i+0x102>
 8009e66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e6a:	6805      	ldr	r5, [r0, #0]
 8009e6c:	600b      	str	r3, [r1, #0]
 8009e6e:	bf18      	it	ne
 8009e70:	b22d      	sxthne	r5, r5
 8009e72:	e7ef      	b.n	8009e54 <_printf_i+0xbc>
 8009e74:	680b      	ldr	r3, [r1, #0]
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	1d18      	adds	r0, r3, #4
 8009e7a:	6008      	str	r0, [r1, #0]
 8009e7c:	0628      	lsls	r0, r5, #24
 8009e7e:	d501      	bpl.n	8009e84 <_printf_i+0xec>
 8009e80:	681d      	ldr	r5, [r3, #0]
 8009e82:	e002      	b.n	8009e8a <_printf_i+0xf2>
 8009e84:	0669      	lsls	r1, r5, #25
 8009e86:	d5fb      	bpl.n	8009e80 <_printf_i+0xe8>
 8009e88:	881d      	ldrh	r5, [r3, #0]
 8009e8a:	4854      	ldr	r0, [pc, #336]	; (8009fdc <_printf_i+0x244>)
 8009e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009e8e:	bf0c      	ite	eq
 8009e90:	2308      	moveq	r3, #8
 8009e92:	230a      	movne	r3, #10
 8009e94:	2100      	movs	r1, #0
 8009e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e9a:	6866      	ldr	r6, [r4, #4]
 8009e9c:	60a6      	str	r6, [r4, #8]
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	bfa2      	ittt	ge
 8009ea2:	6821      	ldrge	r1, [r4, #0]
 8009ea4:	f021 0104 	bicge.w	r1, r1, #4
 8009ea8:	6021      	strge	r1, [r4, #0]
 8009eaa:	b90d      	cbnz	r5, 8009eb0 <_printf_i+0x118>
 8009eac:	2e00      	cmp	r6, #0
 8009eae:	d04d      	beq.n	8009f4c <_printf_i+0x1b4>
 8009eb0:	4616      	mov	r6, r2
 8009eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8009eba:	5dc7      	ldrb	r7, [r0, r7]
 8009ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ec0:	462f      	mov	r7, r5
 8009ec2:	42bb      	cmp	r3, r7
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	d9f4      	bls.n	8009eb2 <_printf_i+0x11a>
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d10b      	bne.n	8009ee4 <_printf_i+0x14c>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	07df      	lsls	r7, r3, #31
 8009ed0:	d508      	bpl.n	8009ee4 <_printf_i+0x14c>
 8009ed2:	6923      	ldr	r3, [r4, #16]
 8009ed4:	6861      	ldr	r1, [r4, #4]
 8009ed6:	4299      	cmp	r1, r3
 8009ed8:	bfde      	ittt	le
 8009eda:	2330      	movle	r3, #48	; 0x30
 8009edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ee4:	1b92      	subs	r2, r2, r6
 8009ee6:	6122      	str	r2, [r4, #16]
 8009ee8:	f8cd a000 	str.w	sl, [sp]
 8009eec:	464b      	mov	r3, r9
 8009eee:	aa03      	add	r2, sp, #12
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	f7ff fee2 	bl	8009cbc <_printf_common>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d14c      	bne.n	8009f96 <_printf_i+0x1fe>
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	b004      	add	sp, #16
 8009f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f06:	4835      	ldr	r0, [pc, #212]	; (8009fdc <_printf_i+0x244>)
 8009f08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	680e      	ldr	r6, [r1, #0]
 8009f10:	061f      	lsls	r7, r3, #24
 8009f12:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f16:	600e      	str	r6, [r1, #0]
 8009f18:	d514      	bpl.n	8009f44 <_printf_i+0x1ac>
 8009f1a:	07d9      	lsls	r1, r3, #31
 8009f1c:	bf44      	itt	mi
 8009f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f22:	6023      	strmi	r3, [r4, #0]
 8009f24:	b91d      	cbnz	r5, 8009f2e <_printf_i+0x196>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	f023 0320 	bic.w	r3, r3, #32
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	2310      	movs	r3, #16
 8009f30:	e7b0      	b.n	8009e94 <_printf_i+0xfc>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	f043 0320 	orr.w	r3, r3, #32
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	2378      	movs	r3, #120	; 0x78
 8009f3c:	4828      	ldr	r0, [pc, #160]	; (8009fe0 <_printf_i+0x248>)
 8009f3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f42:	e7e3      	b.n	8009f0c <_printf_i+0x174>
 8009f44:	065e      	lsls	r6, r3, #25
 8009f46:	bf48      	it	mi
 8009f48:	b2ad      	uxthmi	r5, r5
 8009f4a:	e7e6      	b.n	8009f1a <_printf_i+0x182>
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	e7bb      	b.n	8009ec8 <_printf_i+0x130>
 8009f50:	680b      	ldr	r3, [r1, #0]
 8009f52:	6826      	ldr	r6, [r4, #0]
 8009f54:	6960      	ldr	r0, [r4, #20]
 8009f56:	1d1d      	adds	r5, r3, #4
 8009f58:	600d      	str	r5, [r1, #0]
 8009f5a:	0635      	lsls	r5, r6, #24
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	d501      	bpl.n	8009f64 <_printf_i+0x1cc>
 8009f60:	6018      	str	r0, [r3, #0]
 8009f62:	e002      	b.n	8009f6a <_printf_i+0x1d2>
 8009f64:	0671      	lsls	r1, r6, #25
 8009f66:	d5fb      	bpl.n	8009f60 <_printf_i+0x1c8>
 8009f68:	8018      	strh	r0, [r3, #0]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	6123      	str	r3, [r4, #16]
 8009f6e:	4616      	mov	r6, r2
 8009f70:	e7ba      	b.n	8009ee8 <_printf_i+0x150>
 8009f72:	680b      	ldr	r3, [r1, #0]
 8009f74:	1d1a      	adds	r2, r3, #4
 8009f76:	600a      	str	r2, [r1, #0]
 8009f78:	681e      	ldr	r6, [r3, #0]
 8009f7a:	6862      	ldr	r2, [r4, #4]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f7f6 f936 	bl	80001f0 <memchr>
 8009f84:	b108      	cbz	r0, 8009f8a <_printf_i+0x1f2>
 8009f86:	1b80      	subs	r0, r0, r6
 8009f88:	6060      	str	r0, [r4, #4]
 8009f8a:	6863      	ldr	r3, [r4, #4]
 8009f8c:	6123      	str	r3, [r4, #16]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f94:	e7a8      	b.n	8009ee8 <_printf_i+0x150>
 8009f96:	6923      	ldr	r3, [r4, #16]
 8009f98:	4632      	mov	r2, r6
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	47d0      	blx	sl
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d0ab      	beq.n	8009efc <_printf_i+0x164>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	079b      	lsls	r3, r3, #30
 8009fa8:	d413      	bmi.n	8009fd2 <_printf_i+0x23a>
 8009faa:	68e0      	ldr	r0, [r4, #12]
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	4298      	cmp	r0, r3
 8009fb0:	bfb8      	it	lt
 8009fb2:	4618      	movlt	r0, r3
 8009fb4:	e7a4      	b.n	8009f00 <_printf_i+0x168>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4632      	mov	r2, r6
 8009fba:	4649      	mov	r1, r9
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	47d0      	blx	sl
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d09b      	beq.n	8009efc <_printf_i+0x164>
 8009fc4:	3501      	adds	r5, #1
 8009fc6:	68e3      	ldr	r3, [r4, #12]
 8009fc8:	9903      	ldr	r1, [sp, #12]
 8009fca:	1a5b      	subs	r3, r3, r1
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	dcf2      	bgt.n	8009fb6 <_printf_i+0x21e>
 8009fd0:	e7eb      	b.n	8009faa <_printf_i+0x212>
 8009fd2:	2500      	movs	r5, #0
 8009fd4:	f104 0619 	add.w	r6, r4, #25
 8009fd8:	e7f5      	b.n	8009fc6 <_printf_i+0x22e>
 8009fda:	bf00      	nop
 8009fdc:	0800c9ea 	.word	0x0800c9ea
 8009fe0:	0800c9fb 	.word	0x0800c9fb

08009fe4 <_puts_r>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	460e      	mov	r6, r1
 8009fe8:	4605      	mov	r5, r0
 8009fea:	b118      	cbz	r0, 8009ff4 <_puts_r+0x10>
 8009fec:	6983      	ldr	r3, [r0, #24]
 8009fee:	b90b      	cbnz	r3, 8009ff4 <_puts_r+0x10>
 8009ff0:	f001 f90c 	bl	800b20c <__sinit>
 8009ff4:	69ab      	ldr	r3, [r5, #24]
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	b913      	cbnz	r3, 800a000 <_puts_r+0x1c>
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f001 f906 	bl	800b20c <__sinit>
 800a000:	4b2c      	ldr	r3, [pc, #176]	; (800a0b4 <_puts_r+0xd0>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d120      	bne.n	800a048 <_puts_r+0x64>
 800a006:	686c      	ldr	r4, [r5, #4]
 800a008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a00a:	07db      	lsls	r3, r3, #31
 800a00c:	d405      	bmi.n	800a01a <_puts_r+0x36>
 800a00e:	89a3      	ldrh	r3, [r4, #12]
 800a010:	0598      	lsls	r0, r3, #22
 800a012:	d402      	bmi.n	800a01a <_puts_r+0x36>
 800a014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a016:	f001 f99c 	bl	800b352 <__retarget_lock_acquire_recursive>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	0719      	lsls	r1, r3, #28
 800a01e:	d51d      	bpl.n	800a05c <_puts_r+0x78>
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	b1db      	cbz	r3, 800a05c <_puts_r+0x78>
 800a024:	3e01      	subs	r6, #1
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a02c:	3b01      	subs	r3, #1
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	bb39      	cbnz	r1, 800a082 <_puts_r+0x9e>
 800a032:	2b00      	cmp	r3, #0
 800a034:	da38      	bge.n	800a0a8 <_puts_r+0xc4>
 800a036:	4622      	mov	r2, r4
 800a038:	210a      	movs	r1, #10
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 f894 	bl	800a168 <__swbuf_r>
 800a040:	3001      	adds	r0, #1
 800a042:	d011      	beq.n	800a068 <_puts_r+0x84>
 800a044:	250a      	movs	r5, #10
 800a046:	e011      	b.n	800a06c <_puts_r+0x88>
 800a048:	4b1b      	ldr	r3, [pc, #108]	; (800a0b8 <_puts_r+0xd4>)
 800a04a:	429c      	cmp	r4, r3
 800a04c:	d101      	bne.n	800a052 <_puts_r+0x6e>
 800a04e:	68ac      	ldr	r4, [r5, #8]
 800a050:	e7da      	b.n	800a008 <_puts_r+0x24>
 800a052:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <_puts_r+0xd8>)
 800a054:	429c      	cmp	r4, r3
 800a056:	bf08      	it	eq
 800a058:	68ec      	ldreq	r4, [r5, #12]
 800a05a:	e7d5      	b.n	800a008 <_puts_r+0x24>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 f8d4 	bl	800a20c <__swsetup_r>
 800a064:	2800      	cmp	r0, #0
 800a066:	d0dd      	beq.n	800a024 <_puts_r+0x40>
 800a068:	f04f 35ff 	mov.w	r5, #4294967295
 800a06c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a06e:	07da      	lsls	r2, r3, #31
 800a070:	d405      	bmi.n	800a07e <_puts_r+0x9a>
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	059b      	lsls	r3, r3, #22
 800a076:	d402      	bmi.n	800a07e <_puts_r+0x9a>
 800a078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a07a:	f001 f96b 	bl	800b354 <__retarget_lock_release_recursive>
 800a07e:	4628      	mov	r0, r5
 800a080:	bd70      	pop	{r4, r5, r6, pc}
 800a082:	2b00      	cmp	r3, #0
 800a084:	da04      	bge.n	800a090 <_puts_r+0xac>
 800a086:	69a2      	ldr	r2, [r4, #24]
 800a088:	429a      	cmp	r2, r3
 800a08a:	dc06      	bgt.n	800a09a <_puts_r+0xb6>
 800a08c:	290a      	cmp	r1, #10
 800a08e:	d004      	beq.n	800a09a <_puts_r+0xb6>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	6022      	str	r2, [r4, #0]
 800a096:	7019      	strb	r1, [r3, #0]
 800a098:	e7c5      	b.n	800a026 <_puts_r+0x42>
 800a09a:	4622      	mov	r2, r4
 800a09c:	4628      	mov	r0, r5
 800a09e:	f000 f863 	bl	800a168 <__swbuf_r>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	d1bf      	bne.n	800a026 <_puts_r+0x42>
 800a0a6:	e7df      	b.n	800a068 <_puts_r+0x84>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	250a      	movs	r5, #10
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	701d      	strb	r5, [r3, #0]
 800a0b2:	e7db      	b.n	800a06c <_puts_r+0x88>
 800a0b4:	0800cac0 	.word	0x0800cac0
 800a0b8:	0800cae0 	.word	0x0800cae0
 800a0bc:	0800caa0 	.word	0x0800caa0

0800a0c0 <puts>:
 800a0c0:	4b02      	ldr	r3, [pc, #8]	; (800a0cc <puts+0xc>)
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f7ff bf8d 	b.w	8009fe4 <_puts_r>
 800a0ca:	bf00      	nop
 800a0cc:	20000368 	.word	0x20000368

0800a0d0 <realloc>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <realloc+0xc>)
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	f001 bd3a 	b.w	800bb50 <_realloc_r>
 800a0dc:	20000368 	.word	0x20000368

0800a0e0 <_sbrk_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_sbrk_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f7 fd8c 	bl	8001c08 <_sbrk>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_sbrk_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_sbrk_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	200007b4 	.word	0x200007b4

0800a100 <strncpy>:
 800a100:	b510      	push	{r4, lr}
 800a102:	3901      	subs	r1, #1
 800a104:	4603      	mov	r3, r0
 800a106:	b132      	cbz	r2, 800a116 <strncpy+0x16>
 800a108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a10c:	f803 4b01 	strb.w	r4, [r3], #1
 800a110:	3a01      	subs	r2, #1
 800a112:	2c00      	cmp	r4, #0
 800a114:	d1f7      	bne.n	800a106 <strncpy+0x6>
 800a116:	441a      	add	r2, r3
 800a118:	2100      	movs	r1, #0
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d100      	bne.n	800a120 <strncpy+0x20>
 800a11e:	bd10      	pop	{r4, pc}
 800a120:	f803 1b01 	strb.w	r1, [r3], #1
 800a124:	e7f9      	b.n	800a11a <strncpy+0x1a>
	...

0800a128 <_vsiprintf_r>:
 800a128:	b500      	push	{lr}
 800a12a:	b09b      	sub	sp, #108	; 0x6c
 800a12c:	9100      	str	r1, [sp, #0]
 800a12e:	9104      	str	r1, [sp, #16]
 800a130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a134:	9105      	str	r1, [sp, #20]
 800a136:	9102      	str	r1, [sp, #8]
 800a138:	4905      	ldr	r1, [pc, #20]	; (800a150 <_vsiprintf_r+0x28>)
 800a13a:	9103      	str	r1, [sp, #12]
 800a13c:	4669      	mov	r1, sp
 800a13e:	f001 fd89 	bl	800bc54 <_svfiprintf_r>
 800a142:	9b00      	ldr	r3, [sp, #0]
 800a144:	2200      	movs	r2, #0
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	b01b      	add	sp, #108	; 0x6c
 800a14a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a14e:	bf00      	nop
 800a150:	ffff0208 	.word	0xffff0208

0800a154 <vsiprintf>:
 800a154:	4613      	mov	r3, r2
 800a156:	460a      	mov	r2, r1
 800a158:	4601      	mov	r1, r0
 800a15a:	4802      	ldr	r0, [pc, #8]	; (800a164 <vsiprintf+0x10>)
 800a15c:	6800      	ldr	r0, [r0, #0]
 800a15e:	f7ff bfe3 	b.w	800a128 <_vsiprintf_r>
 800a162:	bf00      	nop
 800a164:	20000368 	.word	0x20000368

0800a168 <__swbuf_r>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	460e      	mov	r6, r1
 800a16c:	4614      	mov	r4, r2
 800a16e:	4605      	mov	r5, r0
 800a170:	b118      	cbz	r0, 800a17a <__swbuf_r+0x12>
 800a172:	6983      	ldr	r3, [r0, #24]
 800a174:	b90b      	cbnz	r3, 800a17a <__swbuf_r+0x12>
 800a176:	f001 f849 	bl	800b20c <__sinit>
 800a17a:	4b21      	ldr	r3, [pc, #132]	; (800a200 <__swbuf_r+0x98>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d12b      	bne.n	800a1d8 <__swbuf_r+0x70>
 800a180:	686c      	ldr	r4, [r5, #4]
 800a182:	69a3      	ldr	r3, [r4, #24]
 800a184:	60a3      	str	r3, [r4, #8]
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	071a      	lsls	r2, r3, #28
 800a18a:	d52f      	bpl.n	800a1ec <__swbuf_r+0x84>
 800a18c:	6923      	ldr	r3, [r4, #16]
 800a18e:	b36b      	cbz	r3, 800a1ec <__swbuf_r+0x84>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	6820      	ldr	r0, [r4, #0]
 800a194:	1ac0      	subs	r0, r0, r3
 800a196:	6963      	ldr	r3, [r4, #20]
 800a198:	b2f6      	uxtb	r6, r6
 800a19a:	4283      	cmp	r3, r0
 800a19c:	4637      	mov	r7, r6
 800a19e:	dc04      	bgt.n	800a1aa <__swbuf_r+0x42>
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f000 ff9e 	bl	800b0e4 <_fflush_r>
 800a1a8:	bb30      	cbnz	r0, 800a1f8 <__swbuf_r+0x90>
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	60a3      	str	r3, [r4, #8]
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	6022      	str	r2, [r4, #0]
 800a1b6:	701e      	strb	r6, [r3, #0]
 800a1b8:	6963      	ldr	r3, [r4, #20]
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	4283      	cmp	r3, r0
 800a1be:	d004      	beq.n	800a1ca <__swbuf_r+0x62>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	07db      	lsls	r3, r3, #31
 800a1c4:	d506      	bpl.n	800a1d4 <__swbuf_r+0x6c>
 800a1c6:	2e0a      	cmp	r6, #10
 800a1c8:	d104      	bne.n	800a1d4 <__swbuf_r+0x6c>
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f000 ff89 	bl	800b0e4 <_fflush_r>
 800a1d2:	b988      	cbnz	r0, 800a1f8 <__swbuf_r+0x90>
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <__swbuf_r+0x9c>)
 800a1da:	429c      	cmp	r4, r3
 800a1dc:	d101      	bne.n	800a1e2 <__swbuf_r+0x7a>
 800a1de:	68ac      	ldr	r4, [r5, #8]
 800a1e0:	e7cf      	b.n	800a182 <__swbuf_r+0x1a>
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <__swbuf_r+0xa0>)
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	bf08      	it	eq
 800a1e8:	68ec      	ldreq	r4, [r5, #12]
 800a1ea:	e7ca      	b.n	800a182 <__swbuf_r+0x1a>
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 f80c 	bl	800a20c <__swsetup_r>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d0cb      	beq.n	800a190 <__swbuf_r+0x28>
 800a1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a1fc:	e7ea      	b.n	800a1d4 <__swbuf_r+0x6c>
 800a1fe:	bf00      	nop
 800a200:	0800cac0 	.word	0x0800cac0
 800a204:	0800cae0 	.word	0x0800cae0
 800a208:	0800caa0 	.word	0x0800caa0

0800a20c <__swsetup_r>:
 800a20c:	4b32      	ldr	r3, [pc, #200]	; (800a2d8 <__swsetup_r+0xcc>)
 800a20e:	b570      	push	{r4, r5, r6, lr}
 800a210:	681d      	ldr	r5, [r3, #0]
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	b125      	cbz	r5, 800a222 <__swsetup_r+0x16>
 800a218:	69ab      	ldr	r3, [r5, #24]
 800a21a:	b913      	cbnz	r3, 800a222 <__swsetup_r+0x16>
 800a21c:	4628      	mov	r0, r5
 800a21e:	f000 fff5 	bl	800b20c <__sinit>
 800a222:	4b2e      	ldr	r3, [pc, #184]	; (800a2dc <__swsetup_r+0xd0>)
 800a224:	429c      	cmp	r4, r3
 800a226:	d10f      	bne.n	800a248 <__swsetup_r+0x3c>
 800a228:	686c      	ldr	r4, [r5, #4]
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a230:	0719      	lsls	r1, r3, #28
 800a232:	d42c      	bmi.n	800a28e <__swsetup_r+0x82>
 800a234:	06dd      	lsls	r5, r3, #27
 800a236:	d411      	bmi.n	800a25c <__swsetup_r+0x50>
 800a238:	2309      	movs	r3, #9
 800a23a:	6033      	str	r3, [r6, #0]
 800a23c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	e03e      	b.n	800a2c6 <__swsetup_r+0xba>
 800a248:	4b25      	ldr	r3, [pc, #148]	; (800a2e0 <__swsetup_r+0xd4>)
 800a24a:	429c      	cmp	r4, r3
 800a24c:	d101      	bne.n	800a252 <__swsetup_r+0x46>
 800a24e:	68ac      	ldr	r4, [r5, #8]
 800a250:	e7eb      	b.n	800a22a <__swsetup_r+0x1e>
 800a252:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <__swsetup_r+0xd8>)
 800a254:	429c      	cmp	r4, r3
 800a256:	bf08      	it	eq
 800a258:	68ec      	ldreq	r4, [r5, #12]
 800a25a:	e7e6      	b.n	800a22a <__swsetup_r+0x1e>
 800a25c:	0758      	lsls	r0, r3, #29
 800a25e:	d512      	bpl.n	800a286 <__swsetup_r+0x7a>
 800a260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a262:	b141      	cbz	r1, 800a276 <__swsetup_r+0x6a>
 800a264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a268:	4299      	cmp	r1, r3
 800a26a:	d002      	beq.n	800a272 <__swsetup_r+0x66>
 800a26c:	4630      	mov	r0, r6
 800a26e:	f7ff f9a5 	bl	80095bc <_free_r>
 800a272:	2300      	movs	r3, #0
 800a274:	6363      	str	r3, [r4, #52]	; 0x34
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	2300      	movs	r3, #0
 800a280:	6063      	str	r3, [r4, #4]
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	f043 0308 	orr.w	r3, r3, #8
 800a28c:	81a3      	strh	r3, [r4, #12]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	b94b      	cbnz	r3, 800a2a6 <__swsetup_r+0x9a>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a29c:	d003      	beq.n	800a2a6 <__swsetup_r+0x9a>
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f001 f87d 	bl	800b3a0 <__smakebuf_r>
 800a2a6:	89a0      	ldrh	r0, [r4, #12]
 800a2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2ac:	f010 0301 	ands.w	r3, r0, #1
 800a2b0:	d00a      	beq.n	800a2c8 <__swsetup_r+0xbc>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60a3      	str	r3, [r4, #8]
 800a2b6:	6963      	ldr	r3, [r4, #20]
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	61a3      	str	r3, [r4, #24]
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	b943      	cbnz	r3, 800a2d2 <__swsetup_r+0xc6>
 800a2c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2c4:	d1ba      	bne.n	800a23c <__swsetup_r+0x30>
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}
 800a2c8:	0781      	lsls	r1, r0, #30
 800a2ca:	bf58      	it	pl
 800a2cc:	6963      	ldrpl	r3, [r4, #20]
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	e7f4      	b.n	800a2bc <__swsetup_r+0xb0>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e7f7      	b.n	800a2c6 <__swsetup_r+0xba>
 800a2d6:	bf00      	nop
 800a2d8:	20000368 	.word	0x20000368
 800a2dc:	0800cac0 	.word	0x0800cac0
 800a2e0:	0800cae0 	.word	0x0800cae0
 800a2e4:	0800caa0 	.word	0x0800caa0

0800a2e8 <quorem>:
 800a2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	6903      	ldr	r3, [r0, #16]
 800a2ee:	690c      	ldr	r4, [r1, #16]
 800a2f0:	42a3      	cmp	r3, r4
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	f2c0 8081 	blt.w	800a3fa <quorem+0x112>
 800a2f8:	3c01      	subs	r4, #1
 800a2fa:	f101 0814 	add.w	r8, r1, #20
 800a2fe:	f100 0514 	add.w	r5, r0, #20
 800a302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a30c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a310:	3301      	adds	r3, #1
 800a312:	429a      	cmp	r2, r3
 800a314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a31c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a320:	d331      	bcc.n	800a386 <quorem+0x9e>
 800a322:	f04f 0e00 	mov.w	lr, #0
 800a326:	4640      	mov	r0, r8
 800a328:	46ac      	mov	ip, r5
 800a32a:	46f2      	mov	sl, lr
 800a32c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a330:	b293      	uxth	r3, r2
 800a332:	fb06 e303 	mla	r3, r6, r3, lr
 800a336:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	ebaa 0303 	sub.w	r3, sl, r3
 800a340:	0c12      	lsrs	r2, r2, #16
 800a342:	f8dc a000 	ldr.w	sl, [ip]
 800a346:	fb06 e202 	mla	r2, r6, r2, lr
 800a34a:	fa13 f38a 	uxtah	r3, r3, sl
 800a34e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a352:	fa1f fa82 	uxth.w	sl, r2
 800a356:	f8dc 2000 	ldr.w	r2, [ip]
 800a35a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a35e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a362:	b29b      	uxth	r3, r3
 800a364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a368:	4581      	cmp	r9, r0
 800a36a:	f84c 3b04 	str.w	r3, [ip], #4
 800a36e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a372:	d2db      	bcs.n	800a32c <quorem+0x44>
 800a374:	f855 300b 	ldr.w	r3, [r5, fp]
 800a378:	b92b      	cbnz	r3, 800a386 <quorem+0x9e>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	3b04      	subs	r3, #4
 800a37e:	429d      	cmp	r5, r3
 800a380:	461a      	mov	r2, r3
 800a382:	d32e      	bcc.n	800a3e2 <quorem+0xfa>
 800a384:	613c      	str	r4, [r7, #16]
 800a386:	4638      	mov	r0, r7
 800a388:	f001 fae2 	bl	800b950 <__mcmp>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	db24      	blt.n	800a3da <quorem+0xf2>
 800a390:	3601      	adds	r6, #1
 800a392:	4628      	mov	r0, r5
 800a394:	f04f 0c00 	mov.w	ip, #0
 800a398:	f858 2b04 	ldr.w	r2, [r8], #4
 800a39c:	f8d0 e000 	ldr.w	lr, [r0]
 800a3a0:	b293      	uxth	r3, r2
 800a3a2:	ebac 0303 	sub.w	r3, ip, r3
 800a3a6:	0c12      	lsrs	r2, r2, #16
 800a3a8:	fa13 f38e 	uxtah	r3, r3, lr
 800a3ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ba:	45c1      	cmp	r9, r8
 800a3bc:	f840 3b04 	str.w	r3, [r0], #4
 800a3c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3c4:	d2e8      	bcs.n	800a398 <quorem+0xb0>
 800a3c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3ce:	b922      	cbnz	r2, 800a3da <quorem+0xf2>
 800a3d0:	3b04      	subs	r3, #4
 800a3d2:	429d      	cmp	r5, r3
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	d30a      	bcc.n	800a3ee <quorem+0x106>
 800a3d8:	613c      	str	r4, [r7, #16]
 800a3da:	4630      	mov	r0, r6
 800a3dc:	b003      	add	sp, #12
 800a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e2:	6812      	ldr	r2, [r2, #0]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d1cc      	bne.n	800a384 <quorem+0x9c>
 800a3ea:	3c01      	subs	r4, #1
 800a3ec:	e7c7      	b.n	800a37e <quorem+0x96>
 800a3ee:	6812      	ldr	r2, [r2, #0]
 800a3f0:	3b04      	subs	r3, #4
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d1f0      	bne.n	800a3d8 <quorem+0xf0>
 800a3f6:	3c01      	subs	r4, #1
 800a3f8:	e7eb      	b.n	800a3d2 <quorem+0xea>
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e7ee      	b.n	800a3dc <quorem+0xf4>
	...

0800a400 <_dtoa_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b02 	vpush	{d8}
 800a408:	ec57 6b10 	vmov	r6, r7, d0
 800a40c:	b095      	sub	sp, #84	; 0x54
 800a40e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a414:	9105      	str	r1, [sp, #20]
 800a416:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a41a:	4604      	mov	r4, r0
 800a41c:	9209      	str	r2, [sp, #36]	; 0x24
 800a41e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a420:	b975      	cbnz	r5, 800a440 <_dtoa_r+0x40>
 800a422:	2010      	movs	r0, #16
 800a424:	f7ff f8a2 	bl	800956c <malloc>
 800a428:	4602      	mov	r2, r0
 800a42a:	6260      	str	r0, [r4, #36]	; 0x24
 800a42c:	b920      	cbnz	r0, 800a438 <_dtoa_r+0x38>
 800a42e:	4bb2      	ldr	r3, [pc, #712]	; (800a6f8 <_dtoa_r+0x2f8>)
 800a430:	21ea      	movs	r1, #234	; 0xea
 800a432:	48b2      	ldr	r0, [pc, #712]	; (800a6fc <_dtoa_r+0x2fc>)
 800a434:	f001 fd64 	bl	800bf00 <__assert_func>
 800a438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a43c:	6005      	str	r5, [r0, #0]
 800a43e:	60c5      	str	r5, [r0, #12]
 800a440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	b151      	cbz	r1, 800a45c <_dtoa_r+0x5c>
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	604a      	str	r2, [r1, #4]
 800a44a:	2301      	movs	r3, #1
 800a44c:	4093      	lsls	r3, r2
 800a44e:	608b      	str	r3, [r1, #8]
 800a450:	4620      	mov	r0, r4
 800a452:	f001 f83f 	bl	800b4d4 <_Bfree>
 800a456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	1e3b      	subs	r3, r7, #0
 800a45e:	bfb9      	ittee	lt
 800a460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a464:	9303      	strlt	r3, [sp, #12]
 800a466:	2300      	movge	r3, #0
 800a468:	f8c8 3000 	strge.w	r3, [r8]
 800a46c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a470:	4ba3      	ldr	r3, [pc, #652]	; (800a700 <_dtoa_r+0x300>)
 800a472:	bfbc      	itt	lt
 800a474:	2201      	movlt	r2, #1
 800a476:	f8c8 2000 	strlt.w	r2, [r8]
 800a47a:	ea33 0309 	bics.w	r3, r3, r9
 800a47e:	d11b      	bne.n	800a4b8 <_dtoa_r+0xb8>
 800a480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a482:	f242 730f 	movw	r3, #9999	; 0x270f
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a48c:	4333      	orrs	r3, r6
 800a48e:	f000 857a 	beq.w	800af86 <_dtoa_r+0xb86>
 800a492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a494:	b963      	cbnz	r3, 800a4b0 <_dtoa_r+0xb0>
 800a496:	4b9b      	ldr	r3, [pc, #620]	; (800a704 <_dtoa_r+0x304>)
 800a498:	e024      	b.n	800a4e4 <_dtoa_r+0xe4>
 800a49a:	4b9b      	ldr	r3, [pc, #620]	; (800a708 <_dtoa_r+0x308>)
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	9800      	ldr	r0, [sp, #0]
 800a4a6:	b015      	add	sp, #84	; 0x54
 800a4a8:	ecbd 8b02 	vpop	{d8}
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b0:	4b94      	ldr	r3, [pc, #592]	; (800a704 <_dtoa_r+0x304>)
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	3303      	adds	r3, #3
 800a4b6:	e7f3      	b.n	800a4a0 <_dtoa_r+0xa0>
 800a4b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	ec51 0b17 	vmov	r0, r1, d7
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a4c8:	f7f6 fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	b158      	cbz	r0, 800a4e8 <_dtoa_r+0xe8>
 800a4d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8551 	beq.w	800af80 <_dtoa_r+0xb80>
 800a4de:	488b      	ldr	r0, [pc, #556]	; (800a70c <_dtoa_r+0x30c>)
 800a4e0:	6018      	str	r0, [r3, #0]
 800a4e2:	1e43      	subs	r3, r0, #1
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	e7dd      	b.n	800a4a4 <_dtoa_r+0xa4>
 800a4e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a4ec:	aa12      	add	r2, sp, #72	; 0x48
 800a4ee:	a913      	add	r1, sp, #76	; 0x4c
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f001 fad1 	bl	800ba98 <__d2b>
 800a4f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4fa:	4683      	mov	fp, r0
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	d07c      	beq.n	800a5fa <_dtoa_r+0x1fa>
 800a500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a502:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a50a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a50e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a512:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a51a:	4b7d      	ldr	r3, [pc, #500]	; (800a710 <_dtoa_r+0x310>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f5 feb9 	bl	8000298 <__aeabi_dsub>
 800a526:	a36e      	add	r3, pc, #440	; (adr r3, 800a6e0 <_dtoa_r+0x2e0>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f6 f86c 	bl	8000608 <__aeabi_dmul>
 800a530:	a36d      	add	r3, pc, #436	; (adr r3, 800a6e8 <_dtoa_r+0x2e8>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 feb1 	bl	800029c <__adddf3>
 800a53a:	4606      	mov	r6, r0
 800a53c:	4628      	mov	r0, r5
 800a53e:	460f      	mov	r7, r1
 800a540:	f7f5 fff8 	bl	8000534 <__aeabi_i2d>
 800a544:	a36a      	add	r3, pc, #424	; (adr r3, 800a6f0 <_dtoa_r+0x2f0>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f7f6 f85d 	bl	8000608 <__aeabi_dmul>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	f7f5 fea1 	bl	800029c <__adddf3>
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	f7f6 fb03 	bl	8000b68 <__aeabi_d2iz>
 800a562:	2200      	movs	r2, #0
 800a564:	4682      	mov	sl, r0
 800a566:	2300      	movs	r3, #0
 800a568:	4630      	mov	r0, r6
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f6 fabe 	bl	8000aec <__aeabi_dcmplt>
 800a570:	b148      	cbz	r0, 800a586 <_dtoa_r+0x186>
 800a572:	4650      	mov	r0, sl
 800a574:	f7f5 ffde 	bl	8000534 <__aeabi_i2d>
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	f7f6 faac 	bl	8000ad8 <__aeabi_dcmpeq>
 800a580:	b908      	cbnz	r0, 800a586 <_dtoa_r+0x186>
 800a582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a586:	f1ba 0f16 	cmp.w	sl, #22
 800a58a:	d854      	bhi.n	800a636 <_dtoa_r+0x236>
 800a58c:	4b61      	ldr	r3, [pc, #388]	; (800a714 <_dtoa_r+0x314>)
 800a58e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a59a:	f7f6 faa7 	bl	8000aec <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d04b      	beq.n	800a63a <_dtoa_r+0x23a>
 800a5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	930e      	str	r3, [sp, #56]	; 0x38
 800a5aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5ac:	1b5d      	subs	r5, r3, r5
 800a5ae:	1e6b      	subs	r3, r5, #1
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	bf43      	ittte	mi
 800a5b4:	2300      	movmi	r3, #0
 800a5b6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a5ba:	9304      	strmi	r3, [sp, #16]
 800a5bc:	f04f 0800 	movpl.w	r8, #0
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	db3b      	blt.n	800a63e <_dtoa_r+0x23e>
 800a5c6:	9b04      	ldr	r3, [sp, #16]
 800a5c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a5cc:	4453      	add	r3, sl
 800a5ce:	9304      	str	r3, [sp, #16]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9306      	str	r3, [sp, #24]
 800a5d4:	9b05      	ldr	r3, [sp, #20]
 800a5d6:	2b09      	cmp	r3, #9
 800a5d8:	d869      	bhi.n	800a6ae <_dtoa_r+0x2ae>
 800a5da:	2b05      	cmp	r3, #5
 800a5dc:	bfc4      	itt	gt
 800a5de:	3b04      	subgt	r3, #4
 800a5e0:	9305      	strgt	r3, [sp, #20]
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	f1a3 0302 	sub.w	r3, r3, #2
 800a5e8:	bfcc      	ite	gt
 800a5ea:	2500      	movgt	r5, #0
 800a5ec:	2501      	movle	r5, #1
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d869      	bhi.n	800a6c6 <_dtoa_r+0x2c6>
 800a5f2:	e8df f003 	tbb	[pc, r3]
 800a5f6:	4e2c      	.short	0x4e2c
 800a5f8:	5a4c      	.short	0x5a4c
 800a5fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a5fe:	441d      	add	r5, r3
 800a600:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a604:	2b20      	cmp	r3, #32
 800a606:	bfc1      	itttt	gt
 800a608:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a60c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a610:	fa09 f303 	lslgt.w	r3, r9, r3
 800a614:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a618:	bfda      	itte	le
 800a61a:	f1c3 0320 	rsble	r3, r3, #32
 800a61e:	fa06 f003 	lslle.w	r0, r6, r3
 800a622:	4318      	orrgt	r0, r3
 800a624:	f7f5 ff76 	bl	8000514 <__aeabi_ui2d>
 800a628:	2301      	movs	r3, #1
 800a62a:	4606      	mov	r6, r0
 800a62c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a630:	3d01      	subs	r5, #1
 800a632:	9310      	str	r3, [sp, #64]	; 0x40
 800a634:	e771      	b.n	800a51a <_dtoa_r+0x11a>
 800a636:	2301      	movs	r3, #1
 800a638:	e7b6      	b.n	800a5a8 <_dtoa_r+0x1a8>
 800a63a:	900e      	str	r0, [sp, #56]	; 0x38
 800a63c:	e7b5      	b.n	800a5aa <_dtoa_r+0x1aa>
 800a63e:	f1ca 0300 	rsb	r3, sl, #0
 800a642:	9306      	str	r3, [sp, #24]
 800a644:	2300      	movs	r3, #0
 800a646:	eba8 080a 	sub.w	r8, r8, sl
 800a64a:	930d      	str	r3, [sp, #52]	; 0x34
 800a64c:	e7c2      	b.n	800a5d4 <_dtoa_r+0x1d4>
 800a64e:	2300      	movs	r3, #0
 800a650:	9308      	str	r3, [sp, #32]
 800a652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	dc39      	bgt.n	800a6cc <_dtoa_r+0x2cc>
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a660:	464b      	mov	r3, r9
 800a662:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a666:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a668:	2200      	movs	r2, #0
 800a66a:	6042      	str	r2, [r0, #4]
 800a66c:	2204      	movs	r2, #4
 800a66e:	f102 0614 	add.w	r6, r2, #20
 800a672:	429e      	cmp	r6, r3
 800a674:	6841      	ldr	r1, [r0, #4]
 800a676:	d92f      	bls.n	800a6d8 <_dtoa_r+0x2d8>
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 feeb 	bl	800b454 <_Balloc>
 800a67e:	9000      	str	r0, [sp, #0]
 800a680:	2800      	cmp	r0, #0
 800a682:	d14b      	bne.n	800a71c <_dtoa_r+0x31c>
 800a684:	4b24      	ldr	r3, [pc, #144]	; (800a718 <_dtoa_r+0x318>)
 800a686:	4602      	mov	r2, r0
 800a688:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a68c:	e6d1      	b.n	800a432 <_dtoa_r+0x32>
 800a68e:	2301      	movs	r3, #1
 800a690:	e7de      	b.n	800a650 <_dtoa_r+0x250>
 800a692:	2300      	movs	r3, #0
 800a694:	9308      	str	r3, [sp, #32]
 800a696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a698:	eb0a 0903 	add.w	r9, sl, r3
 800a69c:	f109 0301 	add.w	r3, r9, #1
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	bfb8      	it	lt
 800a6a6:	2301      	movlt	r3, #1
 800a6a8:	e7dd      	b.n	800a666 <_dtoa_r+0x266>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e7f2      	b.n	800a694 <_dtoa_r+0x294>
 800a6ae:	2501      	movs	r5, #1
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9305      	str	r3, [sp, #20]
 800a6b4:	9508      	str	r5, [sp, #32]
 800a6b6:	f04f 39ff 	mov.w	r9, #4294967295
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6c0:	2312      	movs	r3, #18
 800a6c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6c4:	e7cf      	b.n	800a666 <_dtoa_r+0x266>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	e7f4      	b.n	800a6b6 <_dtoa_r+0x2b6>
 800a6cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a6d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6d4:	464b      	mov	r3, r9
 800a6d6:	e7c6      	b.n	800a666 <_dtoa_r+0x266>
 800a6d8:	3101      	adds	r1, #1
 800a6da:	6041      	str	r1, [r0, #4]
 800a6dc:	0052      	lsls	r2, r2, #1
 800a6de:	e7c6      	b.n	800a66e <_dtoa_r+0x26e>
 800a6e0:	636f4361 	.word	0x636f4361
 800a6e4:	3fd287a7 	.word	0x3fd287a7
 800a6e8:	8b60c8b3 	.word	0x8b60c8b3
 800a6ec:	3fc68a28 	.word	0x3fc68a28
 800a6f0:	509f79fb 	.word	0x509f79fb
 800a6f4:	3fd34413 	.word	0x3fd34413
 800a6f8:	0800ca19 	.word	0x0800ca19
 800a6fc:	0800ca30 	.word	0x0800ca30
 800a700:	7ff00000 	.word	0x7ff00000
 800a704:	0800ca15 	.word	0x0800ca15
 800a708:	0800ca0c 	.word	0x0800ca0c
 800a70c:	0800c9e9 	.word	0x0800c9e9
 800a710:	3ff80000 	.word	0x3ff80000
 800a714:	0800cb88 	.word	0x0800cb88
 800a718:	0800ca8f 	.word	0x0800ca8f
 800a71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a71e:	9a00      	ldr	r2, [sp, #0]
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b0e      	cmp	r3, #14
 800a726:	f200 80ad 	bhi.w	800a884 <_dtoa_r+0x484>
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	f000 80aa 	beq.w	800a884 <_dtoa_r+0x484>
 800a730:	f1ba 0f00 	cmp.w	sl, #0
 800a734:	dd36      	ble.n	800a7a4 <_dtoa_r+0x3a4>
 800a736:	4ac3      	ldr	r2, [pc, #780]	; (800aa44 <_dtoa_r+0x644>)
 800a738:	f00a 030f 	and.w	r3, sl, #15
 800a73c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a740:	ed93 7b00 	vldr	d7, [r3]
 800a744:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a748:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a74c:	eeb0 8a47 	vmov.f32	s16, s14
 800a750:	eef0 8a67 	vmov.f32	s17, s15
 800a754:	d016      	beq.n	800a784 <_dtoa_r+0x384>
 800a756:	4bbc      	ldr	r3, [pc, #752]	; (800aa48 <_dtoa_r+0x648>)
 800a758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a760:	f7f6 f87c 	bl	800085c <__aeabi_ddiv>
 800a764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a768:	f007 070f 	and.w	r7, r7, #15
 800a76c:	2503      	movs	r5, #3
 800a76e:	4eb6      	ldr	r6, [pc, #728]	; (800aa48 <_dtoa_r+0x648>)
 800a770:	b957      	cbnz	r7, 800a788 <_dtoa_r+0x388>
 800a772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a776:	ec53 2b18 	vmov	r2, r3, d8
 800a77a:	f7f6 f86f 	bl	800085c <__aeabi_ddiv>
 800a77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a782:	e029      	b.n	800a7d8 <_dtoa_r+0x3d8>
 800a784:	2502      	movs	r5, #2
 800a786:	e7f2      	b.n	800a76e <_dtoa_r+0x36e>
 800a788:	07f9      	lsls	r1, r7, #31
 800a78a:	d508      	bpl.n	800a79e <_dtoa_r+0x39e>
 800a78c:	ec51 0b18 	vmov	r0, r1, d8
 800a790:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a794:	f7f5 ff38 	bl	8000608 <__aeabi_dmul>
 800a798:	ec41 0b18 	vmov	d8, r0, r1
 800a79c:	3501      	adds	r5, #1
 800a79e:	107f      	asrs	r7, r7, #1
 800a7a0:	3608      	adds	r6, #8
 800a7a2:	e7e5      	b.n	800a770 <_dtoa_r+0x370>
 800a7a4:	f000 80a6 	beq.w	800a8f4 <_dtoa_r+0x4f4>
 800a7a8:	f1ca 0600 	rsb	r6, sl, #0
 800a7ac:	4ba5      	ldr	r3, [pc, #660]	; (800aa44 <_dtoa_r+0x644>)
 800a7ae:	4fa6      	ldr	r7, [pc, #664]	; (800aa48 <_dtoa_r+0x648>)
 800a7b0:	f006 020f 	and.w	r2, r6, #15
 800a7b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7c0:	f7f5 ff22 	bl	8000608 <__aeabi_dmul>
 800a7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c8:	1136      	asrs	r6, r6, #4
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2502      	movs	r5, #2
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	f040 8085 	bne.w	800a8de <_dtoa_r+0x4de>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1d2      	bne.n	800a77e <_dtoa_r+0x37e>
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 808c 	beq.w	800a8f8 <_dtoa_r+0x4f8>
 800a7e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7e4:	4b99      	ldr	r3, [pc, #612]	; (800aa4c <_dtoa_r+0x64c>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f97e 	bl	8000aec <__aeabi_dcmplt>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f000 8081 	beq.w	800a8f8 <_dtoa_r+0x4f8>
 800a7f6:	9b01      	ldr	r3, [sp, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d07d      	beq.n	800a8f8 <_dtoa_r+0x4f8>
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	dd3c      	ble.n	800a87c <_dtoa_r+0x47c>
 800a802:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a806:	9307      	str	r3, [sp, #28]
 800a808:	2200      	movs	r2, #0
 800a80a:	4b91      	ldr	r3, [pc, #580]	; (800aa50 <_dtoa_r+0x650>)
 800a80c:	4630      	mov	r0, r6
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f5 fefa 	bl	8000608 <__aeabi_dmul>
 800a814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a818:	3501      	adds	r5, #1
 800a81a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a81e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a822:	4628      	mov	r0, r5
 800a824:	f7f5 fe86 	bl	8000534 <__aeabi_i2d>
 800a828:	4632      	mov	r2, r6
 800a82a:	463b      	mov	r3, r7
 800a82c:	f7f5 feec 	bl	8000608 <__aeabi_dmul>
 800a830:	4b88      	ldr	r3, [pc, #544]	; (800aa54 <_dtoa_r+0x654>)
 800a832:	2200      	movs	r2, #0
 800a834:	f7f5 fd32 	bl	800029c <__adddf3>
 800a838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a844:	2b00      	cmp	r3, #0
 800a846:	d15c      	bne.n	800a902 <_dtoa_r+0x502>
 800a848:	4b83      	ldr	r3, [pc, #524]	; (800aa58 <_dtoa_r+0x658>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fd22 	bl	8000298 <__aeabi_dsub>
 800a854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a858:	4606      	mov	r6, r0
 800a85a:	460f      	mov	r7, r1
 800a85c:	f7f6 f964 	bl	8000b28 <__aeabi_dcmpgt>
 800a860:	2800      	cmp	r0, #0
 800a862:	f040 8296 	bne.w	800ad92 <_dtoa_r+0x992>
 800a866:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a86a:	4630      	mov	r0, r6
 800a86c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a870:	4639      	mov	r1, r7
 800a872:	f7f6 f93b 	bl	8000aec <__aeabi_dcmplt>
 800a876:	2800      	cmp	r0, #0
 800a878:	f040 8288 	bne.w	800ad8c <_dtoa_r+0x98c>
 800a87c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a886:	2b00      	cmp	r3, #0
 800a888:	f2c0 8158 	blt.w	800ab3c <_dtoa_r+0x73c>
 800a88c:	f1ba 0f0e 	cmp.w	sl, #14
 800a890:	f300 8154 	bgt.w	800ab3c <_dtoa_r+0x73c>
 800a894:	4b6b      	ldr	r3, [pc, #428]	; (800aa44 <_dtoa_r+0x644>)
 800a896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a89a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f280 80e3 	bge.w	800aa6c <_dtoa_r+0x66c>
 800a8a6:	9b01      	ldr	r3, [sp, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f300 80df 	bgt.w	800aa6c <_dtoa_r+0x66c>
 800a8ae:	f040 826d 	bne.w	800ad8c <_dtoa_r+0x98c>
 800a8b2:	4b69      	ldr	r3, [pc, #420]	; (800aa58 <_dtoa_r+0x658>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	f7f5 fea5 	bl	8000608 <__aeabi_dmul>
 800a8be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8c2:	f7f6 f927 	bl	8000b14 <__aeabi_dcmpge>
 800a8c6:	9e01      	ldr	r6, [sp, #4]
 800a8c8:	4637      	mov	r7, r6
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f040 8243 	bne.w	800ad56 <_dtoa_r+0x956>
 800a8d0:	9d00      	ldr	r5, [sp, #0]
 800a8d2:	2331      	movs	r3, #49	; 0x31
 800a8d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8d8:	f10a 0a01 	add.w	sl, sl, #1
 800a8dc:	e23f      	b.n	800ad5e <_dtoa_r+0x95e>
 800a8de:	07f2      	lsls	r2, r6, #31
 800a8e0:	d505      	bpl.n	800a8ee <_dtoa_r+0x4ee>
 800a8e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e6:	f7f5 fe8f 	bl	8000608 <__aeabi_dmul>
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	1076      	asrs	r6, r6, #1
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	e76c      	b.n	800a7ce <_dtoa_r+0x3ce>
 800a8f4:	2502      	movs	r5, #2
 800a8f6:	e76f      	b.n	800a7d8 <_dtoa_r+0x3d8>
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	f8cd a01c 	str.w	sl, [sp, #28]
 800a8fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a900:	e78d      	b.n	800a81e <_dtoa_r+0x41e>
 800a902:	9900      	ldr	r1, [sp, #0]
 800a904:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a908:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <_dtoa_r+0x644>)
 800a90a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a90e:	4401      	add	r1, r0
 800a910:	9102      	str	r1, [sp, #8]
 800a912:	9908      	ldr	r1, [sp, #32]
 800a914:	eeb0 8a47 	vmov.f32	s16, s14
 800a918:	eef0 8a67 	vmov.f32	s17, s15
 800a91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a920:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a924:	2900      	cmp	r1, #0
 800a926:	d045      	beq.n	800a9b4 <_dtoa_r+0x5b4>
 800a928:	494c      	ldr	r1, [pc, #304]	; (800aa5c <_dtoa_r+0x65c>)
 800a92a:	2000      	movs	r0, #0
 800a92c:	f7f5 ff96 	bl	800085c <__aeabi_ddiv>
 800a930:	ec53 2b18 	vmov	r2, r3, d8
 800a934:	f7f5 fcb0 	bl	8000298 <__aeabi_dsub>
 800a938:	9d00      	ldr	r5, [sp, #0]
 800a93a:	ec41 0b18 	vmov	d8, r0, r1
 800a93e:	4639      	mov	r1, r7
 800a940:	4630      	mov	r0, r6
 800a942:	f7f6 f911 	bl	8000b68 <__aeabi_d2iz>
 800a946:	900c      	str	r0, [sp, #48]	; 0x30
 800a948:	f7f5 fdf4 	bl	8000534 <__aeabi_i2d>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4630      	mov	r0, r6
 800a952:	4639      	mov	r1, r7
 800a954:	f7f5 fca0 	bl	8000298 <__aeabi_dsub>
 800a958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a95a:	3330      	adds	r3, #48	; 0x30
 800a95c:	f805 3b01 	strb.w	r3, [r5], #1
 800a960:	ec53 2b18 	vmov	r2, r3, d8
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	f7f6 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d165      	bne.n	800aa3c <_dtoa_r+0x63c>
 800a970:	4632      	mov	r2, r6
 800a972:	463b      	mov	r3, r7
 800a974:	4935      	ldr	r1, [pc, #212]	; (800aa4c <_dtoa_r+0x64c>)
 800a976:	2000      	movs	r0, #0
 800a978:	f7f5 fc8e 	bl	8000298 <__aeabi_dsub>
 800a97c:	ec53 2b18 	vmov	r2, r3, d8
 800a980:	f7f6 f8b4 	bl	8000aec <__aeabi_dcmplt>
 800a984:	2800      	cmp	r0, #0
 800a986:	f040 80b9 	bne.w	800aafc <_dtoa_r+0x6fc>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	429d      	cmp	r5, r3
 800a98e:	f43f af75 	beq.w	800a87c <_dtoa_r+0x47c>
 800a992:	4b2f      	ldr	r3, [pc, #188]	; (800aa50 <_dtoa_r+0x650>)
 800a994:	ec51 0b18 	vmov	r0, r1, d8
 800a998:	2200      	movs	r2, #0
 800a99a:	f7f5 fe35 	bl	8000608 <__aeabi_dmul>
 800a99e:	4b2c      	ldr	r3, [pc, #176]	; (800aa50 <_dtoa_r+0x650>)
 800a9a0:	ec41 0b18 	vmov	d8, r0, r1
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	f7f5 fe2d 	bl	8000608 <__aeabi_dmul>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	460f      	mov	r7, r1
 800a9b2:	e7c4      	b.n	800a93e <_dtoa_r+0x53e>
 800a9b4:	ec51 0b17 	vmov	r0, r1, d7
 800a9b8:	f7f5 fe26 	bl	8000608 <__aeabi_dmul>
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	9d00      	ldr	r5, [sp, #0]
 800a9c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9c2:	ec41 0b18 	vmov	d8, r0, r1
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7f6 f8cd 	bl	8000b68 <__aeabi_d2iz>
 800a9ce:	9011      	str	r0, [sp, #68]	; 0x44
 800a9d0:	f7f5 fdb0 	bl	8000534 <__aeabi_i2d>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f5 fc5c 	bl	8000298 <__aeabi_dsub>
 800a9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e2:	3330      	adds	r3, #48	; 0x30
 800a9e4:	f805 3b01 	strb.w	r3, [r5], #1
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	f04f 0200 	mov.w	r2, #0
 800a9f4:	d134      	bne.n	800aa60 <_dtoa_r+0x660>
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <_dtoa_r+0x65c>)
 800a9f8:	ec51 0b18 	vmov	r0, r1, d8
 800a9fc:	f7f5 fc4e 	bl	800029c <__adddf3>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4630      	mov	r0, r6
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f6 f88e 	bl	8000b28 <__aeabi_dcmpgt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d175      	bne.n	800aafc <_dtoa_r+0x6fc>
 800aa10:	ec53 2b18 	vmov	r2, r3, d8
 800aa14:	4911      	ldr	r1, [pc, #68]	; (800aa5c <_dtoa_r+0x65c>)
 800aa16:	2000      	movs	r0, #0
 800aa18:	f7f5 fc3e 	bl	8000298 <__aeabi_dsub>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4630      	mov	r0, r6
 800aa22:	4639      	mov	r1, r7
 800aa24:	f7f6 f862 	bl	8000aec <__aeabi_dcmplt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f43f af27 	beq.w	800a87c <_dtoa_r+0x47c>
 800aa2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa30:	1e6b      	subs	r3, r5, #1
 800aa32:	930c      	str	r3, [sp, #48]	; 0x30
 800aa34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa38:	2b30      	cmp	r3, #48	; 0x30
 800aa3a:	d0f8      	beq.n	800aa2e <_dtoa_r+0x62e>
 800aa3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa40:	e04a      	b.n	800aad8 <_dtoa_r+0x6d8>
 800aa42:	bf00      	nop
 800aa44:	0800cb88 	.word	0x0800cb88
 800aa48:	0800cb60 	.word	0x0800cb60
 800aa4c:	3ff00000 	.word	0x3ff00000
 800aa50:	40240000 	.word	0x40240000
 800aa54:	401c0000 	.word	0x401c0000
 800aa58:	40140000 	.word	0x40140000
 800aa5c:	3fe00000 	.word	0x3fe00000
 800aa60:	4baf      	ldr	r3, [pc, #700]	; (800ad20 <_dtoa_r+0x920>)
 800aa62:	f7f5 fdd1 	bl	8000608 <__aeabi_dmul>
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	e7ac      	b.n	800a9c6 <_dtoa_r+0x5c6>
 800aa6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa70:	9d00      	ldr	r5, [sp, #0]
 800aa72:	4642      	mov	r2, r8
 800aa74:	464b      	mov	r3, r9
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f5 feef 	bl	800085c <__aeabi_ddiv>
 800aa7e:	f7f6 f873 	bl	8000b68 <__aeabi_d2iz>
 800aa82:	9002      	str	r0, [sp, #8]
 800aa84:	f7f5 fd56 	bl	8000534 <__aeabi_i2d>
 800aa88:	4642      	mov	r2, r8
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	f7f5 fdbc 	bl	8000608 <__aeabi_dmul>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4630      	mov	r0, r6
 800aa96:	4639      	mov	r1, r7
 800aa98:	f7f5 fbfe 	bl	8000298 <__aeabi_dsub>
 800aa9c:	9e02      	ldr	r6, [sp, #8]
 800aa9e:	9f01      	ldr	r7, [sp, #4]
 800aaa0:	3630      	adds	r6, #48	; 0x30
 800aaa2:	f805 6b01 	strb.w	r6, [r5], #1
 800aaa6:	9e00      	ldr	r6, [sp, #0]
 800aaa8:	1bae      	subs	r6, r5, r6
 800aaaa:	42b7      	cmp	r7, r6
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	d137      	bne.n	800ab22 <_dtoa_r+0x722>
 800aab2:	f7f5 fbf3 	bl	800029c <__adddf3>
 800aab6:	4642      	mov	r2, r8
 800aab8:	464b      	mov	r3, r9
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	f7f6 f833 	bl	8000b28 <__aeabi_dcmpgt>
 800aac2:	b9c8      	cbnz	r0, 800aaf8 <_dtoa_r+0x6f8>
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f6 f804 	bl	8000ad8 <__aeabi_dcmpeq>
 800aad0:	b110      	cbz	r0, 800aad8 <_dtoa_r+0x6d8>
 800aad2:	9b02      	ldr	r3, [sp, #8]
 800aad4:	07d9      	lsls	r1, r3, #31
 800aad6:	d40f      	bmi.n	800aaf8 <_dtoa_r+0x6f8>
 800aad8:	4620      	mov	r0, r4
 800aada:	4659      	mov	r1, fp
 800aadc:	f000 fcfa 	bl	800b4d4 <_Bfree>
 800aae0:	2300      	movs	r3, #0
 800aae2:	702b      	strb	r3, [r5, #0]
 800aae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aae6:	f10a 0001 	add.w	r0, sl, #1
 800aaea:	6018      	str	r0, [r3, #0]
 800aaec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f43f acd8 	beq.w	800a4a4 <_dtoa_r+0xa4>
 800aaf4:	601d      	str	r5, [r3, #0]
 800aaf6:	e4d5      	b.n	800a4a4 <_dtoa_r+0xa4>
 800aaf8:	f8cd a01c 	str.w	sl, [sp, #28]
 800aafc:	462b      	mov	r3, r5
 800aafe:	461d      	mov	r5, r3
 800ab00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab04:	2a39      	cmp	r2, #57	; 0x39
 800ab06:	d108      	bne.n	800ab1a <_dtoa_r+0x71a>
 800ab08:	9a00      	ldr	r2, [sp, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d1f7      	bne.n	800aafe <_dtoa_r+0x6fe>
 800ab0e:	9a07      	ldr	r2, [sp, #28]
 800ab10:	9900      	ldr	r1, [sp, #0]
 800ab12:	3201      	adds	r2, #1
 800ab14:	9207      	str	r2, [sp, #28]
 800ab16:	2230      	movs	r2, #48	; 0x30
 800ab18:	700a      	strb	r2, [r1, #0]
 800ab1a:	781a      	ldrb	r2, [r3, #0]
 800ab1c:	3201      	adds	r2, #1
 800ab1e:	701a      	strb	r2, [r3, #0]
 800ab20:	e78c      	b.n	800aa3c <_dtoa_r+0x63c>
 800ab22:	4b7f      	ldr	r3, [pc, #508]	; (800ad20 <_dtoa_r+0x920>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	f7f5 fd6f 	bl	8000608 <__aeabi_dmul>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460f      	mov	r7, r1
 800ab32:	f7f5 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d09b      	beq.n	800aa72 <_dtoa_r+0x672>
 800ab3a:	e7cd      	b.n	800aad8 <_dtoa_r+0x6d8>
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	f000 80c4 	beq.w	800accc <_dtoa_r+0x8cc>
 800ab44:	9a05      	ldr	r2, [sp, #20]
 800ab46:	2a01      	cmp	r2, #1
 800ab48:	f300 80a8 	bgt.w	800ac9c <_dtoa_r+0x89c>
 800ab4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	f000 80a0 	beq.w	800ac94 <_dtoa_r+0x894>
 800ab54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab58:	9e06      	ldr	r6, [sp, #24]
 800ab5a:	4645      	mov	r5, r8
 800ab5c:	9a04      	ldr	r2, [sp, #16]
 800ab5e:	2101      	movs	r1, #1
 800ab60:	441a      	add	r2, r3
 800ab62:	4620      	mov	r0, r4
 800ab64:	4498      	add	r8, r3
 800ab66:	9204      	str	r2, [sp, #16]
 800ab68:	f000 fd70 	bl	800b64c <__i2b>
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	2d00      	cmp	r5, #0
 800ab70:	dd0b      	ble.n	800ab8a <_dtoa_r+0x78a>
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	dd08      	ble.n	800ab8a <_dtoa_r+0x78a>
 800ab78:	42ab      	cmp	r3, r5
 800ab7a:	9a04      	ldr	r2, [sp, #16]
 800ab7c:	bfa8      	it	ge
 800ab7e:	462b      	movge	r3, r5
 800ab80:	eba8 0803 	sub.w	r8, r8, r3
 800ab84:	1aed      	subs	r5, r5, r3
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	b1fb      	cbz	r3, 800abce <_dtoa_r+0x7ce>
 800ab8e:	9b08      	ldr	r3, [sp, #32]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 809f 	beq.w	800acd4 <_dtoa_r+0x8d4>
 800ab96:	2e00      	cmp	r6, #0
 800ab98:	dd11      	ble.n	800abbe <_dtoa_r+0x7be>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 fe10 	bl	800b7c4 <__pow5mult>
 800aba4:	465a      	mov	r2, fp
 800aba6:	4601      	mov	r1, r0
 800aba8:	4607      	mov	r7, r0
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fd64 	bl	800b678 <__multiply>
 800abb0:	4659      	mov	r1, fp
 800abb2:	9007      	str	r0, [sp, #28]
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fc8d 	bl	800b4d4 <_Bfree>
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	469b      	mov	fp, r3
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	1b9a      	subs	r2, r3, r6
 800abc2:	d004      	beq.n	800abce <_dtoa_r+0x7ce>
 800abc4:	4659      	mov	r1, fp
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 fdfc 	bl	800b7c4 <__pow5mult>
 800abcc:	4683      	mov	fp, r0
 800abce:	2101      	movs	r1, #1
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fd3b 	bl	800b64c <__i2b>
 800abd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	4606      	mov	r6, r0
 800abdc:	dd7c      	ble.n	800acd8 <_dtoa_r+0x8d8>
 800abde:	461a      	mov	r2, r3
 800abe0:	4601      	mov	r1, r0
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 fdee 	bl	800b7c4 <__pow5mult>
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	2b01      	cmp	r3, #1
 800abec:	4606      	mov	r6, r0
 800abee:	dd76      	ble.n	800acde <_dtoa_r+0x8de>
 800abf0:	2300      	movs	r3, #0
 800abf2:	9306      	str	r3, [sp, #24]
 800abf4:	6933      	ldr	r3, [r6, #16]
 800abf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abfa:	6918      	ldr	r0, [r3, #16]
 800abfc:	f000 fcd6 	bl	800b5ac <__hi0bits>
 800ac00:	f1c0 0020 	rsb	r0, r0, #32
 800ac04:	9b04      	ldr	r3, [sp, #16]
 800ac06:	4418      	add	r0, r3
 800ac08:	f010 001f 	ands.w	r0, r0, #31
 800ac0c:	f000 8086 	beq.w	800ad1c <_dtoa_r+0x91c>
 800ac10:	f1c0 0320 	rsb	r3, r0, #32
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	dd7f      	ble.n	800ad18 <_dtoa_r+0x918>
 800ac18:	f1c0 001c 	rsb	r0, r0, #28
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	4403      	add	r3, r0
 800ac20:	4480      	add	r8, r0
 800ac22:	4405      	add	r5, r0
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	dd05      	ble.n	800ac38 <_dtoa_r+0x838>
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	4642      	mov	r2, r8
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fe21 	bl	800b878 <__lshift>
 800ac36:	4683      	mov	fp, r0
 800ac38:	9b04      	ldr	r3, [sp, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dd05      	ble.n	800ac4a <_dtoa_r+0x84a>
 800ac3e:	4631      	mov	r1, r6
 800ac40:	461a      	mov	r2, r3
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 fe18 	bl	800b878 <__lshift>
 800ac48:	4606      	mov	r6, r0
 800ac4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d069      	beq.n	800ad24 <_dtoa_r+0x924>
 800ac50:	4631      	mov	r1, r6
 800ac52:	4658      	mov	r0, fp
 800ac54:	f000 fe7c 	bl	800b950 <__mcmp>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	da63      	bge.n	800ad24 <_dtoa_r+0x924>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4659      	mov	r1, fp
 800ac60:	220a      	movs	r2, #10
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fc58 	bl	800b518 <__multadd>
 800ac68:	9b08      	ldr	r3, [sp, #32]
 800ac6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac6e:	4683      	mov	fp, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 818f 	beq.w	800af94 <_dtoa_r+0xb94>
 800ac76:	4639      	mov	r1, r7
 800ac78:	2300      	movs	r3, #0
 800ac7a:	220a      	movs	r2, #10
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fc4b 	bl	800b518 <__multadd>
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	4607      	mov	r7, r0
 800ac88:	f300 808e 	bgt.w	800ada8 <_dtoa_r+0x9a8>
 800ac8c:	9b05      	ldr	r3, [sp, #20]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	dc50      	bgt.n	800ad34 <_dtoa_r+0x934>
 800ac92:	e089      	b.n	800ada8 <_dtoa_r+0x9a8>
 800ac94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac9a:	e75d      	b.n	800ab58 <_dtoa_r+0x758>
 800ac9c:	9b01      	ldr	r3, [sp, #4]
 800ac9e:	1e5e      	subs	r6, r3, #1
 800aca0:	9b06      	ldr	r3, [sp, #24]
 800aca2:	42b3      	cmp	r3, r6
 800aca4:	bfbf      	itttt	lt
 800aca6:	9b06      	ldrlt	r3, [sp, #24]
 800aca8:	9606      	strlt	r6, [sp, #24]
 800acaa:	1af2      	sublt	r2, r6, r3
 800acac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800acae:	bfb6      	itet	lt
 800acb0:	189b      	addlt	r3, r3, r2
 800acb2:	1b9e      	subge	r6, r3, r6
 800acb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	bfb8      	it	lt
 800acba:	2600      	movlt	r6, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfb5      	itete	lt
 800acc0:	eba8 0503 	sublt.w	r5, r8, r3
 800acc4:	9b01      	ldrge	r3, [sp, #4]
 800acc6:	2300      	movlt	r3, #0
 800acc8:	4645      	movge	r5, r8
 800acca:	e747      	b.n	800ab5c <_dtoa_r+0x75c>
 800accc:	9e06      	ldr	r6, [sp, #24]
 800acce:	9f08      	ldr	r7, [sp, #32]
 800acd0:	4645      	mov	r5, r8
 800acd2:	e74c      	b.n	800ab6e <_dtoa_r+0x76e>
 800acd4:	9a06      	ldr	r2, [sp, #24]
 800acd6:	e775      	b.n	800abc4 <_dtoa_r+0x7c4>
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	dc18      	bgt.n	800ad10 <_dtoa_r+0x910>
 800acde:	9b02      	ldr	r3, [sp, #8]
 800ace0:	b9b3      	cbnz	r3, 800ad10 <_dtoa_r+0x910>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ace8:	b9a3      	cbnz	r3, 800ad14 <_dtoa_r+0x914>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acf0:	0d1b      	lsrs	r3, r3, #20
 800acf2:	051b      	lsls	r3, r3, #20
 800acf4:	b12b      	cbz	r3, 800ad02 <_dtoa_r+0x902>
 800acf6:	9b04      	ldr	r3, [sp, #16]
 800acf8:	3301      	adds	r3, #1
 800acfa:	9304      	str	r3, [sp, #16]
 800acfc:	f108 0801 	add.w	r8, r8, #1
 800ad00:	2301      	movs	r3, #1
 800ad02:	9306      	str	r3, [sp, #24]
 800ad04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f47f af74 	bne.w	800abf4 <_dtoa_r+0x7f4>
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	e779      	b.n	800ac04 <_dtoa_r+0x804>
 800ad10:	2300      	movs	r3, #0
 800ad12:	e7f6      	b.n	800ad02 <_dtoa_r+0x902>
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	e7f4      	b.n	800ad02 <_dtoa_r+0x902>
 800ad18:	d085      	beq.n	800ac26 <_dtoa_r+0x826>
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	301c      	adds	r0, #28
 800ad1e:	e77d      	b.n	800ac1c <_dtoa_r+0x81c>
 800ad20:	40240000 	.word	0x40240000
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dc38      	bgt.n	800ad9c <_dtoa_r+0x99c>
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	dd35      	ble.n	800ad9c <_dtoa_r+0x99c>
 800ad30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad34:	f1b9 0f00 	cmp.w	r9, #0
 800ad38:	d10d      	bne.n	800ad56 <_dtoa_r+0x956>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	464b      	mov	r3, r9
 800ad3e:	2205      	movs	r2, #5
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fbe9 	bl	800b518 <__multadd>
 800ad46:	4601      	mov	r1, r0
 800ad48:	4606      	mov	r6, r0
 800ad4a:	4658      	mov	r0, fp
 800ad4c:	f000 fe00 	bl	800b950 <__mcmp>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f73f adbd 	bgt.w	800a8d0 <_dtoa_r+0x4d0>
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	9d00      	ldr	r5, [sp, #0]
 800ad5a:	ea6f 0a03 	mvn.w	sl, r3
 800ad5e:	f04f 0800 	mov.w	r8, #0
 800ad62:	4631      	mov	r1, r6
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fbb5 	bl	800b4d4 <_Bfree>
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	f43f aeb4 	beq.w	800aad8 <_dtoa_r+0x6d8>
 800ad70:	f1b8 0f00 	cmp.w	r8, #0
 800ad74:	d005      	beq.n	800ad82 <_dtoa_r+0x982>
 800ad76:	45b8      	cmp	r8, r7
 800ad78:	d003      	beq.n	800ad82 <_dtoa_r+0x982>
 800ad7a:	4641      	mov	r1, r8
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fba9 	bl	800b4d4 <_Bfree>
 800ad82:	4639      	mov	r1, r7
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 fba5 	bl	800b4d4 <_Bfree>
 800ad8a:	e6a5      	b.n	800aad8 <_dtoa_r+0x6d8>
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	4637      	mov	r7, r6
 800ad90:	e7e1      	b.n	800ad56 <_dtoa_r+0x956>
 800ad92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad98:	4637      	mov	r7, r6
 800ad9a:	e599      	b.n	800a8d0 <_dtoa_r+0x4d0>
 800ad9c:	9b08      	ldr	r3, [sp, #32]
 800ad9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80fd 	beq.w	800afa2 <_dtoa_r+0xba2>
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	dd05      	ble.n	800adb8 <_dtoa_r+0x9b8>
 800adac:	4639      	mov	r1, r7
 800adae:	462a      	mov	r2, r5
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fd61 	bl	800b878 <__lshift>
 800adb6:	4607      	mov	r7, r0
 800adb8:	9b06      	ldr	r3, [sp, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d05c      	beq.n	800ae78 <_dtoa_r+0xa78>
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 fb47 	bl	800b454 <_Balloc>
 800adc6:	4605      	mov	r5, r0
 800adc8:	b928      	cbnz	r0, 800add6 <_dtoa_r+0x9d6>
 800adca:	4b80      	ldr	r3, [pc, #512]	; (800afcc <_dtoa_r+0xbcc>)
 800adcc:	4602      	mov	r2, r0
 800adce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800add2:	f7ff bb2e 	b.w	800a432 <_dtoa_r+0x32>
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	3202      	adds	r2, #2
 800adda:	0092      	lsls	r2, r2, #2
 800addc:	f107 010c 	add.w	r1, r7, #12
 800ade0:	300c      	adds	r0, #12
 800ade2:	f000 fb1d 	bl	800b420 <memcpy>
 800ade6:	2201      	movs	r2, #1
 800ade8:	4629      	mov	r1, r5
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fd44 	bl	800b878 <__lshift>
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	444b      	add	r3, r9
 800adfa:	9307      	str	r3, [sp, #28]
 800adfc:	9b02      	ldr	r3, [sp, #8]
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	46b8      	mov	r8, r7
 800ae04:	9306      	str	r3, [sp, #24]
 800ae06:	4607      	mov	r7, r0
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	4658      	mov	r0, fp
 800ae10:	9302      	str	r3, [sp, #8]
 800ae12:	f7ff fa69 	bl	800a2e8 <quorem>
 800ae16:	4603      	mov	r3, r0
 800ae18:	3330      	adds	r3, #48	; 0x30
 800ae1a:	9004      	str	r0, [sp, #16]
 800ae1c:	4641      	mov	r1, r8
 800ae1e:	4658      	mov	r0, fp
 800ae20:	9308      	str	r3, [sp, #32]
 800ae22:	f000 fd95 	bl	800b950 <__mcmp>
 800ae26:	463a      	mov	r2, r7
 800ae28:	4681      	mov	r9, r0
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 fdab 	bl	800b988 <__mdiff>
 800ae32:	68c2      	ldr	r2, [r0, #12]
 800ae34:	9b08      	ldr	r3, [sp, #32]
 800ae36:	4605      	mov	r5, r0
 800ae38:	bb02      	cbnz	r2, 800ae7c <_dtoa_r+0xa7c>
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	f000 fd87 	bl	800b950 <__mcmp>
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	4602      	mov	r2, r0
 800ae46:	4629      	mov	r1, r5
 800ae48:	4620      	mov	r0, r4
 800ae4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ae4e:	f000 fb41 	bl	800b4d4 <_Bfree>
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae56:	9d01      	ldr	r5, [sp, #4]
 800ae58:	ea43 0102 	orr.w	r1, r3, r2
 800ae5c:	9b06      	ldr	r3, [sp, #24]
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	9b08      	ldr	r3, [sp, #32]
 800ae62:	d10d      	bne.n	800ae80 <_dtoa_r+0xa80>
 800ae64:	2b39      	cmp	r3, #57	; 0x39
 800ae66:	d029      	beq.n	800aebc <_dtoa_r+0xabc>
 800ae68:	f1b9 0f00 	cmp.w	r9, #0
 800ae6c:	dd01      	ble.n	800ae72 <_dtoa_r+0xa72>
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	3331      	adds	r3, #49	; 0x31
 800ae72:	9a02      	ldr	r2, [sp, #8]
 800ae74:	7013      	strb	r3, [r2, #0]
 800ae76:	e774      	b.n	800ad62 <_dtoa_r+0x962>
 800ae78:	4638      	mov	r0, r7
 800ae7a:	e7b9      	b.n	800adf0 <_dtoa_r+0x9f0>
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	e7e2      	b.n	800ae46 <_dtoa_r+0xa46>
 800ae80:	f1b9 0f00 	cmp.w	r9, #0
 800ae84:	db06      	blt.n	800ae94 <_dtoa_r+0xa94>
 800ae86:	9905      	ldr	r1, [sp, #20]
 800ae88:	ea41 0909 	orr.w	r9, r1, r9
 800ae8c:	9906      	ldr	r1, [sp, #24]
 800ae8e:	ea59 0101 	orrs.w	r1, r9, r1
 800ae92:	d120      	bne.n	800aed6 <_dtoa_r+0xad6>
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	ddec      	ble.n	800ae72 <_dtoa_r+0xa72>
 800ae98:	4659      	mov	r1, fp
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	f000 fcea 	bl	800b878 <__lshift>
 800aea4:	4631      	mov	r1, r6
 800aea6:	4683      	mov	fp, r0
 800aea8:	f000 fd52 	bl	800b950 <__mcmp>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	dc02      	bgt.n	800aeb8 <_dtoa_r+0xab8>
 800aeb2:	d1de      	bne.n	800ae72 <_dtoa_r+0xa72>
 800aeb4:	07da      	lsls	r2, r3, #31
 800aeb6:	d5dc      	bpl.n	800ae72 <_dtoa_r+0xa72>
 800aeb8:	2b39      	cmp	r3, #57	; 0x39
 800aeba:	d1d8      	bne.n	800ae6e <_dtoa_r+0xa6e>
 800aebc:	9a02      	ldr	r2, [sp, #8]
 800aebe:	2339      	movs	r3, #57	; 0x39
 800aec0:	7013      	strb	r3, [r2, #0]
 800aec2:	462b      	mov	r3, r5
 800aec4:	461d      	mov	r5, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aecc:	2a39      	cmp	r2, #57	; 0x39
 800aece:	d050      	beq.n	800af72 <_dtoa_r+0xb72>
 800aed0:	3201      	adds	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	e745      	b.n	800ad62 <_dtoa_r+0x962>
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	dd03      	ble.n	800aee2 <_dtoa_r+0xae2>
 800aeda:	2b39      	cmp	r3, #57	; 0x39
 800aedc:	d0ee      	beq.n	800aebc <_dtoa_r+0xabc>
 800aede:	3301      	adds	r3, #1
 800aee0:	e7c7      	b.n	800ae72 <_dtoa_r+0xa72>
 800aee2:	9a01      	ldr	r2, [sp, #4]
 800aee4:	9907      	ldr	r1, [sp, #28]
 800aee6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aeea:	428a      	cmp	r2, r1
 800aeec:	d02a      	beq.n	800af44 <_dtoa_r+0xb44>
 800aeee:	4659      	mov	r1, fp
 800aef0:	2300      	movs	r3, #0
 800aef2:	220a      	movs	r2, #10
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fb0f 	bl	800b518 <__multadd>
 800aefa:	45b8      	cmp	r8, r7
 800aefc:	4683      	mov	fp, r0
 800aefe:	f04f 0300 	mov.w	r3, #0
 800af02:	f04f 020a 	mov.w	r2, #10
 800af06:	4641      	mov	r1, r8
 800af08:	4620      	mov	r0, r4
 800af0a:	d107      	bne.n	800af1c <_dtoa_r+0xb1c>
 800af0c:	f000 fb04 	bl	800b518 <__multadd>
 800af10:	4680      	mov	r8, r0
 800af12:	4607      	mov	r7, r0
 800af14:	9b01      	ldr	r3, [sp, #4]
 800af16:	3301      	adds	r3, #1
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	e775      	b.n	800ae08 <_dtoa_r+0xa08>
 800af1c:	f000 fafc 	bl	800b518 <__multadd>
 800af20:	4639      	mov	r1, r7
 800af22:	4680      	mov	r8, r0
 800af24:	2300      	movs	r3, #0
 800af26:	220a      	movs	r2, #10
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 faf5 	bl	800b518 <__multadd>
 800af2e:	4607      	mov	r7, r0
 800af30:	e7f0      	b.n	800af14 <_dtoa_r+0xb14>
 800af32:	f1b9 0f00 	cmp.w	r9, #0
 800af36:	9a00      	ldr	r2, [sp, #0]
 800af38:	bfcc      	ite	gt
 800af3a:	464d      	movgt	r5, r9
 800af3c:	2501      	movle	r5, #1
 800af3e:	4415      	add	r5, r2
 800af40:	f04f 0800 	mov.w	r8, #0
 800af44:	4659      	mov	r1, fp
 800af46:	2201      	movs	r2, #1
 800af48:	4620      	mov	r0, r4
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	f000 fc94 	bl	800b878 <__lshift>
 800af50:	4631      	mov	r1, r6
 800af52:	4683      	mov	fp, r0
 800af54:	f000 fcfc 	bl	800b950 <__mcmp>
 800af58:	2800      	cmp	r0, #0
 800af5a:	dcb2      	bgt.n	800aec2 <_dtoa_r+0xac2>
 800af5c:	d102      	bne.n	800af64 <_dtoa_r+0xb64>
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	07db      	lsls	r3, r3, #31
 800af62:	d4ae      	bmi.n	800aec2 <_dtoa_r+0xac2>
 800af64:	462b      	mov	r3, r5
 800af66:	461d      	mov	r5, r3
 800af68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af6c:	2a30      	cmp	r2, #48	; 0x30
 800af6e:	d0fa      	beq.n	800af66 <_dtoa_r+0xb66>
 800af70:	e6f7      	b.n	800ad62 <_dtoa_r+0x962>
 800af72:	9a00      	ldr	r2, [sp, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d1a5      	bne.n	800aec4 <_dtoa_r+0xac4>
 800af78:	f10a 0a01 	add.w	sl, sl, #1
 800af7c:	2331      	movs	r3, #49	; 0x31
 800af7e:	e779      	b.n	800ae74 <_dtoa_r+0xa74>
 800af80:	4b13      	ldr	r3, [pc, #76]	; (800afd0 <_dtoa_r+0xbd0>)
 800af82:	f7ff baaf 	b.w	800a4e4 <_dtoa_r+0xe4>
 800af86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f47f aa86 	bne.w	800a49a <_dtoa_r+0x9a>
 800af8e:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <_dtoa_r+0xbd4>)
 800af90:	f7ff baa8 	b.w	800a4e4 <_dtoa_r+0xe4>
 800af94:	f1b9 0f00 	cmp.w	r9, #0
 800af98:	dc03      	bgt.n	800afa2 <_dtoa_r+0xba2>
 800af9a:	9b05      	ldr	r3, [sp, #20]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	f73f aec9 	bgt.w	800ad34 <_dtoa_r+0x934>
 800afa2:	9d00      	ldr	r5, [sp, #0]
 800afa4:	4631      	mov	r1, r6
 800afa6:	4658      	mov	r0, fp
 800afa8:	f7ff f99e 	bl	800a2e8 <quorem>
 800afac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afb0:	f805 3b01 	strb.w	r3, [r5], #1
 800afb4:	9a00      	ldr	r2, [sp, #0]
 800afb6:	1aaa      	subs	r2, r5, r2
 800afb8:	4591      	cmp	r9, r2
 800afba:	ddba      	ble.n	800af32 <_dtoa_r+0xb32>
 800afbc:	4659      	mov	r1, fp
 800afbe:	2300      	movs	r3, #0
 800afc0:	220a      	movs	r2, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 faa8 	bl	800b518 <__multadd>
 800afc8:	4683      	mov	fp, r0
 800afca:	e7eb      	b.n	800afa4 <_dtoa_r+0xba4>
 800afcc:	0800ca8f 	.word	0x0800ca8f
 800afd0:	0800c9e8 	.word	0x0800c9e8
 800afd4:	0800ca0c 	.word	0x0800ca0c

0800afd8 <__sflush_r>:
 800afd8:	898a      	ldrh	r2, [r1, #12]
 800afda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	4605      	mov	r5, r0
 800afe0:	0710      	lsls	r0, r2, #28
 800afe2:	460c      	mov	r4, r1
 800afe4:	d458      	bmi.n	800b098 <__sflush_r+0xc0>
 800afe6:	684b      	ldr	r3, [r1, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dc05      	bgt.n	800aff8 <__sflush_r+0x20>
 800afec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dc02      	bgt.n	800aff8 <__sflush_r+0x20>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800affa:	2e00      	cmp	r6, #0
 800affc:	d0f9      	beq.n	800aff2 <__sflush_r+0x1a>
 800affe:	2300      	movs	r3, #0
 800b000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b004:	682f      	ldr	r7, [r5, #0]
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	d032      	beq.n	800b070 <__sflush_r+0x98>
 800b00a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	075a      	lsls	r2, r3, #29
 800b010:	d505      	bpl.n	800b01e <__sflush_r+0x46>
 800b012:	6863      	ldr	r3, [r4, #4]
 800b014:	1ac0      	subs	r0, r0, r3
 800b016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b018:	b10b      	cbz	r3, 800b01e <__sflush_r+0x46>
 800b01a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b01c:	1ac0      	subs	r0, r0, r3
 800b01e:	2300      	movs	r3, #0
 800b020:	4602      	mov	r2, r0
 800b022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b024:	6a21      	ldr	r1, [r4, #32]
 800b026:	4628      	mov	r0, r5
 800b028:	47b0      	blx	r6
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	d106      	bne.n	800b03e <__sflush_r+0x66>
 800b030:	6829      	ldr	r1, [r5, #0]
 800b032:	291d      	cmp	r1, #29
 800b034:	d82c      	bhi.n	800b090 <__sflush_r+0xb8>
 800b036:	4a2a      	ldr	r2, [pc, #168]	; (800b0e0 <__sflush_r+0x108>)
 800b038:	40ca      	lsrs	r2, r1
 800b03a:	07d6      	lsls	r6, r2, #31
 800b03c:	d528      	bpl.n	800b090 <__sflush_r+0xb8>
 800b03e:	2200      	movs	r2, #0
 800b040:	6062      	str	r2, [r4, #4]
 800b042:	04d9      	lsls	r1, r3, #19
 800b044:	6922      	ldr	r2, [r4, #16]
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	d504      	bpl.n	800b054 <__sflush_r+0x7c>
 800b04a:	1c42      	adds	r2, r0, #1
 800b04c:	d101      	bne.n	800b052 <__sflush_r+0x7a>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	b903      	cbnz	r3, 800b054 <__sflush_r+0x7c>
 800b052:	6560      	str	r0, [r4, #84]	; 0x54
 800b054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b056:	602f      	str	r7, [r5, #0]
 800b058:	2900      	cmp	r1, #0
 800b05a:	d0ca      	beq.n	800aff2 <__sflush_r+0x1a>
 800b05c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b060:	4299      	cmp	r1, r3
 800b062:	d002      	beq.n	800b06a <__sflush_r+0x92>
 800b064:	4628      	mov	r0, r5
 800b066:	f7fe faa9 	bl	80095bc <_free_r>
 800b06a:	2000      	movs	r0, #0
 800b06c:	6360      	str	r0, [r4, #52]	; 0x34
 800b06e:	e7c1      	b.n	800aff4 <__sflush_r+0x1c>
 800b070:	6a21      	ldr	r1, [r4, #32]
 800b072:	2301      	movs	r3, #1
 800b074:	4628      	mov	r0, r5
 800b076:	47b0      	blx	r6
 800b078:	1c41      	adds	r1, r0, #1
 800b07a:	d1c7      	bne.n	800b00c <__sflush_r+0x34>
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0c4      	beq.n	800b00c <__sflush_r+0x34>
 800b082:	2b1d      	cmp	r3, #29
 800b084:	d001      	beq.n	800b08a <__sflush_r+0xb2>
 800b086:	2b16      	cmp	r3, #22
 800b088:	d101      	bne.n	800b08e <__sflush_r+0xb6>
 800b08a:	602f      	str	r7, [r5, #0]
 800b08c:	e7b1      	b.n	800aff2 <__sflush_r+0x1a>
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	e7ad      	b.n	800aff4 <__sflush_r+0x1c>
 800b098:	690f      	ldr	r7, [r1, #16]
 800b09a:	2f00      	cmp	r7, #0
 800b09c:	d0a9      	beq.n	800aff2 <__sflush_r+0x1a>
 800b09e:	0793      	lsls	r3, r2, #30
 800b0a0:	680e      	ldr	r6, [r1, #0]
 800b0a2:	bf08      	it	eq
 800b0a4:	694b      	ldreq	r3, [r1, #20]
 800b0a6:	600f      	str	r7, [r1, #0]
 800b0a8:	bf18      	it	ne
 800b0aa:	2300      	movne	r3, #0
 800b0ac:	eba6 0807 	sub.w	r8, r6, r7
 800b0b0:	608b      	str	r3, [r1, #8]
 800b0b2:	f1b8 0f00 	cmp.w	r8, #0
 800b0b6:	dd9c      	ble.n	800aff2 <__sflush_r+0x1a>
 800b0b8:	6a21      	ldr	r1, [r4, #32]
 800b0ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0bc:	4643      	mov	r3, r8
 800b0be:	463a      	mov	r2, r7
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	47b0      	blx	r6
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dc06      	bgt.n	800b0d6 <__sflush_r+0xfe>
 800b0c8:	89a3      	ldrh	r3, [r4, #12]
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d4:	e78e      	b.n	800aff4 <__sflush_r+0x1c>
 800b0d6:	4407      	add	r7, r0
 800b0d8:	eba8 0800 	sub.w	r8, r8, r0
 800b0dc:	e7e9      	b.n	800b0b2 <__sflush_r+0xda>
 800b0de:	bf00      	nop
 800b0e0:	20400001 	.word	0x20400001

0800b0e4 <_fflush_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	690b      	ldr	r3, [r1, #16]
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	b913      	cbnz	r3, 800b0f4 <_fflush_r+0x10>
 800b0ee:	2500      	movs	r5, #0
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	b118      	cbz	r0, 800b0fe <_fflush_r+0x1a>
 800b0f6:	6983      	ldr	r3, [r0, #24]
 800b0f8:	b90b      	cbnz	r3, 800b0fe <_fflush_r+0x1a>
 800b0fa:	f000 f887 	bl	800b20c <__sinit>
 800b0fe:	4b14      	ldr	r3, [pc, #80]	; (800b150 <_fflush_r+0x6c>)
 800b100:	429c      	cmp	r4, r3
 800b102:	d11b      	bne.n	800b13c <_fflush_r+0x58>
 800b104:	686c      	ldr	r4, [r5, #4]
 800b106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0ef      	beq.n	800b0ee <_fflush_r+0xa>
 800b10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b110:	07d0      	lsls	r0, r2, #31
 800b112:	d404      	bmi.n	800b11e <_fflush_r+0x3a>
 800b114:	0599      	lsls	r1, r3, #22
 800b116:	d402      	bmi.n	800b11e <_fflush_r+0x3a>
 800b118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b11a:	f000 f91a 	bl	800b352 <__retarget_lock_acquire_recursive>
 800b11e:	4628      	mov	r0, r5
 800b120:	4621      	mov	r1, r4
 800b122:	f7ff ff59 	bl	800afd8 <__sflush_r>
 800b126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b128:	07da      	lsls	r2, r3, #31
 800b12a:	4605      	mov	r5, r0
 800b12c:	d4e0      	bmi.n	800b0f0 <_fflush_r+0xc>
 800b12e:	89a3      	ldrh	r3, [r4, #12]
 800b130:	059b      	lsls	r3, r3, #22
 800b132:	d4dd      	bmi.n	800b0f0 <_fflush_r+0xc>
 800b134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b136:	f000 f90d 	bl	800b354 <__retarget_lock_release_recursive>
 800b13a:	e7d9      	b.n	800b0f0 <_fflush_r+0xc>
 800b13c:	4b05      	ldr	r3, [pc, #20]	; (800b154 <_fflush_r+0x70>)
 800b13e:	429c      	cmp	r4, r3
 800b140:	d101      	bne.n	800b146 <_fflush_r+0x62>
 800b142:	68ac      	ldr	r4, [r5, #8]
 800b144:	e7df      	b.n	800b106 <_fflush_r+0x22>
 800b146:	4b04      	ldr	r3, [pc, #16]	; (800b158 <_fflush_r+0x74>)
 800b148:	429c      	cmp	r4, r3
 800b14a:	bf08      	it	eq
 800b14c:	68ec      	ldreq	r4, [r5, #12]
 800b14e:	e7da      	b.n	800b106 <_fflush_r+0x22>
 800b150:	0800cac0 	.word	0x0800cac0
 800b154:	0800cae0 	.word	0x0800cae0
 800b158:	0800caa0 	.word	0x0800caa0

0800b15c <std>:
 800b15c:	2300      	movs	r3, #0
 800b15e:	b510      	push	{r4, lr}
 800b160:	4604      	mov	r4, r0
 800b162:	e9c0 3300 	strd	r3, r3, [r0]
 800b166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b16a:	6083      	str	r3, [r0, #8]
 800b16c:	8181      	strh	r1, [r0, #12]
 800b16e:	6643      	str	r3, [r0, #100]	; 0x64
 800b170:	81c2      	strh	r2, [r0, #14]
 800b172:	6183      	str	r3, [r0, #24]
 800b174:	4619      	mov	r1, r3
 800b176:	2208      	movs	r2, #8
 800b178:	305c      	adds	r0, #92	; 0x5c
 800b17a:	f7fe fa07 	bl	800958c <memset>
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <std+0x38>)
 800b180:	6263      	str	r3, [r4, #36]	; 0x24
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <std+0x3c>)
 800b184:	62a3      	str	r3, [r4, #40]	; 0x28
 800b186:	4b05      	ldr	r3, [pc, #20]	; (800b19c <std+0x40>)
 800b188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b18a:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <std+0x44>)
 800b18c:	6224      	str	r4, [r4, #32]
 800b18e:	6323      	str	r3, [r4, #48]	; 0x30
 800b190:	bd10      	pop	{r4, pc}
 800b192:	bf00      	nop
 800b194:	0800be55 	.word	0x0800be55
 800b198:	0800be77 	.word	0x0800be77
 800b19c:	0800beaf 	.word	0x0800beaf
 800b1a0:	0800bed3 	.word	0x0800bed3

0800b1a4 <_cleanup_r>:
 800b1a4:	4901      	ldr	r1, [pc, #4]	; (800b1ac <_cleanup_r+0x8>)
 800b1a6:	f000 b8af 	b.w	800b308 <_fwalk_reent>
 800b1aa:	bf00      	nop
 800b1ac:	0800b0e5 	.word	0x0800b0e5

0800b1b0 <__sfmoreglue>:
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	1e4a      	subs	r2, r1, #1
 800b1b4:	2568      	movs	r5, #104	; 0x68
 800b1b6:	4355      	muls	r5, r2
 800b1b8:	460e      	mov	r6, r1
 800b1ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1be:	f7fe fa4d 	bl	800965c <_malloc_r>
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	b140      	cbz	r0, 800b1d8 <__sfmoreglue+0x28>
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	e9c0 1600 	strd	r1, r6, [r0]
 800b1cc:	300c      	adds	r0, #12
 800b1ce:	60a0      	str	r0, [r4, #8]
 800b1d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1d4:	f7fe f9da 	bl	800958c <memset>
 800b1d8:	4620      	mov	r0, r4
 800b1da:	bd70      	pop	{r4, r5, r6, pc}

0800b1dc <__sfp_lock_acquire>:
 800b1dc:	4801      	ldr	r0, [pc, #4]	; (800b1e4 <__sfp_lock_acquire+0x8>)
 800b1de:	f000 b8b8 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800b1e2:	bf00      	nop
 800b1e4:	200007b0 	.word	0x200007b0

0800b1e8 <__sfp_lock_release>:
 800b1e8:	4801      	ldr	r0, [pc, #4]	; (800b1f0 <__sfp_lock_release+0x8>)
 800b1ea:	f000 b8b3 	b.w	800b354 <__retarget_lock_release_recursive>
 800b1ee:	bf00      	nop
 800b1f0:	200007b0 	.word	0x200007b0

0800b1f4 <__sinit_lock_acquire>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	; (800b1fc <__sinit_lock_acquire+0x8>)
 800b1f6:	f000 b8ac 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	200007ab 	.word	0x200007ab

0800b200 <__sinit_lock_release>:
 800b200:	4801      	ldr	r0, [pc, #4]	; (800b208 <__sinit_lock_release+0x8>)
 800b202:	f000 b8a7 	b.w	800b354 <__retarget_lock_release_recursive>
 800b206:	bf00      	nop
 800b208:	200007ab 	.word	0x200007ab

0800b20c <__sinit>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	f7ff fff0 	bl	800b1f4 <__sinit_lock_acquire>
 800b214:	69a3      	ldr	r3, [r4, #24]
 800b216:	b11b      	cbz	r3, 800b220 <__sinit+0x14>
 800b218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b21c:	f7ff bff0 	b.w	800b200 <__sinit_lock_release>
 800b220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b224:	6523      	str	r3, [r4, #80]	; 0x50
 800b226:	4b13      	ldr	r3, [pc, #76]	; (800b274 <__sinit+0x68>)
 800b228:	4a13      	ldr	r2, [pc, #76]	; (800b278 <__sinit+0x6c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b22e:	42a3      	cmp	r3, r4
 800b230:	bf04      	itt	eq
 800b232:	2301      	moveq	r3, #1
 800b234:	61a3      	streq	r3, [r4, #24]
 800b236:	4620      	mov	r0, r4
 800b238:	f000 f820 	bl	800b27c <__sfp>
 800b23c:	6060      	str	r0, [r4, #4]
 800b23e:	4620      	mov	r0, r4
 800b240:	f000 f81c 	bl	800b27c <__sfp>
 800b244:	60a0      	str	r0, [r4, #8]
 800b246:	4620      	mov	r0, r4
 800b248:	f000 f818 	bl	800b27c <__sfp>
 800b24c:	2200      	movs	r2, #0
 800b24e:	60e0      	str	r0, [r4, #12]
 800b250:	2104      	movs	r1, #4
 800b252:	6860      	ldr	r0, [r4, #4]
 800b254:	f7ff ff82 	bl	800b15c <std>
 800b258:	68a0      	ldr	r0, [r4, #8]
 800b25a:	2201      	movs	r2, #1
 800b25c:	2109      	movs	r1, #9
 800b25e:	f7ff ff7d 	bl	800b15c <std>
 800b262:	68e0      	ldr	r0, [r4, #12]
 800b264:	2202      	movs	r2, #2
 800b266:	2112      	movs	r1, #18
 800b268:	f7ff ff78 	bl	800b15c <std>
 800b26c:	2301      	movs	r3, #1
 800b26e:	61a3      	str	r3, [r4, #24]
 800b270:	e7d2      	b.n	800b218 <__sinit+0xc>
 800b272:	bf00      	nop
 800b274:	0800c9d4 	.word	0x0800c9d4
 800b278:	0800b1a5 	.word	0x0800b1a5

0800b27c <__sfp>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	4607      	mov	r7, r0
 800b280:	f7ff ffac 	bl	800b1dc <__sfp_lock_acquire>
 800b284:	4b1e      	ldr	r3, [pc, #120]	; (800b300 <__sfp+0x84>)
 800b286:	681e      	ldr	r6, [r3, #0]
 800b288:	69b3      	ldr	r3, [r6, #24]
 800b28a:	b913      	cbnz	r3, 800b292 <__sfp+0x16>
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff ffbd 	bl	800b20c <__sinit>
 800b292:	3648      	adds	r6, #72	; 0x48
 800b294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b298:	3b01      	subs	r3, #1
 800b29a:	d503      	bpl.n	800b2a4 <__sfp+0x28>
 800b29c:	6833      	ldr	r3, [r6, #0]
 800b29e:	b30b      	cbz	r3, 800b2e4 <__sfp+0x68>
 800b2a0:	6836      	ldr	r6, [r6, #0]
 800b2a2:	e7f7      	b.n	800b294 <__sfp+0x18>
 800b2a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2a8:	b9d5      	cbnz	r5, 800b2e0 <__sfp+0x64>
 800b2aa:	4b16      	ldr	r3, [pc, #88]	; (800b304 <__sfp+0x88>)
 800b2ac:	60e3      	str	r3, [r4, #12]
 800b2ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2b2:	6665      	str	r5, [r4, #100]	; 0x64
 800b2b4:	f000 f84c 	bl	800b350 <__retarget_lock_init_recursive>
 800b2b8:	f7ff ff96 	bl	800b1e8 <__sfp_lock_release>
 800b2bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2c4:	6025      	str	r5, [r4, #0]
 800b2c6:	61a5      	str	r5, [r4, #24]
 800b2c8:	2208      	movs	r2, #8
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2d0:	f7fe f95c 	bl	800958c <memset>
 800b2d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2dc:	4620      	mov	r0, r4
 800b2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e0:	3468      	adds	r4, #104	; 0x68
 800b2e2:	e7d9      	b.n	800b298 <__sfp+0x1c>
 800b2e4:	2104      	movs	r1, #4
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	f7ff ff62 	bl	800b1b0 <__sfmoreglue>
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	6030      	str	r0, [r6, #0]
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d1d5      	bne.n	800b2a0 <__sfp+0x24>
 800b2f4:	f7ff ff78 	bl	800b1e8 <__sfp_lock_release>
 800b2f8:	230c      	movs	r3, #12
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	e7ee      	b.n	800b2dc <__sfp+0x60>
 800b2fe:	bf00      	nop
 800b300:	0800c9d4 	.word	0x0800c9d4
 800b304:	ffff0001 	.word	0xffff0001

0800b308 <_fwalk_reent>:
 800b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b30c:	4606      	mov	r6, r0
 800b30e:	4688      	mov	r8, r1
 800b310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b314:	2700      	movs	r7, #0
 800b316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b31a:	f1b9 0901 	subs.w	r9, r9, #1
 800b31e:	d505      	bpl.n	800b32c <_fwalk_reent+0x24>
 800b320:	6824      	ldr	r4, [r4, #0]
 800b322:	2c00      	cmp	r4, #0
 800b324:	d1f7      	bne.n	800b316 <_fwalk_reent+0xe>
 800b326:	4638      	mov	r0, r7
 800b328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32c:	89ab      	ldrh	r3, [r5, #12]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d907      	bls.n	800b342 <_fwalk_reent+0x3a>
 800b332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b336:	3301      	adds	r3, #1
 800b338:	d003      	beq.n	800b342 <_fwalk_reent+0x3a>
 800b33a:	4629      	mov	r1, r5
 800b33c:	4630      	mov	r0, r6
 800b33e:	47c0      	blx	r8
 800b340:	4307      	orrs	r7, r0
 800b342:	3568      	adds	r5, #104	; 0x68
 800b344:	e7e9      	b.n	800b31a <_fwalk_reent+0x12>
	...

0800b348 <_localeconv_r>:
 800b348:	4800      	ldr	r0, [pc, #0]	; (800b34c <_localeconv_r+0x4>)
 800b34a:	4770      	bx	lr
 800b34c:	200004bc 	.word	0x200004bc

0800b350 <__retarget_lock_init_recursive>:
 800b350:	4770      	bx	lr

0800b352 <__retarget_lock_acquire_recursive>:
 800b352:	4770      	bx	lr

0800b354 <__retarget_lock_release_recursive>:
 800b354:	4770      	bx	lr

0800b356 <__swhatbuf_r>:
 800b356:	b570      	push	{r4, r5, r6, lr}
 800b358:	460e      	mov	r6, r1
 800b35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35e:	2900      	cmp	r1, #0
 800b360:	b096      	sub	sp, #88	; 0x58
 800b362:	4614      	mov	r4, r2
 800b364:	461d      	mov	r5, r3
 800b366:	da07      	bge.n	800b378 <__swhatbuf_r+0x22>
 800b368:	2300      	movs	r3, #0
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	89b3      	ldrh	r3, [r6, #12]
 800b36e:	061a      	lsls	r2, r3, #24
 800b370:	d410      	bmi.n	800b394 <__swhatbuf_r+0x3e>
 800b372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b376:	e00e      	b.n	800b396 <__swhatbuf_r+0x40>
 800b378:	466a      	mov	r2, sp
 800b37a:	f000 fe01 	bl	800bf80 <_fstat_r>
 800b37e:	2800      	cmp	r0, #0
 800b380:	dbf2      	blt.n	800b368 <__swhatbuf_r+0x12>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b388:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b38c:	425a      	negs	r2, r3
 800b38e:	415a      	adcs	r2, r3
 800b390:	602a      	str	r2, [r5, #0]
 800b392:	e7ee      	b.n	800b372 <__swhatbuf_r+0x1c>
 800b394:	2340      	movs	r3, #64	; 0x40
 800b396:	2000      	movs	r0, #0
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	b016      	add	sp, #88	; 0x58
 800b39c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3a0 <__smakebuf_r>:
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3a4:	079d      	lsls	r5, r3, #30
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	d507      	bpl.n	800b3bc <__smakebuf_r+0x1c>
 800b3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	b002      	add	sp, #8
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	ab01      	add	r3, sp, #4
 800b3be:	466a      	mov	r2, sp
 800b3c0:	f7ff ffc9 	bl	800b356 <__swhatbuf_r>
 800b3c4:	9900      	ldr	r1, [sp, #0]
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7fe f947 	bl	800965c <_malloc_r>
 800b3ce:	b948      	cbnz	r0, 800b3e4 <__smakebuf_r+0x44>
 800b3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d4:	059a      	lsls	r2, r3, #22
 800b3d6:	d4ef      	bmi.n	800b3b8 <__smakebuf_r+0x18>
 800b3d8:	f023 0303 	bic.w	r3, r3, #3
 800b3dc:	f043 0302 	orr.w	r3, r3, #2
 800b3e0:	81a3      	strh	r3, [r4, #12]
 800b3e2:	e7e3      	b.n	800b3ac <__smakebuf_r+0xc>
 800b3e4:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <__smakebuf_r+0x7c>)
 800b3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	6020      	str	r0, [r4, #0]
 800b3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	9b00      	ldr	r3, [sp, #0]
 800b3f4:	6163      	str	r3, [r4, #20]
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	6120      	str	r0, [r4, #16]
 800b3fa:	b15b      	cbz	r3, 800b414 <__smakebuf_r+0x74>
 800b3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b400:	4630      	mov	r0, r6
 800b402:	f000 fdcf 	bl	800bfa4 <_isatty_r>
 800b406:	b128      	cbz	r0, 800b414 <__smakebuf_r+0x74>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	f043 0301 	orr.w	r3, r3, #1
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	89a0      	ldrh	r0, [r4, #12]
 800b416:	4305      	orrs	r5, r0
 800b418:	81a5      	strh	r5, [r4, #12]
 800b41a:	e7cd      	b.n	800b3b8 <__smakebuf_r+0x18>
 800b41c:	0800b1a5 	.word	0x0800b1a5

0800b420 <memcpy>:
 800b420:	440a      	add	r2, r1
 800b422:	4291      	cmp	r1, r2
 800b424:	f100 33ff 	add.w	r3, r0, #4294967295
 800b428:	d100      	bne.n	800b42c <memcpy+0xc>
 800b42a:	4770      	bx	lr
 800b42c:	b510      	push	{r4, lr}
 800b42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b436:	4291      	cmp	r1, r2
 800b438:	d1f9      	bne.n	800b42e <memcpy+0xe>
 800b43a:	bd10      	pop	{r4, pc}

0800b43c <__malloc_lock>:
 800b43c:	4801      	ldr	r0, [pc, #4]	; (800b444 <__malloc_lock+0x8>)
 800b43e:	f7ff bf88 	b.w	800b352 <__retarget_lock_acquire_recursive>
 800b442:	bf00      	nop
 800b444:	200007ac 	.word	0x200007ac

0800b448 <__malloc_unlock>:
 800b448:	4801      	ldr	r0, [pc, #4]	; (800b450 <__malloc_unlock+0x8>)
 800b44a:	f7ff bf83 	b.w	800b354 <__retarget_lock_release_recursive>
 800b44e:	bf00      	nop
 800b450:	200007ac 	.word	0x200007ac

0800b454 <_Balloc>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b458:	4604      	mov	r4, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	b976      	cbnz	r6, 800b47c <_Balloc+0x28>
 800b45e:	2010      	movs	r0, #16
 800b460:	f7fe f884 	bl	800956c <malloc>
 800b464:	4602      	mov	r2, r0
 800b466:	6260      	str	r0, [r4, #36]	; 0x24
 800b468:	b920      	cbnz	r0, 800b474 <_Balloc+0x20>
 800b46a:	4b18      	ldr	r3, [pc, #96]	; (800b4cc <_Balloc+0x78>)
 800b46c:	4818      	ldr	r0, [pc, #96]	; (800b4d0 <_Balloc+0x7c>)
 800b46e:	2166      	movs	r1, #102	; 0x66
 800b470:	f000 fd46 	bl	800bf00 <__assert_func>
 800b474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b478:	6006      	str	r6, [r0, #0]
 800b47a:	60c6      	str	r6, [r0, #12]
 800b47c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b47e:	68f3      	ldr	r3, [r6, #12]
 800b480:	b183      	cbz	r3, 800b4a4 <_Balloc+0x50>
 800b482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b48a:	b9b8      	cbnz	r0, 800b4bc <_Balloc+0x68>
 800b48c:	2101      	movs	r1, #1
 800b48e:	fa01 f605 	lsl.w	r6, r1, r5
 800b492:	1d72      	adds	r2, r6, #5
 800b494:	0092      	lsls	r2, r2, #2
 800b496:	4620      	mov	r0, r4
 800b498:	f7fe f880 	bl	800959c <_calloc_r>
 800b49c:	b160      	cbz	r0, 800b4b8 <_Balloc+0x64>
 800b49e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4a2:	e00e      	b.n	800b4c2 <_Balloc+0x6e>
 800b4a4:	2221      	movs	r2, #33	; 0x21
 800b4a6:	2104      	movs	r1, #4
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f7fe f877 	bl	800959c <_calloc_r>
 800b4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4b0:	60f0      	str	r0, [r6, #12]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1e4      	bne.n	800b482 <_Balloc+0x2e>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	6802      	ldr	r2, [r0, #0]
 800b4be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4c8:	e7f7      	b.n	800b4ba <_Balloc+0x66>
 800b4ca:	bf00      	nop
 800b4cc:	0800ca19 	.word	0x0800ca19
 800b4d0:	0800cb00 	.word	0x0800cb00

0800b4d4 <_Bfree>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4d8:	4605      	mov	r5, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	b976      	cbnz	r6, 800b4fc <_Bfree+0x28>
 800b4de:	2010      	movs	r0, #16
 800b4e0:	f7fe f844 	bl	800956c <malloc>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	6268      	str	r0, [r5, #36]	; 0x24
 800b4e8:	b920      	cbnz	r0, 800b4f4 <_Bfree+0x20>
 800b4ea:	4b09      	ldr	r3, [pc, #36]	; (800b510 <_Bfree+0x3c>)
 800b4ec:	4809      	ldr	r0, [pc, #36]	; (800b514 <_Bfree+0x40>)
 800b4ee:	218a      	movs	r1, #138	; 0x8a
 800b4f0:	f000 fd06 	bl	800bf00 <__assert_func>
 800b4f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4f8:	6006      	str	r6, [r0, #0]
 800b4fa:	60c6      	str	r6, [r0, #12]
 800b4fc:	b13c      	cbz	r4, 800b50e <_Bfree+0x3a>
 800b4fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b500:	6862      	ldr	r2, [r4, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b508:	6021      	str	r1, [r4, #0]
 800b50a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	0800ca19 	.word	0x0800ca19
 800b514:	0800cb00 	.word	0x0800cb00

0800b518 <__multadd>:
 800b518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51c:	690e      	ldr	r6, [r1, #16]
 800b51e:	4607      	mov	r7, r0
 800b520:	4698      	mov	r8, r3
 800b522:	460c      	mov	r4, r1
 800b524:	f101 0014 	add.w	r0, r1, #20
 800b528:	2300      	movs	r3, #0
 800b52a:	6805      	ldr	r5, [r0, #0]
 800b52c:	b2a9      	uxth	r1, r5
 800b52e:	fb02 8101 	mla	r1, r2, r1, r8
 800b532:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b536:	0c2d      	lsrs	r5, r5, #16
 800b538:	fb02 c505 	mla	r5, r2, r5, ip
 800b53c:	b289      	uxth	r1, r1
 800b53e:	3301      	adds	r3, #1
 800b540:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b544:	429e      	cmp	r6, r3
 800b546:	f840 1b04 	str.w	r1, [r0], #4
 800b54a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b54e:	dcec      	bgt.n	800b52a <__multadd+0x12>
 800b550:	f1b8 0f00 	cmp.w	r8, #0
 800b554:	d022      	beq.n	800b59c <__multadd+0x84>
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	42b3      	cmp	r3, r6
 800b55a:	dc19      	bgt.n	800b590 <__multadd+0x78>
 800b55c:	6861      	ldr	r1, [r4, #4]
 800b55e:	4638      	mov	r0, r7
 800b560:	3101      	adds	r1, #1
 800b562:	f7ff ff77 	bl	800b454 <_Balloc>
 800b566:	4605      	mov	r5, r0
 800b568:	b928      	cbnz	r0, 800b576 <__multadd+0x5e>
 800b56a:	4602      	mov	r2, r0
 800b56c:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <__multadd+0x8c>)
 800b56e:	480e      	ldr	r0, [pc, #56]	; (800b5a8 <__multadd+0x90>)
 800b570:	21b5      	movs	r1, #181	; 0xb5
 800b572:	f000 fcc5 	bl	800bf00 <__assert_func>
 800b576:	6922      	ldr	r2, [r4, #16]
 800b578:	3202      	adds	r2, #2
 800b57a:	f104 010c 	add.w	r1, r4, #12
 800b57e:	0092      	lsls	r2, r2, #2
 800b580:	300c      	adds	r0, #12
 800b582:	f7ff ff4d 	bl	800b420 <memcpy>
 800b586:	4621      	mov	r1, r4
 800b588:	4638      	mov	r0, r7
 800b58a:	f7ff ffa3 	bl	800b4d4 <_Bfree>
 800b58e:	462c      	mov	r4, r5
 800b590:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b594:	3601      	adds	r6, #1
 800b596:	f8c3 8014 	str.w	r8, [r3, #20]
 800b59a:	6126      	str	r6, [r4, #16]
 800b59c:	4620      	mov	r0, r4
 800b59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a2:	bf00      	nop
 800b5a4:	0800ca8f 	.word	0x0800ca8f
 800b5a8:	0800cb00 	.word	0x0800cb00

0800b5ac <__hi0bits>:
 800b5ac:	0c03      	lsrs	r3, r0, #16
 800b5ae:	041b      	lsls	r3, r3, #16
 800b5b0:	b9d3      	cbnz	r3, 800b5e8 <__hi0bits+0x3c>
 800b5b2:	0400      	lsls	r0, r0, #16
 800b5b4:	2310      	movs	r3, #16
 800b5b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5ba:	bf04      	itt	eq
 800b5bc:	0200      	lsleq	r0, r0, #8
 800b5be:	3308      	addeq	r3, #8
 800b5c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5c4:	bf04      	itt	eq
 800b5c6:	0100      	lsleq	r0, r0, #4
 800b5c8:	3304      	addeq	r3, #4
 800b5ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5ce:	bf04      	itt	eq
 800b5d0:	0080      	lsleq	r0, r0, #2
 800b5d2:	3302      	addeq	r3, #2
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	db05      	blt.n	800b5e4 <__hi0bits+0x38>
 800b5d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5dc:	f103 0301 	add.w	r3, r3, #1
 800b5e0:	bf08      	it	eq
 800b5e2:	2320      	moveq	r3, #32
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	4770      	bx	lr
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e7e4      	b.n	800b5b6 <__hi0bits+0xa>

0800b5ec <__lo0bits>:
 800b5ec:	6803      	ldr	r3, [r0, #0]
 800b5ee:	f013 0207 	ands.w	r2, r3, #7
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	d00b      	beq.n	800b60e <__lo0bits+0x22>
 800b5f6:	07da      	lsls	r2, r3, #31
 800b5f8:	d424      	bmi.n	800b644 <__lo0bits+0x58>
 800b5fa:	0798      	lsls	r0, r3, #30
 800b5fc:	bf49      	itett	mi
 800b5fe:	085b      	lsrmi	r3, r3, #1
 800b600:	089b      	lsrpl	r3, r3, #2
 800b602:	2001      	movmi	r0, #1
 800b604:	600b      	strmi	r3, [r1, #0]
 800b606:	bf5c      	itt	pl
 800b608:	600b      	strpl	r3, [r1, #0]
 800b60a:	2002      	movpl	r0, #2
 800b60c:	4770      	bx	lr
 800b60e:	b298      	uxth	r0, r3
 800b610:	b9b0      	cbnz	r0, 800b640 <__lo0bits+0x54>
 800b612:	0c1b      	lsrs	r3, r3, #16
 800b614:	2010      	movs	r0, #16
 800b616:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b61a:	bf04      	itt	eq
 800b61c:	0a1b      	lsreq	r3, r3, #8
 800b61e:	3008      	addeq	r0, #8
 800b620:	071a      	lsls	r2, r3, #28
 800b622:	bf04      	itt	eq
 800b624:	091b      	lsreq	r3, r3, #4
 800b626:	3004      	addeq	r0, #4
 800b628:	079a      	lsls	r2, r3, #30
 800b62a:	bf04      	itt	eq
 800b62c:	089b      	lsreq	r3, r3, #2
 800b62e:	3002      	addeq	r0, #2
 800b630:	07da      	lsls	r2, r3, #31
 800b632:	d403      	bmi.n	800b63c <__lo0bits+0x50>
 800b634:	085b      	lsrs	r3, r3, #1
 800b636:	f100 0001 	add.w	r0, r0, #1
 800b63a:	d005      	beq.n	800b648 <__lo0bits+0x5c>
 800b63c:	600b      	str	r3, [r1, #0]
 800b63e:	4770      	bx	lr
 800b640:	4610      	mov	r0, r2
 800b642:	e7e8      	b.n	800b616 <__lo0bits+0x2a>
 800b644:	2000      	movs	r0, #0
 800b646:	4770      	bx	lr
 800b648:	2020      	movs	r0, #32
 800b64a:	4770      	bx	lr

0800b64c <__i2b>:
 800b64c:	b510      	push	{r4, lr}
 800b64e:	460c      	mov	r4, r1
 800b650:	2101      	movs	r1, #1
 800b652:	f7ff feff 	bl	800b454 <_Balloc>
 800b656:	4602      	mov	r2, r0
 800b658:	b928      	cbnz	r0, 800b666 <__i2b+0x1a>
 800b65a:	4b05      	ldr	r3, [pc, #20]	; (800b670 <__i2b+0x24>)
 800b65c:	4805      	ldr	r0, [pc, #20]	; (800b674 <__i2b+0x28>)
 800b65e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b662:	f000 fc4d 	bl	800bf00 <__assert_func>
 800b666:	2301      	movs	r3, #1
 800b668:	6144      	str	r4, [r0, #20]
 800b66a:	6103      	str	r3, [r0, #16]
 800b66c:	bd10      	pop	{r4, pc}
 800b66e:	bf00      	nop
 800b670:	0800ca8f 	.word	0x0800ca8f
 800b674:	0800cb00 	.word	0x0800cb00

0800b678 <__multiply>:
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	4614      	mov	r4, r2
 800b67e:	690a      	ldr	r2, [r1, #16]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	429a      	cmp	r2, r3
 800b684:	bfb8      	it	lt
 800b686:	460b      	movlt	r3, r1
 800b688:	460d      	mov	r5, r1
 800b68a:	bfbc      	itt	lt
 800b68c:	4625      	movlt	r5, r4
 800b68e:	461c      	movlt	r4, r3
 800b690:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b694:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b698:	68ab      	ldr	r3, [r5, #8]
 800b69a:	6869      	ldr	r1, [r5, #4]
 800b69c:	eb0a 0709 	add.w	r7, sl, r9
 800b6a0:	42bb      	cmp	r3, r7
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	bfb8      	it	lt
 800b6a6:	3101      	addlt	r1, #1
 800b6a8:	f7ff fed4 	bl	800b454 <_Balloc>
 800b6ac:	b930      	cbnz	r0, 800b6bc <__multiply+0x44>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	4b42      	ldr	r3, [pc, #264]	; (800b7bc <__multiply+0x144>)
 800b6b2:	4843      	ldr	r0, [pc, #268]	; (800b7c0 <__multiply+0x148>)
 800b6b4:	f240 115d 	movw	r1, #349	; 0x15d
 800b6b8:	f000 fc22 	bl	800bf00 <__assert_func>
 800b6bc:	f100 0614 	add.w	r6, r0, #20
 800b6c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b6c4:	4633      	mov	r3, r6
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4543      	cmp	r3, r8
 800b6ca:	d31e      	bcc.n	800b70a <__multiply+0x92>
 800b6cc:	f105 0c14 	add.w	ip, r5, #20
 800b6d0:	f104 0314 	add.w	r3, r4, #20
 800b6d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b6d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b6dc:	9202      	str	r2, [sp, #8]
 800b6de:	ebac 0205 	sub.w	r2, ip, r5
 800b6e2:	3a15      	subs	r2, #21
 800b6e4:	f022 0203 	bic.w	r2, r2, #3
 800b6e8:	3204      	adds	r2, #4
 800b6ea:	f105 0115 	add.w	r1, r5, #21
 800b6ee:	458c      	cmp	ip, r1
 800b6f0:	bf38      	it	cc
 800b6f2:	2204      	movcc	r2, #4
 800b6f4:	9201      	str	r2, [sp, #4]
 800b6f6:	9a02      	ldr	r2, [sp, #8]
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d808      	bhi.n	800b710 <__multiply+0x98>
 800b6fe:	2f00      	cmp	r7, #0
 800b700:	dc55      	bgt.n	800b7ae <__multiply+0x136>
 800b702:	6107      	str	r7, [r0, #16]
 800b704:	b005      	add	sp, #20
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	f843 2b04 	str.w	r2, [r3], #4
 800b70e:	e7db      	b.n	800b6c8 <__multiply+0x50>
 800b710:	f8b3 a000 	ldrh.w	sl, [r3]
 800b714:	f1ba 0f00 	cmp.w	sl, #0
 800b718:	d020      	beq.n	800b75c <__multiply+0xe4>
 800b71a:	f105 0e14 	add.w	lr, r5, #20
 800b71e:	46b1      	mov	r9, r6
 800b720:	2200      	movs	r2, #0
 800b722:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b726:	f8d9 b000 	ldr.w	fp, [r9]
 800b72a:	b2a1      	uxth	r1, r4
 800b72c:	fa1f fb8b 	uxth.w	fp, fp
 800b730:	fb0a b101 	mla	r1, sl, r1, fp
 800b734:	4411      	add	r1, r2
 800b736:	f8d9 2000 	ldr.w	r2, [r9]
 800b73a:	0c24      	lsrs	r4, r4, #16
 800b73c:	0c12      	lsrs	r2, r2, #16
 800b73e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b742:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b746:	b289      	uxth	r1, r1
 800b748:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b74c:	45f4      	cmp	ip, lr
 800b74e:	f849 1b04 	str.w	r1, [r9], #4
 800b752:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b756:	d8e4      	bhi.n	800b722 <__multiply+0xaa>
 800b758:	9901      	ldr	r1, [sp, #4]
 800b75a:	5072      	str	r2, [r6, r1]
 800b75c:	9a03      	ldr	r2, [sp, #12]
 800b75e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b762:	3304      	adds	r3, #4
 800b764:	f1b9 0f00 	cmp.w	r9, #0
 800b768:	d01f      	beq.n	800b7aa <__multiply+0x132>
 800b76a:	6834      	ldr	r4, [r6, #0]
 800b76c:	f105 0114 	add.w	r1, r5, #20
 800b770:	46b6      	mov	lr, r6
 800b772:	f04f 0a00 	mov.w	sl, #0
 800b776:	880a      	ldrh	r2, [r1, #0]
 800b778:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b77c:	fb09 b202 	mla	r2, r9, r2, fp
 800b780:	4492      	add	sl, r2
 800b782:	b2a4      	uxth	r4, r4
 800b784:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b788:	f84e 4b04 	str.w	r4, [lr], #4
 800b78c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b790:	f8be 2000 	ldrh.w	r2, [lr]
 800b794:	0c24      	lsrs	r4, r4, #16
 800b796:	fb09 2404 	mla	r4, r9, r4, r2
 800b79a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b79e:	458c      	cmp	ip, r1
 800b7a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7a4:	d8e7      	bhi.n	800b776 <__multiply+0xfe>
 800b7a6:	9a01      	ldr	r2, [sp, #4]
 800b7a8:	50b4      	str	r4, [r6, r2]
 800b7aa:	3604      	adds	r6, #4
 800b7ac:	e7a3      	b.n	800b6f6 <__multiply+0x7e>
 800b7ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1a5      	bne.n	800b702 <__multiply+0x8a>
 800b7b6:	3f01      	subs	r7, #1
 800b7b8:	e7a1      	b.n	800b6fe <__multiply+0x86>
 800b7ba:	bf00      	nop
 800b7bc:	0800ca8f 	.word	0x0800ca8f
 800b7c0:	0800cb00 	.word	0x0800cb00

0800b7c4 <__pow5mult>:
 800b7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c8:	4615      	mov	r5, r2
 800b7ca:	f012 0203 	ands.w	r2, r2, #3
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460f      	mov	r7, r1
 800b7d2:	d007      	beq.n	800b7e4 <__pow5mult+0x20>
 800b7d4:	4c25      	ldr	r4, [pc, #148]	; (800b86c <__pow5mult+0xa8>)
 800b7d6:	3a01      	subs	r2, #1
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7de:	f7ff fe9b 	bl	800b518 <__multadd>
 800b7e2:	4607      	mov	r7, r0
 800b7e4:	10ad      	asrs	r5, r5, #2
 800b7e6:	d03d      	beq.n	800b864 <__pow5mult+0xa0>
 800b7e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7ea:	b97c      	cbnz	r4, 800b80c <__pow5mult+0x48>
 800b7ec:	2010      	movs	r0, #16
 800b7ee:	f7fd febd 	bl	800956c <malloc>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	6270      	str	r0, [r6, #36]	; 0x24
 800b7f6:	b928      	cbnz	r0, 800b804 <__pow5mult+0x40>
 800b7f8:	4b1d      	ldr	r3, [pc, #116]	; (800b870 <__pow5mult+0xac>)
 800b7fa:	481e      	ldr	r0, [pc, #120]	; (800b874 <__pow5mult+0xb0>)
 800b7fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b800:	f000 fb7e 	bl	800bf00 <__assert_func>
 800b804:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b808:	6004      	str	r4, [r0, #0]
 800b80a:	60c4      	str	r4, [r0, #12]
 800b80c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b814:	b94c      	cbnz	r4, 800b82a <__pow5mult+0x66>
 800b816:	f240 2171 	movw	r1, #625	; 0x271
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ff16 	bl	800b64c <__i2b>
 800b820:	2300      	movs	r3, #0
 800b822:	f8c8 0008 	str.w	r0, [r8, #8]
 800b826:	4604      	mov	r4, r0
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	f04f 0900 	mov.w	r9, #0
 800b82e:	07eb      	lsls	r3, r5, #31
 800b830:	d50a      	bpl.n	800b848 <__pow5mult+0x84>
 800b832:	4639      	mov	r1, r7
 800b834:	4622      	mov	r2, r4
 800b836:	4630      	mov	r0, r6
 800b838:	f7ff ff1e 	bl	800b678 <__multiply>
 800b83c:	4639      	mov	r1, r7
 800b83e:	4680      	mov	r8, r0
 800b840:	4630      	mov	r0, r6
 800b842:	f7ff fe47 	bl	800b4d4 <_Bfree>
 800b846:	4647      	mov	r7, r8
 800b848:	106d      	asrs	r5, r5, #1
 800b84a:	d00b      	beq.n	800b864 <__pow5mult+0xa0>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	b938      	cbnz	r0, 800b860 <__pow5mult+0x9c>
 800b850:	4622      	mov	r2, r4
 800b852:	4621      	mov	r1, r4
 800b854:	4630      	mov	r0, r6
 800b856:	f7ff ff0f 	bl	800b678 <__multiply>
 800b85a:	6020      	str	r0, [r4, #0]
 800b85c:	f8c0 9000 	str.w	r9, [r0]
 800b860:	4604      	mov	r4, r0
 800b862:	e7e4      	b.n	800b82e <__pow5mult+0x6a>
 800b864:	4638      	mov	r0, r7
 800b866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b86a:	bf00      	nop
 800b86c:	0800cc50 	.word	0x0800cc50
 800b870:	0800ca19 	.word	0x0800ca19
 800b874:	0800cb00 	.word	0x0800cb00

0800b878 <__lshift>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	460c      	mov	r4, r1
 800b87e:	6849      	ldr	r1, [r1, #4]
 800b880:	6923      	ldr	r3, [r4, #16]
 800b882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	4607      	mov	r7, r0
 800b88a:	4691      	mov	r9, r2
 800b88c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b890:	f108 0601 	add.w	r6, r8, #1
 800b894:	42b3      	cmp	r3, r6
 800b896:	db0b      	blt.n	800b8b0 <__lshift+0x38>
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff fddb 	bl	800b454 <_Balloc>
 800b89e:	4605      	mov	r5, r0
 800b8a0:	b948      	cbnz	r0, 800b8b6 <__lshift+0x3e>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	4b28      	ldr	r3, [pc, #160]	; (800b948 <__lshift+0xd0>)
 800b8a6:	4829      	ldr	r0, [pc, #164]	; (800b94c <__lshift+0xd4>)
 800b8a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8ac:	f000 fb28 	bl	800bf00 <__assert_func>
 800b8b0:	3101      	adds	r1, #1
 800b8b2:	005b      	lsls	r3, r3, #1
 800b8b4:	e7ee      	b.n	800b894 <__lshift+0x1c>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f100 0114 	add.w	r1, r0, #20
 800b8bc:	f100 0210 	add.w	r2, r0, #16
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	4553      	cmp	r3, sl
 800b8c4:	db33      	blt.n	800b92e <__lshift+0xb6>
 800b8c6:	6920      	ldr	r0, [r4, #16]
 800b8c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8cc:	f104 0314 	add.w	r3, r4, #20
 800b8d0:	f019 091f 	ands.w	r9, r9, #31
 800b8d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8dc:	d02b      	beq.n	800b936 <__lshift+0xbe>
 800b8de:	f1c9 0e20 	rsb	lr, r9, #32
 800b8e2:	468a      	mov	sl, r1
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	6818      	ldr	r0, [r3, #0]
 800b8e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b8ec:	4302      	orrs	r2, r0
 800b8ee:	f84a 2b04 	str.w	r2, [sl], #4
 800b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f6:	459c      	cmp	ip, r3
 800b8f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8fc:	d8f3      	bhi.n	800b8e6 <__lshift+0x6e>
 800b8fe:	ebac 0304 	sub.w	r3, ip, r4
 800b902:	3b15      	subs	r3, #21
 800b904:	f023 0303 	bic.w	r3, r3, #3
 800b908:	3304      	adds	r3, #4
 800b90a:	f104 0015 	add.w	r0, r4, #21
 800b90e:	4584      	cmp	ip, r0
 800b910:	bf38      	it	cc
 800b912:	2304      	movcc	r3, #4
 800b914:	50ca      	str	r2, [r1, r3]
 800b916:	b10a      	cbz	r2, 800b91c <__lshift+0xa4>
 800b918:	f108 0602 	add.w	r6, r8, #2
 800b91c:	3e01      	subs	r6, #1
 800b91e:	4638      	mov	r0, r7
 800b920:	612e      	str	r6, [r5, #16]
 800b922:	4621      	mov	r1, r4
 800b924:	f7ff fdd6 	bl	800b4d4 <_Bfree>
 800b928:	4628      	mov	r0, r5
 800b92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b932:	3301      	adds	r3, #1
 800b934:	e7c5      	b.n	800b8c2 <__lshift+0x4a>
 800b936:	3904      	subs	r1, #4
 800b938:	f853 2b04 	ldr.w	r2, [r3], #4
 800b93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b940:	459c      	cmp	ip, r3
 800b942:	d8f9      	bhi.n	800b938 <__lshift+0xc0>
 800b944:	e7ea      	b.n	800b91c <__lshift+0xa4>
 800b946:	bf00      	nop
 800b948:	0800ca8f 	.word	0x0800ca8f
 800b94c:	0800cb00 	.word	0x0800cb00

0800b950 <__mcmp>:
 800b950:	b530      	push	{r4, r5, lr}
 800b952:	6902      	ldr	r2, [r0, #16]
 800b954:	690c      	ldr	r4, [r1, #16]
 800b956:	1b12      	subs	r2, r2, r4
 800b958:	d10e      	bne.n	800b978 <__mcmp+0x28>
 800b95a:	f100 0314 	add.w	r3, r0, #20
 800b95e:	3114      	adds	r1, #20
 800b960:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b964:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b968:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b96c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b970:	42a5      	cmp	r5, r4
 800b972:	d003      	beq.n	800b97c <__mcmp+0x2c>
 800b974:	d305      	bcc.n	800b982 <__mcmp+0x32>
 800b976:	2201      	movs	r2, #1
 800b978:	4610      	mov	r0, r2
 800b97a:	bd30      	pop	{r4, r5, pc}
 800b97c:	4283      	cmp	r3, r0
 800b97e:	d3f3      	bcc.n	800b968 <__mcmp+0x18>
 800b980:	e7fa      	b.n	800b978 <__mcmp+0x28>
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	e7f7      	b.n	800b978 <__mcmp+0x28>

0800b988 <__mdiff>:
 800b988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	460c      	mov	r4, r1
 800b98e:	4606      	mov	r6, r0
 800b990:	4611      	mov	r1, r2
 800b992:	4620      	mov	r0, r4
 800b994:	4617      	mov	r7, r2
 800b996:	f7ff ffdb 	bl	800b950 <__mcmp>
 800b99a:	1e05      	subs	r5, r0, #0
 800b99c:	d110      	bne.n	800b9c0 <__mdiff+0x38>
 800b99e:	4629      	mov	r1, r5
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f7ff fd57 	bl	800b454 <_Balloc>
 800b9a6:	b930      	cbnz	r0, 800b9b6 <__mdiff+0x2e>
 800b9a8:	4b39      	ldr	r3, [pc, #228]	; (800ba90 <__mdiff+0x108>)
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f240 2132 	movw	r1, #562	; 0x232
 800b9b0:	4838      	ldr	r0, [pc, #224]	; (800ba94 <__mdiff+0x10c>)
 800b9b2:	f000 faa5 	bl	800bf00 <__assert_func>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c0:	bfa4      	itt	ge
 800b9c2:	463b      	movge	r3, r7
 800b9c4:	4627      	movge	r7, r4
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	bfa6      	itte	ge
 800b9cc:	461c      	movge	r4, r3
 800b9ce:	2500      	movge	r5, #0
 800b9d0:	2501      	movlt	r5, #1
 800b9d2:	f7ff fd3f 	bl	800b454 <_Balloc>
 800b9d6:	b920      	cbnz	r0, 800b9e2 <__mdiff+0x5a>
 800b9d8:	4b2d      	ldr	r3, [pc, #180]	; (800ba90 <__mdiff+0x108>)
 800b9da:	4602      	mov	r2, r0
 800b9dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b9e0:	e7e6      	b.n	800b9b0 <__mdiff+0x28>
 800b9e2:	693e      	ldr	r6, [r7, #16]
 800b9e4:	60c5      	str	r5, [r0, #12]
 800b9e6:	6925      	ldr	r5, [r4, #16]
 800b9e8:	f107 0114 	add.w	r1, r7, #20
 800b9ec:	f104 0914 	add.w	r9, r4, #20
 800b9f0:	f100 0e14 	add.w	lr, r0, #20
 800b9f4:	f107 0210 	add.w	r2, r7, #16
 800b9f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b9fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ba00:	46f2      	mov	sl, lr
 800ba02:	2700      	movs	r7, #0
 800ba04:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba0c:	fa1f f883 	uxth.w	r8, r3
 800ba10:	fa17 f78b 	uxtah	r7, r7, fp
 800ba14:	0c1b      	lsrs	r3, r3, #16
 800ba16:	eba7 0808 	sub.w	r8, r7, r8
 800ba1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba22:	fa1f f888 	uxth.w	r8, r8
 800ba26:	141f      	asrs	r7, r3, #16
 800ba28:	454d      	cmp	r5, r9
 800ba2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba2e:	f84a 3b04 	str.w	r3, [sl], #4
 800ba32:	d8e7      	bhi.n	800ba04 <__mdiff+0x7c>
 800ba34:	1b2b      	subs	r3, r5, r4
 800ba36:	3b15      	subs	r3, #21
 800ba38:	f023 0303 	bic.w	r3, r3, #3
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	3415      	adds	r4, #21
 800ba40:	42a5      	cmp	r5, r4
 800ba42:	bf38      	it	cc
 800ba44:	2304      	movcc	r3, #4
 800ba46:	4419      	add	r1, r3
 800ba48:	4473      	add	r3, lr
 800ba4a:	469e      	mov	lr, r3
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	4565      	cmp	r5, ip
 800ba50:	d30e      	bcc.n	800ba70 <__mdiff+0xe8>
 800ba52:	f10c 0203 	add.w	r2, ip, #3
 800ba56:	1a52      	subs	r2, r2, r1
 800ba58:	f022 0203 	bic.w	r2, r2, #3
 800ba5c:	3903      	subs	r1, #3
 800ba5e:	458c      	cmp	ip, r1
 800ba60:	bf38      	it	cc
 800ba62:	2200      	movcc	r2, #0
 800ba64:	441a      	add	r2, r3
 800ba66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ba6a:	b17b      	cbz	r3, 800ba8c <__mdiff+0x104>
 800ba6c:	6106      	str	r6, [r0, #16]
 800ba6e:	e7a5      	b.n	800b9bc <__mdiff+0x34>
 800ba70:	f855 8b04 	ldr.w	r8, [r5], #4
 800ba74:	fa17 f488 	uxtah	r4, r7, r8
 800ba78:	1422      	asrs	r2, r4, #16
 800ba7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ba7e:	b2a4      	uxth	r4, r4
 800ba80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ba84:	f84e 4b04 	str.w	r4, [lr], #4
 800ba88:	1417      	asrs	r7, r2, #16
 800ba8a:	e7e0      	b.n	800ba4e <__mdiff+0xc6>
 800ba8c:	3e01      	subs	r6, #1
 800ba8e:	e7ea      	b.n	800ba66 <__mdiff+0xde>
 800ba90:	0800ca8f 	.word	0x0800ca8f
 800ba94:	0800cb00 	.word	0x0800cb00

0800ba98 <__d2b>:
 800ba98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba9c:	4689      	mov	r9, r1
 800ba9e:	2101      	movs	r1, #1
 800baa0:	ec57 6b10 	vmov	r6, r7, d0
 800baa4:	4690      	mov	r8, r2
 800baa6:	f7ff fcd5 	bl	800b454 <_Balloc>
 800baaa:	4604      	mov	r4, r0
 800baac:	b930      	cbnz	r0, 800babc <__d2b+0x24>
 800baae:	4602      	mov	r2, r0
 800bab0:	4b25      	ldr	r3, [pc, #148]	; (800bb48 <__d2b+0xb0>)
 800bab2:	4826      	ldr	r0, [pc, #152]	; (800bb4c <__d2b+0xb4>)
 800bab4:	f240 310a 	movw	r1, #778	; 0x30a
 800bab8:	f000 fa22 	bl	800bf00 <__assert_func>
 800babc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bac0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bac4:	bb35      	cbnz	r5, 800bb14 <__d2b+0x7c>
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	d028      	beq.n	800bb1e <__d2b+0x86>
 800bacc:	4668      	mov	r0, sp
 800bace:	9600      	str	r6, [sp, #0]
 800bad0:	f7ff fd8c 	bl	800b5ec <__lo0bits>
 800bad4:	9900      	ldr	r1, [sp, #0]
 800bad6:	b300      	cbz	r0, 800bb1a <__d2b+0x82>
 800bad8:	9a01      	ldr	r2, [sp, #4]
 800bada:	f1c0 0320 	rsb	r3, r0, #32
 800bade:	fa02 f303 	lsl.w	r3, r2, r3
 800bae2:	430b      	orrs	r3, r1
 800bae4:	40c2      	lsrs	r2, r0
 800bae6:	6163      	str	r3, [r4, #20]
 800bae8:	9201      	str	r2, [sp, #4]
 800baea:	9b01      	ldr	r3, [sp, #4]
 800baec:	61a3      	str	r3, [r4, #24]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bf14      	ite	ne
 800baf2:	2202      	movne	r2, #2
 800baf4:	2201      	moveq	r2, #1
 800baf6:	6122      	str	r2, [r4, #16]
 800baf8:	b1d5      	cbz	r5, 800bb30 <__d2b+0x98>
 800bafa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bafe:	4405      	add	r5, r0
 800bb00:	f8c9 5000 	str.w	r5, [r9]
 800bb04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb08:	f8c8 0000 	str.w	r0, [r8]
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	b003      	add	sp, #12
 800bb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb18:	e7d5      	b.n	800bac6 <__d2b+0x2e>
 800bb1a:	6161      	str	r1, [r4, #20]
 800bb1c:	e7e5      	b.n	800baea <__d2b+0x52>
 800bb1e:	a801      	add	r0, sp, #4
 800bb20:	f7ff fd64 	bl	800b5ec <__lo0bits>
 800bb24:	9b01      	ldr	r3, [sp, #4]
 800bb26:	6163      	str	r3, [r4, #20]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	6122      	str	r2, [r4, #16]
 800bb2c:	3020      	adds	r0, #32
 800bb2e:	e7e3      	b.n	800baf8 <__d2b+0x60>
 800bb30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb38:	f8c9 0000 	str.w	r0, [r9]
 800bb3c:	6918      	ldr	r0, [r3, #16]
 800bb3e:	f7ff fd35 	bl	800b5ac <__hi0bits>
 800bb42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb46:	e7df      	b.n	800bb08 <__d2b+0x70>
 800bb48:	0800ca8f 	.word	0x0800ca8f
 800bb4c:	0800cb00 	.word	0x0800cb00

0800bb50 <_realloc_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	4607      	mov	r7, r0
 800bb54:	4614      	mov	r4, r2
 800bb56:	460e      	mov	r6, r1
 800bb58:	b921      	cbnz	r1, 800bb64 <_realloc_r+0x14>
 800bb5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb5e:	4611      	mov	r1, r2
 800bb60:	f7fd bd7c 	b.w	800965c <_malloc_r>
 800bb64:	b922      	cbnz	r2, 800bb70 <_realloc_r+0x20>
 800bb66:	f7fd fd29 	bl	80095bc <_free_r>
 800bb6a:	4625      	mov	r5, r4
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb70:	f000 fa66 	bl	800c040 <_malloc_usable_size_r>
 800bb74:	42a0      	cmp	r0, r4
 800bb76:	d20f      	bcs.n	800bb98 <_realloc_r+0x48>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f7fd fd6e 	bl	800965c <_malloc_r>
 800bb80:	4605      	mov	r5, r0
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0f2      	beq.n	800bb6c <_realloc_r+0x1c>
 800bb86:	4631      	mov	r1, r6
 800bb88:	4622      	mov	r2, r4
 800bb8a:	f7ff fc49 	bl	800b420 <memcpy>
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7fd fd13 	bl	80095bc <_free_r>
 800bb96:	e7e9      	b.n	800bb6c <_realloc_r+0x1c>
 800bb98:	4635      	mov	r5, r6
 800bb9a:	e7e7      	b.n	800bb6c <_realloc_r+0x1c>

0800bb9c <__ssputs_r>:
 800bb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	688e      	ldr	r6, [r1, #8]
 800bba2:	429e      	cmp	r6, r3
 800bba4:	4682      	mov	sl, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	4690      	mov	r8, r2
 800bbaa:	461f      	mov	r7, r3
 800bbac:	d838      	bhi.n	800bc20 <__ssputs_r+0x84>
 800bbae:	898a      	ldrh	r2, [r1, #12]
 800bbb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbb4:	d032      	beq.n	800bc1c <__ssputs_r+0x80>
 800bbb6:	6825      	ldr	r5, [r4, #0]
 800bbb8:	6909      	ldr	r1, [r1, #16]
 800bbba:	eba5 0901 	sub.w	r9, r5, r1
 800bbbe:	6965      	ldr	r5, [r4, #20]
 800bbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbc8:	3301      	adds	r3, #1
 800bbca:	444b      	add	r3, r9
 800bbcc:	106d      	asrs	r5, r5, #1
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	bf38      	it	cc
 800bbd2:	461d      	movcc	r5, r3
 800bbd4:	0553      	lsls	r3, r2, #21
 800bbd6:	d531      	bpl.n	800bc3c <__ssputs_r+0xa0>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7fd fd3f 	bl	800965c <_malloc_r>
 800bbde:	4606      	mov	r6, r0
 800bbe0:	b950      	cbnz	r0, 800bbf8 <__ssputs_r+0x5c>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	f8ca 3000 	str.w	r3, [sl]
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf8:	6921      	ldr	r1, [r4, #16]
 800bbfa:	464a      	mov	r2, r9
 800bbfc:	f7ff fc10 	bl	800b420 <memcpy>
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	6126      	str	r6, [r4, #16]
 800bc0e:	6165      	str	r5, [r4, #20]
 800bc10:	444e      	add	r6, r9
 800bc12:	eba5 0509 	sub.w	r5, r5, r9
 800bc16:	6026      	str	r6, [r4, #0]
 800bc18:	60a5      	str	r5, [r4, #8]
 800bc1a:	463e      	mov	r6, r7
 800bc1c:	42be      	cmp	r6, r7
 800bc1e:	d900      	bls.n	800bc22 <__ssputs_r+0x86>
 800bc20:	463e      	mov	r6, r7
 800bc22:	4632      	mov	r2, r6
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	4641      	mov	r1, r8
 800bc28:	f000 f9f0 	bl	800c00c <memmove>
 800bc2c:	68a3      	ldr	r3, [r4, #8]
 800bc2e:	6822      	ldr	r2, [r4, #0]
 800bc30:	1b9b      	subs	r3, r3, r6
 800bc32:	4432      	add	r2, r6
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	6022      	str	r2, [r4, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e7db      	b.n	800bbf4 <__ssputs_r+0x58>
 800bc3c:	462a      	mov	r2, r5
 800bc3e:	f7ff ff87 	bl	800bb50 <_realloc_r>
 800bc42:	4606      	mov	r6, r0
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d1e1      	bne.n	800bc0c <__ssputs_r+0x70>
 800bc48:	6921      	ldr	r1, [r4, #16]
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	f7fd fcb6 	bl	80095bc <_free_r>
 800bc50:	e7c7      	b.n	800bbe2 <__ssputs_r+0x46>
	...

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d50e      	bpl.n	800bc86 <_svfiprintf_r+0x32>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b963      	cbnz	r3, 800bc86 <_svfiprintf_r+0x32>
 800bc6c:	2140      	movs	r1, #64	; 0x40
 800bc6e:	f7fd fcf5 	bl	800965c <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b920      	cbnz	r0, 800bc82 <_svfiprintf_r+0x2e>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	e0d1      	b.n	800be26 <_svfiprintf_r+0x1d2>
 800bc82:	2340      	movs	r3, #64	; 0x40
 800bc84:	616b      	str	r3, [r5, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc94:	2330      	movs	r3, #48	; 0x30
 800bc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be40 <_svfiprintf_r+0x1ec>
 800bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc9e:	f04f 0901 	mov.w	r9, #1
 800bca2:	4623      	mov	r3, r4
 800bca4:	469a      	mov	sl, r3
 800bca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcaa:	b10a      	cbz	r2, 800bcb0 <_svfiprintf_r+0x5c>
 800bcac:	2a25      	cmp	r2, #37	; 0x25
 800bcae:	d1f9      	bne.n	800bca4 <_svfiprintf_r+0x50>
 800bcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb4:	d00b      	beq.n	800bcce <_svfiprintf_r+0x7a>
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ff6d 	bl	800bb9c <__ssputs_r>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f000 80aa 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcca:	445a      	add	r2, fp
 800bccc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcce:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80a2 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f04f 32ff 	mov.w	r2, #4294967295
 800bcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce2:	f10a 0a01 	add.w	sl, sl, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	9307      	str	r3, [sp, #28]
 800bcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcee:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf0:	4654      	mov	r4, sl
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf8:	4851      	ldr	r0, [pc, #324]	; (800be40 <_svfiprintf_r+0x1ec>)
 800bcfa:	f7f4 fa79 	bl	80001f0 <memchr>
 800bcfe:	9a04      	ldr	r2, [sp, #16]
 800bd00:	b9d8      	cbnz	r0, 800bd3a <_svfiprintf_r+0xe6>
 800bd02:	06d0      	lsls	r0, r2, #27
 800bd04:	bf44      	itt	mi
 800bd06:	2320      	movmi	r3, #32
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	0711      	lsls	r1, r2, #28
 800bd0e:	bf44      	itt	mi
 800bd10:	232b      	movmi	r3, #43	; 0x2b
 800bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd16:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1c:	d015      	beq.n	800bd4a <_svfiprintf_r+0xf6>
 800bd1e:	9a07      	ldr	r2, [sp, #28]
 800bd20:	4654      	mov	r4, sl
 800bd22:	2000      	movs	r0, #0
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4621      	mov	r1, r4
 800bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2e:	3b30      	subs	r3, #48	; 0x30
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d94e      	bls.n	800bdd2 <_svfiprintf_r+0x17e>
 800bd34:	b1b0      	cbz	r0, 800bd64 <_svfiprintf_r+0x110>
 800bd36:	9207      	str	r2, [sp, #28]
 800bd38:	e014      	b.n	800bd64 <_svfiprintf_r+0x110>
 800bd3a:	eba0 0308 	sub.w	r3, r0, r8
 800bd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	46a2      	mov	sl, r4
 800bd48:	e7d2      	b.n	800bcf0 <_svfiprintf_r+0x9c>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	1d19      	adds	r1, r3, #4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	9103      	str	r1, [sp, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bfbb      	ittet	lt
 800bd56:	425b      	neglt	r3, r3
 800bd58:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5c:	9307      	strge	r3, [sp, #28]
 800bd5e:	9307      	strlt	r3, [sp, #28]
 800bd60:	bfb8      	it	lt
 800bd62:	9204      	strlt	r2, [sp, #16]
 800bd64:	7823      	ldrb	r3, [r4, #0]
 800bd66:	2b2e      	cmp	r3, #46	; 0x2e
 800bd68:	d10c      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6a:	7863      	ldrb	r3, [r4, #1]
 800bd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6e:	d135      	bne.n	800bddc <_svfiprintf_r+0x188>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9203      	str	r2, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfb8      	it	lt
 800bd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be50 <_svfiprintf_r+0x1fc>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa2f 	bl	80001f0 <memchr>
 800bd92:	b140      	cbz	r0, 800bda6 <_svfiprintf_r+0x152>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	4303      	orrs	r3, r0
 800bda2:	3401      	adds	r4, #1
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdaa:	4826      	ldr	r0, [pc, #152]	; (800be44 <_svfiprintf_r+0x1f0>)
 800bdac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb0:	2206      	movs	r2, #6
 800bdb2:	f7f4 fa1d 	bl	80001f0 <memchr>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d038      	beq.n	800be2c <_svfiprintf_r+0x1d8>
 800bdba:	4b23      	ldr	r3, [pc, #140]	; (800be48 <_svfiprintf_r+0x1f4>)
 800bdbc:	bb1b      	cbnz	r3, 800be06 <_svfiprintf_r+0x1b2>
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	f023 0307 	bic.w	r3, r3, #7
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	9303      	str	r3, [sp, #12]
 800bdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdcc:	4433      	add	r3, r6
 800bdce:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd0:	e767      	b.n	800bca2 <_svfiprintf_r+0x4e>
 800bdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	2001      	movs	r0, #1
 800bdda:	e7a5      	b.n	800bd28 <_svfiprintf_r+0xd4>
 800bddc:	2300      	movs	r3, #0
 800bdde:	3401      	adds	r4, #1
 800bde0:	9305      	str	r3, [sp, #20]
 800bde2:	4619      	mov	r1, r3
 800bde4:	f04f 0c0a 	mov.w	ip, #10
 800bde8:	4620      	mov	r0, r4
 800bdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdee:	3a30      	subs	r2, #48	; 0x30
 800bdf0:	2a09      	cmp	r2, #9
 800bdf2:	d903      	bls.n	800bdfc <_svfiprintf_r+0x1a8>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0c5      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	e7c3      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800be00:	4604      	mov	r4, r0
 800be02:	2301      	movs	r3, #1
 800be04:	e7f0      	b.n	800bde8 <_svfiprintf_r+0x194>
 800be06:	ab03      	add	r3, sp, #12
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	462a      	mov	r2, r5
 800be0c:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be0e:	a904      	add	r1, sp, #16
 800be10:	4638      	mov	r0, r7
 800be12:	f7fd fd1d 	bl	8009850 <_printf_float>
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	4606      	mov	r6, r0
 800be1a:	d1d6      	bne.n	800bdca <_svfiprintf_r+0x176>
 800be1c:	89ab      	ldrh	r3, [r5, #12]
 800be1e:	065b      	lsls	r3, r3, #25
 800be20:	f53f af2c 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be26:	b01d      	add	sp, #116	; 0x74
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	462a      	mov	r2, r5
 800be32:	4b06      	ldr	r3, [pc, #24]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be34:	a904      	add	r1, sp, #16
 800be36:	4638      	mov	r0, r7
 800be38:	f7fd ffae 	bl	8009d98 <_printf_i>
 800be3c:	e7eb      	b.n	800be16 <_svfiprintf_r+0x1c2>
 800be3e:	bf00      	nop
 800be40:	0800cc5c 	.word	0x0800cc5c
 800be44:	0800cc66 	.word	0x0800cc66
 800be48:	08009851 	.word	0x08009851
 800be4c:	0800bb9d 	.word	0x0800bb9d
 800be50:	0800cc62 	.word	0x0800cc62

0800be54 <__sread>:
 800be54:	b510      	push	{r4, lr}
 800be56:	460c      	mov	r4, r1
 800be58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5c:	f000 fa52 	bl	800c304 <_read_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	bfab      	itete	ge
 800be64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be66:	89a3      	ldrhlt	r3, [r4, #12]
 800be68:	181b      	addge	r3, r3, r0
 800be6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be6e:	bfac      	ite	ge
 800be70:	6563      	strge	r3, [r4, #84]	; 0x54
 800be72:	81a3      	strhlt	r3, [r4, #12]
 800be74:	bd10      	pop	{r4, pc}

0800be76 <__swrite>:
 800be76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7a:	461f      	mov	r7, r3
 800be7c:	898b      	ldrh	r3, [r1, #12]
 800be7e:	05db      	lsls	r3, r3, #23
 800be80:	4605      	mov	r5, r0
 800be82:	460c      	mov	r4, r1
 800be84:	4616      	mov	r6, r2
 800be86:	d505      	bpl.n	800be94 <__swrite+0x1e>
 800be88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8c:	2302      	movs	r3, #2
 800be8e:	2200      	movs	r2, #0
 800be90:	f000 f898 	bl	800bfc4 <_lseek_r>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	4632      	mov	r2, r6
 800bea2:	463b      	mov	r3, r7
 800bea4:	4628      	mov	r0, r5
 800bea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beaa:	f000 b817 	b.w	800bedc <_write_r>

0800beae <__sseek>:
 800beae:	b510      	push	{r4, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb6:	f000 f885 	bl	800bfc4 <_lseek_r>
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	bf15      	itete	ne
 800bec0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800beca:	81a3      	strheq	r3, [r4, #12]
 800becc:	bf18      	it	ne
 800bece:	81a3      	strhne	r3, [r4, #12]
 800bed0:	bd10      	pop	{r4, pc}

0800bed2 <__sclose>:
 800bed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed6:	f000 b831 	b.w	800bf3c <_close_r>
	...

0800bedc <_write_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	; (800befc <_write_r+0x20>)
 800bee0:	4604      	mov	r4, r0
 800bee2:	4608      	mov	r0, r1
 800bee4:	4611      	mov	r1, r2
 800bee6:	2200      	movs	r2, #0
 800bee8:	602a      	str	r2, [r5, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	f7f5 f850 	bl	8000f90 <_write>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_write_r+0x1e>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b103      	cbz	r3, 800befa <_write_r+0x1e>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	200007b4 	.word	0x200007b4

0800bf00 <__assert_func>:
 800bf00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf02:	4614      	mov	r4, r2
 800bf04:	461a      	mov	r2, r3
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <__assert_func+0x2c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	68d8      	ldr	r0, [r3, #12]
 800bf0e:	b14c      	cbz	r4, 800bf24 <__assert_func+0x24>
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <__assert_func+0x30>)
 800bf12:	9100      	str	r1, [sp, #0]
 800bf14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf18:	4906      	ldr	r1, [pc, #24]	; (800bf34 <__assert_func+0x34>)
 800bf1a:	462b      	mov	r3, r5
 800bf1c:	f000 f81e 	bl	800bf5c <fiprintf>
 800bf20:	f000 fa0f 	bl	800c342 <abort>
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <__assert_func+0x38>)
 800bf26:	461c      	mov	r4, r3
 800bf28:	e7f3      	b.n	800bf12 <__assert_func+0x12>
 800bf2a:	bf00      	nop
 800bf2c:	20000368 	.word	0x20000368
 800bf30:	0800cc6d 	.word	0x0800cc6d
 800bf34:	0800cc7a 	.word	0x0800cc7a
 800bf38:	0800cca8 	.word	0x0800cca8

0800bf3c <_close_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4d06      	ldr	r5, [pc, #24]	; (800bf58 <_close_r+0x1c>)
 800bf40:	2300      	movs	r3, #0
 800bf42:	4604      	mov	r4, r0
 800bf44:	4608      	mov	r0, r1
 800bf46:	602b      	str	r3, [r5, #0]
 800bf48:	f7f5 fe29 	bl	8001b9e <_close>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_close_r+0x1a>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_close_r+0x1a>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	200007b4 	.word	0x200007b4

0800bf5c <fiprintf>:
 800bf5c:	b40e      	push	{r1, r2, r3}
 800bf5e:	b503      	push	{r0, r1, lr}
 800bf60:	4601      	mov	r1, r0
 800bf62:	ab03      	add	r3, sp, #12
 800bf64:	4805      	ldr	r0, [pc, #20]	; (800bf7c <fiprintf+0x20>)
 800bf66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	f000 f899 	bl	800c0a4 <_vfiprintf_r>
 800bf72:	b002      	add	sp, #8
 800bf74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf78:	b003      	add	sp, #12
 800bf7a:	4770      	bx	lr
 800bf7c:	20000368 	.word	0x20000368

0800bf80 <_fstat_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4d07      	ldr	r5, [pc, #28]	; (800bfa0 <_fstat_r+0x20>)
 800bf84:	2300      	movs	r3, #0
 800bf86:	4604      	mov	r4, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	602b      	str	r3, [r5, #0]
 800bf8e:	f7f5 fe12 	bl	8001bb6 <_fstat>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	d102      	bne.n	800bf9c <_fstat_r+0x1c>
 800bf96:	682b      	ldr	r3, [r5, #0]
 800bf98:	b103      	cbz	r3, 800bf9c <_fstat_r+0x1c>
 800bf9a:	6023      	str	r3, [r4, #0]
 800bf9c:	bd38      	pop	{r3, r4, r5, pc}
 800bf9e:	bf00      	nop
 800bfa0:	200007b4 	.word	0x200007b4

0800bfa4 <_isatty_r>:
 800bfa4:	b538      	push	{r3, r4, r5, lr}
 800bfa6:	4d06      	ldr	r5, [pc, #24]	; (800bfc0 <_isatty_r+0x1c>)
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4608      	mov	r0, r1
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	f7f5 fe11 	bl	8001bd6 <_isatty>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d102      	bne.n	800bfbe <_isatty_r+0x1a>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	b103      	cbz	r3, 800bfbe <_isatty_r+0x1a>
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	200007b4 	.word	0x200007b4

0800bfc4 <_lseek_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4d07      	ldr	r5, [pc, #28]	; (800bfe4 <_lseek_r+0x20>)
 800bfc8:	4604      	mov	r4, r0
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4611      	mov	r1, r2
 800bfce:	2200      	movs	r2, #0
 800bfd0:	602a      	str	r2, [r5, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	f7f5 fe0a 	bl	8001bec <_lseek>
 800bfd8:	1c43      	adds	r3, r0, #1
 800bfda:	d102      	bne.n	800bfe2 <_lseek_r+0x1e>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	b103      	cbz	r3, 800bfe2 <_lseek_r+0x1e>
 800bfe0:	6023      	str	r3, [r4, #0]
 800bfe2:	bd38      	pop	{r3, r4, r5, pc}
 800bfe4:	200007b4 	.word	0x200007b4

0800bfe8 <__ascii_mbtowc>:
 800bfe8:	b082      	sub	sp, #8
 800bfea:	b901      	cbnz	r1, 800bfee <__ascii_mbtowc+0x6>
 800bfec:	a901      	add	r1, sp, #4
 800bfee:	b142      	cbz	r2, 800c002 <__ascii_mbtowc+0x1a>
 800bff0:	b14b      	cbz	r3, 800c006 <__ascii_mbtowc+0x1e>
 800bff2:	7813      	ldrb	r3, [r2, #0]
 800bff4:	600b      	str	r3, [r1, #0]
 800bff6:	7812      	ldrb	r2, [r2, #0]
 800bff8:	1e10      	subs	r0, r2, #0
 800bffa:	bf18      	it	ne
 800bffc:	2001      	movne	r0, #1
 800bffe:	b002      	add	sp, #8
 800c000:	4770      	bx	lr
 800c002:	4610      	mov	r0, r2
 800c004:	e7fb      	b.n	800bffe <__ascii_mbtowc+0x16>
 800c006:	f06f 0001 	mvn.w	r0, #1
 800c00a:	e7f8      	b.n	800bffe <__ascii_mbtowc+0x16>

0800c00c <memmove>:
 800c00c:	4288      	cmp	r0, r1
 800c00e:	b510      	push	{r4, lr}
 800c010:	eb01 0402 	add.w	r4, r1, r2
 800c014:	d902      	bls.n	800c01c <memmove+0x10>
 800c016:	4284      	cmp	r4, r0
 800c018:	4623      	mov	r3, r4
 800c01a:	d807      	bhi.n	800c02c <memmove+0x20>
 800c01c:	1e43      	subs	r3, r0, #1
 800c01e:	42a1      	cmp	r1, r4
 800c020:	d008      	beq.n	800c034 <memmove+0x28>
 800c022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c02a:	e7f8      	b.n	800c01e <memmove+0x12>
 800c02c:	4402      	add	r2, r0
 800c02e:	4601      	mov	r1, r0
 800c030:	428a      	cmp	r2, r1
 800c032:	d100      	bne.n	800c036 <memmove+0x2a>
 800c034:	bd10      	pop	{r4, pc}
 800c036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c03e:	e7f7      	b.n	800c030 <memmove+0x24>

0800c040 <_malloc_usable_size_r>:
 800c040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c044:	1f18      	subs	r0, r3, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	bfbc      	itt	lt
 800c04a:	580b      	ldrlt	r3, [r1, r0]
 800c04c:	18c0      	addlt	r0, r0, r3
 800c04e:	4770      	bx	lr

0800c050 <__sfputc_r>:
 800c050:	6893      	ldr	r3, [r2, #8]
 800c052:	3b01      	subs	r3, #1
 800c054:	2b00      	cmp	r3, #0
 800c056:	b410      	push	{r4}
 800c058:	6093      	str	r3, [r2, #8]
 800c05a:	da08      	bge.n	800c06e <__sfputc_r+0x1e>
 800c05c:	6994      	ldr	r4, [r2, #24]
 800c05e:	42a3      	cmp	r3, r4
 800c060:	db01      	blt.n	800c066 <__sfputc_r+0x16>
 800c062:	290a      	cmp	r1, #10
 800c064:	d103      	bne.n	800c06e <__sfputc_r+0x1e>
 800c066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c06a:	f7fe b87d 	b.w	800a168 <__swbuf_r>
 800c06e:	6813      	ldr	r3, [r2, #0]
 800c070:	1c58      	adds	r0, r3, #1
 800c072:	6010      	str	r0, [r2, #0]
 800c074:	7019      	strb	r1, [r3, #0]
 800c076:	4608      	mov	r0, r1
 800c078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <__sfputs_r>:
 800c07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c080:	4606      	mov	r6, r0
 800c082:	460f      	mov	r7, r1
 800c084:	4614      	mov	r4, r2
 800c086:	18d5      	adds	r5, r2, r3
 800c088:	42ac      	cmp	r4, r5
 800c08a:	d101      	bne.n	800c090 <__sfputs_r+0x12>
 800c08c:	2000      	movs	r0, #0
 800c08e:	e007      	b.n	800c0a0 <__sfputs_r+0x22>
 800c090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c094:	463a      	mov	r2, r7
 800c096:	4630      	mov	r0, r6
 800c098:	f7ff ffda 	bl	800c050 <__sfputc_r>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d1f3      	bne.n	800c088 <__sfputs_r+0xa>
 800c0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0a4 <_vfiprintf_r>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	b09d      	sub	sp, #116	; 0x74
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	4698      	mov	r8, r3
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	b118      	cbz	r0, 800c0bc <_vfiprintf_r+0x18>
 800c0b4:	6983      	ldr	r3, [r0, #24]
 800c0b6:	b90b      	cbnz	r3, 800c0bc <_vfiprintf_r+0x18>
 800c0b8:	f7ff f8a8 	bl	800b20c <__sinit>
 800c0bc:	4b89      	ldr	r3, [pc, #548]	; (800c2e4 <_vfiprintf_r+0x240>)
 800c0be:	429d      	cmp	r5, r3
 800c0c0:	d11b      	bne.n	800c0fa <_vfiprintf_r+0x56>
 800c0c2:	6875      	ldr	r5, [r6, #4]
 800c0c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0c6:	07d9      	lsls	r1, r3, #31
 800c0c8:	d405      	bmi.n	800c0d6 <_vfiprintf_r+0x32>
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	059a      	lsls	r2, r3, #22
 800c0ce:	d402      	bmi.n	800c0d6 <_vfiprintf_r+0x32>
 800c0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0d2:	f7ff f93e 	bl	800b352 <__retarget_lock_acquire_recursive>
 800c0d6:	89ab      	ldrh	r3, [r5, #12]
 800c0d8:	071b      	lsls	r3, r3, #28
 800c0da:	d501      	bpl.n	800c0e0 <_vfiprintf_r+0x3c>
 800c0dc:	692b      	ldr	r3, [r5, #16]
 800c0de:	b9eb      	cbnz	r3, 800c11c <_vfiprintf_r+0x78>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f7fe f892 	bl	800a20c <__swsetup_r>
 800c0e8:	b1c0      	cbz	r0, 800c11c <_vfiprintf_r+0x78>
 800c0ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ec:	07dc      	lsls	r4, r3, #31
 800c0ee:	d50e      	bpl.n	800c10e <_vfiprintf_r+0x6a>
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f4:	b01d      	add	sp, #116	; 0x74
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	4b7b      	ldr	r3, [pc, #492]	; (800c2e8 <_vfiprintf_r+0x244>)
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	d101      	bne.n	800c104 <_vfiprintf_r+0x60>
 800c100:	68b5      	ldr	r5, [r6, #8]
 800c102:	e7df      	b.n	800c0c4 <_vfiprintf_r+0x20>
 800c104:	4b79      	ldr	r3, [pc, #484]	; (800c2ec <_vfiprintf_r+0x248>)
 800c106:	429d      	cmp	r5, r3
 800c108:	bf08      	it	eq
 800c10a:	68f5      	ldreq	r5, [r6, #12]
 800c10c:	e7da      	b.n	800c0c4 <_vfiprintf_r+0x20>
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	0598      	lsls	r0, r3, #22
 800c112:	d4ed      	bmi.n	800c0f0 <_vfiprintf_r+0x4c>
 800c114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c116:	f7ff f91d 	bl	800b354 <__retarget_lock_release_recursive>
 800c11a:	e7e9      	b.n	800c0f0 <_vfiprintf_r+0x4c>
 800c11c:	2300      	movs	r3, #0
 800c11e:	9309      	str	r3, [sp, #36]	; 0x24
 800c120:	2320      	movs	r3, #32
 800c122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c126:	f8cd 800c 	str.w	r8, [sp, #12]
 800c12a:	2330      	movs	r3, #48	; 0x30
 800c12c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c2f0 <_vfiprintf_r+0x24c>
 800c130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c134:	f04f 0901 	mov.w	r9, #1
 800c138:	4623      	mov	r3, r4
 800c13a:	469a      	mov	sl, r3
 800c13c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c140:	b10a      	cbz	r2, 800c146 <_vfiprintf_r+0xa2>
 800c142:	2a25      	cmp	r2, #37	; 0x25
 800c144:	d1f9      	bne.n	800c13a <_vfiprintf_r+0x96>
 800c146:	ebba 0b04 	subs.w	fp, sl, r4
 800c14a:	d00b      	beq.n	800c164 <_vfiprintf_r+0xc0>
 800c14c:	465b      	mov	r3, fp
 800c14e:	4622      	mov	r2, r4
 800c150:	4629      	mov	r1, r5
 800c152:	4630      	mov	r0, r6
 800c154:	f7ff ff93 	bl	800c07e <__sfputs_r>
 800c158:	3001      	adds	r0, #1
 800c15a:	f000 80aa 	beq.w	800c2b2 <_vfiprintf_r+0x20e>
 800c15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c160:	445a      	add	r2, fp
 800c162:	9209      	str	r2, [sp, #36]	; 0x24
 800c164:	f89a 3000 	ldrb.w	r3, [sl]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 80a2 	beq.w	800c2b2 <_vfiprintf_r+0x20e>
 800c16e:	2300      	movs	r3, #0
 800c170:	f04f 32ff 	mov.w	r2, #4294967295
 800c174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c178:	f10a 0a01 	add.w	sl, sl, #1
 800c17c:	9304      	str	r3, [sp, #16]
 800c17e:	9307      	str	r3, [sp, #28]
 800c180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c184:	931a      	str	r3, [sp, #104]	; 0x68
 800c186:	4654      	mov	r4, sl
 800c188:	2205      	movs	r2, #5
 800c18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18e:	4858      	ldr	r0, [pc, #352]	; (800c2f0 <_vfiprintf_r+0x24c>)
 800c190:	f7f4 f82e 	bl	80001f0 <memchr>
 800c194:	9a04      	ldr	r2, [sp, #16]
 800c196:	b9d8      	cbnz	r0, 800c1d0 <_vfiprintf_r+0x12c>
 800c198:	06d1      	lsls	r1, r2, #27
 800c19a:	bf44      	itt	mi
 800c19c:	2320      	movmi	r3, #32
 800c19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1a2:	0713      	lsls	r3, r2, #28
 800c1a4:	bf44      	itt	mi
 800c1a6:	232b      	movmi	r3, #43	; 0x2b
 800c1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b2:	d015      	beq.n	800c1e0 <_vfiprintf_r+0x13c>
 800c1b4:	9a07      	ldr	r2, [sp, #28]
 800c1b6:	4654      	mov	r4, sl
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	f04f 0c0a 	mov.w	ip, #10
 800c1be:	4621      	mov	r1, r4
 800c1c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1c4:	3b30      	subs	r3, #48	; 0x30
 800c1c6:	2b09      	cmp	r3, #9
 800c1c8:	d94e      	bls.n	800c268 <_vfiprintf_r+0x1c4>
 800c1ca:	b1b0      	cbz	r0, 800c1fa <_vfiprintf_r+0x156>
 800c1cc:	9207      	str	r2, [sp, #28]
 800c1ce:	e014      	b.n	800c1fa <_vfiprintf_r+0x156>
 800c1d0:	eba0 0308 	sub.w	r3, r0, r8
 800c1d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	46a2      	mov	sl, r4
 800c1de:	e7d2      	b.n	800c186 <_vfiprintf_r+0xe2>
 800c1e0:	9b03      	ldr	r3, [sp, #12]
 800c1e2:	1d19      	adds	r1, r3, #4
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	9103      	str	r1, [sp, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	bfbb      	ittet	lt
 800c1ec:	425b      	neglt	r3, r3
 800c1ee:	f042 0202 	orrlt.w	r2, r2, #2
 800c1f2:	9307      	strge	r3, [sp, #28]
 800c1f4:	9307      	strlt	r3, [sp, #28]
 800c1f6:	bfb8      	it	lt
 800c1f8:	9204      	strlt	r2, [sp, #16]
 800c1fa:	7823      	ldrb	r3, [r4, #0]
 800c1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c1fe:	d10c      	bne.n	800c21a <_vfiprintf_r+0x176>
 800c200:	7863      	ldrb	r3, [r4, #1]
 800c202:	2b2a      	cmp	r3, #42	; 0x2a
 800c204:	d135      	bne.n	800c272 <_vfiprintf_r+0x1ce>
 800c206:	9b03      	ldr	r3, [sp, #12]
 800c208:	1d1a      	adds	r2, r3, #4
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	9203      	str	r2, [sp, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfb8      	it	lt
 800c212:	f04f 33ff 	movlt.w	r3, #4294967295
 800c216:	3402      	adds	r4, #2
 800c218:	9305      	str	r3, [sp, #20]
 800c21a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c300 <_vfiprintf_r+0x25c>
 800c21e:	7821      	ldrb	r1, [r4, #0]
 800c220:	2203      	movs	r2, #3
 800c222:	4650      	mov	r0, sl
 800c224:	f7f3 ffe4 	bl	80001f0 <memchr>
 800c228:	b140      	cbz	r0, 800c23c <_vfiprintf_r+0x198>
 800c22a:	2340      	movs	r3, #64	; 0x40
 800c22c:	eba0 000a 	sub.w	r0, r0, sl
 800c230:	fa03 f000 	lsl.w	r0, r3, r0
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	4303      	orrs	r3, r0
 800c238:	3401      	adds	r4, #1
 800c23a:	9304      	str	r3, [sp, #16]
 800c23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c240:	482c      	ldr	r0, [pc, #176]	; (800c2f4 <_vfiprintf_r+0x250>)
 800c242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c246:	2206      	movs	r2, #6
 800c248:	f7f3 ffd2 	bl	80001f0 <memchr>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d03f      	beq.n	800c2d0 <_vfiprintf_r+0x22c>
 800c250:	4b29      	ldr	r3, [pc, #164]	; (800c2f8 <_vfiprintf_r+0x254>)
 800c252:	bb1b      	cbnz	r3, 800c29c <_vfiprintf_r+0x1f8>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	3307      	adds	r3, #7
 800c258:	f023 0307 	bic.w	r3, r3, #7
 800c25c:	3308      	adds	r3, #8
 800c25e:	9303      	str	r3, [sp, #12]
 800c260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c262:	443b      	add	r3, r7
 800c264:	9309      	str	r3, [sp, #36]	; 0x24
 800c266:	e767      	b.n	800c138 <_vfiprintf_r+0x94>
 800c268:	fb0c 3202 	mla	r2, ip, r2, r3
 800c26c:	460c      	mov	r4, r1
 800c26e:	2001      	movs	r0, #1
 800c270:	e7a5      	b.n	800c1be <_vfiprintf_r+0x11a>
 800c272:	2300      	movs	r3, #0
 800c274:	3401      	adds	r4, #1
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	4619      	mov	r1, r3
 800c27a:	f04f 0c0a 	mov.w	ip, #10
 800c27e:	4620      	mov	r0, r4
 800c280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c284:	3a30      	subs	r2, #48	; 0x30
 800c286:	2a09      	cmp	r2, #9
 800c288:	d903      	bls.n	800c292 <_vfiprintf_r+0x1ee>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d0c5      	beq.n	800c21a <_vfiprintf_r+0x176>
 800c28e:	9105      	str	r1, [sp, #20]
 800c290:	e7c3      	b.n	800c21a <_vfiprintf_r+0x176>
 800c292:	fb0c 2101 	mla	r1, ip, r1, r2
 800c296:	4604      	mov	r4, r0
 800c298:	2301      	movs	r3, #1
 800c29a:	e7f0      	b.n	800c27e <_vfiprintf_r+0x1da>
 800c29c:	ab03      	add	r3, sp, #12
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	4b16      	ldr	r3, [pc, #88]	; (800c2fc <_vfiprintf_r+0x258>)
 800c2a4:	a904      	add	r1, sp, #16
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7fd fad2 	bl	8009850 <_printf_float>
 800c2ac:	4607      	mov	r7, r0
 800c2ae:	1c78      	adds	r0, r7, #1
 800c2b0:	d1d6      	bne.n	800c260 <_vfiprintf_r+0x1bc>
 800c2b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2b4:	07d9      	lsls	r1, r3, #31
 800c2b6:	d405      	bmi.n	800c2c4 <_vfiprintf_r+0x220>
 800c2b8:	89ab      	ldrh	r3, [r5, #12]
 800c2ba:	059a      	lsls	r2, r3, #22
 800c2bc:	d402      	bmi.n	800c2c4 <_vfiprintf_r+0x220>
 800c2be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2c0:	f7ff f848 	bl	800b354 <__retarget_lock_release_recursive>
 800c2c4:	89ab      	ldrh	r3, [r5, #12]
 800c2c6:	065b      	lsls	r3, r3, #25
 800c2c8:	f53f af12 	bmi.w	800c0f0 <_vfiprintf_r+0x4c>
 800c2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ce:	e711      	b.n	800c0f4 <_vfiprintf_r+0x50>
 800c2d0:	ab03      	add	r3, sp, #12
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	462a      	mov	r2, r5
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <_vfiprintf_r+0x258>)
 800c2d8:	a904      	add	r1, sp, #16
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7fd fd5c 	bl	8009d98 <_printf_i>
 800c2e0:	e7e4      	b.n	800c2ac <_vfiprintf_r+0x208>
 800c2e2:	bf00      	nop
 800c2e4:	0800cac0 	.word	0x0800cac0
 800c2e8:	0800cae0 	.word	0x0800cae0
 800c2ec:	0800caa0 	.word	0x0800caa0
 800c2f0:	0800cc5c 	.word	0x0800cc5c
 800c2f4:	0800cc66 	.word	0x0800cc66
 800c2f8:	08009851 	.word	0x08009851
 800c2fc:	0800c07f 	.word	0x0800c07f
 800c300:	0800cc62 	.word	0x0800cc62

0800c304 <_read_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	; (800c324 <_read_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f7f5 fc26 	bl	8001b64 <_read>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_read_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_read_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	200007b4 	.word	0x200007b4

0800c328 <__ascii_wctomb>:
 800c328:	b149      	cbz	r1, 800c33e <__ascii_wctomb+0x16>
 800c32a:	2aff      	cmp	r2, #255	; 0xff
 800c32c:	bf85      	ittet	hi
 800c32e:	238a      	movhi	r3, #138	; 0x8a
 800c330:	6003      	strhi	r3, [r0, #0]
 800c332:	700a      	strbls	r2, [r1, #0]
 800c334:	f04f 30ff 	movhi.w	r0, #4294967295
 800c338:	bf98      	it	ls
 800c33a:	2001      	movls	r0, #1
 800c33c:	4770      	bx	lr
 800c33e:	4608      	mov	r0, r1
 800c340:	4770      	bx	lr

0800c342 <abort>:
 800c342:	b508      	push	{r3, lr}
 800c344:	2006      	movs	r0, #6
 800c346:	f000 f82b 	bl	800c3a0 <raise>
 800c34a:	2001      	movs	r0, #1
 800c34c:	f7f5 fc00 	bl	8001b50 <_exit>

0800c350 <_raise_r>:
 800c350:	291f      	cmp	r1, #31
 800c352:	b538      	push	{r3, r4, r5, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	460d      	mov	r5, r1
 800c358:	d904      	bls.n	800c364 <_raise_r+0x14>
 800c35a:	2316      	movs	r3, #22
 800c35c:	6003      	str	r3, [r0, #0]
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c366:	b112      	cbz	r2, 800c36e <_raise_r+0x1e>
 800c368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c36c:	b94b      	cbnz	r3, 800c382 <_raise_r+0x32>
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 f830 	bl	800c3d4 <_getpid_r>
 800c374:	462a      	mov	r2, r5
 800c376:	4601      	mov	r1, r0
 800c378:	4620      	mov	r0, r4
 800c37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c37e:	f000 b817 	b.w	800c3b0 <_kill_r>
 800c382:	2b01      	cmp	r3, #1
 800c384:	d00a      	beq.n	800c39c <_raise_r+0x4c>
 800c386:	1c59      	adds	r1, r3, #1
 800c388:	d103      	bne.n	800c392 <_raise_r+0x42>
 800c38a:	2316      	movs	r3, #22
 800c38c:	6003      	str	r3, [r0, #0]
 800c38e:	2001      	movs	r0, #1
 800c390:	e7e7      	b.n	800c362 <_raise_r+0x12>
 800c392:	2400      	movs	r4, #0
 800c394:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c398:	4628      	mov	r0, r5
 800c39a:	4798      	blx	r3
 800c39c:	2000      	movs	r0, #0
 800c39e:	e7e0      	b.n	800c362 <_raise_r+0x12>

0800c3a0 <raise>:
 800c3a0:	4b02      	ldr	r3, [pc, #8]	; (800c3ac <raise+0xc>)
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	f7ff bfd3 	b.w	800c350 <_raise_r>
 800c3aa:	bf00      	nop
 800c3ac:	20000368 	.word	0x20000368

0800c3b0 <_kill_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d07      	ldr	r5, [pc, #28]	; (800c3d0 <_kill_r+0x20>)
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	602b      	str	r3, [r5, #0]
 800c3be:	f7f5 fbb7 	bl	8001b30 <_kill>
 800c3c2:	1c43      	adds	r3, r0, #1
 800c3c4:	d102      	bne.n	800c3cc <_kill_r+0x1c>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	b103      	cbz	r3, 800c3cc <_kill_r+0x1c>
 800c3ca:	6023      	str	r3, [r4, #0]
 800c3cc:	bd38      	pop	{r3, r4, r5, pc}
 800c3ce:	bf00      	nop
 800c3d0:	200007b4 	.word	0x200007b4

0800c3d4 <_getpid_r>:
 800c3d4:	f7f5 bba4 	b.w	8001b20 <_getpid>

0800c3d8 <_init>:
 800c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3da:	bf00      	nop
 800c3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3de:	bc08      	pop	{r3}
 800c3e0:	469e      	mov	lr, r3
 800c3e2:	4770      	bx	lr

0800c3e4 <_fini>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	bf00      	nop
 800c3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ea:	bc08      	pop	{r3}
 800c3ec:	469e      	mov	lr, r3
 800c3ee:	4770      	bx	lr
