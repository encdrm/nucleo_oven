
Nucleo_Oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08008a98  08008a98  00018a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800900c  0800900c  00020470  2**0
                  CONTENTS
  4 .ARM          00000008  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009014  08009014  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800901c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000470  0800948c  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800948c  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155b1  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afe  00000000  00000000  00035a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  000394e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b26  00000000  00000000  0003a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001251f  00000000  00000000  00052ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927df  00000000  00000000  000653ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e0  00000000  00000000  000f7c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000470 	.word	0x20000470
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a80 	.word	0x08008a80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000474 	.word	0x20000474
 80001dc:	08008a80 	.word	0x08008a80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <_write>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <_write+0x30>)
 8000ec6:	f002 ff0a 	bl	8003cde <HAL_UART_Transmit>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <_write+0x24>
		return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	e001      	b.n	8000ed8 <_write+0x28>
	return -1;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200005e8 	.word	0x200005e8

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fd28 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f81a 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f9a6 	bl	8001240 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ef4:	f000 f87e 	bl	8000ff4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000ef8:	f000 f8b2 	bl	8001060 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f976 	bl	80011ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f00:	f000 f94a 	bl	8001198 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f04:	f000 f8e4 	bl	80010d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <main+0x3c>)
 8000f0c:	f002 fa88 	bl	8003420 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <main+0x3c>)
 8000f14:	f002 fa84 	bl	8003420 <HAL_TIM_PWM_Start>
  Menu();
 8000f18:	f004 fba4 	bl	8005664 <Menu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0x38>
 8000f1e:	bf00      	nop
 8000f20:	20000504 	.word	0x20000504

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 fefa 	bl	8005d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <SystemClock_Config+0xc8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a26      	ldr	r2, [pc, #152]	; (8000fec <SystemClock_Config+0xc8>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <SystemClock_Config+0xcc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f94:	2308      	movs	r3, #8
 8000f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fff9 	bl	8001fa0 <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb4:	f000 fa0c 	bl	80013d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2103      	movs	r1, #3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fa5b 	bl	8002490 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fe0:	f000 f9f6 	bl	80013d0 <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	; 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_SPI2_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <MX_SPI2_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI2_Init+0x64>)
 8001000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI2_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_SPI2_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI2_Init+0x64>)
 8001014:	2202      	movs	r2, #2
 8001016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI2_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI2_Init+0x64>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI2_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_SPI2_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI2_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_SPI2_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI2_Init+0x64>)
 8001040:	220a      	movs	r2, #10
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_SPI2_Init+0x64>)
 8001046:	f001 fbf3 	bl	8002830 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001050:	f000 f9be 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200004ac 	.word	0x200004ac
 800105c:	40003800 	.word	0x40003800

08001060 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_SPI3_Init+0x68>)
 8001066:	4a19      	ldr	r2, [pc, #100]	; (80010cc <MX_SPI3_Init+0x6c>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_SPI3_Init+0x68>)
 800106c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_SPI3_Init+0x68>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_SPI3_Init+0x68>)
 800107c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001080:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SPI3_Init+0x68>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPI3_Init+0x68>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_SPI3_Init+0x68>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPI3_Init+0x68>)
 8001098:	2230      	movs	r2, #48	; 0x30
 800109a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPI3_Init+0x68>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPI3_Init+0x68>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPI3_Init+0x68>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPI3_Init+0x68>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPI3_Init+0x68>)
 80010b6:	f001 fbbb 	bl	8002830 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80010c0:	f000 f986 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000054c 	.word	0x2000054c
 80010cc:	40003c00 	.word	0x40003c00

080010d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
 80010ee:	615a      	str	r2, [r3, #20]
 80010f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <MX_TIM4_Init+0xc0>)
 80010f4:	4a27      	ldr	r2, [pc, #156]	; (8001194 <MX_TIM4_Init+0xc4>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_TIM4_Init+0xc0>)
 80010fa:	2263      	movs	r2, #99	; 0x63
 80010fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_TIM4_Init+0xc0>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_TIM4_Init+0xc0>)
 8001106:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800110a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_TIM4_Init+0xc0>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_TIM4_Init+0xc0>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001118:	481d      	ldr	r0, [pc, #116]	; (8001190 <MX_TIM4_Init+0xc0>)
 800111a:	f002 f931 	bl	8003380 <HAL_TIM_PWM_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001124:	f000 f954 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4619      	mov	r1, r3
 8001136:	4816      	ldr	r0, [pc, #88]	; (8001190 <MX_TIM4_Init+0xc0>)
 8001138:	f002 fd16 	bl	8003b68 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001142:	f000 f945 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001146:	2360      	movs	r3, #96	; 0x60
 8001148:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM4_Init+0xc0>)
 800115e:	f002 fa0f 	bl	8003580 <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001168:	f000 f932 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2204      	movs	r2, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <MX_TIM4_Init+0xc0>)
 8001174:	f002 fa04 	bl	8003580 <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800117e:	f000 f927 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_TIM4_Init+0xc0>)
 8001184:	f000 fa12 	bl	80015ac <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000504 	.word	0x20000504
 8001194:	40000800 	.word	0x40000800

08001198 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_USART1_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011a4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART1_UART_Init+0x4c>)
 80011d0:	f002 fd38 	bl	8003c44 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f8f9 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200005a4 	.word	0x200005a4
 80011e8:	40011000 	.word	0x40011000

080011ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_USART2_UART_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_USART2_UART_Init+0x4c>)
 8001224:	f002 fd0e 	bl	8003c44 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f8cf 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200005e8 	.word	0x200005e8
 800123c:	40004400 	.word	0x40004400

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <MX_GPIO_Init+0x180>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b52      	ldr	r3, [pc, #328]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <MX_GPIO_Init+0x180>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b4b      	ldr	r3, [pc, #300]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b48      	ldr	r3, [pc, #288]	; (80013c0 <MX_GPIO_Init+0x180>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <MX_GPIO_Init+0x180>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <MX_GPIO_Init+0x180>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <MX_GPIO_Init+0x180>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2112      	movs	r1, #18
 80012ca:	483e      	ldr	r0, [pc, #248]	; (80013c4 <MX_GPIO_Init+0x184>)
 80012cc:	f000 fe4e 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2104      	movs	r1, #4
 80012d4:	483c      	ldr	r0, [pc, #240]	; (80013c8 <MX_GPIO_Init+0x188>)
 80012d6:	f000 fe49 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_ADD_Pin|TEMP_ADU_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80012e0:	4839      	ldr	r0, [pc, #228]	; (80013c8 <MX_GPIO_Init+0x188>)
 80012e2:	f000 fe43 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HD_Pin|HU_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80012ec:	4837      	ldr	r0, [pc, #220]	; (80013cc <MX_GPIO_Init+0x18c>)
 80012ee:	f000 fe3d 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f8:	4834      	ldr	r0, [pc, #208]	; (80013cc <MX_GPIO_Init+0x18c>)
 80012fa:	f000 fe37 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor2_Pin|Motor1_Pin|LAMP_Pin, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8001304:	482f      	ldr	r0, [pc, #188]	; (80013c4 <MX_GPIO_Init+0x184>)
 8001306:	f000 fe31 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_DC_Pin;
 800130a:	2312      	movs	r3, #18
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4828      	ldr	r0, [pc, #160]	; (80013c4 <MX_GPIO_Init+0x184>)
 8001322:	f000 fc87 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001326:	2304      	movs	r3, #4
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4822      	ldr	r0, [pc, #136]	; (80013c8 <MX_GPIO_Init+0x188>)
 800133e:	f000 fc79 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_ADD_Pin TEMP_ADU_Pin */
  GPIO_InitStruct.Pin = TEMP_ADD_Pin|TEMP_ADU_Pin;
 8001342:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <MX_GPIO_Init+0x188>)
 800135c:	f000 fc6a 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : HD_Pin HU_Pin DCFAN_Pin */
  GPIO_InitStruct.Pin = HD_Pin|HU_Pin|DCFAN_Pin;
 8001360:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001366:	2311      	movs	r3, #17
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <MX_GPIO_Init+0x18c>)
 800137a:	f000 fc5b 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_Pin Motor1_Pin LAMP_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin|Motor1_Pin|LAMP_Pin;
 800137e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001384:	2311      	movs	r3, #17
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	480b      	ldr	r0, [pc, #44]	; (80013c4 <MX_GPIO_Init+0x184>)
 8001398:	f000 fc4c 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 800139c:	f44f 734e 	mov.w	r3, #824	; 0x338
 80013a0:	617b      	str	r3, [r7, #20]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_GPIO_Init+0x188>)
 80013b2:	f000 fc3f 	bl	8001c34 <HAL_GPIO_Init>

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_MspInit+0x4c>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x4c>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a42      	ldr	r2, [pc, #264]	; (8001554 <HAL_SPI_MspInit+0x128>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d12d      	bne.n	80014aa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a40      	ldr	r2, [pc, #256]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a39      	ldr	r2, [pc, #228]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 8001486:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001498:	2305      	movs	r3, #5
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	482e      	ldr	r0, [pc, #184]	; (800155c <HAL_SPI_MspInit+0x130>)
 80014a4:	f000 fbc6 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014a8:	e050      	b.n	800154c <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a2c      	ldr	r2, [pc, #176]	; (8001560 <HAL_SPI_MspInit+0x134>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d14b      	bne.n	800154c <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	4a26      	ldr	r2, [pc, #152]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c2:	6413      	str	r3, [r2, #64]	; 0x40
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_SPI_MspInit+0x12c>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_SCK_Pin;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800151a:	2307      	movs	r3, #7
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SCK_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_SPI_MspInit+0x130>)
 8001526:	f000 fb85 	bl	8001c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP_SO_Pin;
 800152a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800153c:	2306      	movs	r3, #6
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SO_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <HAL_SPI_MspInit+0x138>)
 8001548:	f000 fb74 	bl	8001c34 <HAL_GPIO_Init>
}
 800154c:	bf00      	nop
 800154e:	3730      	adds	r7, #48	; 0x30
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40003800 	.word	0x40003800
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400
 8001560:	40003c00 	.word	0x40003c00
 8001564:	40020800 	.word	0x40020800

08001568 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10d      	bne.n	8001596 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <HAL_TIM_PWM_MspInit+0x40>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40000800 	.word	0x40000800
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <HAL_TIM_MspPostInit+0x68>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d11d      	bne.n	800160a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = LEDR_Pin|LEDB_Pin;
 80015ea:	23c0      	movs	r3, #192	; 0xc0
 80015ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_TIM_MspPostInit+0x70>)
 8001606:	f000 fb15 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40000800 	.word	0x40000800
 8001618:	40023800 	.word	0x40023800
 800161c:	40020400 	.word	0x40020400

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_UART_MspInit+0xe8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12d      	bne.n	800169e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	4b31      	ldr	r3, [pc, #196]	; (800170c <HAL_UART_MspInit+0xec>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_UART_MspInit+0xec>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_UART_MspInit+0xec>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_UART_MspInit+0xec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <HAL_UART_MspInit+0xec>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_UART_MspInit+0xec>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800167a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800168c:	2307      	movs	r3, #7
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	481e      	ldr	r0, [pc, #120]	; (8001710 <HAL_UART_MspInit+0xf0>)
 8001698:	f000 facc 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800169c:	e030      	b.n	8001700 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_UART_MspInit+0xf4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d12b      	bne.n	8001700 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_UART_MspInit+0xec>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a16      	ldr	r2, [pc, #88]	; (800170c <HAL_UART_MspInit+0xec>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_UART_MspInit+0xec>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_UART_MspInit+0xec>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_UART_MspInit+0xec>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_UART_MspInit+0xec>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e0:	230c      	movs	r3, #12
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f0:	2307      	movs	r3, #7
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0xf0>)
 80016fc:	f000 fa9a 	bl	8001c34 <HAL_GPIO_Init>
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40004400 	.word	0x40004400

08001718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800171c:	e7fe      	b.n	800171c <NMI_Handler+0x4>

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Systick_Sensor_IRQ();
 8001764:	f003 fdd8 	bl	8005318 <Systick_Sensor_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f93a 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800178a:	f004 fa9d 	bl	8005cc8 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
	return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017b2:	e7fe      	b.n	80017b2 <_exit+0x12>

080017b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
	}

return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001816:	605a      	str	r2, [r3, #4]
	return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_isatty>:

int _isatty(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	return 1;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	return 0;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f004 fa1e 	bl	8005cc8 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020000 	.word	0x20020000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	2000048c 	.word	0x2000048c
 80018c0:	20000650 	.word	0x20000650

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ee:	490e      	ldr	r1, [pc, #56]	; (8001928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001904:	4c0b      	ldr	r4, [pc, #44]	; (8001934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001912:	f7ff ffd7 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001916:	f004 f9dd 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fae3 	bl	8000ee4 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 800192c:	0800901c 	.word	0x0800901c
  ldr r2, =_sbss
 8001930:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8001934:	2000064c 	.word	0x2000064c

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f931 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fd34 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f93b 	bl	8001c1a <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f911 	bl	8001be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	2000062c 	.word	0x2000062c

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000062c 	.word	0x2000062c

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
         );
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff8e 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff47 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff5c 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff8e 	bl	8001b20 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5d 	bl	8001acc <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffb0 	bl	8001b88 <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e159      	b.n	8001f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 8148 	bne.w	8001efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d005      	beq.n	8001c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a2 	beq.w	8001efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a49      	ldr	r2, [pc, #292]	; (8001f24 <HAL_GPIO_Init+0x2f0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x202>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_GPIO_Init+0x2f4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x1fe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a47      	ldr	r2, [pc, #284]	; (8001f2c <HAL_GPIO_Init+0x2f8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x1fa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a46      	ldr	r2, [pc, #280]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x1f6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a45      	ldr	r2, [pc, #276]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x1f2>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4935      	ldr	r1, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7a:	4a2f      	ldr	r2, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_GPIO_Init+0x304>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f aea2 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e264      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d075      	beq.n	80020aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fbe:	4ba3      	ldr	r3, [pc, #652]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4ba0      	ldr	r3, [pc, #640]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b9d      	ldr	r3, [pc, #628]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b99      	ldr	r3, [pc, #612]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05b      	beq.n	80020a8 <HAL_RCC_OscConfig+0x108>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d157      	bne.n	80020a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e23f      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x74>
 8002006:	4b91      	ldr	r3, [pc, #580]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a90      	ldr	r2, [pc, #576]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x98>
 800201e:	4b8b      	ldr	r3, [pc, #556]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a8a      	ldr	r2, [pc, #552]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a87      	ldr	r2, [pc, #540]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002038:	4b84      	ldr	r3, [pc, #528]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a83      	ldr	r2, [pc, #524]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a80      	ldr	r2, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fcd6 	bl	8001a08 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fcd2 	bl	8001a08 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e204      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xc0>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fcc2 	bl	8001a08 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff fcbe 	bl	8001a08 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1f0      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0xe8>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d11c      	bne.n	8002108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ce:	4b5f      	ldr	r3, [pc, #380]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d116      	bne.n	8002108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x152>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1c4      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4952      	ldr	r1, [pc, #328]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	e03a      	b.n	800217e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_RCC_OscConfig+0x2b0>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff fc77 	bl	8001a08 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff fc73 	bl	8001a08 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1a5      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4940      	ldr	r1, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x2b0>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff fc56 	bl	8001a08 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff fc52 	bl	8001a08 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e184      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d030      	beq.n	80021ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCC_OscConfig+0x2b4>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff fc36 	bl	8001a08 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff fc32 	bl	8001a08 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e164      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x200>
 80021be:	e015      	b.n	80021ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x2b4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fc1f 	bl	8001a08 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ce:	f7ff fc1b 	bl	8001a08 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e14d      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a0 	beq.w	800233a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x2b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d121      	bne.n	800227a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_OscConfig+0x2b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_RCC_OscConfig+0x2b8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbe1 	bl	8001a08 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e011      	b.n	800226e <HAL_RCC_OscConfig+0x2ce>
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	42470000 	.word	0x42470000
 8002254:	42470e80 	.word	0x42470e80
 8002258:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7ff fbd4 	bl	8001a08 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e106      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x4e4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x2f0>
 8002282:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a80      	ldr	r2, [pc, #512]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x32a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x312>
 8002298:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b78      	ldr	r3, [pc, #480]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x32a>
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a74      	ldr	r2, [pc, #464]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a71      	ldr	r2, [pc, #452]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff fb99 	bl	8001a08 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff fb95 	bl	8001a08 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0c5      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x33a>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fb83 	bl	8001a08 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff fb7f 	bl	8001a08 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0af      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 809b 	beq.w	800247a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d05c      	beq.n	800240a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d141      	bne.n	80023dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff fb53 	bl	8001a08 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff fb4f 	bl	8001a08 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e081      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
 80023a8:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fb28 	bl	8001a08 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff fb24 	bl	8001a08 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e056      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x41c>
 80023da:	e04e      	b.n	800247a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fb11 	bl	8001a08 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff fb0d 	bl	8001a08 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03f      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x44a>
 8002408:	e037      	b.n	800247a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e032      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d028      	beq.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d121      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d11a      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40007000 	.word	0x40007000
 8002488:	40023800 	.word	0x40023800
 800248c:	42470060 	.word	0x42470060

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cc      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d90c      	bls.n	80024cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d044      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e067      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4934      	ldr	r1, [pc, #208]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7ff fa42 	bl	8001a08 <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7ff fa3e 	bl	8001a08 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20c      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002616:	f000 f821 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f9a2 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	08008c14 	.word	0x08008c14
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002662:	2100      	movs	r1, #0
 8002664:	6079      	str	r1, [r7, #4]
 8002666:	2100      	movs	r1, #0
 8002668:	60f9      	str	r1, [r7, #12]
 800266a:	2100      	movs	r1, #0
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800266e:	2100      	movs	r1, #0
 8002670:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002672:	4952      	ldr	r1, [pc, #328]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 8002674:	6889      	ldr	r1, [r1, #8]
 8002676:	f001 010c 	and.w	r1, r1, #12
 800267a:	2908      	cmp	r1, #8
 800267c:	d00d      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x3e>
 800267e:	2908      	cmp	r1, #8
 8002680:	f200 8094 	bhi.w	80027ac <HAL_RCC_GetSysClockFreq+0x150>
 8002684:	2900      	cmp	r1, #0
 8002686:	d002      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x32>
 8002688:	2904      	cmp	r1, #4
 800268a:	d003      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x38>
 800268c:	e08e      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002690:	60bb      	str	r3, [r7, #8]
       break;
 8002692:	e08e      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002696:	60bb      	str	r3, [r7, #8]
      break;
 8002698:	e08b      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269a:	4948      	ldr	r1, [pc, #288]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 800269c:	6849      	ldr	r1, [r1, #4]
 800269e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a4:	4945      	ldr	r1, [pc, #276]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 80026a6:	6849      	ldr	r1, [r1, #4]
 80026a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80026ac:	2900      	cmp	r1, #0
 80026ae:	d024      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	4942      	ldr	r1, [pc, #264]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 80026b2:	6849      	ldr	r1, [r1, #4]
 80026b4:	0989      	lsrs	r1, r1, #6
 80026b6:	4608      	mov	r0, r1
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80026c0:	f04f 0500 	mov.w	r5, #0
 80026c4:	ea00 0204 	and.w	r2, r0, r4
 80026c8:	ea01 0305 	and.w	r3, r1, r5
 80026cc:	493d      	ldr	r1, [pc, #244]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80026ce:	fb01 f003 	mul.w	r0, r1, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	fb01 f102 	mul.w	r1, r1, r2
 80026d8:	1844      	adds	r4, r0, r1
 80026da:	493a      	ldr	r1, [pc, #232]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80026dc:	fba2 0101 	umull	r0, r1, r2, r1
 80026e0:	1863      	adds	r3, r4, r1
 80026e2:	4619      	mov	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	f7fe fa64 	bl	8000bb8 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e04a      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	461a      	mov	r2, r3
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	ea02 0400 	and.w	r4, r2, r0
 8002712:	ea03 0501 	and.w	r5, r3, r1
 8002716:	4620      	mov	r0, r4
 8002718:	4629      	mov	r1, r5
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	014b      	lsls	r3, r1, #5
 8002724:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002728:	0142      	lsls	r2, r0, #5
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	1b00      	subs	r0, r0, r4
 8002730:	eb61 0105 	sbc.w	r1, r1, r5
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	018b      	lsls	r3, r1, #6
 800273e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002742:	0182      	lsls	r2, r0, #6
 8002744:	1a12      	subs	r2, r2, r0
 8002746:	eb63 0301 	sbc.w	r3, r3, r1
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	00d9      	lsls	r1, r3, #3
 8002754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002758:	00d0      	lsls	r0, r2, #3
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	1912      	adds	r2, r2, r4
 8002760:	eb45 0303 	adc.w	r3, r5, r3
 8002764:	f04f 0000 	mov.w	r0, #0
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	0299      	lsls	r1, r3, #10
 800276e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002772:	0290      	lsls	r0, r2, #10
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f7fe fa18 	bl	8000bb8 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	60bb      	str	r3, [r7, #8]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80027ae:	60bb      	str	r3, [r7, #8]
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	68bb      	ldr	r3, [r7, #8]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bdb0      	pop	{r4, r5, r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	017d7840 	.word	0x017d7840

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08008c24 	.word	0x08008c24

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800280c:	f7ff ffdc 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4903      	ldr	r1, [pc, #12]	; (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	08008c24 	.word	0x08008c24

08002830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07b      	b.n	800293a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d108      	bne.n	800285c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002852:	d009      	beq.n	8002868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
 800285a:	e005      	b.n	8002868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fdd2 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	f003 0104 	and.w	r1, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f003 0210 	and.w	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b088      	sub	sp, #32
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_SPI_Transmit+0x22>
 8002960:	2302      	movs	r3, #2
 8002962:	e126      	b.n	8002bb2 <HAL_SPI_Transmit+0x270>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296c:	f7ff f84c 	bl	8001a08 <HAL_GetTick>
 8002970:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d002      	beq.n	8002988 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002986:	e10b      	b.n	8002ba0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Transmit+0x52>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002998:	e102      	b.n	8002ba0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2203      	movs	r2, #3
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e0:	d10f      	bne.n	8002a02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d007      	beq.n	8002a20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a28:	d14b      	bne.n	8002ac2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_SPI_Transmit+0xf6>
 8002a32:	8afb      	ldrh	r3, [r7, #22]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d13e      	bne.n	8002ab6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	1c9a      	adds	r2, r3, #2
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a5c:	e02b      	b.n	8002ab6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d112      	bne.n	8002a92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	881a      	ldrh	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	1c9a      	adds	r2, r3, #2
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a90:	e011      	b.n	8002ab6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a92:	f7fe ffb9 	bl	8001a08 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d803      	bhi.n	8002aaa <HAL_SPI_Transmit+0x168>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d102      	bne.n	8002ab0 <HAL_SPI_Transmit+0x16e>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab4:	e074      	b.n	8002ba0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ce      	bne.n	8002a5e <HAL_SPI_Transmit+0x11c>
 8002ac0:	e04c      	b.n	8002b5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Transmit+0x18e>
 8002aca:	8afb      	ldrh	r3, [r7, #22]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d140      	bne.n	8002b52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	7812      	ldrb	r2, [r2, #0]
 8002adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002af6:	e02c      	b.n	8002b52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d113      	bne.n	8002b2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b2c:	e011      	b.n	8002b52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b2e:	f7fe ff6b 	bl	8001a08 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d803      	bhi.n	8002b46 <HAL_SPI_Transmit+0x204>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d102      	bne.n	8002b4c <HAL_SPI_Transmit+0x20a>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b50:	e026      	b.n	8002ba0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1cd      	bne.n	8002af8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fbcb 	bl	80032fc <SPI_EndRxTxTransaction>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e000      	b.n	8002ba0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b088      	sub	sp, #32
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd6:	d112      	bne.n	8002bfe <HAL_SPI_Receive+0x44>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2204      	movs	r2, #4
 8002be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f8f1 	bl	8002ddc <HAL_SPI_TransmitReceive>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	e0ea      	b.n	8002dd4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_SPI_Receive+0x52>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0e3      	b.n	8002dd4 <HAL_SPI_Receive+0x21a>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c14:	f7fe fef8 	bl	8001a08 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c2a:	e0ca      	b.n	8002dc2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_SPI_Receive+0x7e>
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c3c:	e0c1      	b.n	8002dc2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2204      	movs	r2, #4
 8002c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	d10f      	bne.n	8002ca6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d007      	beq.n	8002cc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d162      	bne.n	8002d92 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ccc:	e02e      	b.n	8002d2c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d115      	bne.n	8002d08 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f103 020c 	add.w	r2, r3, #12
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	7812      	ldrb	r2, [r2, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d06:	e011      	b.n	8002d2c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d08:	f7fe fe7e 	bl	8001a08 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d803      	bhi.n	8002d20 <HAL_SPI_Receive+0x166>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d102      	bne.n	8002d26 <HAL_SPI_Receive+0x16c>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d2a:	e04a      	b.n	8002dc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1cb      	bne.n	8002cce <HAL_SPI_Receive+0x114>
 8002d36:	e031      	b.n	8002d9c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d113      	bne.n	8002d6e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	b292      	uxth	r2, r2
 8002d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d6c:	e011      	b.n	8002d92 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6e:	f7fe fe4b 	bl	8001a08 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d803      	bhi.n	8002d86 <HAL_SPI_Receive+0x1cc>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Receive+0x1d2>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d90:	e017      	b.n	8002dc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1cd      	bne.n	8002d38 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fa45 	bl	8003230 <SPI_EndRxTransaction>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
 8002dbe:	e000      	b.n	8002dc2 <HAL_SPI_Receive+0x208>
  }

error :
 8002dc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	; 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dea:	2301      	movs	r3, #1
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x26>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e18a      	b.n	8003118 <HAL_SPI_TransmitReceive+0x33c>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e0a:	f7fe fdfd 	bl	8001a08 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d00f      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x70>
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e32:	d107      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x68>
 8002e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d003      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e4a:	e15b      	b.n	8003104 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_SPI_TransmitReceive+0x82>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_TransmitReceive+0x82>
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e64:	e14e      	b.n	8003104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d003      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2205      	movs	r2, #5
 8002e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	887a      	ldrh	r2, [r7, #2]
 8002ea2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d007      	beq.n	8002ece <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed6:	d178      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x10a>
 8002ee0:	8b7b      	ldrh	r3, [r7, #26]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d166      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f0a:	e053      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d11b      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x176>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d016      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x176>
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d113      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	881a      	ldrh	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	1c9a      	adds	r2, r3, #2
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d119      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x1b8>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d014      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	b292      	uxth	r2, r2
 8002f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f94:	f7fe fd38 	bl	8001a08 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d807      	bhi.n	8002fb4 <HAL_SPI_TransmitReceive+0x1d8>
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d003      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fb2:	e0a7      	b.n	8003104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1a6      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x130>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1a1      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x130>
 8002fc8:	e07c      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_SPI_TransmitReceive+0x1fc>
 8002fd2:	8b7b      	ldrh	r3, [r7, #26]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d16b      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffe:	e057      	b.n	80030b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d11c      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x26c>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d017      	beq.n	8003048 <HAL_SPI_TransmitReceive+0x26c>
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d114      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b01      	cmp	r3, #1
 8003054:	d119      	bne.n	800308a <HAL_SPI_TransmitReceive+0x2ae>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d014      	beq.n	800308a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003086:	2301      	movs	r3, #1
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800308a:	f7fe fcbd 	bl	8001a08 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003096:	429a      	cmp	r2, r3
 8003098:	d803      	bhi.n	80030a2 <HAL_SPI_TransmitReceive+0x2c6>
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x2cc>
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030ae:	e029      	b.n	8003104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1a2      	bne.n	8003000 <HAL_SPI_TransmitReceive+0x224>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d19d      	bne.n	8003000 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f917 	bl	80032fc <SPI_EndRxTxTransaction>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030e0:	e010      	b.n	8003104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	e000      	b.n	8003104 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003102:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003118:	4618      	mov	r0, r3
 800311a:	3730      	adds	r7, #48	; 0x30
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	4613      	mov	r3, r2
 800312e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003130:	f7fe fc6a 	bl	8001a08 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003140:	f7fe fc62 	bl	8001a08 <HAL_GetTick>
 8003144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	015b      	lsls	r3, r3, #5
 800314c:	0d1b      	lsrs	r3, r3, #20
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	fb02 f303 	mul.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003156:	e054      	b.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d050      	beq.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003160:	f7fe fc52 	bl	8001a08 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	429a      	cmp	r2, r3
 800316e:	d902      	bls.n	8003176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d13d      	bne.n	80031f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318e:	d111      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003198:	d004      	beq.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d107      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031bc:	d10f      	bne.n	80031de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e017      	b.n	8003222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3b01      	subs	r3, #1
 8003200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	429a      	cmp	r2, r3
 800321e:	d19b      	bne.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000000 	.word	0x20000000

08003230 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003244:	d111      	bne.n	800326a <SPI_EndRxTransaction+0x3a>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d004      	beq.n	800325a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003258:	d107      	bne.n	800326a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d12a      	bne.n	80032ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327c:	d012      	beq.n	80032a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	2180      	movs	r1, #128	; 0x80
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f7ff ff49 	bl	8003120 <SPI_WaitFlagStateUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02d      	beq.n	80032f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e026      	b.n	80032f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	2101      	movs	r1, #1
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff ff36 	bl	8003120 <SPI_WaitFlagStateUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01a      	beq.n	80032f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e013      	b.n	80032f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2101      	movs	r1, #1
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ff23 	bl	8003120 <SPI_WaitFlagStateUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e000      	b.n	80032f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <SPI_EndRxTxTransaction+0x7c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <SPI_EndRxTxTransaction+0x80>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0d5b      	lsrs	r3, r3, #21
 8003314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d112      	bne.n	800334e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff fef4 	bl	8003120 <SPI_WaitFlagStateUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d016      	beq.n	800336c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e00f      	b.n	800336e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3b01      	subs	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	d0f2      	beq.n	800334e <SPI_EndRxTxTransaction+0x52>
 8003368:	e000      	b.n	800336c <SPI_EndRxTxTransaction+0x70>
        break;
 800336a:	bf00      	nop
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000000 	.word	0x20000000
 800337c:	165e9f81 	.word	0x165e9f81

08003380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e041      	b.n	8003416 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f8de 	bl	8001568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 f9a0 	bl	8003704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start+0x24>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e022      	b.n	800348a <HAL_TIM_PWM_Start+0x6a>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d109      	bne.n	800345e <HAL_TIM_PWM_Start+0x3e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e015      	b.n	800348a <HAL_TIM_PWM_Start+0x6a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start+0x58>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e008      	b.n	800348a <HAL_TIM_PWM_Start+0x6a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e068      	b.n	8003564 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x82>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a0:	e013      	b.n	80034ca <HAL_TIM_PWM_Start+0xaa>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0x92>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b0:	e00b      	b.n	80034ca <HAL_TIM_PWM_Start+0xaa>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xa2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c0:	e003      	b.n	80034ca <HAL_TIM_PWM_Start+0xaa>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fb22 	bl	8003b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a23      	ldr	r2, [pc, #140]	; (800356c <HAL_TIM_PWM_Start+0x14c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_TIM_PWM_Start+0x14c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d018      	beq.n	800352e <HAL_TIM_PWM_Start+0x10e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d013      	beq.n	800352e <HAL_TIM_PWM_Start+0x10e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_TIM_PWM_Start+0x150>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_TIM_PWM_Start+0x10e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_TIM_PWM_Start+0x154>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_TIM_PWM_Start+0x10e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <HAL_TIM_PWM_Start+0x158>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_TIM_PWM_Start+0x10e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <HAL_TIM_PWM_Start+0x15c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d111      	bne.n	8003552 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d010      	beq.n	8003562 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	e007      	b.n	8003562 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40010000 	.word	0x40010000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40014000 	.word	0x40014000

08003580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800359a:	2302      	movs	r3, #2
 800359c:	e0ae      	b.n	80036fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	f200 809f 	bhi.w	80036ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035e9 	.word	0x080035e9
 80035b8:	080036ed 	.word	0x080036ed
 80035bc:	080036ed 	.word	0x080036ed
 80035c0:	080036ed 	.word	0x080036ed
 80035c4:	08003629 	.word	0x08003629
 80035c8:	080036ed 	.word	0x080036ed
 80035cc:	080036ed 	.word	0x080036ed
 80035d0:	080036ed 	.word	0x080036ed
 80035d4:	0800366b 	.word	0x0800366b
 80035d8:	080036ed 	.word	0x080036ed
 80035dc:	080036ed 	.word	0x080036ed
 80035e0:	080036ed 	.word	0x080036ed
 80035e4:	080036ab 	.word	0x080036ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f908 	bl	8003804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0208 	orr.w	r2, r2, #8
 8003602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0204 	bic.w	r2, r2, #4
 8003612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	619a      	str	r2, [r3, #24]
      break;
 8003626:	e064      	b.n	80036f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f94e 	bl	80038d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6999      	ldr	r1, [r3, #24]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	021a      	lsls	r2, r3, #8
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	619a      	str	r2, [r3, #24]
      break;
 8003668:	e043      	b.n	80036f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f999 	bl	80039a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0208 	orr.w	r2, r2, #8
 8003684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0204 	bic.w	r2, r2, #4
 8003694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      break;
 80036a8:	e023      	b.n	80036f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f9e3 	bl	8003a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69d9      	ldr	r1, [r3, #28]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	021a      	lsls	r2, r3, #8
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	61da      	str	r2, [r3, #28]
      break;
 80036ea:	e002      	b.n	80036f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
      break;
 80036f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <TIM_Base_SetConfig+0xe4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00f      	beq.n	800373c <TIM_Base_SetConfig+0x38>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d00b      	beq.n	800373c <TIM_Base_SetConfig+0x38>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a31      	ldr	r2, [pc, #196]	; (80037ec <TIM_Base_SetConfig+0xe8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0x38>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a30      	ldr	r2, [pc, #192]	; (80037f0 <TIM_Base_SetConfig+0xec>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0x38>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <TIM_Base_SetConfig+0xf0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d108      	bne.n	800374e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <TIM_Base_SetConfig+0xe4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01b      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375c:	d017      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <TIM_Base_SetConfig+0xe8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <TIM_Base_SetConfig+0xec>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00f      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <TIM_Base_SetConfig+0xf0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00b      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <TIM_Base_SetConfig+0xf4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d007      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <TIM_Base_SetConfig+0xf8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0x8a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <TIM_Base_SetConfig+0xfc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d108      	bne.n	80037a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <TIM_Base_SetConfig+0xe4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d103      	bne.n	80037d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	615a      	str	r2, [r3, #20]
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	40000c00 	.word	0x40000c00
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800

08003804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0201 	bic.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f023 0302 	bic.w	r3, r3, #2
 800384c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <TIM_OC1_SetConfig+0xc8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10c      	bne.n	800387a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0308 	bic.w	r3, r3, #8
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0304 	bic.w	r3, r3, #4
 8003878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <TIM_OC1_SetConfig+0xc8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40010000 	.word	0x40010000

080038d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <TIM_OC2_SetConfig+0xd4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10d      	bne.n	800394c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a15      	ldr	r2, [pc, #84]	; (80039a4 <TIM_OC2_SetConfig+0xd4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000

080039a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <TIM_OC3_SetConfig+0xd0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10d      	bne.n	8003a22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <TIM_OC3_SetConfig+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d113      	bne.n	8003a52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40010000 	.word	0x40010000

08003a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	031b      	lsls	r3, r3, #12
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <TIM_OC4_SetConfig+0x9c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d109      	bne.n	8003af0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	019b      	lsls	r3, r3, #6
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000

08003b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2201      	movs	r2, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e050      	b.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d013      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10c      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40014000 	.word	0x40014000

08003c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fcd8 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f929 	bl	8003ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d17c      	bne.n	8003df8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_Transmit+0x2c>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e075      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x3e>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e06e      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fe69 	bl	8001a08 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d70:	e02a      	b.n	8003dc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f840 	bl	8003e02 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e036      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3302      	adds	r3, #2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e007      	b.n	8003dba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1cf      	bne.n	8003d72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f810 	bl	8003e02 <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e006      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b090      	sub	sp, #64	; 0x40
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	603b      	str	r3, [r7, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e12:	e050      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d04c      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e22:	f7fd fdf1 	bl	8001a08 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d241      	bcs.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e52:	637a      	str	r2, [r7, #52]	; 0x34
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e5      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	613b      	str	r3, [r7, #16]
   return(result);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e86:	623a      	str	r2, [r7, #32]
 8003e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	69f9      	ldr	r1, [r7, #28]
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e5      	bne.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e00f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d09f      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3740      	adds	r7, #64	; 0x40
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	b09f      	sub	sp, #124	; 0x7c
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	68d9      	ldr	r1, [r3, #12]
 8003ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	ea40 0301 	orr.w	r3, r0, r1
 8003f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f24:	f021 010c 	bic.w	r1, r1, #12
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	6999      	ldr	r1, [r3, #24]
 8003f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	ea40 0301 	orr.w	r3, r0, r1
 8003f48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4bc5      	ldr	r3, [pc, #788]	; (8004264 <UART_SetConfig+0x384>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d004      	beq.n	8003f5e <UART_SetConfig+0x7e>
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4bc3      	ldr	r3, [pc, #780]	; (8004268 <UART_SetConfig+0x388>)
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d103      	bne.n	8003f66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f5e:	f7fe fc53 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8003f62:	6778      	str	r0, [r7, #116]	; 0x74
 8003f64:	e002      	b.n	8003f6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f66:	f7fe fc3b 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8003f6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f74:	f040 80b6 	bne.w	80040e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	461c      	mov	r4, r3
 8003f7c:	f04f 0500 	mov.w	r5, #0
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	6439      	str	r1, [r7, #64]	; 0x40
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f90:	1912      	adds	r2, r2, r4
 8003f92:	eb45 0303 	adc.w	r3, r5, r3
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	00d9      	lsls	r1, r3, #3
 8003fa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa4:	00d0      	lsls	r0, r2, #3
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	1911      	adds	r1, r2, r4
 8003fac:	6639      	str	r1, [r7, #96]	; 0x60
 8003fae:	416b      	adcs	r3, r5
 8003fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	1891      	adds	r1, r2, r2
 8003fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fc0:	415b      	adcs	r3, r3
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003fcc:	f7fc fdf4 	bl	8000bb8 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4ba5      	ldr	r3, [pc, #660]	; (800426c <UART_SetConfig+0x38c>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	011e      	lsls	r6, r3, #4
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	461c      	mov	r4, r3
 8003fe2:	f04f 0500 	mov.w	r5, #0
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	462b      	mov	r3, r5
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	6339      	str	r1, [r7, #48]	; 0x30
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ff6:	1912      	adds	r2, r2, r4
 8003ff8:	eb45 0303 	adc.w	r3, r5, r3
 8003ffc:	f04f 0000 	mov.w	r0, #0
 8004000:	f04f 0100 	mov.w	r1, #0
 8004004:	00d9      	lsls	r1, r3, #3
 8004006:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800400a:	00d0      	lsls	r0, r2, #3
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	1911      	adds	r1, r2, r4
 8004012:	65b9      	str	r1, [r7, #88]	; 0x58
 8004014:	416b      	adcs	r3, r5
 8004016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	461a      	mov	r2, r3
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	1891      	adds	r1, r2, r2
 8004024:	62b9      	str	r1, [r7, #40]	; 0x28
 8004026:	415b      	adcs	r3, r3
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800402e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004032:	f7fc fdc1 	bl	8000bb8 <__aeabi_uldivmod>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4b8c      	ldr	r3, [pc, #560]	; (800426c <UART_SetConfig+0x38c>)
 800403c:	fba3 1302 	umull	r1, r3, r3, r2
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2164      	movs	r1, #100	; 0x64
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a87      	ldr	r2, [pc, #540]	; (800426c <UART_SetConfig+0x38c>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800405c:	441e      	add	r6, r3
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	4618      	mov	r0, r3
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	1894      	adds	r4, r2, r2
 800406c:	623c      	str	r4, [r7, #32]
 800406e:	415b      	adcs	r3, r3
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
 8004072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004076:	1812      	adds	r2, r2, r0
 8004078:	eb41 0303 	adc.w	r3, r1, r3
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	f04f 0500 	mov.w	r5, #0
 8004084:	00dd      	lsls	r5, r3, #3
 8004086:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800408a:	00d4      	lsls	r4, r2, #3
 800408c:	4622      	mov	r2, r4
 800408e:	462b      	mov	r3, r5
 8004090:	1814      	adds	r4, r2, r0
 8004092:	653c      	str	r4, [r7, #80]	; 0x50
 8004094:	414b      	adcs	r3, r1
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	461a      	mov	r2, r3
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	1891      	adds	r1, r2, r2
 80040a4:	61b9      	str	r1, [r7, #24]
 80040a6:	415b      	adcs	r3, r3
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040b2:	f7fc fd81 	bl	8000bb8 <__aeabi_uldivmod>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4b6c      	ldr	r3, [pc, #432]	; (800426c <UART_SetConfig+0x38c>)
 80040bc:	fba3 1302 	umull	r1, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	2164      	movs	r1, #100	; 0x64
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	3332      	adds	r3, #50	; 0x32
 80040ce:	4a67      	ldr	r2, [pc, #412]	; (800426c <UART_SetConfig+0x38c>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	f003 0207 	and.w	r2, r3, #7
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4432      	add	r2, r6
 80040e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e2:	e0b9      	b.n	8004258 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e6:	461c      	mov	r4, r3
 80040e8:	f04f 0500 	mov.w	r5, #0
 80040ec:	4622      	mov	r2, r4
 80040ee:	462b      	mov	r3, r5
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	6139      	str	r1, [r7, #16]
 80040f4:	415b      	adcs	r3, r3
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040fc:	1912      	adds	r2, r2, r4
 80040fe:	eb45 0303 	adc.w	r3, r5, r3
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	00d9      	lsls	r1, r3, #3
 800410c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004110:	00d0      	lsls	r0, r2, #3
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	eb12 0804 	adds.w	r8, r2, r4
 800411a:	eb43 0905 	adc.w	r9, r3, r5
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4618      	mov	r0, r3
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	008b      	lsls	r3, r1, #2
 8004132:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004136:	0082      	lsls	r2, r0, #2
 8004138:	4640      	mov	r0, r8
 800413a:	4649      	mov	r1, r9
 800413c:	f7fc fd3c 	bl	8000bb8 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4b49      	ldr	r3, [pc, #292]	; (800426c <UART_SetConfig+0x38c>)
 8004146:	fba3 2302 	umull	r2, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	011e      	lsls	r6, r3, #4
 800414e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004150:	4618      	mov	r0, r3
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	1894      	adds	r4, r2, r2
 800415c:	60bc      	str	r4, [r7, #8]
 800415e:	415b      	adcs	r3, r3
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004166:	1812      	adds	r2, r2, r0
 8004168:	eb41 0303 	adc.w	r3, r1, r3
 800416c:	f04f 0400 	mov.w	r4, #0
 8004170:	f04f 0500 	mov.w	r5, #0
 8004174:	00dd      	lsls	r5, r3, #3
 8004176:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800417a:	00d4      	lsls	r4, r2, #3
 800417c:	4622      	mov	r2, r4
 800417e:	462b      	mov	r3, r5
 8004180:	1814      	adds	r4, r2, r0
 8004182:	64bc      	str	r4, [r7, #72]	; 0x48
 8004184:	414b      	adcs	r3, r1
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	008b      	lsls	r3, r1, #2
 800419c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041a0:	0082      	lsls	r2, r0, #2
 80041a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80041a6:	f7fc fd07 	bl	8000bb8 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b2f      	ldr	r3, [pc, #188]	; (800426c <UART_SetConfig+0x38c>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	; 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	; 0x32
 80041c2:	4a2a      	ldr	r2, [pc, #168]	; (800426c <UART_SetConfig+0x38c>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ce:	441e      	add	r6, r3
 80041d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d2:	4618      	mov	r0, r3
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	1894      	adds	r4, r2, r2
 80041de:	603c      	str	r4, [r7, #0]
 80041e0:	415b      	adcs	r3, r3
 80041e2:	607b      	str	r3, [r7, #4]
 80041e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e8:	1812      	adds	r2, r2, r0
 80041ea:	eb41 0303 	adc.w	r3, r1, r3
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	f04f 0500 	mov.w	r5, #0
 80041f6:	00dd      	lsls	r5, r3, #3
 80041f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041fc:	00d4      	lsls	r4, r2, #3
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	eb12 0a00 	adds.w	sl, r2, r0
 8004206:	eb43 0b01 	adc.w	fp, r3, r1
 800420a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4618      	mov	r0, r3
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	008b      	lsls	r3, r1, #2
 800421e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004222:	0082      	lsls	r2, r0, #2
 8004224:	4650      	mov	r0, sl
 8004226:	4659      	mov	r1, fp
 8004228:	f7fc fcc6 	bl	8000bb8 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <UART_SetConfig+0x38c>)
 8004232:	fba3 1302 	umull	r1, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2164      	movs	r1, #100	; 0x64
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <UART_SetConfig+0x38c>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4432      	add	r2, r6
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	377c      	adds	r7, #124	; 0x7c
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	40011000 	.word	0x40011000
 8004268:	40011400 	.word	0x40011400
 800426c:	51eb851f 	.word	0x51eb851f

08004270 <OLED_CS_Set>:
		0x7C, 0x7C, 0x7C, 0x7C, 0x7C, //Full Square(/Q)
		0x7C, 0x44, 0x44, 0x44, 0x7C, //Empty Square(/q)
		0x38, 0x7C, 0x7C, 0x7C, 0x38, //Full Circle(/*)
};

static void inline OLED_CS_Set(uint8_t state){
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, state);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	461a      	mov	r2, r3
 800427e:	2104      	movs	r1, #4
 8004280:	4803      	ldr	r0, [pc, #12]	; (8004290 <OLED_CS_Set+0x20>)
 8004282:	f7fd fe73 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40020400 	.word	0x40020400

08004294 <OLED_DC_Set>:

static void inline OLED_DC_Set(uint8_t state){
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, state);
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	461a      	mov	r2, r3
 80042a2:	2110      	movs	r1, #16
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <OLED_DC_Set+0x20>)
 80042a6:	f7fd fe61 	bl	8001f6c <HAL_GPIO_WritePin>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40020000 	.word	0x40020000

080042b8 <OLED_RS_Set>:

static void inline OLED_RS_Set(uint8_t state){
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_RS_GPIO_Port, OLED_RS_Pin, state);
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	461a      	mov	r2, r3
 80042c6:	2102      	movs	r1, #2
 80042c8:	4803      	ldr	r0, [pc, #12]	; (80042d8 <OLED_RS_Set+0x20>)
 80042ca:	f7fd fe4f 	bl	8001f6c <HAL_GPIO_WritePin>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40020000 	.word	0x40020000

080042dc <OLED_Send>:

static void inline OLED_Send(uint8_t data){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80042e6:	b672      	cpsid	i
}
 80042e8:	bf00      	nop
	__disable_irq();//인터럽트를 중단하여 데이터 전송을 원활하게 한다.
	OLED_CS_Set(0);//OLED에 데이터를 전송하기 위해 CS를 Low신호로 만들어야 한다.
 80042ea:	2000      	movs	r0, #0
 80042ec:	f7ff ffc0 	bl	8004270 <OLED_CS_Set>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80042f0:	1df9      	adds	r1, r7, #7
 80042f2:	2301      	movs	r3, #1
 80042f4:	2201      	movs	r2, #1
 80042f6:	4806      	ldr	r0, [pc, #24]	; (8004310 <OLED_Send+0x34>)
 80042f8:	f7fe fb23 	bl	8002942 <HAL_SPI_Transmit>
	OLED_CS_Set(1);//데이터 전송이 끝나면 CS를 High로 만들어 신호가 들어와도 무시하도록 해야 한다.
 80042fc:	2001      	movs	r0, #1
 80042fe:	f7ff ffb7 	bl	8004270 <OLED_CS_Set>
  __ASM volatile ("cpsie i" : : : "memory");
 8004302:	b662      	cpsie	i
}
 8004304:	bf00      	nop
	__enable_irq();
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200004ac 	.word	0x200004ac

08004314 <OLED_WriteCommand>:

static void inline OLED_WriteCommand(uint8_t data){
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(0);
 800431e:	2000      	movs	r0, #0
 8004320:	f7ff ffb8 	bl	8004294 <OLED_DC_Set>
	OLED_Send(data);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ffd8 	bl	80042dc <OLED_Send>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <OLED_WriteData>:

static void inline OLED_WriteData(uint8_t data){
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(1);
 800433e:	2001      	movs	r0, #1
 8004340:	f7ff ffa8 	bl	8004294 <OLED_DC_Set>
	OLED_Send(data);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ffc8 	bl	80042dc <OLED_Send>
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <OLED_Clear>:

void OLED_Clear(){
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
	OLED_row = 1;
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <OLED_Clear+0x50>)
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <OLED_Clear+0x54>)
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
	OLED_charColor = 0xFFFFFF;
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <OLED_Clear+0x58>)
 8004368:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800436c:	601a      	str	r2, [r3, #0]
	OLED_charPoint = 2;
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <OLED_Clear+0x5c>)
 8004370:	2202      	movs	r2, #2
 8004372:	701a      	strb	r2, [r3, #0]
	OLED_AddrWindow(0, 0, 96, 64);
 8004374:	2340      	movs	r3, #64	; 0x40
 8004376:	2260      	movs	r2, #96	; 0x60
 8004378:	2100      	movs	r1, #0
 800437a:	2000      	movs	r0, #0
 800437c:	f000 f8a1 	bl	80044c2 <OLED_AddrWindow>
	for(int i=0; i<12288; i++){
 8004380:	2300      	movs	r3, #0
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	e005      	b.n	8004392 <OLED_Clear+0x3e>
		OLED_WriteData(0);
 8004386:	2000      	movs	r0, #0
 8004388:	f7ff ffd4 	bl	8004334 <OLED_WriteData>
	for(int i=0; i<12288; i++){
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3301      	adds	r3, #1
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004398:	dbf5      	blt.n	8004386 <OLED_Clear+0x32>
	}
}
 800439a:	bf00      	nop
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000009 	.word	0x20000009
 80043a8:	2000000a 	.word	0x2000000a
 80043ac:	2000000c 	.word	0x2000000c
 80043b0:	20000010 	.word	0x20000010

080043b4 <OLED_Begin>:

void OLED_Begin(){
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	//15ms 이상 대기
	HAL_Delay(100);
 80043b8:	2064      	movs	r0, #100	; 0x64
 80043ba:	f7fd fb31 	bl	8001a20 <HAL_Delay>

	//초기 작업(리셋)
	OLED_CS_Set(1);
 80043be:	2001      	movs	r0, #1
 80043c0:	f7ff ff56 	bl	8004270 <OLED_CS_Set>
	OLED_RS_Set(0);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f7ff ff77 	bl	80042b8 <OLED_RS_Set>
	HAL_Delay(3);
 80043ca:	2003      	movs	r0, #3
 80043cc:	f7fd fb28 	bl	8001a20 <HAL_Delay>
	OLED_RS_Set(1);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7ff ff71 	bl	80042b8 <OLED_RS_Set>

	//기본 설정 명령어
	OLED_WriteCommand(0xAE);
 80043d6:	20ae      	movs	r0, #174	; 0xae
 80043d8:	f7ff ff9c 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xA0);
 80043dc:	20a0      	movs	r0, #160	; 0xa0
 80043de:	f7ff ff99 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x72);
 80043e2:	2072      	movs	r0, #114	; 0x72
 80043e4:	f7ff ff96 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xA1);
 80043e8:	20a1      	movs	r0, #161	; 0xa1
 80043ea:	f7ff ff93 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7ff ff90 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xA2);
 80043f4:	20a2      	movs	r0, #162	; 0xa2
 80043f6:	f7ff ff8d 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7ff ff8a 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4);
 8004400:	20a4      	movs	r0, #164	; 0xa4
 8004402:	f7ff ff87 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xA8);
 8004406:	20a8      	movs	r0, #168	; 0xa8
 8004408:	f7ff ff84 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 800440c:	203f      	movs	r0, #63	; 0x3f
 800440e:	f7ff ff81 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xAD);
 8004412:	20ad      	movs	r0, #173	; 0xad
 8004414:	f7ff ff7e 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x8E);
 8004418:	208e      	movs	r0, #142	; 0x8e
 800441a:	f7ff ff7b 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xB0);
 800441e:	20b0      	movs	r0, #176	; 0xb0
 8004420:	f7ff ff78 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x0B);
 8004424:	200b      	movs	r0, #11
 8004426:	f7ff ff75 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xB1);
 800442a:	20b1      	movs	r0, #177	; 0xb1
 800442c:	f7ff ff72 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x31);
 8004430:	2031      	movs	r0, #49	; 0x31
 8004432:	f7ff ff6f 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xB3);
 8004436:	20b3      	movs	r0, #179	; 0xb3
 8004438:	f7ff ff6c 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xF0);
 800443c:	20f0      	movs	r0, #240	; 0xf0
 800443e:	f7ff ff69 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x8A);
 8004442:	208a      	movs	r0, #138	; 0x8a
 8004444:	f7ff ff66 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 8004448:	2064      	movs	r0, #100	; 0x64
 800444a:	f7ff ff63 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x8B);
 800444e:	208b      	movs	r0, #139	; 0x8b
 8004450:	f7ff ff60 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x78);
 8004454:	2078      	movs	r0, #120	; 0x78
 8004456:	f7ff ff5d 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x8C);
 800445a:	208c      	movs	r0, #140	; 0x8c
 800445c:	f7ff ff5a 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 8004460:	2064      	movs	r0, #100	; 0x64
 8004462:	f7ff ff57 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xBB);
 8004466:	20bb      	movs	r0, #187	; 0xbb
 8004468:	f7ff ff54 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x3A);
 800446c:	203a      	movs	r0, #58	; 0x3a
 800446e:	f7ff ff51 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0xBE);
 8004472:	20be      	movs	r0, #190	; 0xbe
 8004474:	f7ff ff4e 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x3E);
 8004478:	203e      	movs	r0, #62	; 0x3e
 800447a:	f7ff ff4b 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x87);
 800447e:	2087      	movs	r0, #135	; 0x87
 8004480:	f7ff ff48 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x06);
 8004484:	2006      	movs	r0, #6
 8004486:	f7ff ff45 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x81);
 800448a:	2081      	movs	r0, #129	; 0x81
 800448c:	f7ff ff42 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x91);
 8004490:	2091      	movs	r0, #145	; 0x91
 8004492:	f7ff ff3f 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x82);
 8004496:	2082      	movs	r0, #130	; 0x82
 8004498:	f7ff ff3c 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x50);
 800449c:	2050      	movs	r0, #80	; 0x50
 800449e:	f7ff ff39 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x83);
 80044a2:	2083      	movs	r0, #131	; 0x83
 80044a4:	f7ff ff36 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x7D);
 80044a8:	207d      	movs	r0, #125	; 0x7d
 80044aa:	f7ff ff33 	bl	8004314 <OLED_WriteCommand>

	OLED_Clear();
 80044ae:	f7ff ff51 	bl	8004354 <OLED_Clear>
	OLED_WriteCommand(0xAF);
 80044b2:	20af      	movs	r0, #175	; 0xaf
 80044b4:	f7ff ff2e 	bl	8004314 <OLED_WriteCommand>
	HAL_Delay(100);
 80044b8:	2064      	movs	r0, #100	; 0x64
 80044ba:	f7fd fab1 	bl	8001a20 <HAL_Delay>

}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <OLED_AddrWindow>:

void OLED_AddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 80044c2:	b590      	push	{r4, r7, lr}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4604      	mov	r4, r0
 80044ca:	4608      	mov	r0, r1
 80044cc:	4611      	mov	r1, r2
 80044ce:	461a      	mov	r2, r3
 80044d0:	4623      	mov	r3, r4
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	4603      	mov	r3, r0
 80044d6:	71bb      	strb	r3, [r7, #6]
 80044d8:	460b      	mov	r3, r1
 80044da:	717b      	strb	r3, [r7, #5]
 80044dc:	4613      	mov	r3, r2
 80044de:	713b      	strb	r3, [r7, #4]
	uint8_t x1 = x;
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	73fb      	strb	r3, [r7, #15]
	uint8_t y1 = y;
 80044e4:	79bb      	ldrb	r3, [r7, #6]
 80044e6:	73bb      	strb	r3, [r7, #14]
	if(x1 > 95){
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b5f      	cmp	r3, #95	; 0x5f
 80044ec:	d901      	bls.n	80044f2 <OLED_AddrWindow+0x30>
		x1 = 95;
 80044ee:	235f      	movs	r3, #95	; 0x5f
 80044f0:	73fb      	strb	r3, [r7, #15]
	}
	if(y1 > 63){
 80044f2:	7bbb      	ldrb	r3, [r7, #14]
 80044f4:	2b3f      	cmp	r3, #63	; 0x3f
 80044f6:	d901      	bls.n	80044fc <OLED_AddrWindow+0x3a>
		y1 = 63;
 80044f8:	233f      	movs	r3, #63	; 0x3f
 80044fa:	73bb      	strb	r3, [r7, #14]
	}

	uint8_t x2 = x + w - 1;
 80044fc:	79fa      	ldrb	r2, [r7, #7]
 80044fe:	797b      	ldrb	r3, [r7, #5]
 8004500:	4413      	add	r3, r2
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	737b      	strb	r3, [r7, #13]
	uint8_t y2 = y + h - 1;
 8004508:	79ba      	ldrb	r2, [r7, #6]
 800450a:	793b      	ldrb	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	733b      	strb	r3, [r7, #12]
	if(x2>95)
 8004514:	7b7b      	ldrb	r3, [r7, #13]
 8004516:	2b5f      	cmp	r3, #95	; 0x5f
 8004518:	d901      	bls.n	800451e <OLED_AddrWindow+0x5c>
		x2 = 95;
 800451a:	235f      	movs	r3, #95	; 0x5f
 800451c:	737b      	strb	r3, [r7, #13]
	if(y2>63)
 800451e:	7b3b      	ldrb	r3, [r7, #12]
 8004520:	2b3f      	cmp	r3, #63	; 0x3f
 8004522:	d901      	bls.n	8004528 <OLED_AddrWindow+0x66>
		y2 = 63;
 8004524:	233f      	movs	r3, #63	; 0x3f
 8004526:	733b      	strb	r3, [r7, #12]

	if(x1>x2){
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	7b7b      	ldrb	r3, [r7, #13]
 800452c:	429a      	cmp	r2, r3
 800452e:	d905      	bls.n	800453c <OLED_AddrWindow+0x7a>
		uint8_t temp = x2;
 8004530:	7b7b      	ldrb	r3, [r7, #13]
 8004532:	72fb      	strb	r3, [r7, #11]
		x2=x1;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	737b      	strb	r3, [r7, #13]
		x1=temp;
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	73fb      	strb	r3, [r7, #15]
	}
	if(y1>y2){
 800453c:	7bba      	ldrb	r2, [r7, #14]
 800453e:	7b3b      	ldrb	r3, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d905      	bls.n	8004550 <OLED_AddrWindow+0x8e>
		uint8_t temp = y2;
 8004544:	7b3b      	ldrb	r3, [r7, #12]
 8004546:	72bb      	strb	r3, [r7, #10]
		y2=y1;
 8004548:	7bbb      	ldrb	r3, [r7, #14]
 800454a:	733b      	strb	r3, [r7, #12]
		y1=temp;
 800454c:	7abb      	ldrb	r3, [r7, #10]
 800454e:	73bb      	strb	r3, [r7, #14]
	}

	OLED_WriteCommand(0x15);
 8004550:	2015      	movs	r0, #21
 8004552:	f7ff fedf 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(x1);
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fedb 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(x2);
 800455e:	7b7b      	ldrb	r3, [r7, #13]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fed7 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(0x75);
 8004566:	2075      	movs	r0, #117	; 0x75
 8004568:	f7ff fed4 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(y1);
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fed0 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(y2);
 8004574:	7b3b      	ldrb	r3, [r7, #12]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fecc 	bl	8004314 <OLED_WriteCommand>
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bd90      	pop	{r4, r7, pc}

08004584 <OLED_Rectangle>:



void OLED_Rectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int32_t color){
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	4623      	mov	r3, r4
 8004594:	71fb      	strb	r3, [r7, #7]
 8004596:	4603      	mov	r3, r0
 8004598:	71bb      	strb	r3, [r7, #6]
 800459a:	460b      	mov	r3, r1
 800459c:	717b      	strb	r3, [r7, #5]
 800459e:	4613      	mov	r3, r2
 80045a0:	713b      	strb	r3, [r7, #4]
	OLED_AddrWindow(x, y, w, h);
 80045a2:	793b      	ldrb	r3, [r7, #4]
 80045a4:	797a      	ldrb	r2, [r7, #5]
 80045a6:	79b9      	ldrb	r1, [r7, #6]
 80045a8:	79f8      	ldrb	r0, [r7, #7]
 80045aa:	f7ff ff8a 	bl	80044c2 <OLED_AddrWindow>
	uint32_t red = (color >> 19) & 0x1F;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	14db      	asrs	r3, r3, #19
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	61bb      	str	r3, [r7, #24]
	uint32_t gre = (color >> 10) & 0x3F;
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	129b      	asrs	r3, r3, #10
 80045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c0:	617b      	str	r3, [r7, #20]
	uint32_t blu = (color >> 3) & 0x1F;
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	10db      	asrs	r3, r3, #3
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	613b      	str	r3, [r7, #16]
	uint32_t data = (red << 11) | (gre << 5) | blu;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	02da      	lsls	r2, r3, #11
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	015b      	lsls	r3, r3, #5
 80045d4:	4313      	orrs	r3, r2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
	uint16_t size = (uint32_t)w * (uint32_t)h;
 80045dc:	797b      	ldrb	r3, [r7, #5]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	793b      	ldrb	r3, [r7, #4]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	fb12 f303 	smulbb	r3, r2, r3
 80045e8:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<size; i++){
 80045ea:	2300      	movs	r3, #0
 80045ec:	83fb      	strh	r3, [r7, #30]
 80045ee:	e00d      	b.n	800460c <OLED_Rectangle+0x88>
		OLED_WriteData(data >> 8);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fe9c 	bl	8004334 <OLED_WriteData>
		OLED_WriteData(data & 0xFF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fe97 	bl	8004334 <OLED_WriteData>
	for(uint16_t i=0; i<size; i++){
 8004606:	8bfb      	ldrh	r3, [r7, #30]
 8004608:	3301      	adds	r3, #1
 800460a:	83fb      	strh	r3, [r7, #30]
 800460c:	8bfa      	ldrh	r2, [r7, #30]
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	429a      	cmp	r2, r3
 8004612:	d3ed      	bcc.n	80045f0 <OLED_Rectangle+0x6c>
	}
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}

0800461e <OLED_Dot>:


void OLED_Dot(uint8_t x,uint8_t y,uint8_t size, uint32_t color){
 800461e:	b590      	push	{r4, r7, lr}
 8004620:	b085      	sub	sp, #20
 8004622:	af02      	add	r7, sp, #8
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
 800462a:	460b      	mov	r3, r1
 800462c:	71bb      	strb	r3, [r7, #6]
 800462e:	4613      	mov	r3, r2
 8004630:	717b      	strb	r3, [r7, #5]
	OLED_Rectangle(x, y, size, size, color);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	797c      	ldrb	r4, [r7, #5]
 8004636:	797a      	ldrb	r2, [r7, #5]
 8004638:	79b9      	ldrb	r1, [r7, #6]
 800463a:	79f8      	ldrb	r0, [r7, #7]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4623      	mov	r3, r4
 8004640:	f7ff ffa0 	bl	8004584 <OLED_Rectangle>
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}

0800464c <OLED_WriteChar>:


void OLED_WriteChar(int16_t ch){
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]
	if(ch <= -1 && ch >= -3){
 8004656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800465a:	2b00      	cmp	r3, #0
 800465c:	da09      	bge.n	8004672 <OLED_WriteChar+0x26>
 800465e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004662:	f113 0f03 	cmn.w	r3, #3
 8004666:	db04      	blt.n	8004672 <OLED_WriteChar+0x26>
		ch = 131 + ch;
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	3383      	adds	r3, #131	; 0x83
 800466c:	b29b      	uxth	r3, r3
 800466e:	80fb      	strh	r3, [r7, #6]
 8004670:	e009      	b.n	8004686 <OLED_WriteChar+0x3a>
	}
	else if(ch < 32 || ch >= 128){
 8004672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004676:	2b1f      	cmp	r3, #31
 8004678:	dd03      	ble.n	8004682 <OLED_WriteChar+0x36>
 800467a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800467e:	2b7f      	cmp	r3, #127	; 0x7f
 8004680:	dd01      	ble.n	8004686 <OLED_WriteChar+0x3a>
		ch = 63;
 8004682:	233f      	movs	r3, #63	; 0x3f
 8004684:	80fb      	strh	r3, [r7, #6]
	}

	ch -= 32;
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	3b20      	subs	r3, #32
 800468a:	b29b      	uxth	r3, r3
 800468c:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<5; i++){
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e03d      	b.n	8004710 <OLED_WriteChar+0xc4>
		uint8_t byte = characters[ch * 5 + i];
 8004694:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a25      	ldr	r2, [pc, #148]	; (8004738 <OLED_WriteChar+0xec>)
 80046a4:	5cd3      	ldrb	r3, [r2, r3]
 80046a6:	737b      	strb	r3, [r7, #13]
		for(uint8_t j=0; j<8; j++){
 80046a8:	2300      	movs	r3, #0
 80046aa:	73bb      	strb	r3, [r7, #14]
 80046ac:	e02a      	b.n	8004704 <OLED_WriteChar+0xb8>
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 80046ae:	4b23      	ldr	r3, [pc, #140]	; (800473c <OLED_WriteChar+0xf0>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	fb12 f303 	smulbb	r3, r2, r3
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b21      	ldr	r3, [pc, #132]	; (8004740 <OLED_WriteChar+0xf4>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	b2d8      	uxtb	r0, r3
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <OLED_WriteChar+0xf0>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	7bba      	ldrb	r2, [r7, #14]
 80046c8:	fb12 f303 	smulbb	r3, r2, r3
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <OLED_WriteChar+0xf8>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	4413      	add	r3, r2
 80046d4:	b2d9      	uxtb	r1, r3
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <OLED_WriteChar+0xf0>)
 80046d8:	781c      	ldrb	r4, [r3, #0]
					((byte>>(7-j))&0x01) ? OLED_charColor : OLED_bgColor);
 80046da:	7b7a      	ldrb	r2, [r7, #13]
 80046dc:	7bbb      	ldrb	r3, [r7, #14]
 80046de:	f1c3 0307 	rsb	r3, r3, #7
 80046e2:	fa42 f303 	asr.w	r3, r2, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <OLED_WriteChar+0xa8>
 80046ee:	4b16      	ldr	r3, [pc, #88]	; (8004748 <OLED_WriteChar+0xfc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	e001      	b.n	80046f8 <OLED_WriteChar+0xac>
 80046f4:	4b15      	ldr	r3, [pc, #84]	; (800474c <OLED_WriteChar+0x100>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4622      	mov	r2, r4
 80046fa:	f7ff ff90 	bl	800461e <OLED_Dot>
		for(uint8_t j=0; j<8; j++){
 80046fe:	7bbb      	ldrb	r3, [r7, #14]
 8004700:	3301      	adds	r3, #1
 8004702:	73bb      	strb	r3, [r7, #14]
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b07      	cmp	r3, #7
 8004708:	d9d1      	bls.n	80046ae <OLED_WriteChar+0x62>
	for(uint8_t i=0; i<5; i++){
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	3301      	adds	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d9be      	bls.n	8004694 <OLED_WriteChar+0x48>
		}
	}
	OLED_col += 6 * OLED_charPoint;
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <OLED_WriteChar+0xf0>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	0052      	lsls	r2, r2, #1
 800471e:	4413      	add	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <OLED_WriteChar+0xf4>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4413      	add	r3, r2
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <OLED_WriteChar+0xf4>)
 800472e:	701a      	strb	r2, [r3, #0]

}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bd90      	pop	{r4, r7, pc}
 8004738:	20000014 	.word	0x20000014
 800473c:	20000010 	.word	0x20000010
 8004740:	2000000a 	.word	0x2000000a
 8004744:	20000009 	.word	0x20000009
 8004748:	2000000c 	.word	0x2000000c
 800474c:	20000490 	.word	0x20000490

08004750 <str2hex>:


static int str2hex(char * str){
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	int result = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	e049      	b.n	80047f6 <str2hex+0xa6>
		if(str[i] >= '0' && str[i] <= '9'){
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b2f      	cmp	r3, #47	; 0x2f
 800476c:	d911      	bls.n	8004792 <str2hex+0x42>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b39      	cmp	r3, #57	; 0x39
 8004778:	d80b      	bhi.n	8004792 <str2hex+0x42>
			result <<= 4;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
			result |= str[i] - '0';
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	3b30      	subs	r3, #48	; 0x30
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e02e      	b.n	80047f0 <str2hex+0xa0>
		}
		else if(str[i] >= 'A' && str[i] <= 'F'){
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d911      	bls.n	80047c2 <str2hex+0x72>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b46      	cmp	r3, #70	; 0x46
 80047a8:	d80b      	bhi.n	80047c2 <str2hex+0x72>
			result <<= 4;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'A' + 10;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	3b37      	subs	r3, #55	; 0x37
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e016      	b.n	80047f0 <str2hex+0xa0>
		}
		else if(str[i] >= 'a' && str[i] <= 'f'){
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b60      	cmp	r3, #96	; 0x60
 80047cc:	d910      	bls.n	80047f0 <str2hex+0xa0>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b66      	cmp	r3, #102	; 0x66
 80047d8:	d80a      	bhi.n	80047f0 <str2hex+0xa0>
			result <<= 4;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'a' + 10;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	3b57      	subs	r3, #87	; 0x57
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1af      	bne.n	8004762 <str2hex+0x12>
		}
	}
	return result;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <OLED_Printf>:

#define OLED
void OLED_Printf(const char * format, ...){
 8004810:	b40f      	push	{r0, r1, r2, r3}
 8004812:	b580      	push	{r7, lr}
 8004814:	b0c4      	sub	sp, #272	; 0x110
 8004816:	af00      	add	r7, sp, #0
	/*
	 * buffer를 많이 할당받거나 static으로 선언하면 좋겠지만, 보통 프로세스당 4GB의 메모리를 가지는 일반 컴퓨터와 다르게
	 * STM32F411의 경우 전체 메모리 공간이 오직 128kB의 저장용량만 가지므로 메모리 공간을 아껴 써야 한다.
	 */
	char buffer[256] = { 0 };
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	3304      	adds	r3, #4
 8004822:	22fc      	movs	r2, #252	; 0xfc
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f001 fa80 	bl	8005d2c <memset>

	// 가변 인자를 받아서 buffer에 쓴다.
	va_list args;
	va_start(args, format);
 800482c:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	f107 000c 	add.w	r0, r7, #12
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004844:	f001 ffd8 	bl	80067f8 <vsiprintf>
//#ifdef OLED
//	oled_row = 0;
//	oled_col = 0;
//#endif
	// 줄바꿈 기호인 /0, /1을 만나면 커서 위치를 설정해주는 부분.
	for (char *c = buffer; *c; c++) {
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004850:	e2da      	b.n	8004e08 <OLED_Printf+0x5f8>
		if (*c == '/' && (*(c + 1) >= '0' && *(c + 1) <= '6')) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 8004852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b2f      	cmp	r3, #47	; 0x2f
 800485a:	d13c      	bne.n	80048d6 <OLED_Printf+0xc6>
 800485c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004860:	3301      	adds	r3, #1
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b2f      	cmp	r3, #47	; 0x2f
 8004866:	d936      	bls.n	80048d6 <OLED_Printf+0xc6>
 8004868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486c:	3301      	adds	r3, #1
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b36      	cmp	r3, #54	; 0x36
 8004872:	d830      	bhi.n	80048d6 <OLED_Printf+0xc6>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 8004874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004878:	3301      	adds	r3, #1
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	3b30      	subs	r3, #48	; 0x30
 800487e:	b2da      	uxtb	r2, r3
 8004880:	4bb9      	ldr	r3, [pc, #740]	; (8004b68 <OLED_Printf+0x358>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	fb12 f303 	smulbb	r3, r2, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	00d2      	lsls	r2, r2, #3
 800488e:	4413      	add	r3, r2
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3301      	adds	r3, #1
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4bb5      	ldr	r3, [pc, #724]	; (8004b6c <OLED_Printf+0x35c>)
 8004898:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 800489a:	4bb4      	ldr	r3, [pc, #720]	; (8004b6c <OLED_Printf+0x35c>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b3c      	cmp	r3, #60	; 0x3c
 80048a0:	d807      	bhi.n	80048b2 <OLED_Printf+0xa2>
 80048a2:	4bb2      	ldr	r3, [pc, #712]	; (8004b6c <OLED_Printf+0x35c>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b35      	cmp	r3, #53	; 0x35
 80048a8:	d90c      	bls.n	80048c4 <OLED_Printf+0xb4>
 80048aa:	4baf      	ldr	r3, [pc, #700]	; (8004b68 <OLED_Printf+0x358>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d108      	bne.n	80048c4 <OLED_Printf+0xb4>
				OLED_row = 18 * OLED_charPoint;
 80048b2:	4bad      	ldr	r3, [pc, #692]	; (8004b68 <OLED_Printf+0x358>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	00d2      	lsls	r2, r2, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	4baa      	ldr	r3, [pc, #680]	; (8004b6c <OLED_Printf+0x35c>)
 80048c2:	701a      	strb	r2, [r3, #0]
			}
			OLED_col = 1;
 80048c4:	4baa      	ldr	r3, [pc, #680]	; (8004b70 <OLED_Printf+0x360>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
			c += 1;
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	3301      	adds	r3, #1
 80048d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80048d4:	e293      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b2f      	cmp	r3, #47	; 0x2f
 80048de:	d125      	bne.n	800492c <OLED_Printf+0x11c>
 80048e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e4:	3301      	adds	r3, #1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b23      	cmp	r3, #35	; 0x23
 80048ea:	d11f      	bne.n	800492c <OLED_Printf+0x11c>
			char str[7] = {0,0,0,0,0,0,0};
 80048ec:	463b      	mov	r3, r7
 80048ee:	4aa1      	ldr	r2, [pc, #644]	; (8004b74 <OLED_Printf+0x364>)
 80048f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048f4:	6018      	str	r0, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	8019      	strh	r1, [r3, #0]
 80048fa:	3302      	adds	r3, #2
 80048fc:	0c0a      	lsrs	r2, r1, #16
 80048fe:	701a      	strb	r2, [r3, #0]
			strncpy(str, c+2, 6);
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004904:	1c99      	adds	r1, r3, #2
 8004906:	463b      	mov	r3, r7
 8004908:	2206      	movs	r2, #6
 800490a:	4618      	mov	r0, r3
 800490c:	f001 ff4a 	bl	80067a4 <strncpy>
			OLED_charColor = str2hex(str);
 8004910:	463b      	mov	r3, r7
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff1c 	bl	8004750 <str2hex>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	4b96      	ldr	r3, [pc, #600]	; (8004b78 <OLED_Printf+0x368>)
 800491e:	601a      	str	r2, [r3, #0]
			c += 7;
 8004920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004924:	3307      	adds	r3, #7
 8004926:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800492a:	e268      	b.n	8004dfe <OLED_Printf+0x5ee>
			continue;
		}
		else if (*c == '/' && *(c + 1) == 'S'){
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b2f      	cmp	r3, #47	; 0x2f
 8004934:	d10e      	bne.n	8004954 <OLED_Printf+0x144>
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493a:	3301      	adds	r3, #1
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b53      	cmp	r3, #83	; 0x53
 8004940:	d108      	bne.n	8004954 <OLED_Printf+0x144>
			//Size Big
			OLED_charPoint = 2;
 8004942:	4b89      	ldr	r3, [pc, #548]	; (8004b68 <OLED_Printf+0x358>)
 8004944:	2202      	movs	r2, #2
 8004946:	701a      	strb	r2, [r3, #0]
			c += 1;
 8004948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494c:	3301      	adds	r3, #1
 800494e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004952:	e254      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 's'){
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b2f      	cmp	r3, #47	; 0x2f
 800495c:	d10e      	bne.n	800497c <OLED_Printf+0x16c>
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	3301      	adds	r3, #1
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b73      	cmp	r3, #115	; 0x73
 8004968:	d108      	bne.n	800497c <OLED_Printf+0x16c>
			//Size Big
			OLED_charPoint = 1;
 800496a:	4b7f      	ldr	r3, [pc, #508]	; (8004b68 <OLED_Printf+0x358>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
			c += 1;
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	3301      	adds	r3, #1
 8004976:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800497a:	e240      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'r'){//RGBCMY는 오직 2색 이상 OLED만 지원(예외로 노랑색 라인이 있는 파랑 OLED는 조금 다르게 취급)
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b2f      	cmp	r3, #47	; 0x2f
 8004984:	d10f      	bne.n	80049a6 <OLED_Printf+0x196>
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498a:	3301      	adds	r3, #1
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b72      	cmp	r3, #114	; 0x72
 8004990:	d109      	bne.n	80049a6 <OLED_Printf+0x196>
			OLED_charColor = 0xFF0000;
 8004992:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <OLED_Printf+0x368>)
 8004994:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8004998:	601a      	str	r2, [r3, #0]
			c += 1;
 800499a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499e:	3301      	adds	r3, #1
 80049a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80049a4:	e22b      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'g'){
 80049a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b2f      	cmp	r3, #47	; 0x2f
 80049ae:	d10f      	bne.n	80049d0 <OLED_Printf+0x1c0>
 80049b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b4:	3301      	adds	r3, #1
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b67      	cmp	r3, #103	; 0x67
 80049ba:	d109      	bne.n	80049d0 <OLED_Printf+0x1c0>
			OLED_charColor = 0x00FF00;
 80049bc:	4b6e      	ldr	r3, [pc, #440]	; (8004b78 <OLED_Printf+0x368>)
 80049be:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80049c2:	601a      	str	r2, [r3, #0]
			c += 1;
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c8:	3301      	adds	r3, #1
 80049ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80049ce:	e216      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'b'){
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b2f      	cmp	r3, #47	; 0x2f
 80049d8:	d10e      	bne.n	80049f8 <OLED_Printf+0x1e8>
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	3301      	adds	r3, #1
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b62      	cmp	r3, #98	; 0x62
 80049e4:	d108      	bne.n	80049f8 <OLED_Printf+0x1e8>
			OLED_charColor = 0x0000FF;
 80049e6:	4b64      	ldr	r3, [pc, #400]	; (8004b78 <OLED_Printf+0x368>)
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	601a      	str	r2, [r3, #0]
			c += 1;
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	3301      	adds	r3, #1
 80049f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80049f6:	e202      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'y'){
 80049f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b2f      	cmp	r3, #47	; 0x2f
 8004a00:	d10e      	bne.n	8004a20 <OLED_Printf+0x210>
 8004a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a06:	3301      	adds	r3, #1
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b79      	cmp	r3, #121	; 0x79
 8004a0c:	d108      	bne.n	8004a20 <OLED_Printf+0x210>
			OLED_charColor = 0xFFFF00;
 8004a0e:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <OLED_Printf+0x368>)
 8004a10:	4a5a      	ldr	r2, [pc, #360]	; (8004b7c <OLED_Printf+0x36c>)
 8004a12:	601a      	str	r2, [r3, #0]
			c += 1;
 8004a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004a1e:	e1ee      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'c'){
 8004a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b2f      	cmp	r3, #47	; 0x2f
 8004a28:	d10f      	bne.n	8004a4a <OLED_Printf+0x23a>
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2e:	3301      	adds	r3, #1
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b63      	cmp	r3, #99	; 0x63
 8004a34:	d109      	bne.n	8004a4a <OLED_Printf+0x23a>
			OLED_charColor = 0x00FFFF;
 8004a36:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <OLED_Printf+0x368>)
 8004a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a3c:	601a      	str	r2, [r3, #0]
			c += 1;
 8004a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a42:	3301      	adds	r3, #1
 8004a44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004a48:	e1d9      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'm'){
 8004a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b2f      	cmp	r3, #47	; 0x2f
 8004a52:	d10f      	bne.n	8004a74 <OLED_Printf+0x264>
 8004a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a58:	3301      	adds	r3, #1
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b6d      	cmp	r3, #109	; 0x6d
 8004a5e:	d109      	bne.n	8004a74 <OLED_Printf+0x264>
			OLED_charColor = 0xFF00FF;
 8004a60:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <OLED_Printf+0x368>)
 8004a62:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8004a66:	601a      	str	r2, [r3, #0]
			c += 1;
 8004a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004a72:	e1c4      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'w'){//White는 단색 OLED에서는 켜짐을 의미
 8004a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b2f      	cmp	r3, #47	; 0x2f
 8004a7c:	d10f      	bne.n	8004a9e <OLED_Printf+0x28e>
 8004a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a82:	3301      	adds	r3, #1
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b77      	cmp	r3, #119	; 0x77
 8004a88:	d109      	bne.n	8004a9e <OLED_Printf+0x28e>
			OLED_charColor = 0xFFFFFF;
 8004a8a:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <OLED_Printf+0x368>)
 8004a8c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004a90:	601a      	str	r2, [r3, #0]
			c += 1;
 8004a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a96:	3301      	adds	r3, #1
 8004a98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004a9c:	e1af      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'k'){//key color는 단색 OLED에서도 지원
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8004aa6:	d10f      	bne.n	8004ac8 <OLED_Printf+0x2b8>
 8004aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aac:	3301      	adds	r3, #1
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b6b      	cmp	r3, #107	; 0x6b
 8004ab2:	d109      	bne.n	8004ac8 <OLED_Printf+0x2b8>
			OLED_charColor = 0xFFFFFF;
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <OLED_Printf+0x368>)
 8004ab6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004aba:	601a      	str	r2, [r3, #0]
			c += 1;
 8004abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004ac6:	e19a      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'R'){
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b2f      	cmp	r3, #47	; 0x2f
 8004ad0:	d10e      	bne.n	8004af0 <OLED_Printf+0x2e0>
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b52      	cmp	r3, #82	; 0x52
 8004adc:	d108      	bne.n	8004af0 <OLED_Printf+0x2e0>
			OLED_charColor = 0xFF7777;
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <OLED_Printf+0x368>)
 8004ae0:	4a27      	ldr	r2, [pc, #156]	; (8004b80 <OLED_Printf+0x370>)
 8004ae2:	601a      	str	r2, [r3, #0]
			c += 1;
 8004ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004aee:	e186      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'G'){
 8004af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b2f      	cmp	r3, #47	; 0x2f
 8004af8:	d10e      	bne.n	8004b18 <OLED_Printf+0x308>
 8004afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afe:	3301      	adds	r3, #1
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b47      	cmp	r3, #71	; 0x47
 8004b04:	d108      	bne.n	8004b18 <OLED_Printf+0x308>
			OLED_charColor = 0x77FF77;
 8004b06:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <OLED_Printf+0x368>)
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <OLED_Printf+0x374>)
 8004b0a:	601a      	str	r2, [r3, #0]
			c += 1;
 8004b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b10:	3301      	adds	r3, #1
 8004b12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004b16:	e172      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'B'){
 8004b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b2f      	cmp	r3, #47	; 0x2f
 8004b20:	d10e      	bne.n	8004b40 <OLED_Printf+0x330>
 8004b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b26:	3301      	adds	r3, #1
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b42      	cmp	r3, #66	; 0x42
 8004b2c:	d108      	bne.n	8004b40 <OLED_Printf+0x330>
			OLED_charColor = 0x7777FF;
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <OLED_Printf+0x368>)
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <OLED_Printf+0x378>)
 8004b32:	601a      	str	r2, [r3, #0]
			c += 1;
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b38:	3301      	adds	r3, #1
 8004b3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004b3e:	e15e      	b.n	8004dfe <OLED_Printf+0x5ee>
		}

		//Additional Color : 비표준 색상입니다.
		else if (*c == '/' && *(c + 1) == 'o'){
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b2f      	cmp	r3, #47	; 0x2f
 8004b48:	d122      	bne.n	8004b90 <OLED_Printf+0x380>
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	3301      	adds	r3, #1
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b6f      	cmp	r3, #111	; 0x6f
 8004b54:	d11c      	bne.n	8004b90 <OLED_Printf+0x380>
			OLED_charColor = 0xFF7700;
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <OLED_Printf+0x368>)
 8004b58:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <OLED_Printf+0x37c>)
 8004b5a:	601a      	str	r2, [r3, #0]
			c += 1;
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b60:	3301      	adds	r3, #1
 8004b62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004b66:	e14a      	b.n	8004dfe <OLED_Printf+0x5ee>
 8004b68:	20000010 	.word	0x20000010
 8004b6c:	20000009 	.word	0x20000009
 8004b70:	2000000a 	.word	0x2000000a
 8004b74:	08008a98 	.word	0x08008a98
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	00ffff00 	.word	0x00ffff00
 8004b80:	00ff7777 	.word	0x00ff7777
 8004b84:	0077ff77 	.word	0x0077ff77
 8004b88:	007777ff 	.word	0x007777ff
 8004b8c:	00ff7700 	.word	0x00ff7700
		}
		else if (*c == '/' && *(c + 1) == 'l'){
 8004b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b2f      	cmp	r3, #47	; 0x2f
 8004b98:	d10e      	bne.n	8004bb8 <OLED_Printf+0x3a8>
 8004b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b6c      	cmp	r3, #108	; 0x6c
 8004ba4:	d108      	bne.n	8004bb8 <OLED_Printf+0x3a8>
			OLED_charColor = 0x77FF00;
 8004ba6:	4ba0      	ldr	r3, [pc, #640]	; (8004e28 <OLED_Printf+0x618>)
 8004ba8:	4aa0      	ldr	r2, [pc, #640]	; (8004e2c <OLED_Printf+0x61c>)
 8004baa:	601a      	str	r2, [r3, #0]
			c += 1;
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004bb6:	e122      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 't'){
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8004bc0:	d10f      	bne.n	8004be2 <OLED_Printf+0x3d2>
 8004bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b74      	cmp	r3, #116	; 0x74
 8004bcc:	d109      	bne.n	8004be2 <OLED_Printf+0x3d2>
			OLED_charColor = 0x00FF77;
 8004bce:	4b96      	ldr	r3, [pc, #600]	; (8004e28 <OLED_Printf+0x618>)
 8004bd0:	f64f 7277 	movw	r2, #65399	; 0xff77
 8004bd4:	601a      	str	r2, [r3, #0]
			c += 1;
 8004bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004be0:	e10d      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'e'){
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b2f      	cmp	r3, #47	; 0x2f
 8004bea:	d10f      	bne.n	8004c0c <OLED_Printf+0x3fc>
 8004bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b65      	cmp	r3, #101	; 0x65
 8004bf6:	d109      	bne.n	8004c0c <OLED_Printf+0x3fc>
			OLED_charColor = 0x0077FF;
 8004bf8:	4b8b      	ldr	r3, [pc, #556]	; (8004e28 <OLED_Printf+0x618>)
 8004bfa:	f247 72ff 	movw	r2, #30719	; 0x77ff
 8004bfe:	601a      	str	r2, [r3, #0]
			c += 1;
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c04:	3301      	adds	r3, #1
 8004c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004c0a:	e0f8      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'p'){
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b2f      	cmp	r3, #47	; 0x2f
 8004c14:	d10e      	bne.n	8004c34 <OLED_Printf+0x424>
 8004c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b70      	cmp	r3, #112	; 0x70
 8004c20:	d108      	bne.n	8004c34 <OLED_Printf+0x424>
			OLED_charColor = 0x7700FF;
 8004c22:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <OLED_Printf+0x618>)
 8004c24:	4a82      	ldr	r2, [pc, #520]	; (8004e30 <OLED_Printf+0x620>)
 8004c26:	601a      	str	r2, [r3, #0]
			c += 1;
 8004c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004c32:	e0e4      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'M'){
 8004c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c3c:	d10e      	bne.n	8004c5c <OLED_Printf+0x44c>
 8004c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c42:	3301      	adds	r3, #1
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b4d      	cmp	r3, #77	; 0x4d
 8004c48:	d108      	bne.n	8004c5c <OLED_Printf+0x44c>
			OLED_charColor = 0xFF0077;
 8004c4a:	4b77      	ldr	r3, [pc, #476]	; (8004e28 <OLED_Printf+0x618>)
 8004c4c:	4a79      	ldr	r2, [pc, #484]	; (8004e34 <OLED_Printf+0x624>)
 8004c4e:	601a      	str	r2, [r3, #0]
			c += 1;
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c54:	3301      	adds	r3, #1
 8004c56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004c5a:	e0d0      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'A'){
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b2f      	cmp	r3, #47	; 0x2f
 8004c64:	d10e      	bne.n	8004c84 <OLED_Printf+0x474>
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b41      	cmp	r3, #65	; 0x41
 8004c70:	d108      	bne.n	8004c84 <OLED_Printf+0x474>
			OLED_charColor = 0x888888;
 8004c72:	4b6d      	ldr	r3, [pc, #436]	; (8004e28 <OLED_Printf+0x618>)
 8004c74:	4a70      	ldr	r2, [pc, #448]	; (8004e38 <OLED_Printf+0x628>)
 8004c76:	601a      	str	r2, [r3, #0]
			c += 1;
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004c82:	e0bc      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		else if (*c == '/' && *(c + 1) == 'a'){
 8004c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c8c:	d10e      	bne.n	8004cac <OLED_Printf+0x49c>
 8004c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c92:	3301      	adds	r3, #1
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b61      	cmp	r3, #97	; 0x61
 8004c98:	d108      	bne.n	8004cac <OLED_Printf+0x49c>
			OLED_charColor = 0x444444;
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <OLED_Printf+0x618>)
 8004c9c:	4a67      	ldr	r2, [pc, #412]	; (8004e3c <OLED_Printf+0x62c>)
 8004c9e:	601a      	str	r2, [r3, #0]
			c += 1;
 8004ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8004caa:	e0a8      	b.n	8004dfe <OLED_Printf+0x5ee>
		}

		else if (*c == '/' && *(c + 1) == '/'){
 8004cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b2f      	cmp	r3, #47	; 0x2f
 8004cb4:	d10a      	bne.n	8004ccc <OLED_Printf+0x4bc>
 8004cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cba:	3301      	adds	r3, #1
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b2f      	cmp	r3, #47	; 0x2f
 8004cc0:	d104      	bne.n	8004ccc <OLED_Printf+0x4bc>
			c += 1;
 8004cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		// \n, \r 등은 깨져서 출력되므로 무시한다.
		if (*c == '\r') continue;
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b0d      	cmp	r3, #13
 8004cd4:	f000 8092 	beq.w	8004dfc <OLED_Printf+0x5ec>
		if (*c == '\n') {
 8004cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b0a      	cmp	r3, #10
 8004ce0:	d10f      	bne.n	8004d02 <OLED_Printf+0x4f2>
			OLED_row += 9 * OLED_charPoint;
 8004ce2:	4b57      	ldr	r3, [pc, #348]	; (8004e40 <OLED_Printf+0x630>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	00d2      	lsls	r2, r2, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <OLED_Printf+0x634>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b53      	ldr	r3, [pc, #332]	; (8004e44 <OLED_Printf+0x634>)
 8004cf8:	701a      	strb	r2, [r3, #0]
			OLED_col = 1;
 8004cfa:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <OLED_Printf+0x638>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
			continue;
 8004d00:	e07d      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		if (*c == '\t') {
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b09      	cmp	r3, #9
 8004d0a:	d130      	bne.n	8004d6e <OLED_Printf+0x55e>
			if(OLED_col < 25 && OLED_charPoint == 1){
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <OLED_Printf+0x638>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b18      	cmp	r3, #24
 8004d12:	d807      	bhi.n	8004d24 <OLED_Printf+0x514>
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <OLED_Printf+0x630>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d103      	bne.n	8004d24 <OLED_Printf+0x514>
				OLED_col = 25;
 8004d1c:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <OLED_Printf+0x638>)
 8004d1e:	2219      	movs	r2, #25
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e023      	b.n	8004d6c <OLED_Printf+0x55c>
			}
			else if(OLED_col < 49){
 8004d24:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <OLED_Printf+0x638>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d803      	bhi.n	8004d34 <OLED_Printf+0x524>
				OLED_col = 49;
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <OLED_Printf+0x638>)
 8004d2e:	2231      	movs	r2, #49	; 0x31
 8004d30:	701a      	strb	r2, [r3, #0]
			}
			else{
				OLED_col = 1;
				OLED_row += 9 * OLED_charPoint;
			}
			continue;
 8004d32:	e064      	b.n	8004dfe <OLED_Printf+0x5ee>
			else if(OLED_col < 73 && OLED_charPoint == 1){
 8004d34:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <OLED_Printf+0x638>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b48      	cmp	r3, #72	; 0x48
 8004d3a:	d807      	bhi.n	8004d4c <OLED_Printf+0x53c>
 8004d3c:	4b40      	ldr	r3, [pc, #256]	; (8004e40 <OLED_Printf+0x630>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d103      	bne.n	8004d4c <OLED_Printf+0x53c>
				OLED_col = 75;
 8004d44:	4b40      	ldr	r3, [pc, #256]	; (8004e48 <OLED_Printf+0x638>)
 8004d46:	224b      	movs	r2, #75	; 0x4b
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e00f      	b.n	8004d6c <OLED_Printf+0x55c>
				OLED_col = 1;
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <OLED_Printf+0x638>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
				OLED_row += 9 * OLED_charPoint;
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <OLED_Printf+0x630>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	00d2      	lsls	r2, r2, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <OLED_Printf+0x634>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	4413      	add	r3, r2
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	4b37      	ldr	r3, [pc, #220]	; (8004e44 <OLED_Printf+0x634>)
 8004d68:	701a      	strb	r2, [r3, #0]
			continue;
 8004d6a:	e048      	b.n	8004dfe <OLED_Printf+0x5ee>
 8004d6c:	e047      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		if (*c == '/' && *(c+1) == '*'){
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b2f      	cmp	r3, #47	; 0x2f
 8004d76:	d10f      	bne.n	8004d98 <OLED_Printf+0x588>
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b2a      	cmp	r3, #42	; 0x2a
 8004d82:	d109      	bne.n	8004d98 <OLED_Printf+0x588>
			c += 1;
 8004d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-1);
 8004d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d92:	f7ff fc5b 	bl	800464c <OLED_WriteChar>
			continue;
 8004d96:	e032      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		if (*c == '/' && *(c+1) == 'q'){
 8004d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b2f      	cmp	r3, #47	; 0x2f
 8004da0:	d10f      	bne.n	8004dc2 <OLED_Printf+0x5b2>
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da6:	3301      	adds	r3, #1
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b71      	cmp	r3, #113	; 0x71
 8004dac:	d109      	bne.n	8004dc2 <OLED_Printf+0x5b2>
			c += 1;
 8004dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db2:	3301      	adds	r3, #1
 8004db4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-2);
 8004db8:	f06f 0001 	mvn.w	r0, #1
 8004dbc:	f7ff fc46 	bl	800464c <OLED_WriteChar>
			continue;
 8004dc0:	e01d      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		if (*c == '/' && *(c+1) == 'Q'){
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b2f      	cmp	r3, #47	; 0x2f
 8004dca:	d10f      	bne.n	8004dec <OLED_Printf+0x5dc>
 8004dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b51      	cmp	r3, #81	; 0x51
 8004dd6:	d109      	bne.n	8004dec <OLED_Printf+0x5dc>
			c += 1;
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-3);
 8004de2:	f06f 0002 	mvn.w	r0, #2
 8004de6:	f7ff fc31 	bl	800464c <OLED_WriteChar>
			continue;
 8004dea:	e008      	b.n	8004dfe <OLED_Printf+0x5ee>
		}
		OLED_WriteChar(*c);
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b21b      	sxth	r3, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fc29 	bl	800464c <OLED_WriteChar>
 8004dfa:	e000      	b.n	8004dfe <OLED_Printf+0x5ee>
		if (*c == '\r') continue;
 8004dfc:	bf00      	nop
	for (char *c = buffer; *c; c++) {
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	3301      	adds	r3, #1
 8004e04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f47f ad1f 	bne.w	8004852 <OLED_Printf+0x42>
	}
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e22:	b004      	add	sp, #16
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2000000c 	.word	0x2000000c
 8004e2c:	0077ff00 	.word	0x0077ff00
 8004e30:	007700ff 	.word	0x007700ff
 8004e34:	00ff0077 	.word	0x00ff0077
 8004e38:	00888888 	.word	0x00888888
 8004e3c:	00444444 	.word	0x00444444
 8004e40:	20000010 	.word	0x20000010
 8004e44:	20000009 	.word	0x20000009
 8004e48:	2000000a 	.word	0x2000000a

08004e4c <OLED_Line>:

void OLED_Line(uint8_t xi, uint8_t yi, uint8_t xe, uint8_t ye, int32_t color){
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	71fb      	strb	r3, [r7, #7]
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71bb      	strb	r3, [r7, #6]
 8004e62:	460b      	mov	r3, r1
 8004e64:	717b      	strb	r3, [r7, #5]
 8004e66:	4613      	mov	r3, r2
 8004e68:	713b      	strb	r3, [r7, #4]
	uint8_t red = (color >> 16) & 0xF8;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	141b      	asrs	r3, r3, #16
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f023 0307 	bic.w	r3, r3, #7
 8004e74:	73fb      	strb	r3, [r7, #15]
	uint8_t gre = (color >> 8) & 0xFC;
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	121b      	asrs	r3, r3, #8
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f023 0303 	bic.w	r3, r3, #3
 8004e80:	73bb      	strb	r3, [r7, #14]
	uint8_t blu = color & 0xF8;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f023 0307 	bic.w	r3, r3, #7
 8004e8a:	737b      	strb	r3, [r7, #13]

	//선을 그리기 위해서는 0x21 신호가 필요합니다.
	OLED_WriteCommand(0x21);
 8004e8c:	2021      	movs	r0, #33	; 0x21
 8004e8e:	f7ff fa41 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(xi);
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fa3d 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(yi);
 8004e9a:	79bb      	ldrb	r3, [r7, #6]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fa39 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(xe);
 8004ea2:	797b      	ldrb	r3, [r7, #5]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fa35 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(ye);
 8004eaa:	793b      	ldrb	r3, [r7, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fa31 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(red>>2);
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	089b      	lsrs	r3, r3, #2
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fa2b 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(gre>>2);
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	089b      	lsrs	r3, r3, #2
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fa25 	bl	8004314 <OLED_WriteCommand>
	OLED_WriteCommand(blu>>2);
 8004eca:	7b7b      	ldrb	r3, [r7, #13]
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fa1f 	bl	8004314 <OLED_WriteCommand>
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
	...

08004ee0 <OLED_MenuUI>:

void OLED_MenuUI(char * title, uint32_t titleBgColor, uint32_t titleTextColor, Menu_t * menu, uint32_t count, uint32_t textColor){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
	OLED_Rectangle(0, 0, 96, 9, titleBgColor);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2309      	movs	r3, #9
 8004ef4:	2260      	movs	r2, #96	; 0x60
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7ff fb43 	bl	8004584 <OLED_Rectangle>
	OLED_row = 1;
 8004efe:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <OLED_MenuUI+0x84>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8004f04:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <OLED_MenuUI+0x88>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
	OLED_charColor = titleTextColor;
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <OLED_MenuUI+0x8c>)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6013      	str	r3, [r2, #0]
	OLED_bgColor = titleBgColor;
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <OLED_MenuUI+0x90>)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6013      	str	r3, [r2, #0]
	OLED_Printf("/s%s\n", title);
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	4816      	ldr	r0, [pc, #88]	; (8004f74 <OLED_MenuUI+0x94>)
 8004f1a:	f7ff fc79 	bl	8004810 <OLED_Printf>
	OLED_charColor = textColor;
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <OLED_MenuUI+0x8c>)
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	6013      	str	r3, [r2, #0]
	OLED_bgColor = 0;
 8004f24:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <OLED_MenuUI+0x90>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < count; i++){
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
 8004f2e:	e00f      	b.n	8004f50 <OLED_MenuUI+0x70>
		OLED_Printf("/s%s\n", menu[i].message);
 8004f30:	7dfa      	ldrb	r2, [r7, #23]
 8004f32:	4613      	mov	r3, r2
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4413      	add	r3, r2
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4619      	mov	r1, r3
 8004f44:	480b      	ldr	r0, [pc, #44]	; (8004f74 <OLED_MenuUI+0x94>)
 8004f46:	f7ff fc63 	bl	8004810 <OLED_Printf>
	for(uint8_t i = 0; i < count; i++){
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	6a3a      	ldr	r2, [r7, #32]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d8eb      	bhi.n	8004f30 <OLED_MenuUI+0x50>
	}
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000009 	.word	0x20000009
 8004f68:	2000000a 	.word	0x2000000a
 8004f6c:	2000000c 	.word	0x2000000c
 8004f70:	20000490 	.word	0x20000490
 8004f74:	08008aa0 	.word	0x08008aa0

08004f78 <OLED_Cursor>:

void OLED_Cursor(uint8_t n, uint32_t color){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
	//Line Erase
	for(uint8_t i = 9; i < 64; i+=9){
 8004f84:	2309      	movs	r3, #9
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e00a      	b.n	8004fa0 <OLED_Cursor+0x28>
		OLED_Line(0, i, 95, i, 0);
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	7bf9      	ldrb	r1, [r7, #15]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	9200      	str	r2, [sp, #0]
 8004f92:	225f      	movs	r2, #95	; 0x5f
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7ff ff59 	bl	8004e4c <OLED_Line>
	for(uint8_t i = 9; i < 64; i+=9){
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	3309      	adds	r3, #9
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b3f      	cmp	r3, #63	; 0x3f
 8004fa4:	d9f1      	bls.n	8004f8a <OLED_Cursor+0x12>
	}
	OLED_Line(0, 9, 0, 63, 0);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	233f      	movs	r3, #63	; 0x3f
 8004fac:	2200      	movs	r2, #0
 8004fae:	2109      	movs	r1, #9
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f7ff ff4b 	bl	8004e4c <OLED_Line>
	OLED_Line(95, 9, 95, 63, 0);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	233f      	movs	r3, #63	; 0x3f
 8004fbc:	225f      	movs	r2, #95	; 0x5f
 8004fbe:	2109      	movs	r1, #9
 8004fc0:	205f      	movs	r0, #95	; 0x5f
 8004fc2:	f7ff ff43 	bl	8004e4c <OLED_Line>

	//Line Drawing
	OLED_Line(0, 9 + 9 * n, 95, 9 + 9 * n, color);
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	00d2      	lsls	r2, r2, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	b2d9      	uxtb	r1, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	00d2      	lsls	r2, r2, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	225f      	movs	r2, #95	; 0x5f
 8004fea:	2000      	movs	r0, #0
 8004fec:	f7ff ff2e 	bl	8004e4c <OLED_Line>
	OLED_Line(0, 18 + 9 * n, 95, 18 + 9 * n, color);
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	00d2      	lsls	r2, r2, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	3312      	adds	r3, #18
 8004ffc:	b2d9      	uxtb	r1, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	461a      	mov	r2, r3
 8005002:	00d2      	lsls	r2, r2, #3
 8005004:	4413      	add	r3, r2
 8005006:	b2db      	uxtb	r3, r3
 8005008:	3312      	adds	r3, #18
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	225f      	movs	r2, #95	; 0x5f
 8005014:	2000      	movs	r0, #0
 8005016:	f7ff ff19 	bl	8004e4c <OLED_Line>
	OLED_Line(0, 9 + 9 * n, 0, 18 + 9 * n, color);
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	3301      	adds	r3, #1
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	00d2      	lsls	r2, r2, #3
 8005024:	4413      	add	r3, r2
 8005026:	b2d9      	uxtb	r1, r3
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	461a      	mov	r2, r3
 800502c:	00d2      	lsls	r2, r2, #3
 800502e:	4413      	add	r3, r2
 8005030:	b2db      	uxtb	r3, r3
 8005032:	3312      	adds	r3, #18
 8005034:	b2da      	uxtb	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	2200      	movs	r2, #0
 800503e:	2000      	movs	r0, #0
 8005040:	f7ff ff04 	bl	8004e4c <OLED_Line>
	OLED_Line(95, 9 + 9 * n, 95, 18 + 9 * n, color);
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	3301      	adds	r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	00d2      	lsls	r2, r2, #3
 800504e:	4413      	add	r3, r2
 8005050:	b2d9      	uxtb	r1, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	461a      	mov	r2, r3
 8005056:	00d2      	lsls	r2, r2, #3
 8005058:	4413      	add	r3, r2
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3312      	adds	r3, #18
 800505e:	b2da      	uxtb	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	225f      	movs	r2, #95	; 0x5f
 8005068:	205f      	movs	r0, #95	; 0x5f
 800506a:	f7ff feef 	bl	8004e4c <OLED_Line>
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <Switch_LED>:
#define LONG_FLAG 0x20

#define LINE_TRACER_SWITCH
extern TIM_HandleTypeDef htim4;

void Switch_LED(uint16_t red, uint16_t blue){
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	460a      	mov	r2, r1
 8005082:	80fb      	strh	r3, [r7, #6]
 8005084:	4613      	mov	r3, r2
 8005086:	80bb      	strh	r3, [r7, #4]
	htim4.Instance -> CCR1 = red;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <Switch_LED+0x2c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	88fa      	ldrh	r2, [r7, #6]
 800508e:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance -> CCR2 = blue;
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <Switch_LED+0x2c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	88ba      	ldrh	r2, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20000504 	.word	0x20000504

080050a8 <Switch_Read>:

uint16_t Switch_Read(){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	static uint16_t Switch_sum = 0;
	static uint16_t Switch_input = 0;
	static uint32_t Switch_time = 0;
	static uint32_t Switch_lowTime = 0;
#ifdef LINE_TRACER_SWITCH
	uint8_t sw1 = !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 80050ae:	2108      	movs	r1, #8
 80050b0:	4893      	ldr	r0, [pc, #588]	; (8005300 <Switch_Read+0x258>)
 80050b2:	f7fc ff43 	bl	8001f3c <HAL_GPIO_ReadPin>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2 = !HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 80050c4:	2110      	movs	r1, #16
 80050c6:	488e      	ldr	r0, [pc, #568]	; (8005300 <Switch_Read+0x258>)
 80050c8:	f7fc ff38 	bl	8001f3c <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3 = !HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 80050da:	2120      	movs	r1, #32
 80050dc:	4888      	ldr	r0, [pc, #544]	; (8005300 <Switch_Read+0x258>)
 80050de:	f7fc ff2d 	bl	8001f3c <HAL_GPIO_ReadPin>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	717b      	strb	r3, [r7, #5]
	uint8_t sw4 = !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin);
 80050f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f4:	4882      	ldr	r0, [pc, #520]	; (8005300 <Switch_Read+0x258>)
 80050f6:	f7fc ff21 	bl	8001f3c <HAL_GPIO_ReadPin>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	713b      	strb	r3, [r7, #4]
	uint8_t sw5 = !HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin);
 8005108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800510c:	487c      	ldr	r0, [pc, #496]	; (8005300 <Switch_Read+0x258>)
 800510e:	f7fc ff15 	bl	8001f3c <HAL_GPIO_ReadPin>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	bf0c      	ite	eq
 8005118:	2301      	moveq	r3, #1
 800511a:	2300      	movne	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	70fb      	strb	r3, [r7, #3]
	Switch_input = sw1 | (sw2 << 1) | (sw3 << 2) | (sw4 << 3) | (sw5 << 4);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	b21a      	sxth	r2, r3
 8005124:	79bb      	ldrb	r3, [r7, #6]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	b21b      	sxth	r3, r3
 800512a:	4313      	orrs	r3, r2
 800512c:	b21a      	sxth	r2, r3
 800512e:	797b      	ldrb	r3, [r7, #5]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	b21b      	sxth	r3, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	b21a      	sxth	r2, r3
 8005138:	793b      	ldrb	r3, [r7, #4]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	b21b      	sxth	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b21a      	sxth	r2, r3
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	b21b      	sxth	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b21b      	sxth	r3, r3
 800514c:	b29a      	uxth	r2, r3
 800514e:	4b6d      	ldr	r3, [pc, #436]	; (8005304 <Switch_Read+0x25c>)
 8005150:	801a      	strh	r2, [r3, #0]
#endif
	switch(Switch_state){
 8005152:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <Switch_Read+0x260>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b05      	cmp	r3, #5
 8005158:	f200 80cd 	bhi.w	80052f6 <Switch_Read+0x24e>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <Switch_Read+0xbc>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	0800517d 	.word	0x0800517d
 8005168:	080051a9 	.word	0x080051a9
 800516c:	080051ed 	.word	0x080051ed
 8005170:	08005235 	.word	0x08005235
 8005174:	0800526d 	.word	0x0800526d
 8005178:	080052ad 	.word	0x080052ad
	case SWITCH_STATE_IDLE:
		if(Switch_input){
 800517c:	4b61      	ldr	r3, [pc, #388]	; (8005304 <Switch_Read+0x25c>)
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80af 	beq.w	80052e4 <Switch_Read+0x23c>
			Switch_time = HAL_GetTick();
 8005186:	f7fc fc3f 	bl	8001a08 <HAL_GetTick>
 800518a:	4603      	mov	r3, r0
 800518c:	4a5f      	ldr	r2, [pc, #380]	; (800530c <Switch_Read+0x264>)
 800518e:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_DOWN;
 8005190:	4b5d      	ldr	r3, [pc, #372]	; (8005308 <Switch_Read+0x260>)
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
			Switch_sum |= Switch_input;
 8005196:	4b5e      	ldr	r3, [pc, #376]	; (8005310 <Switch_Read+0x268>)
 8005198:	881a      	ldrh	r2, [r3, #0]
 800519a:	4b5a      	ldr	r3, [pc, #360]	; (8005304 <Switch_Read+0x25c>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	4b5b      	ldr	r3, [pc, #364]	; (8005310 <Switch_Read+0x268>)
 80051a4:	801a      	strh	r2, [r3, #0]
		}
		break;
 80051a6:	e09d      	b.n	80052e4 <Switch_Read+0x23c>
	case SWITCH_STATE_PRE_DOWN:
		if(Switch_input){
 80051a8:	4b56      	ldr	r3, [pc, #344]	; (8005304 <Switch_Read+0x25c>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d016      	beq.n	80051de <Switch_Read+0x136>
			if(HAL_GetTick() - Switch_time > 80){
 80051b0:	f7fc fc2a 	bl	8001a08 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b55      	ldr	r3, [pc, #340]	; (800530c <Switch_Read+0x264>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b50      	cmp	r3, #80	; 0x50
 80051be:	d905      	bls.n	80051cc <Switch_Read+0x124>
				Switch_state = SWITCH_STATE_DOWN;
 80051c0:	4b51      	ldr	r3, [pc, #324]	; (8005308 <Switch_Read+0x260>)
 80051c2:	2202      	movs	r2, #2
 80051c4:	701a      	strb	r2, [r3, #0]
				return Switch_sum;
 80051c6:	4b52      	ldr	r3, [pc, #328]	; (8005310 <Switch_Read+0x268>)
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	e095      	b.n	80052f8 <Switch_Read+0x250>
			}
			Switch_sum |= Switch_input;
 80051cc:	4b50      	ldr	r3, [pc, #320]	; (8005310 <Switch_Read+0x268>)
 80051ce:	881a      	ldrh	r2, [r3, #0]
 80051d0:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <Switch_Read+0x25c>)
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	4b4d      	ldr	r3, [pc, #308]	; (8005310 <Switch_Read+0x268>)
 80051da:	801a      	strh	r2, [r3, #0]
		}
		else{
			Switch_state = SWITCH_STATE_IDLE;
			Switch_sum = 0;
		}
		break;
 80051dc:	e08b      	b.n	80052f6 <Switch_Read+0x24e>
			Switch_state = SWITCH_STATE_IDLE;
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <Switch_Read+0x260>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
			Switch_sum = 0;
 80051e4:	4b4a      	ldr	r3, [pc, #296]	; (8005310 <Switch_Read+0x268>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	801a      	strh	r2, [r3, #0]
		break;
 80051ea:	e084      	b.n	80052f6 <Switch_Read+0x24e>
	case SWITCH_STATE_DOWN:
		if(!Switch_input){
 80051ec:	4b45      	ldr	r3, [pc, #276]	; (8005304 <Switch_Read+0x25c>)
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d108      	bne.n	8005206 <Switch_Read+0x15e>
			Switch_lowTime = HAL_GetTick();
 80051f4:	f7fc fc08 	bl	8001a08 <HAL_GetTick>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4a46      	ldr	r2, [pc, #280]	; (8005314 <Switch_Read+0x26c>)
 80051fc:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE;
 80051fe:	4b42      	ldr	r3, [pc, #264]	; (8005308 <Switch_Read+0x260>)
 8005200:	2203      	movs	r2, #3
 8005202:	701a      	strb	r2, [r3, #0]
		else if(HAL_GetTick() - Switch_time > 400){
			Switch_time = HAL_GetTick();
			Switch_state = SWITCH_STATE_LONG;
			return Switch_sum | LONG_FLAG;
		}
		break;
 8005204:	e070      	b.n	80052e8 <Switch_Read+0x240>
		else if(HAL_GetTick() - Switch_time > 400){
 8005206:	f7fc fbff 	bl	8001a08 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	4b3f      	ldr	r3, [pc, #252]	; (800530c <Switch_Read+0x264>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005216:	d967      	bls.n	80052e8 <Switch_Read+0x240>
			Switch_time = HAL_GetTick();
 8005218:	f7fc fbf6 	bl	8001a08 <HAL_GetTick>
 800521c:	4603      	mov	r3, r0
 800521e:	4a3b      	ldr	r2, [pc, #236]	; (800530c <Switch_Read+0x264>)
 8005220:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_LONG;
 8005222:	4b39      	ldr	r3, [pc, #228]	; (8005308 <Switch_Read+0x260>)
 8005224:	2204      	movs	r2, #4
 8005226:	701a      	strb	r2, [r3, #0]
			return Switch_sum | LONG_FLAG;
 8005228:	4b39      	ldr	r3, [pc, #228]	; (8005310 <Switch_Read+0x268>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	f043 0320 	orr.w	r3, r3, #32
 8005230:	b29b      	uxth	r3, r3
 8005232:	e061      	b.n	80052f8 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE:
		if(!Switch_input){
 8005234:	4b33      	ldr	r3, [pc, #204]	; (8005304 <Switch_Read+0x25c>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d113      	bne.n	8005264 <Switch_Read+0x1bc>
			if(HAL_GetTick() - Switch_lowTime > 80){
 800523c:	f7fc fbe4 	bl	8001a08 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	4b34      	ldr	r3, [pc, #208]	; (8005314 <Switch_Read+0x26c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b50      	cmp	r3, #80	; 0x50
 800524a:	d94f      	bls.n	80052ec <Switch_Read+0x244>
				Switch_time = HAL_GetTick();
 800524c:	f7fc fbdc 	bl	8001a08 <HAL_GetTick>
 8005250:	4603      	mov	r3, r0
 8005252:	4a2e      	ldr	r2, [pc, #184]	; (800530c <Switch_Read+0x264>)
 8005254:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 8005256:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <Switch_Read+0x260>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 800525c:	4b2c      	ldr	r3, [pc, #176]	; (8005310 <Switch_Read+0x268>)
 800525e:	2200      	movs	r2, #0
 8005260:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_DOWN;
		}
		break;
 8005262:	e043      	b.n	80052ec <Switch_Read+0x244>
			Switch_state = SWITCH_STATE_DOWN;
 8005264:	4b28      	ldr	r3, [pc, #160]	; (8005308 <Switch_Read+0x260>)
 8005266:	2202      	movs	r2, #2
 8005268:	701a      	strb	r2, [r3, #0]
		break;
 800526a:	e03f      	b.n	80052ec <Switch_Read+0x244>
	case SWITCH_STATE_LONG:
		if(!Switch_input){
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <Switch_Read+0x25c>)
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <Switch_Read+0x1de>
			Switch_lowTime = HAL_GetTick();
 8005274:	f7fc fbc8 	bl	8001a08 <HAL_GetTick>
 8005278:	4603      	mov	r3, r0
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <Switch_Read+0x26c>)
 800527c:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE_LONG;
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <Switch_Read+0x260>)
 8005280:	2205      	movs	r2, #5
 8005282:	701a      	strb	r2, [r3, #0]
		}
		else if(HAL_GetTick() - Switch_time > 100){
			Switch_time = HAL_GetTick();
			return Switch_sum | LONG_FLAG;
		}
		break;
 8005284:	e034      	b.n	80052f0 <Switch_Read+0x248>
		else if(HAL_GetTick() - Switch_time > 100){
 8005286:	f7fc fbbf 	bl	8001a08 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <Switch_Read+0x264>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d92c      	bls.n	80052f0 <Switch_Read+0x248>
			Switch_time = HAL_GetTick();
 8005296:	f7fc fbb7 	bl	8001a08 <HAL_GetTick>
 800529a:	4603      	mov	r3, r0
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <Switch_Read+0x264>)
 800529e:	6013      	str	r3, [r2, #0]
			return Switch_sum | LONG_FLAG;
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <Switch_Read+0x268>)
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	f043 0320 	orr.w	r3, r3, #32
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	e025      	b.n	80052f8 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE_LONG:
		if(!Switch_input){
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <Switch_Read+0x25c>)
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d113      	bne.n	80052dc <Switch_Read+0x234>
			if(HAL_GetTick() - Switch_lowTime > 80){
 80052b4:	f7fc fba8 	bl	8001a08 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <Switch_Read+0x26c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b50      	cmp	r3, #80	; 0x50
 80052c2:	d917      	bls.n	80052f4 <Switch_Read+0x24c>
				Switch_time = HAL_GetTick();
 80052c4:	f7fc fba0 	bl	8001a08 <HAL_GetTick>
 80052c8:	4603      	mov	r3, r0
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <Switch_Read+0x264>)
 80052cc:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 80052ce:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <Switch_Read+0x260>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 80052d4:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <Switch_Read+0x268>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_LONG;
		}
		break;
 80052da:	e00b      	b.n	80052f4 <Switch_Read+0x24c>
			Switch_state = SWITCH_STATE_LONG;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <Switch_Read+0x260>)
 80052de:	2204      	movs	r2, #4
 80052e0:	701a      	strb	r2, [r3, #0]
		break;
 80052e2:	e007      	b.n	80052f4 <Switch_Read+0x24c>
		break;
 80052e4:	bf00      	nop
 80052e6:	e006      	b.n	80052f6 <Switch_Read+0x24e>
		break;
 80052e8:	bf00      	nop
 80052ea:	e004      	b.n	80052f6 <Switch_Read+0x24e>
		break;
 80052ec:	bf00      	nop
 80052ee:	e002      	b.n	80052f6 <Switch_Read+0x24e>
		break;
 80052f0:	bf00      	nop
 80052f2:	e000      	b.n	80052f6 <Switch_Read+0x24e>
		break;
 80052f4:	bf00      	nop
	}
	return 0;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40020400 	.word	0x40020400
 8005304:	20000494 	.word	0x20000494
 8005308:	20000496 	.word	0x20000496
 800530c:	20000498 	.word	0x20000498
 8005310:	2000049c 	.word	0x2000049c
 8005314:	200004a0 	.word	0x200004a0

08005318 <Systick_Sensor_IRQ>:
/* Functions */

// 카운트 값을 1씩 줄이기 위한 인터럽트 핸들러.
// HAL_InitTick 함수에서 Systick 인터럽트가 1ms마다 실행되도록 설정되므로,
// 핸들러의 실행주기도 1ms이다.
void Systick_Sensor_IRQ() {
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
	// 카운트가 0이 아니면, waitcount의 값을 1 감소시킨다.
	// 현재 카운트 node를 읽으면, next node가 없을 때까지 다음으로 넘어가 읽기를 반복한다.
	if (waitcount_node_storage.size > 0) {
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <Systick_Sensor_IRQ+0x48>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d015      	beq.n	8005352 <Systick_Sensor_IRQ+0x3a>
		waitcount_node *cur_node = waitcount_node_storage.frontPtr;
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <Systick_Sensor_IRQ+0x48>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 800532c:	e00e      	b.n	800534c <Systick_Sensor_IRQ+0x34>
			cur_node->data -= (cur_node->data == 0) ? 0 : 1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	2a00      	cmp	r2, #0
 8005338:	bf14      	ite	ne
 800533a:	2201      	movne	r2, #1
 800533c:	2200      	moveq	r2, #0
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	1a9a      	subs	r2, r3, r2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
			cur_node = cur_node->next;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ed      	bne.n	800532e <Systick_Sensor_IRQ+0x16>
		}
	}
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000630 	.word	0x20000630

08005364 <Custom_Tempsensor>:

tempsensor_t* Custom_Tempsensor(SPI_HandleTypeDef *spi, sensorpos pos) {
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
	// Setting methods
	tempsensor_t *sensorobj = (tempsensor_t*) calloc(1, sizeof(tempsensor_t));
 8005370:	2128      	movs	r1, #40	; 0x28
 8005372:	2001      	movs	r0, #1
 8005374:	f000 fca0 	bl	8005cb8 <calloc>
 8005378:	4603      	mov	r3, r0
 800537a:	60fb      	str	r3, [r7, #12]

	sensorobj->read = read;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a22      	ldr	r2, [pc, #136]	; (8005408 <Custom_Tempsensor+0xa4>)
 8005380:	615a      	str	r2, [r3, #20]
	sensorobj->is_readable = is_readable;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a21      	ldr	r2, [pc, #132]	; (800540c <Custom_Tempsensor+0xa8>)
 8005386:	619a      	str	r2, [r3, #24]
	sensorobj->set_interval = set_interval;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <Custom_Tempsensor+0xac>)
 800538c:	61da      	str	r2, [r3, #28]
	sensorobj->get_interval = get_interval;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <Custom_Tempsensor+0xb0>)
 8005392:	621a      	str	r2, [r3, #32]
	sensorobj->read_waitcount = read_waitcount;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a20      	ldr	r2, [pc, #128]	; (8005418 <Custom_Tempsensor+0xb4>)
 8005398:	625a      	str	r2, [r3, #36]	; 0x24


	// Setting fields
	sensorobj->hspi = spi;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
	sensorobj->__sensor_interval = 500;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80053a6:	611a      	str	r2, [r3, #16]

	if (pos == SENSOR_HIGH) {
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <Custom_Tempsensor+0x5a>
		sensorobj->csPin = TEMPSENSOR_HIGH_CS_Pin;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053b4:	811a      	strh	r2, [r3, #8]
		sensorobj->csPort = TEMPSENSOR_HIGH_CS_Port;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <Custom_Tempsensor+0xb8>)
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	e006      	b.n	80053cc <Custom_Tempsensor+0x68>
	} else {
		sensorobj->csPin = TEMPSENSOR_LOW_CS_Pin;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053c4:	811a      	strh	r2, [r3, #8]
		sensorobj->csPort = TEMPSENSOR_LOW_CS_Port;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a14      	ldr	r2, [pc, #80]	; (800541c <Custom_Tempsensor+0xb8>)
 80053ca:	605a      	str	r2, [r3, #4]
	}

	// pull up CS pin
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6858      	ldr	r0, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	891b      	ldrh	r3, [r3, #8]
 80053d4:	2201      	movs	r2, #1
 80053d6:	4619      	mov	r1, r3
 80053d8:	f7fc fdc8 	bl	8001f6c <HAL_GPIO_WritePin>

	// setting waitCount object
	waitcount_node *waitCntNode = (waitcount_node*) calloc(1, sizeof(waitcount_node));
 80053dc:	2108      	movs	r1, #8
 80053de:	2001      	movs	r0, #1
 80053e0:	f000 fc6a 	bl	8005cb8 <calloc>
 80053e4:	4603      	mov	r3, r0
 80053e6:	60bb      	str	r3, [r7, #8]
	sensorobj->waitCount = &(waitCntNode->data);
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	60da      	str	r2, [r3, #12]
	*(sensorobj->waitCount) = 10;	// for initialize&interrupt working test
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	220a      	movs	r2, #10
 80053f4:	601a      	str	r2, [r3, #0]
	Add_GlobalWaitCountNode(waitCntNode);
 80053f6:	68b8      	ldr	r0, [r7, #8]
 80053f8:	f000 f812 	bl	8005420 <Add_GlobalWaitCountNode>

	return sensorobj;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	080054f1 	.word	0x080054f1
 800540c:	0800551d 	.word	0x0800551d
 8005410:	08005541 	.word	0x08005541
 8005414:	0800555d 	.word	0x0800555d
 8005418:	08005575 	.word	0x08005575
 800541c:	40020400 	.word	0x40020400

08005420 <Add_GlobalWaitCountNode>:

void Add_GlobalWaitCountNode(waitcount_node *waitCntNode) {
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	if (waitCntNode != NULL) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d013      	beq.n	8005456 <Add_GlobalWaitCountNode+0x36>

		if (waitcount_node_storage.size == 0) {
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <Add_GlobalWaitCountNode+0x44>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <Add_GlobalWaitCountNode+0x1e>
			waitcount_node_storage.frontPtr = waitCntNode;
 8005436:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <Add_GlobalWaitCountNode+0x44>)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	e003      	b.n	8005446 <Add_GlobalWaitCountNode+0x26>
		} else {
			waitcount_node_storage.backPtr->next = waitCntNode;
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <Add_GlobalWaitCountNode+0x44>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]

		}
		waitcount_node_storage.backPtr = waitCntNode;
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <Add_GlobalWaitCountNode+0x44>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6053      	str	r3, [r2, #4]
		waitcount_node_storage.size++;
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <Add_GlobalWaitCountNode+0x44>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	3301      	adds	r3, #1
 8005452:	4a04      	ldr	r2, [pc, #16]	; (8005464 <Add_GlobalWaitCountNode+0x44>)
 8005454:	6093      	str	r3, [r2, #8]
	}
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000630 	.word	0x20000630

08005468 <__sensor_read>:

/* Methods */
__STATIC_INLINE float __sensor_read(tempsensor_t *sensorobj) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float temp = 0;
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]

	// 16비트 데이터를 MSB부터 차례대로 받는다.
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_RESET);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6858      	ldr	r0, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	891b      	ldrh	r3, [r3, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	4619      	mov	r1, r3
 8005482:	f7fc fd73 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(sensorobj->hspi, (uint8_t *)&pData, 1, 50);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	f107 0108 	add.w	r1, r7, #8
 800548e:	2332      	movs	r3, #50	; 0x32
 8005490:	2201      	movs	r2, #1
 8005492:	f7fd fb92 	bl	8002bba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6858      	ldr	r0, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	891b      	ldrh	r3, [r3, #8]
 800549e:	2201      	movs	r2, #1
 80054a0:	4619      	mov	r1, r3
 80054a2:	f7fc fd63 	bl	8001f6c <HAL_GPIO_WritePin>

	if (((pData[0]|(pData[1]<<8))>>2)& 0x0001)
 80054a6:	7a3b      	ldrb	r3, [r7, #8]
 80054a8:	461a      	mov	r2, r3
 80054aa:	7a7b      	ldrb	r3, [r7, #9]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <__sensor_read+0x56>
	   return NAN;
 80054b8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80054ec <__sensor_read+0x84>
 80054bc:	e011      	b.n	80054e2 <__sensor_read+0x7a>
	temp = ((((pData[0]|pData[1]<<8)))>>3);
 80054be:	7a3b      	ldrb	r3, [r7, #8]
 80054c0:	461a      	mov	r2, r3
 80054c2:	7a7b      	ldrb	r3, [r7, #9]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	4313      	orrs	r3, r2
 80054c8:	10db      	asrs	r3, r3, #3
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d2:	edc7 7a03 	vstr	s15, [r7, #12]

	return temp * 0.25f;
 80054d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80054da:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80054de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80054e2:	eeb0 0a67 	vmov.f32	s0, s15
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	7fc00000 	.word	0x7fc00000

080054f0 <read>:
float read(tempsensor_t *sensorobj) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	float data = __sensor_read(sensorobj);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ffb5 	bl	8005468 <__sensor_read>
 80054fe:	ed87 0a03 	vstr	s0, [r7, #12]
	*(sensorobj->waitCount) = sensorobj->__sensor_interval;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6912      	ldr	r2, [r2, #16]
 800550a:	601a      	str	r2, [r3, #0]
	return data;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	ee07 3a90 	vmov	s15, r3
}
 8005512:	eeb0 0a67 	vmov.f32	s0, s15
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <is_readable>:
bool is_readable(tempsensor_t *sensorobj) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	return !(sensorobj->read_waitcount(sensorobj));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <set_interval>:

void set_interval(tempsensor_t *sensorobj, uint32_t interval) {
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	sensorobj->__sensor_interval = interval;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	611a      	str	r2, [r3, #16]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <get_interval>:
uint32_t get_interval(tempsensor_t *sensorobj) {
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	return sensorobj->__sensor_interval;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <read_waitcount>:
uint32_t read_waitcount(tempsensor_t *sensorobj) {
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	return *(sensorobj->waitCount);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <testTemp>:

#include <stdio.h>
#include "max6675.h"

extern SPI_HandleTypeDef hspi3;
void testTemp(){
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
	SwitchLED(COLOR_BLACK);
 8005596:	2100      	movs	r1, #0
 8005598:	2000      	movs	r0, #0
 800559a:	f7ff fd6d 	bl	8005078 <Switch_LED>
	tempsensor_t *temp1 = Custom_Tempsensor(&hspi3, SENSOR_HIGH);
 800559e:	2100      	movs	r1, #0
 80055a0:	4812      	ldr	r0, [pc, #72]	; (80055ec <testTemp+0x5c>)
 80055a2:	f7ff fedf 	bl	8005364 <Custom_Tempsensor>
 80055a6:	6078      	str	r0, [r7, #4]
	for(;;){
		uint16_t sw = Switch_Read();
 80055a8:	f7ff fd7e 	bl	80050a8 <Switch_Read>
 80055ac:	4603      	mov	r3, r0
 80055ae:	807b      	strh	r3, [r7, #2]
		if(sw) break;
 80055b0:	887b      	ldrh	r3, [r7, #2]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d115      	bne.n	80055e2 <testTemp+0x52>
		if (temp1->is_readable(temp1)) {
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	4798      	blx	r3
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f1      	beq.n	80055a8 <testTemp+0x18>
			OLED_Printf("/s/0/rtemp: /y%f\r\n", temp1->read(temp1));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
 80055cc:	ee10 3a10 	vmov	r3, s0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fa ffc1 	bl	8000558 <__aeabi_f2d>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4805      	ldr	r0, [pc, #20]	; (80055f0 <testTemp+0x60>)
 80055dc:	f7ff f918 	bl	8004810 <OLED_Printf>
	for(;;){
 80055e0:	e7e2      	b.n	80055a8 <testTemp+0x18>
		if(sw) break;
 80055e2:	bf00      	nop
//			printf("temp: %f\r\n", temp1->read(temp1));
		}
	}
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	2000054c 	.word	0x2000054c
 80055f0:	08008aa8 	.word	0x08008aa8

080055f4 <profile>:



void profile(){}
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <Menu_Setup>:

};

const uint8_t menuCnt = sizeof(menuList) / sizeof(Menu_t);

void Menu_Setup(){
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af02      	add	r7, sp, #8
	OLED_Begin();
 800560a:	f7fe fed3 	bl	80043b4 <OLED_Begin>
	OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt > 6 ? 6 : menuCnt, 0xFFFF00);
 800560e:	2307      	movs	r3, #7
 8005610:	2b06      	cmp	r3, #6
 8005612:	bf28      	it	cs
 8005614:	2306      	movcs	r3, #6
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <Menu_Setup+0x50>)
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	9200      	str	r2, [sp, #0]
 8005620:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <Menu_Setup+0x54>)
 8005622:	2200      	movs	r2, #0
 8005624:	490d      	ldr	r1, [pc, #52]	; (800565c <Menu_Setup+0x58>)
 8005626:	480e      	ldr	r0, [pc, #56]	; (8005660 <Menu_Setup+0x5c>)
 8005628:	f7ff fc5a 	bl	8004ee0 <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 800562c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8005630:	2000      	movs	r0, #0
 8005632:	f7ff fca1 	bl	8004f78 <OLED_Cursor>
	SwitchLED(menuList[0].color);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <Menu_Setup+0x54>)
 8005638:	891b      	ldrh	r3, [r3, #8]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	b29b      	uxth	r3, r3
 800563e:	4a06      	ldr	r2, [pc, #24]	; (8005658 <Menu_Setup+0x54>)
 8005640:	8912      	ldrh	r2, [r2, #8]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	b292      	uxth	r2, r2
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fd15 	bl	8005078 <Switch_LED>
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	00ffff00 	.word	0x00ffff00
 8005658:	20000204 	.word	0x20000204
 800565c:	00ff8800 	.word	0x00ff8800
 8005660:	08008af8 	.word	0x08008af8

08005664 <Menu>:

void Menu(){
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af02      	add	r7, sp, #8
	Menu_Setup();
 800566a:	f7ff ffcb 	bl	8005604 <Menu_Setup>
	uint8_t idx = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	71fb      	strb	r3, [r7, #7]
	for(;;){
		uint16_t sw = Switch_Read();
 8005672:	f7ff fd19 	bl	80050a8 <Switch_Read>
 8005676:	4603      	mov	r3, r0
 8005678:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 800567a:	88bb      	ldrh	r3, [r7, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d002      	beq.n	8005686 <Menu+0x22>
 8005680:	88bb      	ldrh	r3, [r7, #4]
 8005682:	2b22      	cmp	r3, #34	; 0x22
 8005684:	d177      	bne.n	8005776 <Menu+0x112>
			idx+=menuCnt - 1;
 8005686:	2207      	movs	r2, #7
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	4413      	add	r3, r2
 800568c:	b2db      	uxtb	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8005692:	2207      	movs	r2, #7
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	fbb3 f1f2 	udiv	r1, r3, r2
 800569a:	fb02 f201 	mul.w	r2, r2, r1
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && (idx % 6 == 5 || idx == menuCnt - 1)){
 80056a2:	2307      	movs	r3, #7
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d93c      	bls.n	8005722 <Menu+0xbe>
 80056a8:	79fa      	ldrb	r2, [r7, #7]
 80056aa:	4b89      	ldr	r3, [pc, #548]	; (80058d0 <Menu+0x26c>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	0899      	lsrs	r1, r3, #2
 80056b2:	460b      	mov	r3, r1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	440b      	add	r3, r1
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d004      	beq.n	80056cc <Menu+0x68>
 80056c2:	79fa      	ldrb	r2, [r7, #7]
 80056c4:	2307      	movs	r3, #7
 80056c6:	3b01      	subs	r3, #1
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d12a      	bne.n	8005722 <Menu+0xbe>
				OLED_Clear();
 80056cc:	f7fe fe42 	bl	8004354 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + (idx / 6) * 6, menuCnt - (idx / 6) * 6 > 6 ? 6 : menuCnt - (idx / 6) * 6, 0xFFFF00);
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	4a7f      	ldr	r2, [pc, #508]	; (80058d0 <Menu+0x26c>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	461a      	mov	r2, r3
 80056e8:	4b7a      	ldr	r3, [pc, #488]	; (80058d4 <Menu+0x270>)
 80056ea:	18d1      	adds	r1, r2, r3
 80056ec:	2307      	movs	r3, #7
 80056ee:	4618      	mov	r0, r3
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	4a77      	ldr	r2, [pc, #476]	; (80058d0 <Menu+0x26c>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	4613      	mov	r3, r2
 8005700:	0092      	lsls	r2, r2, #2
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4403      	add	r3, r0
 8005708:	2b06      	cmp	r3, #6
 800570a:	bfa8      	it	ge
 800570c:	2306      	movge	r3, #6
 800570e:	461a      	mov	r2, r3
 8005710:	4b71      	ldr	r3, [pc, #452]	; (80058d8 <Menu+0x274>)
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	9200      	str	r2, [sp, #0]
 8005716:	460b      	mov	r3, r1
 8005718:	2200      	movs	r2, #0
 800571a:	4970      	ldr	r1, [pc, #448]	; (80058dc <Menu+0x278>)
 800571c:	4870      	ldr	r0, [pc, #448]	; (80058e0 <Menu+0x27c>)
 800571e:	f7ff fbdf 	bl	8004ee0 <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 8005722:	79fa      	ldrb	r2, [r7, #7]
 8005724:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <Menu+0x26c>)
 8005726:	fba3 1302 	umull	r1, r3, r3, r2
 800572a:	0899      	lsrs	r1, r3, #2
 800572c:	460b      	mov	r3, r1
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	440b      	add	r3, r1
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fc1b 	bl	8004f78 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8005742:	79fa      	ldrb	r2, [r7, #7]
 8005744:	4963      	ldr	r1, [pc, #396]	; (80058d4 <Menu+0x270>)
 8005746:	4613      	mov	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	3308      	adds	r3, #8
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b298      	uxth	r0, r3
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	495e      	ldr	r1, [pc, #376]	; (80058d4 <Menu+0x270>)
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	3308      	adds	r3, #8
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	f7ff fc82 	bl	8005078 <Switch_LED>
 8005774:	e0aa      	b.n	80058cc <Menu+0x268>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d002      	beq.n	8005782 <Menu+0x11e>
 800577c:	88bb      	ldrh	r3, [r7, #4]
 800577e:	2b28      	cmp	r3, #40	; 0x28
 8005780:	d15f      	bne.n	8005842 <Menu+0x1de>
			idx+=1;
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	3301      	adds	r3, #1
 8005786:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8005788:	2207      	movs	r2, #7
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005790:	fb02 f201 	mul.w	r2, r2, r1
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && idx % 6 == 0){
 8005798:	2307      	movs	r3, #7
 800579a:	2b06      	cmp	r3, #6
 800579c:	d927      	bls.n	80057ee <Menu+0x18a>
 800579e:	79fa      	ldrb	r2, [r7, #7]
 80057a0:	4b4b      	ldr	r3, [pc, #300]	; (80058d0 <Menu+0x26c>)
 80057a2:	fba3 1302 	umull	r1, r3, r3, r2
 80057a6:	0899      	lsrs	r1, r3, #2
 80057a8:	460b      	mov	r3, r1
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	440b      	add	r3, r1
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11a      	bne.n	80057ee <Menu+0x18a>
				OLED_Clear();
 80057b8:	f7fe fdcc 	bl	8004354 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + idx, menuCnt - idx > 6 ? 6 : menuCnt - idx, 0xFFFF00);
 80057bc:	79fa      	ldrb	r2, [r7, #7]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <Menu+0x270>)
 80057ca:	441a      	add	r2, r3
 80057cc:	2307      	movs	r3, #7
 80057ce:	4619      	mov	r1, r3
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	1acb      	subs	r3, r1, r3
 80057d4:	2b06      	cmp	r3, #6
 80057d6:	bfa8      	it	ge
 80057d8:	2306      	movge	r3, #6
 80057da:	4619      	mov	r1, r3
 80057dc:	4b3e      	ldr	r3, [pc, #248]	; (80058d8 <Menu+0x274>)
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	9100      	str	r1, [sp, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	2200      	movs	r2, #0
 80057e6:	493d      	ldr	r1, [pc, #244]	; (80058dc <Menu+0x278>)
 80057e8:	483d      	ldr	r0, [pc, #244]	; (80058e0 <Menu+0x27c>)
 80057ea:	f7ff fb79 	bl	8004ee0 <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 80057ee:	79fa      	ldrb	r2, [r7, #7]
 80057f0:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <Menu+0x26c>)
 80057f2:	fba3 1302 	umull	r1, r3, r3, r2
 80057f6:	0899      	lsrs	r1, r3, #2
 80057f8:	460b      	mov	r3, r1
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	440b      	add	r3, r1
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fbb5 	bl	8004f78 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 800580e:	79fa      	ldrb	r2, [r7, #7]
 8005810:	4930      	ldr	r1, [pc, #192]	; (80058d4 <Menu+0x270>)
 8005812:	4613      	mov	r3, r2
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	3308      	adds	r3, #8
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	b298      	uxth	r0, r3
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	492b      	ldr	r1, [pc, #172]	; (80058d4 <Menu+0x270>)
 8005828:	4613      	mov	r3, r2
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	3308      	adds	r3, #8
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	4619      	mov	r1, r3
 800583c:	f7ff fc1c 	bl	8005078 <Switch_LED>
 8005840:	e044      	b.n	80058cc <Menu+0x268>
		}
		else if(sw == SW_ENTER){
 8005842:	88bb      	ldrh	r3, [r7, #4]
 8005844:	2b04      	cmp	r3, #4
 8005846:	f47f af14 	bne.w	8005672 <Menu+0xe>
			OLED_Clear();//OLED를 지웁니다.
 800584a:	f7fe fd83 	bl	8004354 <OLED_Clear>
			menuList[idx].function();
 800584e:	79fa      	ldrb	r2, [r7, #7]
 8005850:	4920      	ldr	r1, [pc, #128]	; (80058d4 <Menu+0x270>)
 8005852:	4613      	mov	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4798      	blx	r3
			OLED_Clear();//OLED를 지웁니다.
 8005860:	f7fe fd78 	bl	8004354 <OLED_Clear>
			OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt, 0xFFFF00);
 8005864:	2307      	movs	r3, #7
 8005866:	461a      	mov	r2, r3
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <Menu+0x274>)
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	9200      	str	r2, [sp, #0]
 800586e:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <Menu+0x270>)
 8005870:	2200      	movs	r2, #0
 8005872:	491a      	ldr	r1, [pc, #104]	; (80058dc <Menu+0x278>)
 8005874:	481a      	ldr	r0, [pc, #104]	; (80058e0 <Menu+0x27c>)
 8005876:	f7ff fb33 	bl	8004ee0 <OLED_MenuUI>
			OLED_Cursor(idx % 6, 0xFF0000);
 800587a:	79fa      	ldrb	r2, [r7, #7]
 800587c:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <Menu+0x26c>)
 800587e:	fba3 1302 	umull	r1, r3, r3, r2
 8005882:	0899      	lsrs	r1, r3, #2
 8005884:	460b      	mov	r3, r1
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	440b      	add	r3, r1
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fb6f 	bl	8004f78 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 800589a:	79fa      	ldrb	r2, [r7, #7]
 800589c:	490d      	ldr	r1, [pc, #52]	; (80058d4 <Menu+0x270>)
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	3308      	adds	r3, #8
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	b298      	uxth	r0, r3
 80058b0:	79fa      	ldrb	r2, [r7, #7]
 80058b2:	4908      	ldr	r1, [pc, #32]	; (80058d4 <Menu+0x270>)
 80058b4:	4613      	mov	r3, r2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	3308      	adds	r3, #8
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	4619      	mov	r1, r3
 80058c8:	f7ff fbd6 	bl	8005078 <Switch_LED>
	for(;;){
 80058cc:	e6d1      	b.n	8005672 <Menu+0xe>
 80058ce:	bf00      	nop
 80058d0:	aaaaaaab 	.word	0xaaaaaaab
 80058d4:	20000204 	.word	0x20000204
 80058d8:	00ffff00 	.word	0x00ffff00
 80058dc:	00ff8800 	.word	0x00ff8800
 80058e0:	08008af8 	.word	0x08008af8

080058e4 <test>:
		{NULL, "FAN   : OFF", COLOR_RED},
};


//출력 단자가 잘 동작하는지 테스트합니다.
void test(){
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af02      	add	r7, sp, #8
	uint8_t idx = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	71fb      	strb	r3, [r7, #7]
	OLED_MenuUI("TEST", 0xFF00FF, 0x000000, testList, 6, 0x6600FF);
 80058ee:	4bbb      	ldr	r3, [pc, #748]	; (8005bdc <test+0x2f8>)
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	2306      	movs	r3, #6
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	4bba      	ldr	r3, [pc, #744]	; (8005be0 <test+0x2fc>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
 80058fe:	48b9      	ldr	r0, [pc, #740]	; (8005be4 <test+0x300>)
 8005900:	f7ff faee 	bl	8004ee0 <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8005904:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8005908:	2000      	movs	r0, #0
 800590a:	f7ff fb35 	bl	8004f78 <OLED_Cursor>
	SwitchLED(testList[0].color);
 800590e:	4bb4      	ldr	r3, [pc, #720]	; (8005be0 <test+0x2fc>)
 8005910:	891b      	ldrh	r3, [r3, #8]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	b29b      	uxth	r3, r3
 8005916:	4ab2      	ldr	r2, [pc, #712]	; (8005be0 <test+0x2fc>)
 8005918:	8912      	ldrh	r2, [r2, #8]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	b292      	uxth	r2, r2
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fba9 	bl	8005078 <Switch_LED>
	testList[0].color = COLOR_RED;
 8005926:	4bae      	ldr	r3, [pc, #696]	; (8005be0 <test+0x2fc>)
 8005928:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800592c:	811a      	strh	r2, [r3, #8]
	testList[1].color = COLOR_RED;
 800592e:	4bac      	ldr	r3, [pc, #688]	; (8005be0 <test+0x2fc>)
 8005930:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8005934:	829a      	strh	r2, [r3, #20]
	testList[2].color = COLOR_RED;
 8005936:	4baa      	ldr	r3, [pc, #680]	; (8005be0 <test+0x2fc>)
 8005938:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800593c:	841a      	strh	r2, [r3, #32]
	testList[3].color = COLOR_RED;
 800593e:	4ba8      	ldr	r3, [pc, #672]	; (8005be0 <test+0x2fc>)
 8005940:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8005944:	859a      	strh	r2, [r3, #44]	; 0x2c
	testList[4].color = COLOR_RED;
 8005946:	4ba6      	ldr	r3, [pc, #664]	; (8005be0 <test+0x2fc>)
 8005948:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800594c:	871a      	strh	r2, [r3, #56]	; 0x38
	testList[5].color = COLOR_RED;
 800594e:	4ba4      	ldr	r3, [pc, #656]	; (8005be0 <test+0x2fc>)
 8005950:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8005954:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	for(;;){
		uint16_t sw = Switch_Read();
 8005958:	f7ff fba6 	bl	80050a8 <Switch_Read>
 800595c:	4603      	mov	r3, r0
 800595e:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8005960:	88bb      	ldrh	r3, [r7, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d002      	beq.n	800596c <test+0x88>
 8005966:	88bb      	ldrh	r3, [r7, #4]
 8005968:	2b22      	cmp	r3, #34	; 0x22
 800596a:	d12d      	bne.n	80059c8 <test+0xe4>
			idx+=5;
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	3305      	adds	r3, #5
 8005970:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 8005972:	79fa      	ldrb	r2, [r7, #7]
 8005974:	4b9c      	ldr	r3, [pc, #624]	; (8005be8 <test+0x304>)
 8005976:	fba3 1302 	umull	r1, r3, r3, r2
 800597a:	0899      	lsrs	r1, r3, #2
 800597c:	460b      	mov	r3, r1
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	440b      	add	r3, r1
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff faf2 	bl	8004f78 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 8005994:	79fa      	ldrb	r2, [r7, #7]
 8005996:	4992      	ldr	r1, [pc, #584]	; (8005be0 <test+0x2fc>)
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3308      	adds	r3, #8
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	b298      	uxth	r0, r3
 80059aa:	79fa      	ldrb	r2, [r7, #7]
 80059ac:	498c      	ldr	r1, [pc, #560]	; (8005be0 <test+0x2fc>)
 80059ae:	4613      	mov	r3, r2
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3308      	adds	r3, #8
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4619      	mov	r1, r3
 80059c2:	f7ff fb59 	bl	8005078 <Switch_LED>
 80059c6:	e147      	b.n	8005c58 <test+0x374>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 80059c8:	88bb      	ldrh	r3, [r7, #4]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d002      	beq.n	80059d4 <test+0xf0>
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	2b28      	cmp	r3, #40	; 0x28
 80059d2:	d12d      	bne.n	8005a30 <test+0x14c>
			idx+=1;
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	3301      	adds	r3, #1
 80059d8:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	4b82      	ldr	r3, [pc, #520]	; (8005be8 <test+0x304>)
 80059de:	fba3 1302 	umull	r1, r3, r3, r2
 80059e2:	0899      	lsrs	r1, r3, #2
 80059e4:	460b      	mov	r3, r1
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	440b      	add	r3, r1
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fabe 	bl	8004f78 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 80059fc:	79fa      	ldrb	r2, [r7, #7]
 80059fe:	4978      	ldr	r1, [pc, #480]	; (8005be0 <test+0x2fc>)
 8005a00:	4613      	mov	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b298      	uxth	r0, r3
 8005a12:	79fa      	ldrb	r2, [r7, #7]
 8005a14:	4972      	ldr	r1, [pc, #456]	; (8005be0 <test+0x2fc>)
 8005a16:	4613      	mov	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3308      	adds	r3, #8
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7ff fb25 	bl	8005078 <Switch_LED>
 8005a2e:	e113      	b.n	8005c58 <test+0x374>
		}
		else if(sw == SW_ENTER){
 8005a30:	88bb      	ldrh	r3, [r7, #4]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	f000 8111 	beq.w	8005c5a <test+0x376>
			break;
		}
		else if(sw == SW_LEFT || sw == SW_RIGHT){
 8005a38:	88bb      	ldrh	r3, [r7, #4]
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d002      	beq.n	8005a44 <test+0x160>
 8005a3e:	88bb      	ldrh	r3, [r7, #4]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d189      	bne.n	8005958 <test+0x74>
			if(testList[idx].color == COLOR_RED){
 8005a44:	79fa      	ldrb	r2, [r7, #7]
 8005a46:	4966      	ldr	r1, [pc, #408]	; (8005be0 <test+0x2fc>)
 8005a48:	4613      	mov	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	3308      	adds	r3, #8
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a5a:	d158      	bne.n	8005b0e <test+0x22a>
				testList[idx].color = COLOR_WHITE;
 8005a5c:	79fa      	ldrb	r2, [r7, #7]
 8005a5e:	4960      	ldr	r1, [pc, #384]	; (8005be0 <test+0x2fc>)
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8005a70:	801a      	strh	r2, [r3, #0]
				switch(idx){
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	2b05      	cmp	r3, #5
 8005a76:	f200 80d6 	bhi.w	8005c26 <test+0x342>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <test+0x19c>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005a99 	.word	0x08005a99
 8005a84:	08005aad 	.word	0x08005aad
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ad5 	.word	0x08005ad5
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005afb 	.word	0x08005afb
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a9e:	4853      	ldr	r0, [pc, #332]	; (8005bec <test+0x308>)
 8005aa0:	f7fc fa64 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: ON ");
 8005aa4:	4852      	ldr	r0, [pc, #328]	; (8005bf0 <test+0x30c>)
 8005aa6:	f7fe feb3 	bl	8004810 <OLED_Printf>
					break;
 8005aaa:	e0bc      	b.n	8005c26 <test+0x342>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab2:	484e      	ldr	r0, [pc, #312]	; (8005bec <test+0x308>)
 8005ab4:	f7fc fa5a 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: ON ");
 8005ab8:	484e      	ldr	r0, [pc, #312]	; (8005bf4 <test+0x310>)
 8005aba:	f7fe fea9 	bl	8004810 <OLED_Printf>
					break;
 8005abe:	e0b2      	b.n	8005c26 <test+0x342>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 0);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ac6:	4849      	ldr	r0, [pc, #292]	; (8005bec <test+0x308>)
 8005ac8:	f7fc fa50 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : ON ");
 8005acc:	484a      	ldr	r0, [pc, #296]	; (8005bf8 <test+0x314>)
 8005ace:	f7fe fe9f 	bl	8004810 <OLED_Printf>
					break;
 8005ad2:	e0a8      	b.n	8005c26 <test+0x342>
				case 3:
					HAL_GPIO_WritePin(HU_GPIO_Port, HU_Pin, 0);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ada:	4848      	ldr	r0, [pc, #288]	; (8005bfc <test+0x318>)
 8005adc:	f7fc fa46 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : ON ");
 8005ae0:	4847      	ldr	r0, [pc, #284]	; (8005c00 <test+0x31c>)
 8005ae2:	f7fe fe95 	bl	8004810 <OLED_Printf>
					break;
 8005ae6:	e09e      	b.n	8005c26 <test+0x342>
				case 4:
					HAL_GPIO_WritePin(HD_GPIO_Port, HD_Pin, 0);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	4843      	ldr	r0, [pc, #268]	; (8005bfc <test+0x318>)
 8005aee:	f7fc fa3d 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : ON ");
 8005af2:	4844      	ldr	r0, [pc, #272]	; (8005c04 <test+0x320>)
 8005af4:	f7fe fe8c 	bl	8004810 <OLED_Printf>
					break;
 8005af8:	e095      	b.n	8005c26 <test+0x342>
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 1);
 8005afa:	2201      	movs	r2, #1
 8005afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b00:	483e      	ldr	r0, [pc, #248]	; (8005bfc <test+0x318>)
 8005b02:	f7fc fa33 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : ON ");
 8005b06:	4840      	ldr	r0, [pc, #256]	; (8005c08 <test+0x324>)
 8005b08:	f7fe fe82 	bl	8004810 <OLED_Printf>
					break;
 8005b0c:	e08b      	b.n	8005c26 <test+0x342>
				}
			}
			else if(testList[idx].color == COLOR_WHITE){
 8005b0e:	79fa      	ldrb	r2, [r7, #7]
 8005b10:	4933      	ldr	r1, [pc, #204]	; (8005be0 <test+0x2fc>)
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d17d      	bne.n	8005c24 <test+0x340>
				testList[idx].color = COLOR_RED;
 8005b28:	79fa      	ldrb	r2, [r7, #7]
 8005b2a:	492d      	ldr	r1, [pc, #180]	; (8005be0 <test+0x2fc>)
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	3308      	adds	r3, #8
 8005b38:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8005b3c:	801a      	strh	r2, [r3, #0]
				switch(idx){
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	2b05      	cmp	r3, #5
 8005b42:	d870      	bhi.n	8005c26 <test+0x342>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <test+0x268>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b65 	.word	0x08005b65
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b8d 	.word	0x08005b8d
 8005b58:	08005ba1 	.word	0x08005ba1
 8005b5c:	08005bb5 	.word	0x08005bb5
 8005b60:	08005bc7 	.word	0x08005bc7
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 8005b64:	2201      	movs	r2, #1
 8005b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b6a:	4820      	ldr	r0, [pc, #128]	; (8005bec <test+0x308>)
 8005b6c:	f7fc f9fe 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: OFF");
 8005b70:	4826      	ldr	r0, [pc, #152]	; (8005c0c <test+0x328>)
 8005b72:	f7fe fe4d 	bl	8004810 <OLED_Printf>
					break;
 8005b76:	e056      	b.n	8005c26 <test+0x342>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b7e:	481b      	ldr	r0, [pc, #108]	; (8005bec <test+0x308>)
 8005b80:	f7fc f9f4 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: OFF");
 8005b84:	4822      	ldr	r0, [pc, #136]	; (8005c10 <test+0x32c>)
 8005b86:	f7fe fe43 	bl	8004810 <OLED_Printf>
					break;
 8005b8a:	e04c      	b.n	8005c26 <test+0x342>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b92:	4816      	ldr	r0, [pc, #88]	; (8005bec <test+0x308>)
 8005b94:	f7fc f9ea 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : OFF");
 8005b98:	481e      	ldr	r0, [pc, #120]	; (8005c14 <test+0x330>)
 8005b9a:	f7fe fe39 	bl	8004810 <OLED_Printf>
					break;
 8005b9e:	e042      	b.n	8005c26 <test+0x342>
				case 3:
					HAL_GPIO_WritePin(HU_GPIO_Port, HU_Pin, 1);
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ba6:	4815      	ldr	r0, [pc, #84]	; (8005bfc <test+0x318>)
 8005ba8:	f7fc f9e0 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : OFF");
 8005bac:	481a      	ldr	r0, [pc, #104]	; (8005c18 <test+0x334>)
 8005bae:	f7fe fe2f 	bl	8004810 <OLED_Printf>
					break;
 8005bb2:	e038      	b.n	8005c26 <test+0x342>
				case 4:
					HAL_GPIO_WritePin(HD_GPIO_Port, HD_Pin, 1);
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	4810      	ldr	r0, [pc, #64]	; (8005bfc <test+0x318>)
 8005bba:	f7fc f9d7 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : OFF");
 8005bbe:	4817      	ldr	r0, [pc, #92]	; (8005c1c <test+0x338>)
 8005bc0:	f7fe fe26 	bl	8004810 <OLED_Printf>
					break;
 8005bc4:	e02f      	b.n	8005c26 <test+0x342>
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bcc:	480b      	ldr	r0, [pc, #44]	; (8005bfc <test+0x318>)
 8005bce:	f7fc f9cd 	bl	8001f6c <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : OFF");
 8005bd2:	4813      	ldr	r0, [pc, #76]	; (8005c20 <test+0x33c>)
 8005bd4:	f7fe fe1c 	bl	8004810 <OLED_Printf>
					break;
 8005bd8:	e025      	b.n	8005c26 <test+0x342>
 8005bda:	bf00      	nop
 8005bdc:	006600ff 	.word	0x006600ff
 8005be0:	20000258 	.word	0x20000258
 8005be4:	08008b4c 	.word	0x08008b4c
 8005be8:	aaaaaaab 	.word	0xaaaaaaab
 8005bec:	40020000 	.word	0x40020000
 8005bf0:	08008b54 	.word	0x08008b54
 8005bf4:	08008b64 	.word	0x08008b64
 8005bf8:	08008b74 	.word	0x08008b74
 8005bfc:	40020800 	.word	0x40020800
 8005c00:	08008b84 	.word	0x08008b84
 8005c04:	08008b94 	.word	0x08008b94
 8005c08:	08008ba4 	.word	0x08008ba4
 8005c0c:	08008bb4 	.word	0x08008bb4
 8005c10:	08008bc4 	.word	0x08008bc4
 8005c14:	08008bd4 	.word	0x08008bd4
 8005c18:	08008be4 	.word	0x08008be4
 8005c1c:	08008bf4 	.word	0x08008bf4
 8005c20:	08008c04 	.word	0x08008c04
				}
			}
 8005c24:	bf00      	nop

			SwitchLED(testList[idx].color);
 8005c26:	79fa      	ldrb	r2, [r7, #7]
 8005c28:	4920      	ldr	r1, [pc, #128]	; (8005cac <test+0x3c8>)
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3308      	adds	r3, #8
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	b298      	uxth	r0, r3
 8005c3c:	79fa      	ldrb	r2, [r7, #7]
 8005c3e:	491b      	ldr	r1, [pc, #108]	; (8005cac <test+0x3c8>)
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	4619      	mov	r1, r3
 8005c54:	f7ff fa10 	bl	8005078 <Switch_LED>
	for(;;){
 8005c58:	e67e      	b.n	8005958 <test+0x74>
			break;
 8005c5a:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c62:	4813      	ldr	r0, [pc, #76]	; (8005cb0 <test+0x3cc>)
 8005c64:	f7fc f982 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c6e:	4810      	ldr	r0, [pc, #64]	; (8005cb0 <test+0x3cc>)
 8005c70:	f7fc f97c 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 8005c74:	2201      	movs	r2, #1
 8005c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c7a:	480d      	ldr	r0, [pc, #52]	; (8005cb0 <test+0x3cc>)
 8005c7c:	f7fc f976 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HU_GPIO_Port, HU_Pin, 1);
 8005c80:	2201      	movs	r2, #1
 8005c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c86:	480b      	ldr	r0, [pc, #44]	; (8005cb4 <test+0x3d0>)
 8005c88:	f7fc f970 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD_GPIO_Port, HD_Pin, 1);
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	2180      	movs	r1, #128	; 0x80
 8005c90:	4808      	ldr	r0, [pc, #32]	; (8005cb4 <test+0x3d0>)
 8005c92:	f7fc f96b 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 8005c96:	2200      	movs	r2, #0
 8005c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c9c:	4805      	ldr	r0, [pc, #20]	; (8005cb4 <test+0x3d0>)
 8005c9e:	f7fc f965 	bl	8001f6c <HAL_GPIO_WritePin>

}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000258 	.word	0x20000258
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020800 	.word	0x40020800

08005cb8 <calloc>:
 8005cb8:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <calloc+0xc>)
 8005cba:	460a      	mov	r2, r1
 8005cbc:	4601      	mov	r1, r0
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	f000 b83c 	b.w	8005d3c <_calloc_r>
 8005cc4:	200002a0 	.word	0x200002a0

08005cc8 <__errno>:
 8005cc8:	4b01      	ldr	r3, [pc, #4]	; (8005cd0 <__errno+0x8>)
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	200002a0 	.word	0x200002a0

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4d0d      	ldr	r5, [pc, #52]	; (8005d0c <__libc_init_array+0x38>)
 8005cd8:	4c0d      	ldr	r4, [pc, #52]	; (8005d10 <__libc_init_array+0x3c>)
 8005cda:	1b64      	subs	r4, r4, r5
 8005cdc:	10a4      	asrs	r4, r4, #2
 8005cde:	2600      	movs	r6, #0
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	4d0b      	ldr	r5, [pc, #44]	; (8005d14 <__libc_init_array+0x40>)
 8005ce6:	4c0c      	ldr	r4, [pc, #48]	; (8005d18 <__libc_init_array+0x44>)
 8005ce8:	f002 feca 	bl	8008a80 <_init>
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	08009014 	.word	0x08009014
 8005d10:	08009014 	.word	0x08009014
 8005d14:	08009014 	.word	0x08009014
 8005d18:	08009018 	.word	0x08009018

08005d1c <malloc>:
 8005d1c:	4b02      	ldr	r3, [pc, #8]	; (8005d28 <malloc+0xc>)
 8005d1e:	4601      	mov	r1, r0
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	f000 b86b 	b.w	8005dfc <_malloc_r>
 8005d26:	bf00      	nop
 8005d28:	200002a0 	.word	0x200002a0

08005d2c <memset>:
 8005d2c:	4402      	add	r2, r0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d100      	bne.n	8005d36 <memset+0xa>
 8005d34:	4770      	bx	lr
 8005d36:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3a:	e7f9      	b.n	8005d30 <memset+0x4>

08005d3c <_calloc_r>:
 8005d3c:	b513      	push	{r0, r1, r4, lr}
 8005d3e:	434a      	muls	r2, r1
 8005d40:	4611      	mov	r1, r2
 8005d42:	9201      	str	r2, [sp, #4]
 8005d44:	f000 f85a 	bl	8005dfc <_malloc_r>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	b118      	cbz	r0, 8005d54 <_calloc_r+0x18>
 8005d4c:	9a01      	ldr	r2, [sp, #4]
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f7ff ffec 	bl	8005d2c <memset>
 8005d54:	4620      	mov	r0, r4
 8005d56:	b002      	add	sp, #8
 8005d58:	bd10      	pop	{r4, pc}
	...

08005d5c <_free_r>:
 8005d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d5e:	2900      	cmp	r1, #0
 8005d60:	d048      	beq.n	8005df4 <_free_r+0x98>
 8005d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d66:	9001      	str	r0, [sp, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d6e:	bfb8      	it	lt
 8005d70:	18e4      	addlt	r4, r4, r3
 8005d72:	f001 fbd7 	bl	8007524 <__malloc_lock>
 8005d76:	4a20      	ldr	r2, [pc, #128]	; (8005df8 <_free_r+0x9c>)
 8005d78:	9801      	ldr	r0, [sp, #4]
 8005d7a:	6813      	ldr	r3, [r2, #0]
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	b933      	cbnz	r3, 8005d8e <_free_r+0x32>
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	6014      	str	r4, [r2, #0]
 8005d84:	b003      	add	sp, #12
 8005d86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d8a:	f001 bbd1 	b.w	8007530 <__malloc_unlock>
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	d90b      	bls.n	8005daa <_free_r+0x4e>
 8005d92:	6821      	ldr	r1, [r4, #0]
 8005d94:	1862      	adds	r2, r4, r1
 8005d96:	4293      	cmp	r3, r2
 8005d98:	bf04      	itt	eq
 8005d9a:	681a      	ldreq	r2, [r3, #0]
 8005d9c:	685b      	ldreq	r3, [r3, #4]
 8005d9e:	6063      	str	r3, [r4, #4]
 8005da0:	bf04      	itt	eq
 8005da2:	1852      	addeq	r2, r2, r1
 8005da4:	6022      	streq	r2, [r4, #0]
 8005da6:	602c      	str	r4, [r5, #0]
 8005da8:	e7ec      	b.n	8005d84 <_free_r+0x28>
 8005daa:	461a      	mov	r2, r3
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b10b      	cbz	r3, 8005db4 <_free_r+0x58>
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d9fa      	bls.n	8005daa <_free_r+0x4e>
 8005db4:	6811      	ldr	r1, [r2, #0]
 8005db6:	1855      	adds	r5, r2, r1
 8005db8:	42a5      	cmp	r5, r4
 8005dba:	d10b      	bne.n	8005dd4 <_free_r+0x78>
 8005dbc:	6824      	ldr	r4, [r4, #0]
 8005dbe:	4421      	add	r1, r4
 8005dc0:	1854      	adds	r4, r2, r1
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	6011      	str	r1, [r2, #0]
 8005dc6:	d1dd      	bne.n	8005d84 <_free_r+0x28>
 8005dc8:	681c      	ldr	r4, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	6053      	str	r3, [r2, #4]
 8005dce:	4421      	add	r1, r4
 8005dd0:	6011      	str	r1, [r2, #0]
 8005dd2:	e7d7      	b.n	8005d84 <_free_r+0x28>
 8005dd4:	d902      	bls.n	8005ddc <_free_r+0x80>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	6003      	str	r3, [r0, #0]
 8005dda:	e7d3      	b.n	8005d84 <_free_r+0x28>
 8005ddc:	6825      	ldr	r5, [r4, #0]
 8005dde:	1961      	adds	r1, r4, r5
 8005de0:	428b      	cmp	r3, r1
 8005de2:	bf04      	itt	eq
 8005de4:	6819      	ldreq	r1, [r3, #0]
 8005de6:	685b      	ldreq	r3, [r3, #4]
 8005de8:	6063      	str	r3, [r4, #4]
 8005dea:	bf04      	itt	eq
 8005dec:	1949      	addeq	r1, r1, r5
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	6054      	str	r4, [r2, #4]
 8005df2:	e7c7      	b.n	8005d84 <_free_r+0x28>
 8005df4:	b003      	add	sp, #12
 8005df6:	bd30      	pop	{r4, r5, pc}
 8005df8:	200004a4 	.word	0x200004a4

08005dfc <_malloc_r>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	1ccd      	adds	r5, r1, #3
 8005e00:	f025 0503 	bic.w	r5, r5, #3
 8005e04:	3508      	adds	r5, #8
 8005e06:	2d0c      	cmp	r5, #12
 8005e08:	bf38      	it	cc
 8005e0a:	250c      	movcc	r5, #12
 8005e0c:	2d00      	cmp	r5, #0
 8005e0e:	4606      	mov	r6, r0
 8005e10:	db01      	blt.n	8005e16 <_malloc_r+0x1a>
 8005e12:	42a9      	cmp	r1, r5
 8005e14:	d903      	bls.n	8005e1e <_malloc_r+0x22>
 8005e16:	230c      	movs	r3, #12
 8005e18:	6033      	str	r3, [r6, #0]
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e1e:	f001 fb81 	bl	8007524 <__malloc_lock>
 8005e22:	4921      	ldr	r1, [pc, #132]	; (8005ea8 <_malloc_r+0xac>)
 8005e24:	680a      	ldr	r2, [r1, #0]
 8005e26:	4614      	mov	r4, r2
 8005e28:	b99c      	cbnz	r4, 8005e52 <_malloc_r+0x56>
 8005e2a:	4f20      	ldr	r7, [pc, #128]	; (8005eac <_malloc_r+0xb0>)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	b923      	cbnz	r3, 8005e3a <_malloc_r+0x3e>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4630      	mov	r0, r6
 8005e34:	f000 fca6 	bl	8006784 <_sbrk_r>
 8005e38:	6038      	str	r0, [r7, #0]
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 fca1 	bl	8006784 <_sbrk_r>
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	d123      	bne.n	8005e8e <_malloc_r+0x92>
 8005e46:	230c      	movs	r3, #12
 8005e48:	6033      	str	r3, [r6, #0]
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f001 fb70 	bl	8007530 <__malloc_unlock>
 8005e50:	e7e3      	b.n	8005e1a <_malloc_r+0x1e>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	1b5b      	subs	r3, r3, r5
 8005e56:	d417      	bmi.n	8005e88 <_malloc_r+0x8c>
 8005e58:	2b0b      	cmp	r3, #11
 8005e5a:	d903      	bls.n	8005e64 <_malloc_r+0x68>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	441c      	add	r4, r3
 8005e60:	6025      	str	r5, [r4, #0]
 8005e62:	e004      	b.n	8005e6e <_malloc_r+0x72>
 8005e64:	6863      	ldr	r3, [r4, #4]
 8005e66:	42a2      	cmp	r2, r4
 8005e68:	bf0c      	ite	eq
 8005e6a:	600b      	streq	r3, [r1, #0]
 8005e6c:	6053      	strne	r3, [r2, #4]
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f001 fb5e 	bl	8007530 <__malloc_unlock>
 8005e74:	f104 000b 	add.w	r0, r4, #11
 8005e78:	1d23      	adds	r3, r4, #4
 8005e7a:	f020 0007 	bic.w	r0, r0, #7
 8005e7e:	1ac2      	subs	r2, r0, r3
 8005e80:	d0cc      	beq.n	8005e1c <_malloc_r+0x20>
 8005e82:	1a1b      	subs	r3, r3, r0
 8005e84:	50a3      	str	r3, [r4, r2]
 8005e86:	e7c9      	b.n	8005e1c <_malloc_r+0x20>
 8005e88:	4622      	mov	r2, r4
 8005e8a:	6864      	ldr	r4, [r4, #4]
 8005e8c:	e7cc      	b.n	8005e28 <_malloc_r+0x2c>
 8005e8e:	1cc4      	adds	r4, r0, #3
 8005e90:	f024 0403 	bic.w	r4, r4, #3
 8005e94:	42a0      	cmp	r0, r4
 8005e96:	d0e3      	beq.n	8005e60 <_malloc_r+0x64>
 8005e98:	1a21      	subs	r1, r4, r0
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 fc72 	bl	8006784 <_sbrk_r>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d1dd      	bne.n	8005e60 <_malloc_r+0x64>
 8005ea4:	e7cf      	b.n	8005e46 <_malloc_r+0x4a>
 8005ea6:	bf00      	nop
 8005ea8:	200004a4 	.word	0x200004a4
 8005eac:	200004a8 	.word	0x200004a8

08005eb0 <__cvt>:
 8005eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	ec55 4b10 	vmov	r4, r5, d0
 8005eb8:	2d00      	cmp	r5, #0
 8005eba:	460e      	mov	r6, r1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	bfbb      	ittet	lt
 8005ec2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ec6:	461d      	movlt	r5, r3
 8005ec8:	2300      	movge	r3, #0
 8005eca:	232d      	movlt	r3, #45	; 0x2d
 8005ecc:	700b      	strb	r3, [r1, #0]
 8005ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	f023 0820 	bic.w	r8, r3, #32
 8005eda:	bfbc      	itt	lt
 8005edc:	4622      	movlt	r2, r4
 8005ede:	4614      	movlt	r4, r2
 8005ee0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ee4:	d005      	beq.n	8005ef2 <__cvt+0x42>
 8005ee6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005eea:	d100      	bne.n	8005eee <__cvt+0x3e>
 8005eec:	3601      	adds	r6, #1
 8005eee:	2102      	movs	r1, #2
 8005ef0:	e000      	b.n	8005ef4 <__cvt+0x44>
 8005ef2:	2103      	movs	r1, #3
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	ab02      	add	r3, sp, #8
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	ec45 4b10 	vmov	d0, r4, r5
 8005f00:	4653      	mov	r3, sl
 8005f02:	4632      	mov	r2, r6
 8005f04:	f000 fd10 	bl	8006928 <_dtoa_r>
 8005f08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	d102      	bne.n	8005f16 <__cvt+0x66>
 8005f10:	f019 0f01 	tst.w	r9, #1
 8005f14:	d022      	beq.n	8005f5c <__cvt+0xac>
 8005f16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f1a:	eb07 0906 	add.w	r9, r7, r6
 8005f1e:	d110      	bne.n	8005f42 <__cvt+0x92>
 8005f20:	783b      	ldrb	r3, [r7, #0]
 8005f22:	2b30      	cmp	r3, #48	; 0x30
 8005f24:	d10a      	bne.n	8005f3c <__cvt+0x8c>
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	f7fa fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f32:	b918      	cbnz	r0, 8005f3c <__cvt+0x8c>
 8005f34:	f1c6 0601 	rsb	r6, r6, #1
 8005f38:	f8ca 6000 	str.w	r6, [sl]
 8005f3c:	f8da 3000 	ldr.w	r3, [sl]
 8005f40:	4499      	add	r9, r3
 8005f42:	2200      	movs	r2, #0
 8005f44:	2300      	movs	r3, #0
 8005f46:	4620      	mov	r0, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f7fa fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f4e:	b108      	cbz	r0, 8005f54 <__cvt+0xa4>
 8005f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f54:	2230      	movs	r2, #48	; 0x30
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	454b      	cmp	r3, r9
 8005f5a:	d307      	bcc.n	8005f6c <__cvt+0xbc>
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f60:	1bdb      	subs	r3, r3, r7
 8005f62:	4638      	mov	r0, r7
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	b004      	add	sp, #16
 8005f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	9103      	str	r1, [sp, #12]
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e7f0      	b.n	8005f56 <__cvt+0xa6>

08005f74 <__exponent>:
 8005f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f76:	4603      	mov	r3, r0
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	bfb8      	it	lt
 8005f7c:	4249      	neglt	r1, r1
 8005f7e:	f803 2b02 	strb.w	r2, [r3], #2
 8005f82:	bfb4      	ite	lt
 8005f84:	222d      	movlt	r2, #45	; 0x2d
 8005f86:	222b      	movge	r2, #43	; 0x2b
 8005f88:	2909      	cmp	r1, #9
 8005f8a:	7042      	strb	r2, [r0, #1]
 8005f8c:	dd2a      	ble.n	8005fe4 <__exponent+0x70>
 8005f8e:	f10d 0407 	add.w	r4, sp, #7
 8005f92:	46a4      	mov	ip, r4
 8005f94:	270a      	movs	r7, #10
 8005f96:	46a6      	mov	lr, r4
 8005f98:	460a      	mov	r2, r1
 8005f9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f9e:	fb07 1516 	mls	r5, r7, r6, r1
 8005fa2:	3530      	adds	r5, #48	; 0x30
 8005fa4:	2a63      	cmp	r2, #99	; 0x63
 8005fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005faa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fae:	4631      	mov	r1, r6
 8005fb0:	dcf1      	bgt.n	8005f96 <__exponent+0x22>
 8005fb2:	3130      	adds	r1, #48	; 0x30
 8005fb4:	f1ae 0502 	sub.w	r5, lr, #2
 8005fb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fbc:	1c44      	adds	r4, r0, #1
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4561      	cmp	r1, ip
 8005fc2:	d30a      	bcc.n	8005fda <__exponent+0x66>
 8005fc4:	f10d 0209 	add.w	r2, sp, #9
 8005fc8:	eba2 020e 	sub.w	r2, r2, lr
 8005fcc:	4565      	cmp	r5, ip
 8005fce:	bf88      	it	hi
 8005fd0:	2200      	movhi	r2, #0
 8005fd2:	4413      	add	r3, r2
 8005fd4:	1a18      	subs	r0, r3, r0
 8005fd6:	b003      	add	sp, #12
 8005fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005fe2:	e7ed      	b.n	8005fc0 <__exponent+0x4c>
 8005fe4:	2330      	movs	r3, #48	; 0x30
 8005fe6:	3130      	adds	r1, #48	; 0x30
 8005fe8:	7083      	strb	r3, [r0, #2]
 8005fea:	70c1      	strb	r1, [r0, #3]
 8005fec:	1d03      	adds	r3, r0, #4
 8005fee:	e7f1      	b.n	8005fd4 <__exponent+0x60>

08005ff0 <_printf_float>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	ed2d 8b02 	vpush	{d8}
 8005ff8:	b08d      	sub	sp, #52	; 0x34
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006000:	4616      	mov	r6, r2
 8006002:	461f      	mov	r7, r3
 8006004:	4605      	mov	r5, r0
 8006006:	f001 fa7b 	bl	8007500 <_localeconv_r>
 800600a:	f8d0 a000 	ldr.w	sl, [r0]
 800600e:	4650      	mov	r0, sl
 8006010:	f7fa f8e6 	bl	80001e0 <strlen>
 8006014:	2300      	movs	r3, #0
 8006016:	930a      	str	r3, [sp, #40]	; 0x28
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	f8d8 3000 	ldr.w	r3, [r8]
 8006020:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006024:	3307      	adds	r3, #7
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	f103 0208 	add.w	r2, r3, #8
 800602e:	f8c8 2000 	str.w	r2, [r8]
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800603a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800603e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006042:	9307      	str	r3, [sp, #28]
 8006044:	f8cd 8018 	str.w	r8, [sp, #24]
 8006048:	ee08 0a10 	vmov	s16, r0
 800604c:	4b9f      	ldr	r3, [pc, #636]	; (80062cc <_printf_float+0x2dc>)
 800604e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	f7fa fd71 	bl	8000b3c <__aeabi_dcmpun>
 800605a:	bb88      	cbnz	r0, 80060c0 <_printf_float+0xd0>
 800605c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006060:	4b9a      	ldr	r3, [pc, #616]	; (80062cc <_printf_float+0x2dc>)
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	f7fa fd4b 	bl	8000b00 <__aeabi_dcmple>
 800606a:	bb48      	cbnz	r0, 80060c0 <_printf_float+0xd0>
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa fd3a 	bl	8000aec <__aeabi_dcmplt>
 8006078:	b110      	cbz	r0, 8006080 <_printf_float+0x90>
 800607a:	232d      	movs	r3, #45	; 0x2d
 800607c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006080:	4b93      	ldr	r3, [pc, #588]	; (80062d0 <_printf_float+0x2e0>)
 8006082:	4894      	ldr	r0, [pc, #592]	; (80062d4 <_printf_float+0x2e4>)
 8006084:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006088:	bf94      	ite	ls
 800608a:	4698      	movls	r8, r3
 800608c:	4680      	movhi	r8, r0
 800608e:	2303      	movs	r3, #3
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	9b05      	ldr	r3, [sp, #20]
 8006094:	f023 0204 	bic.w	r2, r3, #4
 8006098:	6022      	str	r2, [r4, #0]
 800609a:	f04f 0900 	mov.w	r9, #0
 800609e:	9700      	str	r7, [sp, #0]
 80060a0:	4633      	mov	r3, r6
 80060a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80060a4:	4621      	mov	r1, r4
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f9d8 	bl	800645c <_printf_common>
 80060ac:	3001      	adds	r0, #1
 80060ae:	f040 8090 	bne.w	80061d2 <_printf_float+0x1e2>
 80060b2:	f04f 30ff 	mov.w	r0, #4294967295
 80060b6:	b00d      	add	sp, #52	; 0x34
 80060b8:	ecbd 8b02 	vpop	{d8}
 80060bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	4649      	mov	r1, r9
 80060c8:	f7fa fd38 	bl	8000b3c <__aeabi_dcmpun>
 80060cc:	b140      	cbz	r0, 80060e0 <_printf_float+0xf0>
 80060ce:	464b      	mov	r3, r9
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bfbc      	itt	lt
 80060d4:	232d      	movlt	r3, #45	; 0x2d
 80060d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80060da:	487f      	ldr	r0, [pc, #508]	; (80062d8 <_printf_float+0x2e8>)
 80060dc:	4b7f      	ldr	r3, [pc, #508]	; (80062dc <_printf_float+0x2ec>)
 80060de:	e7d1      	b.n	8006084 <_printf_float+0x94>
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80060e6:	9206      	str	r2, [sp, #24]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	d13f      	bne.n	800616c <_printf_float+0x17c>
 80060ec:	2306      	movs	r3, #6
 80060ee:	6063      	str	r3, [r4, #4]
 80060f0:	9b05      	ldr	r3, [sp, #20]
 80060f2:	6861      	ldr	r1, [r4, #4]
 80060f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060f8:	2300      	movs	r3, #0
 80060fa:	9303      	str	r3, [sp, #12]
 80060fc:	ab0a      	add	r3, sp, #40	; 0x28
 80060fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006102:	ab09      	add	r3, sp, #36	; 0x24
 8006104:	ec49 8b10 	vmov	d0, r8, r9
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	6022      	str	r2, [r4, #0]
 800610c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006110:	4628      	mov	r0, r5
 8006112:	f7ff fecd 	bl	8005eb0 <__cvt>
 8006116:	9b06      	ldr	r3, [sp, #24]
 8006118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800611a:	2b47      	cmp	r3, #71	; 0x47
 800611c:	4680      	mov	r8, r0
 800611e:	d108      	bne.n	8006132 <_printf_float+0x142>
 8006120:	1cc8      	adds	r0, r1, #3
 8006122:	db02      	blt.n	800612a <_printf_float+0x13a>
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	4299      	cmp	r1, r3
 8006128:	dd41      	ble.n	80061ae <_printf_float+0x1be>
 800612a:	f1ab 0b02 	sub.w	fp, fp, #2
 800612e:	fa5f fb8b 	uxtb.w	fp, fp
 8006132:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006136:	d820      	bhi.n	800617a <_printf_float+0x18a>
 8006138:	3901      	subs	r1, #1
 800613a:	465a      	mov	r2, fp
 800613c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006140:	9109      	str	r1, [sp, #36]	; 0x24
 8006142:	f7ff ff17 	bl	8005f74 <__exponent>
 8006146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006148:	1813      	adds	r3, r2, r0
 800614a:	2a01      	cmp	r2, #1
 800614c:	4681      	mov	r9, r0
 800614e:	6123      	str	r3, [r4, #16]
 8006150:	dc02      	bgt.n	8006158 <_printf_float+0x168>
 8006152:	6822      	ldr	r2, [r4, #0]
 8006154:	07d2      	lsls	r2, r2, #31
 8006156:	d501      	bpl.n	800615c <_printf_float+0x16c>
 8006158:	3301      	adds	r3, #1
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006160:	2b00      	cmp	r3, #0
 8006162:	d09c      	beq.n	800609e <_printf_float+0xae>
 8006164:	232d      	movs	r3, #45	; 0x2d
 8006166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616a:	e798      	b.n	800609e <_printf_float+0xae>
 800616c:	9a06      	ldr	r2, [sp, #24]
 800616e:	2a47      	cmp	r2, #71	; 0x47
 8006170:	d1be      	bne.n	80060f0 <_printf_float+0x100>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1bc      	bne.n	80060f0 <_printf_float+0x100>
 8006176:	2301      	movs	r3, #1
 8006178:	e7b9      	b.n	80060ee <_printf_float+0xfe>
 800617a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800617e:	d118      	bne.n	80061b2 <_printf_float+0x1c2>
 8006180:	2900      	cmp	r1, #0
 8006182:	6863      	ldr	r3, [r4, #4]
 8006184:	dd0b      	ble.n	800619e <_printf_float+0x1ae>
 8006186:	6121      	str	r1, [r4, #16]
 8006188:	b913      	cbnz	r3, 8006190 <_printf_float+0x1a0>
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	07d0      	lsls	r0, r2, #31
 800618e:	d502      	bpl.n	8006196 <_printf_float+0x1a6>
 8006190:	3301      	adds	r3, #1
 8006192:	440b      	add	r3, r1
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	65a1      	str	r1, [r4, #88]	; 0x58
 8006198:	f04f 0900 	mov.w	r9, #0
 800619c:	e7de      	b.n	800615c <_printf_float+0x16c>
 800619e:	b913      	cbnz	r3, 80061a6 <_printf_float+0x1b6>
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	07d2      	lsls	r2, r2, #31
 80061a4:	d501      	bpl.n	80061aa <_printf_float+0x1ba>
 80061a6:	3302      	adds	r3, #2
 80061a8:	e7f4      	b.n	8006194 <_printf_float+0x1a4>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7f2      	b.n	8006194 <_printf_float+0x1a4>
 80061ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b4:	4299      	cmp	r1, r3
 80061b6:	db05      	blt.n	80061c4 <_printf_float+0x1d4>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	6121      	str	r1, [r4, #16]
 80061bc:	07d8      	lsls	r0, r3, #31
 80061be:	d5ea      	bpl.n	8006196 <_printf_float+0x1a6>
 80061c0:	1c4b      	adds	r3, r1, #1
 80061c2:	e7e7      	b.n	8006194 <_printf_float+0x1a4>
 80061c4:	2900      	cmp	r1, #0
 80061c6:	bfd4      	ite	le
 80061c8:	f1c1 0202 	rsble	r2, r1, #2
 80061cc:	2201      	movgt	r2, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	e7e0      	b.n	8006194 <_printf_float+0x1a4>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	055a      	lsls	r2, r3, #21
 80061d6:	d407      	bmi.n	80061e8 <_printf_float+0x1f8>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	4642      	mov	r2, r8
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	d12c      	bne.n	8006240 <_printf_float+0x250>
 80061e6:	e764      	b.n	80060b2 <_printf_float+0xc2>
 80061e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061ec:	f240 80e0 	bls.w	80063b0 <_printf_float+0x3c0>
 80061f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061f4:	2200      	movs	r2, #0
 80061f6:	2300      	movs	r3, #0
 80061f8:	f7fa fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d034      	beq.n	800626a <_printf_float+0x27a>
 8006200:	4a37      	ldr	r2, [pc, #220]	; (80062e0 <_printf_float+0x2f0>)
 8006202:	2301      	movs	r3, #1
 8006204:	4631      	mov	r1, r6
 8006206:	4628      	mov	r0, r5
 8006208:	47b8      	blx	r7
 800620a:	3001      	adds	r0, #1
 800620c:	f43f af51 	beq.w	80060b2 <_printf_float+0xc2>
 8006210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006214:	429a      	cmp	r2, r3
 8006216:	db02      	blt.n	800621e <_printf_float+0x22e>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	07d8      	lsls	r0, r3, #31
 800621c:	d510      	bpl.n	8006240 <_printf_float+0x250>
 800621e:	ee18 3a10 	vmov	r3, s16
 8006222:	4652      	mov	r2, sl
 8006224:	4631      	mov	r1, r6
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f af41 	beq.w	80060b2 <_printf_float+0xc2>
 8006230:	f04f 0800 	mov.w	r8, #0
 8006234:	f104 091a 	add.w	r9, r4, #26
 8006238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623a:	3b01      	subs	r3, #1
 800623c:	4543      	cmp	r3, r8
 800623e:	dc09      	bgt.n	8006254 <_printf_float+0x264>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	079b      	lsls	r3, r3, #30
 8006244:	f100 8105 	bmi.w	8006452 <_printf_float+0x462>
 8006248:	68e0      	ldr	r0, [r4, #12]
 800624a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624c:	4298      	cmp	r0, r3
 800624e:	bfb8      	it	lt
 8006250:	4618      	movlt	r0, r3
 8006252:	e730      	b.n	80060b6 <_printf_float+0xc6>
 8006254:	2301      	movs	r3, #1
 8006256:	464a      	mov	r2, r9
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	f43f af27 	beq.w	80060b2 <_printf_float+0xc2>
 8006264:	f108 0801 	add.w	r8, r8, #1
 8006268:	e7e6      	b.n	8006238 <_printf_float+0x248>
 800626a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc39      	bgt.n	80062e4 <_printf_float+0x2f4>
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <_printf_float+0x2f0>)
 8006272:	2301      	movs	r3, #1
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	47b8      	blx	r7
 800627a:	3001      	adds	r0, #1
 800627c:	f43f af19 	beq.w	80060b2 <_printf_float+0xc2>
 8006280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006284:	4313      	orrs	r3, r2
 8006286:	d102      	bne.n	800628e <_printf_float+0x29e>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	07d9      	lsls	r1, r3, #31
 800628c:	d5d8      	bpl.n	8006240 <_printf_float+0x250>
 800628e:	ee18 3a10 	vmov	r3, s16
 8006292:	4652      	mov	r2, sl
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	f43f af09 	beq.w	80060b2 <_printf_float+0xc2>
 80062a0:	f04f 0900 	mov.w	r9, #0
 80062a4:	f104 0a1a 	add.w	sl, r4, #26
 80062a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062aa:	425b      	negs	r3, r3
 80062ac:	454b      	cmp	r3, r9
 80062ae:	dc01      	bgt.n	80062b4 <_printf_float+0x2c4>
 80062b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b2:	e792      	b.n	80061da <_printf_float+0x1ea>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4652      	mov	r2, sl
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	f43f aef7 	beq.w	80060b2 <_printf_float+0xc2>
 80062c4:	f109 0901 	add.w	r9, r9, #1
 80062c8:	e7ee      	b.n	80062a8 <_printf_float+0x2b8>
 80062ca:	bf00      	nop
 80062cc:	7fefffff 	.word	0x7fefffff
 80062d0:	08008c30 	.word	0x08008c30
 80062d4:	08008c34 	.word	0x08008c34
 80062d8:	08008c3c 	.word	0x08008c3c
 80062dc:	08008c38 	.word	0x08008c38
 80062e0:	08008c40 	.word	0x08008c40
 80062e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062e8:	429a      	cmp	r2, r3
 80062ea:	bfa8      	it	ge
 80062ec:	461a      	movge	r2, r3
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	4691      	mov	r9, r2
 80062f2:	dc37      	bgt.n	8006364 <_printf_float+0x374>
 80062f4:	f04f 0b00 	mov.w	fp, #0
 80062f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062fc:	f104 021a 	add.w	r2, r4, #26
 8006300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006302:	9305      	str	r3, [sp, #20]
 8006304:	eba3 0309 	sub.w	r3, r3, r9
 8006308:	455b      	cmp	r3, fp
 800630a:	dc33      	bgt.n	8006374 <_printf_float+0x384>
 800630c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006310:	429a      	cmp	r2, r3
 8006312:	db3b      	blt.n	800638c <_printf_float+0x39c>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	07da      	lsls	r2, r3, #31
 8006318:	d438      	bmi.n	800638c <_printf_float+0x39c>
 800631a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800631c:	9b05      	ldr	r3, [sp, #20]
 800631e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	eba2 0901 	sub.w	r9, r2, r1
 8006326:	4599      	cmp	r9, r3
 8006328:	bfa8      	it	ge
 800632a:	4699      	movge	r9, r3
 800632c:	f1b9 0f00 	cmp.w	r9, #0
 8006330:	dc35      	bgt.n	800639e <_printf_float+0x3ae>
 8006332:	f04f 0800 	mov.w	r8, #0
 8006336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800633a:	f104 0a1a 	add.w	sl, r4, #26
 800633e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	eba3 0309 	sub.w	r3, r3, r9
 8006348:	4543      	cmp	r3, r8
 800634a:	f77f af79 	ble.w	8006240 <_printf_float+0x250>
 800634e:	2301      	movs	r3, #1
 8006350:	4652      	mov	r2, sl
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f aeaa 	beq.w	80060b2 <_printf_float+0xc2>
 800635e:	f108 0801 	add.w	r8, r8, #1
 8006362:	e7ec      	b.n	800633e <_printf_float+0x34e>
 8006364:	4613      	mov	r3, r2
 8006366:	4631      	mov	r1, r6
 8006368:	4642      	mov	r2, r8
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	d1c0      	bne.n	80062f4 <_printf_float+0x304>
 8006372:	e69e      	b.n	80060b2 <_printf_float+0xc2>
 8006374:	2301      	movs	r3, #1
 8006376:	4631      	mov	r1, r6
 8006378:	4628      	mov	r0, r5
 800637a:	9205      	str	r2, [sp, #20]
 800637c:	47b8      	blx	r7
 800637e:	3001      	adds	r0, #1
 8006380:	f43f ae97 	beq.w	80060b2 <_printf_float+0xc2>
 8006384:	9a05      	ldr	r2, [sp, #20]
 8006386:	f10b 0b01 	add.w	fp, fp, #1
 800638a:	e7b9      	b.n	8006300 <_printf_float+0x310>
 800638c:	ee18 3a10 	vmov	r3, s16
 8006390:	4652      	mov	r2, sl
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	d1be      	bne.n	800631a <_printf_float+0x32a>
 800639c:	e689      	b.n	80060b2 <_printf_float+0xc2>
 800639e:	9a05      	ldr	r2, [sp, #20]
 80063a0:	464b      	mov	r3, r9
 80063a2:	4442      	add	r2, r8
 80063a4:	4631      	mov	r1, r6
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	d1c1      	bne.n	8006332 <_printf_float+0x342>
 80063ae:	e680      	b.n	80060b2 <_printf_float+0xc2>
 80063b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b2:	2a01      	cmp	r2, #1
 80063b4:	dc01      	bgt.n	80063ba <_printf_float+0x3ca>
 80063b6:	07db      	lsls	r3, r3, #31
 80063b8:	d538      	bpl.n	800642c <_printf_float+0x43c>
 80063ba:	2301      	movs	r3, #1
 80063bc:	4642      	mov	r2, r8
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	f43f ae74 	beq.w	80060b2 <_printf_float+0xc2>
 80063ca:	ee18 3a10 	vmov	r3, s16
 80063ce:	4652      	mov	r2, sl
 80063d0:	4631      	mov	r1, r6
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	f43f ae6b 	beq.w	80060b2 <_printf_float+0xc2>
 80063dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063e0:	2200      	movs	r2, #0
 80063e2:	2300      	movs	r3, #0
 80063e4:	f7fa fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e8:	b9d8      	cbnz	r0, 8006422 <_printf_float+0x432>
 80063ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ec:	f108 0201 	add.w	r2, r8, #1
 80063f0:	3b01      	subs	r3, #1
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	d10e      	bne.n	800641a <_printf_float+0x42a>
 80063fc:	e659      	b.n	80060b2 <_printf_float+0xc2>
 80063fe:	2301      	movs	r3, #1
 8006400:	4652      	mov	r2, sl
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	f43f ae52 	beq.w	80060b2 <_printf_float+0xc2>
 800640e:	f108 0801 	add.w	r8, r8, #1
 8006412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006414:	3b01      	subs	r3, #1
 8006416:	4543      	cmp	r3, r8
 8006418:	dcf1      	bgt.n	80063fe <_printf_float+0x40e>
 800641a:	464b      	mov	r3, r9
 800641c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006420:	e6dc      	b.n	80061dc <_printf_float+0x1ec>
 8006422:	f04f 0800 	mov.w	r8, #0
 8006426:	f104 0a1a 	add.w	sl, r4, #26
 800642a:	e7f2      	b.n	8006412 <_printf_float+0x422>
 800642c:	2301      	movs	r3, #1
 800642e:	4642      	mov	r2, r8
 8006430:	e7df      	b.n	80063f2 <_printf_float+0x402>
 8006432:	2301      	movs	r3, #1
 8006434:	464a      	mov	r2, r9
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f ae38 	beq.w	80060b2 <_printf_float+0xc2>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	68e3      	ldr	r3, [r4, #12]
 8006448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800644a:	1a5b      	subs	r3, r3, r1
 800644c:	4543      	cmp	r3, r8
 800644e:	dcf0      	bgt.n	8006432 <_printf_float+0x442>
 8006450:	e6fa      	b.n	8006248 <_printf_float+0x258>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	f104 0919 	add.w	r9, r4, #25
 800645a:	e7f4      	b.n	8006446 <_printf_float+0x456>

0800645c <_printf_common>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	4616      	mov	r6, r2
 8006462:	4699      	mov	r9, r3
 8006464:	688a      	ldr	r2, [r1, #8]
 8006466:	690b      	ldr	r3, [r1, #16]
 8006468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800646c:	4293      	cmp	r3, r2
 800646e:	bfb8      	it	lt
 8006470:	4613      	movlt	r3, r2
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006478:	4607      	mov	r7, r0
 800647a:	460c      	mov	r4, r1
 800647c:	b10a      	cbz	r2, 8006482 <_printf_common+0x26>
 800647e:	3301      	adds	r3, #1
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	0699      	lsls	r1, r3, #26
 8006486:	bf42      	ittt	mi
 8006488:	6833      	ldrmi	r3, [r6, #0]
 800648a:	3302      	addmi	r3, #2
 800648c:	6033      	strmi	r3, [r6, #0]
 800648e:	6825      	ldr	r5, [r4, #0]
 8006490:	f015 0506 	ands.w	r5, r5, #6
 8006494:	d106      	bne.n	80064a4 <_printf_common+0x48>
 8006496:	f104 0a19 	add.w	sl, r4, #25
 800649a:	68e3      	ldr	r3, [r4, #12]
 800649c:	6832      	ldr	r2, [r6, #0]
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	dc26      	bgt.n	80064f2 <_printf_common+0x96>
 80064a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064a8:	1e13      	subs	r3, r2, #0
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	bf18      	it	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	0692      	lsls	r2, r2, #26
 80064b2:	d42b      	bmi.n	800650c <_printf_common+0xb0>
 80064b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064b8:	4649      	mov	r1, r9
 80064ba:	4638      	mov	r0, r7
 80064bc:	47c0      	blx	r8
 80064be:	3001      	adds	r0, #1
 80064c0:	d01e      	beq.n	8006500 <_printf_common+0xa4>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	68e5      	ldr	r5, [r4, #12]
 80064c6:	6832      	ldr	r2, [r6, #0]
 80064c8:	f003 0306 	and.w	r3, r3, #6
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	bf08      	it	eq
 80064d0:	1aad      	subeq	r5, r5, r2
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	6922      	ldr	r2, [r4, #16]
 80064d6:	bf0c      	ite	eq
 80064d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064dc:	2500      	movne	r5, #0
 80064de:	4293      	cmp	r3, r2
 80064e0:	bfc4      	itt	gt
 80064e2:	1a9b      	subgt	r3, r3, r2
 80064e4:	18ed      	addgt	r5, r5, r3
 80064e6:	2600      	movs	r6, #0
 80064e8:	341a      	adds	r4, #26
 80064ea:	42b5      	cmp	r5, r6
 80064ec:	d11a      	bne.n	8006524 <_printf_common+0xc8>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e008      	b.n	8006504 <_printf_common+0xa8>
 80064f2:	2301      	movs	r3, #1
 80064f4:	4652      	mov	r2, sl
 80064f6:	4649      	mov	r1, r9
 80064f8:	4638      	mov	r0, r7
 80064fa:	47c0      	blx	r8
 80064fc:	3001      	adds	r0, #1
 80064fe:	d103      	bne.n	8006508 <_printf_common+0xac>
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	3501      	adds	r5, #1
 800650a:	e7c6      	b.n	800649a <_printf_common+0x3e>
 800650c:	18e1      	adds	r1, r4, r3
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	2030      	movs	r0, #48	; 0x30
 8006512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006516:	4422      	add	r2, r4
 8006518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800651c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006520:	3302      	adds	r3, #2
 8006522:	e7c7      	b.n	80064b4 <_printf_common+0x58>
 8006524:	2301      	movs	r3, #1
 8006526:	4622      	mov	r2, r4
 8006528:	4649      	mov	r1, r9
 800652a:	4638      	mov	r0, r7
 800652c:	47c0      	blx	r8
 800652e:	3001      	adds	r0, #1
 8006530:	d0e6      	beq.n	8006500 <_printf_common+0xa4>
 8006532:	3601      	adds	r6, #1
 8006534:	e7d9      	b.n	80064ea <_printf_common+0x8e>
	...

08006538 <_printf_i>:
 8006538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	4691      	mov	r9, r2
 8006540:	7e27      	ldrb	r7, [r4, #24]
 8006542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006544:	2f78      	cmp	r7, #120	; 0x78
 8006546:	4680      	mov	r8, r0
 8006548:	469a      	mov	sl, r3
 800654a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800654e:	d807      	bhi.n	8006560 <_printf_i+0x28>
 8006550:	2f62      	cmp	r7, #98	; 0x62
 8006552:	d80a      	bhi.n	800656a <_printf_i+0x32>
 8006554:	2f00      	cmp	r7, #0
 8006556:	f000 80d8 	beq.w	800670a <_printf_i+0x1d2>
 800655a:	2f58      	cmp	r7, #88	; 0x58
 800655c:	f000 80a3 	beq.w	80066a6 <_printf_i+0x16e>
 8006560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006568:	e03a      	b.n	80065e0 <_printf_i+0xa8>
 800656a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800656e:	2b15      	cmp	r3, #21
 8006570:	d8f6      	bhi.n	8006560 <_printf_i+0x28>
 8006572:	a001      	add	r0, pc, #4	; (adr r0, 8006578 <_printf_i+0x40>)
 8006574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006578:	080065d1 	.word	0x080065d1
 800657c:	080065e5 	.word	0x080065e5
 8006580:	08006561 	.word	0x08006561
 8006584:	08006561 	.word	0x08006561
 8006588:	08006561 	.word	0x08006561
 800658c:	08006561 	.word	0x08006561
 8006590:	080065e5 	.word	0x080065e5
 8006594:	08006561 	.word	0x08006561
 8006598:	08006561 	.word	0x08006561
 800659c:	08006561 	.word	0x08006561
 80065a0:	08006561 	.word	0x08006561
 80065a4:	080066f1 	.word	0x080066f1
 80065a8:	08006615 	.word	0x08006615
 80065ac:	080066d3 	.word	0x080066d3
 80065b0:	08006561 	.word	0x08006561
 80065b4:	08006561 	.word	0x08006561
 80065b8:	08006713 	.word	0x08006713
 80065bc:	08006561 	.word	0x08006561
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006561 	.word	0x08006561
 80065c8:	08006561 	.word	0x08006561
 80065cc:	080066db 	.word	0x080066db
 80065d0:	680b      	ldr	r3, [r1, #0]
 80065d2:	1d1a      	adds	r2, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	600a      	str	r2, [r1, #0]
 80065d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0a3      	b.n	800672c <_printf_i+0x1f4>
 80065e4:	6825      	ldr	r5, [r4, #0]
 80065e6:	6808      	ldr	r0, [r1, #0]
 80065e8:	062e      	lsls	r6, r5, #24
 80065ea:	f100 0304 	add.w	r3, r0, #4
 80065ee:	d50a      	bpl.n	8006606 <_printf_i+0xce>
 80065f0:	6805      	ldr	r5, [r0, #0]
 80065f2:	600b      	str	r3, [r1, #0]
 80065f4:	2d00      	cmp	r5, #0
 80065f6:	da03      	bge.n	8006600 <_printf_i+0xc8>
 80065f8:	232d      	movs	r3, #45	; 0x2d
 80065fa:	426d      	negs	r5, r5
 80065fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006600:	485e      	ldr	r0, [pc, #376]	; (800677c <_printf_i+0x244>)
 8006602:	230a      	movs	r3, #10
 8006604:	e019      	b.n	800663a <_printf_i+0x102>
 8006606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800660a:	6805      	ldr	r5, [r0, #0]
 800660c:	600b      	str	r3, [r1, #0]
 800660e:	bf18      	it	ne
 8006610:	b22d      	sxthne	r5, r5
 8006612:	e7ef      	b.n	80065f4 <_printf_i+0xbc>
 8006614:	680b      	ldr	r3, [r1, #0]
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	1d18      	adds	r0, r3, #4
 800661a:	6008      	str	r0, [r1, #0]
 800661c:	0628      	lsls	r0, r5, #24
 800661e:	d501      	bpl.n	8006624 <_printf_i+0xec>
 8006620:	681d      	ldr	r5, [r3, #0]
 8006622:	e002      	b.n	800662a <_printf_i+0xf2>
 8006624:	0669      	lsls	r1, r5, #25
 8006626:	d5fb      	bpl.n	8006620 <_printf_i+0xe8>
 8006628:	881d      	ldrh	r5, [r3, #0]
 800662a:	4854      	ldr	r0, [pc, #336]	; (800677c <_printf_i+0x244>)
 800662c:	2f6f      	cmp	r7, #111	; 0x6f
 800662e:	bf0c      	ite	eq
 8006630:	2308      	moveq	r3, #8
 8006632:	230a      	movne	r3, #10
 8006634:	2100      	movs	r1, #0
 8006636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800663a:	6866      	ldr	r6, [r4, #4]
 800663c:	60a6      	str	r6, [r4, #8]
 800663e:	2e00      	cmp	r6, #0
 8006640:	bfa2      	ittt	ge
 8006642:	6821      	ldrge	r1, [r4, #0]
 8006644:	f021 0104 	bicge.w	r1, r1, #4
 8006648:	6021      	strge	r1, [r4, #0]
 800664a:	b90d      	cbnz	r5, 8006650 <_printf_i+0x118>
 800664c:	2e00      	cmp	r6, #0
 800664e:	d04d      	beq.n	80066ec <_printf_i+0x1b4>
 8006650:	4616      	mov	r6, r2
 8006652:	fbb5 f1f3 	udiv	r1, r5, r3
 8006656:	fb03 5711 	mls	r7, r3, r1, r5
 800665a:	5dc7      	ldrb	r7, [r0, r7]
 800665c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006660:	462f      	mov	r7, r5
 8006662:	42bb      	cmp	r3, r7
 8006664:	460d      	mov	r5, r1
 8006666:	d9f4      	bls.n	8006652 <_printf_i+0x11a>
 8006668:	2b08      	cmp	r3, #8
 800666a:	d10b      	bne.n	8006684 <_printf_i+0x14c>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	07df      	lsls	r7, r3, #31
 8006670:	d508      	bpl.n	8006684 <_printf_i+0x14c>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	6861      	ldr	r1, [r4, #4]
 8006676:	4299      	cmp	r1, r3
 8006678:	bfde      	ittt	le
 800667a:	2330      	movle	r3, #48	; 0x30
 800667c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006684:	1b92      	subs	r2, r2, r6
 8006686:	6122      	str	r2, [r4, #16]
 8006688:	f8cd a000 	str.w	sl, [sp]
 800668c:	464b      	mov	r3, r9
 800668e:	aa03      	add	r2, sp, #12
 8006690:	4621      	mov	r1, r4
 8006692:	4640      	mov	r0, r8
 8006694:	f7ff fee2 	bl	800645c <_printf_common>
 8006698:	3001      	adds	r0, #1
 800669a:	d14c      	bne.n	8006736 <_printf_i+0x1fe>
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	b004      	add	sp, #16
 80066a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a6:	4835      	ldr	r0, [pc, #212]	; (800677c <_printf_i+0x244>)
 80066a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	680e      	ldr	r6, [r1, #0]
 80066b0:	061f      	lsls	r7, r3, #24
 80066b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80066b6:	600e      	str	r6, [r1, #0]
 80066b8:	d514      	bpl.n	80066e4 <_printf_i+0x1ac>
 80066ba:	07d9      	lsls	r1, r3, #31
 80066bc:	bf44      	itt	mi
 80066be:	f043 0320 	orrmi.w	r3, r3, #32
 80066c2:	6023      	strmi	r3, [r4, #0]
 80066c4:	b91d      	cbnz	r5, 80066ce <_printf_i+0x196>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f023 0320 	bic.w	r3, r3, #32
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	2310      	movs	r3, #16
 80066d0:	e7b0      	b.n	8006634 <_printf_i+0xfc>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f043 0320 	orr.w	r3, r3, #32
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	2378      	movs	r3, #120	; 0x78
 80066dc:	4828      	ldr	r0, [pc, #160]	; (8006780 <_printf_i+0x248>)
 80066de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066e2:	e7e3      	b.n	80066ac <_printf_i+0x174>
 80066e4:	065e      	lsls	r6, r3, #25
 80066e6:	bf48      	it	mi
 80066e8:	b2ad      	uxthmi	r5, r5
 80066ea:	e7e6      	b.n	80066ba <_printf_i+0x182>
 80066ec:	4616      	mov	r6, r2
 80066ee:	e7bb      	b.n	8006668 <_printf_i+0x130>
 80066f0:	680b      	ldr	r3, [r1, #0]
 80066f2:	6826      	ldr	r6, [r4, #0]
 80066f4:	6960      	ldr	r0, [r4, #20]
 80066f6:	1d1d      	adds	r5, r3, #4
 80066f8:	600d      	str	r5, [r1, #0]
 80066fa:	0635      	lsls	r5, r6, #24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	d501      	bpl.n	8006704 <_printf_i+0x1cc>
 8006700:	6018      	str	r0, [r3, #0]
 8006702:	e002      	b.n	800670a <_printf_i+0x1d2>
 8006704:	0671      	lsls	r1, r6, #25
 8006706:	d5fb      	bpl.n	8006700 <_printf_i+0x1c8>
 8006708:	8018      	strh	r0, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	4616      	mov	r6, r2
 8006710:	e7ba      	b.n	8006688 <_printf_i+0x150>
 8006712:	680b      	ldr	r3, [r1, #0]
 8006714:	1d1a      	adds	r2, r3, #4
 8006716:	600a      	str	r2, [r1, #0]
 8006718:	681e      	ldr	r6, [r3, #0]
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	2100      	movs	r1, #0
 800671e:	4630      	mov	r0, r6
 8006720:	f7f9 fd66 	bl	80001f0 <memchr>
 8006724:	b108      	cbz	r0, 800672a <_printf_i+0x1f2>
 8006726:	1b80      	subs	r0, r0, r6
 8006728:	6060      	str	r0, [r4, #4]
 800672a:	6863      	ldr	r3, [r4, #4]
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	2300      	movs	r3, #0
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006734:	e7a8      	b.n	8006688 <_printf_i+0x150>
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	4632      	mov	r2, r6
 800673a:	4649      	mov	r1, r9
 800673c:	4640      	mov	r0, r8
 800673e:	47d0      	blx	sl
 8006740:	3001      	adds	r0, #1
 8006742:	d0ab      	beq.n	800669c <_printf_i+0x164>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	079b      	lsls	r3, r3, #30
 8006748:	d413      	bmi.n	8006772 <_printf_i+0x23a>
 800674a:	68e0      	ldr	r0, [r4, #12]
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	4298      	cmp	r0, r3
 8006750:	bfb8      	it	lt
 8006752:	4618      	movlt	r0, r3
 8006754:	e7a4      	b.n	80066a0 <_printf_i+0x168>
 8006756:	2301      	movs	r3, #1
 8006758:	4632      	mov	r2, r6
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d09b      	beq.n	800669c <_printf_i+0x164>
 8006764:	3501      	adds	r5, #1
 8006766:	68e3      	ldr	r3, [r4, #12]
 8006768:	9903      	ldr	r1, [sp, #12]
 800676a:	1a5b      	subs	r3, r3, r1
 800676c:	42ab      	cmp	r3, r5
 800676e:	dcf2      	bgt.n	8006756 <_printf_i+0x21e>
 8006770:	e7eb      	b.n	800674a <_printf_i+0x212>
 8006772:	2500      	movs	r5, #0
 8006774:	f104 0619 	add.w	r6, r4, #25
 8006778:	e7f5      	b.n	8006766 <_printf_i+0x22e>
 800677a:	bf00      	nop
 800677c:	08008c42 	.word	0x08008c42
 8006780:	08008c53 	.word	0x08008c53

08006784 <_sbrk_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d06      	ldr	r5, [pc, #24]	; (80067a0 <_sbrk_r+0x1c>)
 8006788:	2300      	movs	r3, #0
 800678a:	4604      	mov	r4, r0
 800678c:	4608      	mov	r0, r1
 800678e:	602b      	str	r3, [r5, #0]
 8006790:	f7fb f862 	bl	8001858 <_sbrk>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	d102      	bne.n	800679e <_sbrk_r+0x1a>
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	b103      	cbz	r3, 800679e <_sbrk_r+0x1a>
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	2000063c 	.word	0x2000063c

080067a4 <strncpy>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	3901      	subs	r1, #1
 80067a8:	4603      	mov	r3, r0
 80067aa:	b132      	cbz	r2, 80067ba <strncpy+0x16>
 80067ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067b0:	f803 4b01 	strb.w	r4, [r3], #1
 80067b4:	3a01      	subs	r2, #1
 80067b6:	2c00      	cmp	r4, #0
 80067b8:	d1f7      	bne.n	80067aa <strncpy+0x6>
 80067ba:	441a      	add	r2, r3
 80067bc:	2100      	movs	r1, #0
 80067be:	4293      	cmp	r3, r2
 80067c0:	d100      	bne.n	80067c4 <strncpy+0x20>
 80067c2:	bd10      	pop	{r4, pc}
 80067c4:	f803 1b01 	strb.w	r1, [r3], #1
 80067c8:	e7f9      	b.n	80067be <strncpy+0x1a>
	...

080067cc <_vsiprintf_r>:
 80067cc:	b500      	push	{lr}
 80067ce:	b09b      	sub	sp, #108	; 0x6c
 80067d0:	9100      	str	r1, [sp, #0]
 80067d2:	9104      	str	r1, [sp, #16]
 80067d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d8:	9105      	str	r1, [sp, #20]
 80067da:	9102      	str	r1, [sp, #8]
 80067dc:	4905      	ldr	r1, [pc, #20]	; (80067f4 <_vsiprintf_r+0x28>)
 80067de:	9103      	str	r1, [sp, #12]
 80067e0:	4669      	mov	r1, sp
 80067e2:	f001 faab 	bl	8007d3c <_svfiprintf_r>
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	b01b      	add	sp, #108	; 0x6c
 80067ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80067f2:	bf00      	nop
 80067f4:	ffff0208 	.word	0xffff0208

080067f8 <vsiprintf>:
 80067f8:	4613      	mov	r3, r2
 80067fa:	460a      	mov	r2, r1
 80067fc:	4601      	mov	r1, r0
 80067fe:	4802      	ldr	r0, [pc, #8]	; (8006808 <vsiprintf+0x10>)
 8006800:	6800      	ldr	r0, [r0, #0]
 8006802:	f7ff bfe3 	b.w	80067cc <_vsiprintf_r>
 8006806:	bf00      	nop
 8006808:	200002a0 	.word	0x200002a0

0800680c <quorem>:
 800680c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	6903      	ldr	r3, [r0, #16]
 8006812:	690c      	ldr	r4, [r1, #16]
 8006814:	42a3      	cmp	r3, r4
 8006816:	4607      	mov	r7, r0
 8006818:	f2c0 8081 	blt.w	800691e <quorem+0x112>
 800681c:	3c01      	subs	r4, #1
 800681e:	f101 0814 	add.w	r8, r1, #20
 8006822:	f100 0514 	add.w	r5, r0, #20
 8006826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006834:	3301      	adds	r3, #1
 8006836:	429a      	cmp	r2, r3
 8006838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800683c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006840:	fbb2 f6f3 	udiv	r6, r2, r3
 8006844:	d331      	bcc.n	80068aa <quorem+0x9e>
 8006846:	f04f 0e00 	mov.w	lr, #0
 800684a:	4640      	mov	r0, r8
 800684c:	46ac      	mov	ip, r5
 800684e:	46f2      	mov	sl, lr
 8006850:	f850 2b04 	ldr.w	r2, [r0], #4
 8006854:	b293      	uxth	r3, r2
 8006856:	fb06 e303 	mla	r3, r6, r3, lr
 800685a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800685e:	b29b      	uxth	r3, r3
 8006860:	ebaa 0303 	sub.w	r3, sl, r3
 8006864:	0c12      	lsrs	r2, r2, #16
 8006866:	f8dc a000 	ldr.w	sl, [ip]
 800686a:	fb06 e202 	mla	r2, r6, r2, lr
 800686e:	fa13 f38a 	uxtah	r3, r3, sl
 8006872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006876:	fa1f fa82 	uxth.w	sl, r2
 800687a:	f8dc 2000 	ldr.w	r2, [ip]
 800687e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006886:	b29b      	uxth	r3, r3
 8006888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800688c:	4581      	cmp	r9, r0
 800688e:	f84c 3b04 	str.w	r3, [ip], #4
 8006892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006896:	d2db      	bcs.n	8006850 <quorem+0x44>
 8006898:	f855 300b 	ldr.w	r3, [r5, fp]
 800689c:	b92b      	cbnz	r3, 80068aa <quorem+0x9e>
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	3b04      	subs	r3, #4
 80068a2:	429d      	cmp	r5, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	d32e      	bcc.n	8006906 <quorem+0xfa>
 80068a8:	613c      	str	r4, [r7, #16]
 80068aa:	4638      	mov	r0, r7
 80068ac:	f001 f8c4 	bl	8007a38 <__mcmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	db24      	blt.n	80068fe <quorem+0xf2>
 80068b4:	3601      	adds	r6, #1
 80068b6:	4628      	mov	r0, r5
 80068b8:	f04f 0c00 	mov.w	ip, #0
 80068bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80068c0:	f8d0 e000 	ldr.w	lr, [r0]
 80068c4:	b293      	uxth	r3, r2
 80068c6:	ebac 0303 	sub.w	r3, ip, r3
 80068ca:	0c12      	lsrs	r2, r2, #16
 80068cc:	fa13 f38e 	uxtah	r3, r3, lr
 80068d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068de:	45c1      	cmp	r9, r8
 80068e0:	f840 3b04 	str.w	r3, [r0], #4
 80068e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068e8:	d2e8      	bcs.n	80068bc <quorem+0xb0>
 80068ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068f2:	b922      	cbnz	r2, 80068fe <quorem+0xf2>
 80068f4:	3b04      	subs	r3, #4
 80068f6:	429d      	cmp	r5, r3
 80068f8:	461a      	mov	r2, r3
 80068fa:	d30a      	bcc.n	8006912 <quorem+0x106>
 80068fc:	613c      	str	r4, [r7, #16]
 80068fe:	4630      	mov	r0, r6
 8006900:	b003      	add	sp, #12
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	3b04      	subs	r3, #4
 800690a:	2a00      	cmp	r2, #0
 800690c:	d1cc      	bne.n	80068a8 <quorem+0x9c>
 800690e:	3c01      	subs	r4, #1
 8006910:	e7c7      	b.n	80068a2 <quorem+0x96>
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	3b04      	subs	r3, #4
 8006916:	2a00      	cmp	r2, #0
 8006918:	d1f0      	bne.n	80068fc <quorem+0xf0>
 800691a:	3c01      	subs	r4, #1
 800691c:	e7eb      	b.n	80068f6 <quorem+0xea>
 800691e:	2000      	movs	r0, #0
 8006920:	e7ee      	b.n	8006900 <quorem+0xf4>
 8006922:	0000      	movs	r0, r0
 8006924:	0000      	movs	r0, r0
	...

08006928 <_dtoa_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	ed2d 8b02 	vpush	{d8}
 8006930:	ec57 6b10 	vmov	r6, r7, d0
 8006934:	b095      	sub	sp, #84	; 0x54
 8006936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800693c:	9105      	str	r1, [sp, #20]
 800693e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006942:	4604      	mov	r4, r0
 8006944:	9209      	str	r2, [sp, #36]	; 0x24
 8006946:	930f      	str	r3, [sp, #60]	; 0x3c
 8006948:	b975      	cbnz	r5, 8006968 <_dtoa_r+0x40>
 800694a:	2010      	movs	r0, #16
 800694c:	f7ff f9e6 	bl	8005d1c <malloc>
 8006950:	4602      	mov	r2, r0
 8006952:	6260      	str	r0, [r4, #36]	; 0x24
 8006954:	b920      	cbnz	r0, 8006960 <_dtoa_r+0x38>
 8006956:	4bb2      	ldr	r3, [pc, #712]	; (8006c20 <_dtoa_r+0x2f8>)
 8006958:	21ea      	movs	r1, #234	; 0xea
 800695a:	48b2      	ldr	r0, [pc, #712]	; (8006c24 <_dtoa_r+0x2fc>)
 800695c:	f001 faee 	bl	8007f3c <__assert_func>
 8006960:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006964:	6005      	str	r5, [r0, #0]
 8006966:	60c5      	str	r5, [r0, #12]
 8006968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800696a:	6819      	ldr	r1, [r3, #0]
 800696c:	b151      	cbz	r1, 8006984 <_dtoa_r+0x5c>
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	604a      	str	r2, [r1, #4]
 8006972:	2301      	movs	r3, #1
 8006974:	4093      	lsls	r3, r2
 8006976:	608b      	str	r3, [r1, #8]
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fe1f 	bl	80075bc <_Bfree>
 800697e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	1e3b      	subs	r3, r7, #0
 8006986:	bfb9      	ittee	lt
 8006988:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800698c:	9303      	strlt	r3, [sp, #12]
 800698e:	2300      	movge	r3, #0
 8006990:	f8c8 3000 	strge.w	r3, [r8]
 8006994:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006998:	4ba3      	ldr	r3, [pc, #652]	; (8006c28 <_dtoa_r+0x300>)
 800699a:	bfbc      	itt	lt
 800699c:	2201      	movlt	r2, #1
 800699e:	f8c8 2000 	strlt.w	r2, [r8]
 80069a2:	ea33 0309 	bics.w	r3, r3, r9
 80069a6:	d11b      	bne.n	80069e0 <_dtoa_r+0xb8>
 80069a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069b4:	4333      	orrs	r3, r6
 80069b6:	f000 857a 	beq.w	80074ae <_dtoa_r+0xb86>
 80069ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069bc:	b963      	cbnz	r3, 80069d8 <_dtoa_r+0xb0>
 80069be:	4b9b      	ldr	r3, [pc, #620]	; (8006c2c <_dtoa_r+0x304>)
 80069c0:	e024      	b.n	8006a0c <_dtoa_r+0xe4>
 80069c2:	4b9b      	ldr	r3, [pc, #620]	; (8006c30 <_dtoa_r+0x308>)
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	9800      	ldr	r0, [sp, #0]
 80069ce:	b015      	add	sp, #84	; 0x54
 80069d0:	ecbd 8b02 	vpop	{d8}
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	4b94      	ldr	r3, [pc, #592]	; (8006c2c <_dtoa_r+0x304>)
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	3303      	adds	r3, #3
 80069de:	e7f3      	b.n	80069c8 <_dtoa_r+0xa0>
 80069e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069e4:	2200      	movs	r2, #0
 80069e6:	ec51 0b17 	vmov	r0, r1, d7
 80069ea:	2300      	movs	r3, #0
 80069ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80069f0:	f7fa f872 	bl	8000ad8 <__aeabi_dcmpeq>
 80069f4:	4680      	mov	r8, r0
 80069f6:	b158      	cbz	r0, 8006a10 <_dtoa_r+0xe8>
 80069f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069fa:	2301      	movs	r3, #1
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8551 	beq.w	80074a8 <_dtoa_r+0xb80>
 8006a06:	488b      	ldr	r0, [pc, #556]	; (8006c34 <_dtoa_r+0x30c>)
 8006a08:	6018      	str	r0, [r3, #0]
 8006a0a:	1e43      	subs	r3, r0, #1
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	e7dd      	b.n	80069cc <_dtoa_r+0xa4>
 8006a10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a14:	aa12      	add	r2, sp, #72	; 0x48
 8006a16:	a913      	add	r1, sp, #76	; 0x4c
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f001 f8b1 	bl	8007b80 <__d2b>
 8006a1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a22:	4683      	mov	fp, r0
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	d07c      	beq.n	8006b22 <_dtoa_r+0x1fa>
 8006a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a42:	4b7d      	ldr	r3, [pc, #500]	; (8006c38 <_dtoa_r+0x310>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	4630      	mov	r0, r6
 8006a48:	4639      	mov	r1, r7
 8006a4a:	f7f9 fc25 	bl	8000298 <__aeabi_dsub>
 8006a4e:	a36e      	add	r3, pc, #440	; (adr r3, 8006c08 <_dtoa_r+0x2e0>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7f9 fdd8 	bl	8000608 <__aeabi_dmul>
 8006a58:	a36d      	add	r3, pc, #436	; (adr r3, 8006c10 <_dtoa_r+0x2e8>)
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f7f9 fc1d 	bl	800029c <__adddf3>
 8006a62:	4606      	mov	r6, r0
 8006a64:	4628      	mov	r0, r5
 8006a66:	460f      	mov	r7, r1
 8006a68:	f7f9 fd64 	bl	8000534 <__aeabi_i2d>
 8006a6c:	a36a      	add	r3, pc, #424	; (adr r3, 8006c18 <_dtoa_r+0x2f0>)
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f7f9 fdc9 	bl	8000608 <__aeabi_dmul>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	f7f9 fc0d 	bl	800029c <__adddf3>
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	f7fa f86f 	bl	8000b68 <__aeabi_d2iz>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4630      	mov	r0, r6
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7fa f82a 	bl	8000aec <__aeabi_dcmplt>
 8006a98:	b148      	cbz	r0, 8006aae <_dtoa_r+0x186>
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	f7f9 fd4a 	bl	8000534 <__aeabi_i2d>
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	f7fa f818 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa8:	b908      	cbnz	r0, 8006aae <_dtoa_r+0x186>
 8006aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aae:	f1ba 0f16 	cmp.w	sl, #22
 8006ab2:	d854      	bhi.n	8006b5e <_dtoa_r+0x236>
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <_dtoa_r+0x314>)
 8006ab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ac2:	f7fa f813 	bl	8000aec <__aeabi_dcmplt>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d04b      	beq.n	8006b62 <_dtoa_r+0x23a>
 8006aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ace:	2300      	movs	r3, #0
 8006ad0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ad4:	1b5d      	subs	r5, r3, r5
 8006ad6:	1e6b      	subs	r3, r5, #1
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	bf43      	ittte	mi
 8006adc:	2300      	movmi	r3, #0
 8006ade:	f1c5 0801 	rsbmi	r8, r5, #1
 8006ae2:	9304      	strmi	r3, [sp, #16]
 8006ae4:	f04f 0800 	movpl.w	r8, #0
 8006ae8:	f1ba 0f00 	cmp.w	sl, #0
 8006aec:	db3b      	blt.n	8006b66 <_dtoa_r+0x23e>
 8006aee:	9b04      	ldr	r3, [sp, #16]
 8006af0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006af4:	4453      	add	r3, sl
 8006af6:	9304      	str	r3, [sp, #16]
 8006af8:	2300      	movs	r3, #0
 8006afa:	9306      	str	r3, [sp, #24]
 8006afc:	9b05      	ldr	r3, [sp, #20]
 8006afe:	2b09      	cmp	r3, #9
 8006b00:	d869      	bhi.n	8006bd6 <_dtoa_r+0x2ae>
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	bfc4      	itt	gt
 8006b06:	3b04      	subgt	r3, #4
 8006b08:	9305      	strgt	r3, [sp, #20]
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	f1a3 0302 	sub.w	r3, r3, #2
 8006b10:	bfcc      	ite	gt
 8006b12:	2500      	movgt	r5, #0
 8006b14:	2501      	movle	r5, #1
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d869      	bhi.n	8006bee <_dtoa_r+0x2c6>
 8006b1a:	e8df f003 	tbb	[pc, r3]
 8006b1e:	4e2c      	.short	0x4e2c
 8006b20:	5a4c      	.short	0x5a4c
 8006b22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b26:	441d      	add	r5, r3
 8006b28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	bfc1      	itttt	gt
 8006b30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b38:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b40:	bfda      	itte	le
 8006b42:	f1c3 0320 	rsble	r3, r3, #32
 8006b46:	fa06 f003 	lslle.w	r0, r6, r3
 8006b4a:	4318      	orrgt	r0, r3
 8006b4c:	f7f9 fce2 	bl	8000514 <__aeabi_ui2d>
 8006b50:	2301      	movs	r3, #1
 8006b52:	4606      	mov	r6, r0
 8006b54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b58:	3d01      	subs	r5, #1
 8006b5a:	9310      	str	r3, [sp, #64]	; 0x40
 8006b5c:	e771      	b.n	8006a42 <_dtoa_r+0x11a>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e7b6      	b.n	8006ad0 <_dtoa_r+0x1a8>
 8006b62:	900e      	str	r0, [sp, #56]	; 0x38
 8006b64:	e7b5      	b.n	8006ad2 <_dtoa_r+0x1aa>
 8006b66:	f1ca 0300 	rsb	r3, sl, #0
 8006b6a:	9306      	str	r3, [sp, #24]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	eba8 080a 	sub.w	r8, r8, sl
 8006b72:	930d      	str	r3, [sp, #52]	; 0x34
 8006b74:	e7c2      	b.n	8006afc <_dtoa_r+0x1d4>
 8006b76:	2300      	movs	r3, #0
 8006b78:	9308      	str	r3, [sp, #32]
 8006b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc39      	bgt.n	8006bf4 <_dtoa_r+0x2cc>
 8006b80:	f04f 0901 	mov.w	r9, #1
 8006b84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b88:	464b      	mov	r3, r9
 8006b8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b90:	2200      	movs	r2, #0
 8006b92:	6042      	str	r2, [r0, #4]
 8006b94:	2204      	movs	r2, #4
 8006b96:	f102 0614 	add.w	r6, r2, #20
 8006b9a:	429e      	cmp	r6, r3
 8006b9c:	6841      	ldr	r1, [r0, #4]
 8006b9e:	d92f      	bls.n	8006c00 <_dtoa_r+0x2d8>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 fccb 	bl	800753c <_Balloc>
 8006ba6:	9000      	str	r0, [sp, #0]
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d14b      	bne.n	8006c44 <_dtoa_r+0x31c>
 8006bac:	4b24      	ldr	r3, [pc, #144]	; (8006c40 <_dtoa_r+0x318>)
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bb4:	e6d1      	b.n	800695a <_dtoa_r+0x32>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e7de      	b.n	8006b78 <_dtoa_r+0x250>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9308      	str	r3, [sp, #32]
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	eb0a 0903 	add.w	r9, sl, r3
 8006bc4:	f109 0301 	add.w	r3, r9, #1
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	bfb8      	it	lt
 8006bce:	2301      	movlt	r3, #1
 8006bd0:	e7dd      	b.n	8006b8e <_dtoa_r+0x266>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e7f2      	b.n	8006bbc <_dtoa_r+0x294>
 8006bd6:	2501      	movs	r5, #1
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	9508      	str	r5, [sp, #32]
 8006bde:	f04f 39ff 	mov.w	r9, #4294967295
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006be8:	2312      	movs	r3, #18
 8006bea:	9209      	str	r2, [sp, #36]	; 0x24
 8006bec:	e7cf      	b.n	8006b8e <_dtoa_r+0x266>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	9308      	str	r3, [sp, #32]
 8006bf2:	e7f4      	b.n	8006bde <_dtoa_r+0x2b6>
 8006bf4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006bf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bfc:	464b      	mov	r3, r9
 8006bfe:	e7c6      	b.n	8006b8e <_dtoa_r+0x266>
 8006c00:	3101      	adds	r1, #1
 8006c02:	6041      	str	r1, [r0, #4]
 8006c04:	0052      	lsls	r2, r2, #1
 8006c06:	e7c6      	b.n	8006b96 <_dtoa_r+0x26e>
 8006c08:	636f4361 	.word	0x636f4361
 8006c0c:	3fd287a7 	.word	0x3fd287a7
 8006c10:	8b60c8b3 	.word	0x8b60c8b3
 8006c14:	3fc68a28 	.word	0x3fc68a28
 8006c18:	509f79fb 	.word	0x509f79fb
 8006c1c:	3fd34413 	.word	0x3fd34413
 8006c20:	08008c71 	.word	0x08008c71
 8006c24:	08008c88 	.word	0x08008c88
 8006c28:	7ff00000 	.word	0x7ff00000
 8006c2c:	08008c6d 	.word	0x08008c6d
 8006c30:	08008c64 	.word	0x08008c64
 8006c34:	08008c41 	.word	0x08008c41
 8006c38:	3ff80000 	.word	0x3ff80000
 8006c3c:	08008d80 	.word	0x08008d80
 8006c40:	08008ce7 	.word	0x08008ce7
 8006c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c46:	9a00      	ldr	r2, [sp, #0]
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	2b0e      	cmp	r3, #14
 8006c4e:	f200 80ad 	bhi.w	8006dac <_dtoa_r+0x484>
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	f000 80aa 	beq.w	8006dac <_dtoa_r+0x484>
 8006c58:	f1ba 0f00 	cmp.w	sl, #0
 8006c5c:	dd36      	ble.n	8006ccc <_dtoa_r+0x3a4>
 8006c5e:	4ac3      	ldr	r2, [pc, #780]	; (8006f6c <_dtoa_r+0x644>)
 8006c60:	f00a 030f 	and.w	r3, sl, #15
 8006c64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c68:	ed93 7b00 	vldr	d7, [r3]
 8006c6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c74:	eeb0 8a47 	vmov.f32	s16, s14
 8006c78:	eef0 8a67 	vmov.f32	s17, s15
 8006c7c:	d016      	beq.n	8006cac <_dtoa_r+0x384>
 8006c7e:	4bbc      	ldr	r3, [pc, #752]	; (8006f70 <_dtoa_r+0x648>)
 8006c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c88:	f7f9 fde8 	bl	800085c <__aeabi_ddiv>
 8006c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c90:	f007 070f 	and.w	r7, r7, #15
 8006c94:	2503      	movs	r5, #3
 8006c96:	4eb6      	ldr	r6, [pc, #728]	; (8006f70 <_dtoa_r+0x648>)
 8006c98:	b957      	cbnz	r7, 8006cb0 <_dtoa_r+0x388>
 8006c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c9e:	ec53 2b18 	vmov	r2, r3, d8
 8006ca2:	f7f9 fddb 	bl	800085c <__aeabi_ddiv>
 8006ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006caa:	e029      	b.n	8006d00 <_dtoa_r+0x3d8>
 8006cac:	2502      	movs	r5, #2
 8006cae:	e7f2      	b.n	8006c96 <_dtoa_r+0x36e>
 8006cb0:	07f9      	lsls	r1, r7, #31
 8006cb2:	d508      	bpl.n	8006cc6 <_dtoa_r+0x39e>
 8006cb4:	ec51 0b18 	vmov	r0, r1, d8
 8006cb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cbc:	f7f9 fca4 	bl	8000608 <__aeabi_dmul>
 8006cc0:	ec41 0b18 	vmov	d8, r0, r1
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	107f      	asrs	r7, r7, #1
 8006cc8:	3608      	adds	r6, #8
 8006cca:	e7e5      	b.n	8006c98 <_dtoa_r+0x370>
 8006ccc:	f000 80a6 	beq.w	8006e1c <_dtoa_r+0x4f4>
 8006cd0:	f1ca 0600 	rsb	r6, sl, #0
 8006cd4:	4ba5      	ldr	r3, [pc, #660]	; (8006f6c <_dtoa_r+0x644>)
 8006cd6:	4fa6      	ldr	r7, [pc, #664]	; (8006f70 <_dtoa_r+0x648>)
 8006cd8:	f006 020f 	and.w	r2, r6, #15
 8006cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ce8:	f7f9 fc8e 	bl	8000608 <__aeabi_dmul>
 8006cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf0:	1136      	asrs	r6, r6, #4
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2502      	movs	r5, #2
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	f040 8085 	bne.w	8006e06 <_dtoa_r+0x4de>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1d2      	bne.n	8006ca6 <_dtoa_r+0x37e>
 8006d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 808c 	beq.w	8006e20 <_dtoa_r+0x4f8>
 8006d08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d0c:	4b99      	ldr	r3, [pc, #612]	; (8006f74 <_dtoa_r+0x64c>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 feea 	bl	8000aec <__aeabi_dcmplt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	f000 8081 	beq.w	8006e20 <_dtoa_r+0x4f8>
 8006d1e:	9b01      	ldr	r3, [sp, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d07d      	beq.n	8006e20 <_dtoa_r+0x4f8>
 8006d24:	f1b9 0f00 	cmp.w	r9, #0
 8006d28:	dd3c      	ble.n	8006da4 <_dtoa_r+0x47c>
 8006d2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	2200      	movs	r2, #0
 8006d32:	4b91      	ldr	r3, [pc, #580]	; (8006f78 <_dtoa_r+0x650>)
 8006d34:	4630      	mov	r0, r6
 8006d36:	4639      	mov	r1, r7
 8006d38:	f7f9 fc66 	bl	8000608 <__aeabi_dmul>
 8006d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d40:	3501      	adds	r5, #1
 8006d42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f7f9 fbf2 	bl	8000534 <__aeabi_i2d>
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	f7f9 fc58 	bl	8000608 <__aeabi_dmul>
 8006d58:	4b88      	ldr	r3, [pc, #544]	; (8006f7c <_dtoa_r+0x654>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f7f9 fa9e 	bl	800029c <__adddf3>
 8006d60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d68:	9303      	str	r3, [sp, #12]
 8006d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d15c      	bne.n	8006e2a <_dtoa_r+0x502>
 8006d70:	4b83      	ldr	r3, [pc, #524]	; (8006f80 <_dtoa_r+0x658>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	4630      	mov	r0, r6
 8006d76:	4639      	mov	r1, r7
 8006d78:	f7f9 fa8e 	bl	8000298 <__aeabi_dsub>
 8006d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	f7f9 fed0 	bl	8000b28 <__aeabi_dcmpgt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f040 8296 	bne.w	80072ba <_dtoa_r+0x992>
 8006d8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d92:	4630      	mov	r0, r6
 8006d94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7f9 fea7 	bl	8000aec <__aeabi_dcmplt>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f040 8288 	bne.w	80072b4 <_dtoa_r+0x98c>
 8006da4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f2c0 8158 	blt.w	8007064 <_dtoa_r+0x73c>
 8006db4:	f1ba 0f0e 	cmp.w	sl, #14
 8006db8:	f300 8154 	bgt.w	8007064 <_dtoa_r+0x73c>
 8006dbc:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <_dtoa_r+0x644>)
 8006dbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f280 80e3 	bge.w	8006f94 <_dtoa_r+0x66c>
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f300 80df 	bgt.w	8006f94 <_dtoa_r+0x66c>
 8006dd6:	f040 826d 	bne.w	80072b4 <_dtoa_r+0x98c>
 8006dda:	4b69      	ldr	r3, [pc, #420]	; (8006f80 <_dtoa_r+0x658>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4640      	mov	r0, r8
 8006de0:	4649      	mov	r1, r9
 8006de2:	f7f9 fc11 	bl	8000608 <__aeabi_dmul>
 8006de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dea:	f7f9 fe93 	bl	8000b14 <__aeabi_dcmpge>
 8006dee:	9e01      	ldr	r6, [sp, #4]
 8006df0:	4637      	mov	r7, r6
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f040 8243 	bne.w	800727e <_dtoa_r+0x956>
 8006df8:	9d00      	ldr	r5, [sp, #0]
 8006dfa:	2331      	movs	r3, #49	; 0x31
 8006dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8006e00:	f10a 0a01 	add.w	sl, sl, #1
 8006e04:	e23f      	b.n	8007286 <_dtoa_r+0x95e>
 8006e06:	07f2      	lsls	r2, r6, #31
 8006e08:	d505      	bpl.n	8006e16 <_dtoa_r+0x4ee>
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	f7f9 fbfb 	bl	8000608 <__aeabi_dmul>
 8006e12:	3501      	adds	r5, #1
 8006e14:	2301      	movs	r3, #1
 8006e16:	1076      	asrs	r6, r6, #1
 8006e18:	3708      	adds	r7, #8
 8006e1a:	e76c      	b.n	8006cf6 <_dtoa_r+0x3ce>
 8006e1c:	2502      	movs	r5, #2
 8006e1e:	e76f      	b.n	8006d00 <_dtoa_r+0x3d8>
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e26:	930c      	str	r3, [sp, #48]	; 0x30
 8006e28:	e78d      	b.n	8006d46 <_dtoa_r+0x41e>
 8006e2a:	9900      	ldr	r1, [sp, #0]
 8006e2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e30:	4b4e      	ldr	r3, [pc, #312]	; (8006f6c <_dtoa_r+0x644>)
 8006e32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e36:	4401      	add	r1, r0
 8006e38:	9102      	str	r1, [sp, #8]
 8006e3a:	9908      	ldr	r1, [sp, #32]
 8006e3c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e40:	eef0 8a67 	vmov.f32	s17, s15
 8006e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	d045      	beq.n	8006edc <_dtoa_r+0x5b4>
 8006e50:	494c      	ldr	r1, [pc, #304]	; (8006f84 <_dtoa_r+0x65c>)
 8006e52:	2000      	movs	r0, #0
 8006e54:	f7f9 fd02 	bl	800085c <__aeabi_ddiv>
 8006e58:	ec53 2b18 	vmov	r2, r3, d8
 8006e5c:	f7f9 fa1c 	bl	8000298 <__aeabi_dsub>
 8006e60:	9d00      	ldr	r5, [sp, #0]
 8006e62:	ec41 0b18 	vmov	d8, r0, r1
 8006e66:	4639      	mov	r1, r7
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7f9 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8006e6e:	900c      	str	r0, [sp, #48]	; 0x30
 8006e70:	f7f9 fb60 	bl	8000534 <__aeabi_i2d>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fa0c 	bl	8000298 <__aeabi_dsub>
 8006e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e82:	3330      	adds	r3, #48	; 0x30
 8006e84:	f805 3b01 	strb.w	r3, [r5], #1
 8006e88:	ec53 2b18 	vmov	r2, r3, d8
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	f7f9 fe2c 	bl	8000aec <__aeabi_dcmplt>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d165      	bne.n	8006f64 <_dtoa_r+0x63c>
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4935      	ldr	r1, [pc, #212]	; (8006f74 <_dtoa_r+0x64c>)
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	f7f9 f9fa 	bl	8000298 <__aeabi_dsub>
 8006ea4:	ec53 2b18 	vmov	r2, r3, d8
 8006ea8:	f7f9 fe20 	bl	8000aec <__aeabi_dcmplt>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f040 80b9 	bne.w	8007024 <_dtoa_r+0x6fc>
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	429d      	cmp	r5, r3
 8006eb6:	f43f af75 	beq.w	8006da4 <_dtoa_r+0x47c>
 8006eba:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <_dtoa_r+0x650>)
 8006ebc:	ec51 0b18 	vmov	r0, r1, d8
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f7f9 fba1 	bl	8000608 <__aeabi_dmul>
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <_dtoa_r+0x650>)
 8006ec8:	ec41 0b18 	vmov	d8, r0, r1
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4630      	mov	r0, r6
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	f7f9 fb99 	bl	8000608 <__aeabi_dmul>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460f      	mov	r7, r1
 8006eda:	e7c4      	b.n	8006e66 <_dtoa_r+0x53e>
 8006edc:	ec51 0b17 	vmov	r0, r1, d7
 8006ee0:	f7f9 fb92 	bl	8000608 <__aeabi_dmul>
 8006ee4:	9b02      	ldr	r3, [sp, #8]
 8006ee6:	9d00      	ldr	r5, [sp, #0]
 8006ee8:	930c      	str	r3, [sp, #48]	; 0x30
 8006eea:	ec41 0b18 	vmov	d8, r0, r1
 8006eee:	4639      	mov	r1, r7
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f7f9 fe39 	bl	8000b68 <__aeabi_d2iz>
 8006ef6:	9011      	str	r0, [sp, #68]	; 0x44
 8006ef8:	f7f9 fb1c 	bl	8000534 <__aeabi_i2d>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	f7f9 f9c8 	bl	8000298 <__aeabi_dsub>
 8006f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f0a:	3330      	adds	r3, #48	; 0x30
 8006f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	429d      	cmp	r5, r3
 8006f14:	4606      	mov	r6, r0
 8006f16:	460f      	mov	r7, r1
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	d134      	bne.n	8006f88 <_dtoa_r+0x660>
 8006f1e:	4b19      	ldr	r3, [pc, #100]	; (8006f84 <_dtoa_r+0x65c>)
 8006f20:	ec51 0b18 	vmov	r0, r1, d8
 8006f24:	f7f9 f9ba 	bl	800029c <__adddf3>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d175      	bne.n	8007024 <_dtoa_r+0x6fc>
 8006f38:	ec53 2b18 	vmov	r2, r3, d8
 8006f3c:	4911      	ldr	r1, [pc, #68]	; (8006f84 <_dtoa_r+0x65c>)
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f7f9 f9aa 	bl	8000298 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	f7f9 fdce 	bl	8000aec <__aeabi_dcmplt>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f af27 	beq.w	8006da4 <_dtoa_r+0x47c>
 8006f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f58:	1e6b      	subs	r3, r5, #1
 8006f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f60:	2b30      	cmp	r3, #48	; 0x30
 8006f62:	d0f8      	beq.n	8006f56 <_dtoa_r+0x62e>
 8006f64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f68:	e04a      	b.n	8007000 <_dtoa_r+0x6d8>
 8006f6a:	bf00      	nop
 8006f6c:	08008d80 	.word	0x08008d80
 8006f70:	08008d58 	.word	0x08008d58
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	40240000 	.word	0x40240000
 8006f7c:	401c0000 	.word	0x401c0000
 8006f80:	40140000 	.word	0x40140000
 8006f84:	3fe00000 	.word	0x3fe00000
 8006f88:	4baf      	ldr	r3, [pc, #700]	; (8007248 <_dtoa_r+0x920>)
 8006f8a:	f7f9 fb3d 	bl	8000608 <__aeabi_dmul>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	460f      	mov	r7, r1
 8006f92:	e7ac      	b.n	8006eee <_dtoa_r+0x5c6>
 8006f94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f98:	9d00      	ldr	r5, [sp, #0]
 8006f9a:	4642      	mov	r2, r8
 8006f9c:	464b      	mov	r3, r9
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 fc5b 	bl	800085c <__aeabi_ddiv>
 8006fa6:	f7f9 fddf 	bl	8000b68 <__aeabi_d2iz>
 8006faa:	9002      	str	r0, [sp, #8]
 8006fac:	f7f9 fac2 	bl	8000534 <__aeabi_i2d>
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	f7f9 fb28 	bl	8000608 <__aeabi_dmul>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	f7f9 f96a 	bl	8000298 <__aeabi_dsub>
 8006fc4:	9e02      	ldr	r6, [sp, #8]
 8006fc6:	9f01      	ldr	r7, [sp, #4]
 8006fc8:	3630      	adds	r6, #48	; 0x30
 8006fca:	f805 6b01 	strb.w	r6, [r5], #1
 8006fce:	9e00      	ldr	r6, [sp, #0]
 8006fd0:	1bae      	subs	r6, r5, r6
 8006fd2:	42b7      	cmp	r7, r6
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	d137      	bne.n	800704a <_dtoa_r+0x722>
 8006fda:	f7f9 f95f 	bl	800029c <__adddf3>
 8006fde:	4642      	mov	r2, r8
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460f      	mov	r7, r1
 8006fe6:	f7f9 fd9f 	bl	8000b28 <__aeabi_dcmpgt>
 8006fea:	b9c8      	cbnz	r0, 8007020 <_dtoa_r+0x6f8>
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	f7f9 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ff8:	b110      	cbz	r0, 8007000 <_dtoa_r+0x6d8>
 8006ffa:	9b02      	ldr	r3, [sp, #8]
 8006ffc:	07d9      	lsls	r1, r3, #31
 8006ffe:	d40f      	bmi.n	8007020 <_dtoa_r+0x6f8>
 8007000:	4620      	mov	r0, r4
 8007002:	4659      	mov	r1, fp
 8007004:	f000 fada 	bl	80075bc <_Bfree>
 8007008:	2300      	movs	r3, #0
 800700a:	702b      	strb	r3, [r5, #0]
 800700c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800700e:	f10a 0001 	add.w	r0, sl, #1
 8007012:	6018      	str	r0, [r3, #0]
 8007014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007016:	2b00      	cmp	r3, #0
 8007018:	f43f acd8 	beq.w	80069cc <_dtoa_r+0xa4>
 800701c:	601d      	str	r5, [r3, #0]
 800701e:	e4d5      	b.n	80069cc <_dtoa_r+0xa4>
 8007020:	f8cd a01c 	str.w	sl, [sp, #28]
 8007024:	462b      	mov	r3, r5
 8007026:	461d      	mov	r5, r3
 8007028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800702c:	2a39      	cmp	r2, #57	; 0x39
 800702e:	d108      	bne.n	8007042 <_dtoa_r+0x71a>
 8007030:	9a00      	ldr	r2, [sp, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d1f7      	bne.n	8007026 <_dtoa_r+0x6fe>
 8007036:	9a07      	ldr	r2, [sp, #28]
 8007038:	9900      	ldr	r1, [sp, #0]
 800703a:	3201      	adds	r2, #1
 800703c:	9207      	str	r2, [sp, #28]
 800703e:	2230      	movs	r2, #48	; 0x30
 8007040:	700a      	strb	r2, [r1, #0]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	3201      	adds	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e78c      	b.n	8006f64 <_dtoa_r+0x63c>
 800704a:	4b7f      	ldr	r3, [pc, #508]	; (8007248 <_dtoa_r+0x920>)
 800704c:	2200      	movs	r2, #0
 800704e:	f7f9 fadb 	bl	8000608 <__aeabi_dmul>
 8007052:	2200      	movs	r2, #0
 8007054:	2300      	movs	r3, #0
 8007056:	4606      	mov	r6, r0
 8007058:	460f      	mov	r7, r1
 800705a:	f7f9 fd3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800705e:	2800      	cmp	r0, #0
 8007060:	d09b      	beq.n	8006f9a <_dtoa_r+0x672>
 8007062:	e7cd      	b.n	8007000 <_dtoa_r+0x6d8>
 8007064:	9a08      	ldr	r2, [sp, #32]
 8007066:	2a00      	cmp	r2, #0
 8007068:	f000 80c4 	beq.w	80071f4 <_dtoa_r+0x8cc>
 800706c:	9a05      	ldr	r2, [sp, #20]
 800706e:	2a01      	cmp	r2, #1
 8007070:	f300 80a8 	bgt.w	80071c4 <_dtoa_r+0x89c>
 8007074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007076:	2a00      	cmp	r2, #0
 8007078:	f000 80a0 	beq.w	80071bc <_dtoa_r+0x894>
 800707c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007080:	9e06      	ldr	r6, [sp, #24]
 8007082:	4645      	mov	r5, r8
 8007084:	9a04      	ldr	r2, [sp, #16]
 8007086:	2101      	movs	r1, #1
 8007088:	441a      	add	r2, r3
 800708a:	4620      	mov	r0, r4
 800708c:	4498      	add	r8, r3
 800708e:	9204      	str	r2, [sp, #16]
 8007090:	f000 fb50 	bl	8007734 <__i2b>
 8007094:	4607      	mov	r7, r0
 8007096:	2d00      	cmp	r5, #0
 8007098:	dd0b      	ble.n	80070b2 <_dtoa_r+0x78a>
 800709a:	9b04      	ldr	r3, [sp, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	dd08      	ble.n	80070b2 <_dtoa_r+0x78a>
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	bfa8      	it	ge
 80070a6:	462b      	movge	r3, r5
 80070a8:	eba8 0803 	sub.w	r8, r8, r3
 80070ac:	1aed      	subs	r5, r5, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	9304      	str	r3, [sp, #16]
 80070b2:	9b06      	ldr	r3, [sp, #24]
 80070b4:	b1fb      	cbz	r3, 80070f6 <_dtoa_r+0x7ce>
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 809f 	beq.w	80071fc <_dtoa_r+0x8d4>
 80070be:	2e00      	cmp	r6, #0
 80070c0:	dd11      	ble.n	80070e6 <_dtoa_r+0x7be>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4632      	mov	r2, r6
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 fbf0 	bl	80078ac <__pow5mult>
 80070cc:	465a      	mov	r2, fp
 80070ce:	4601      	mov	r1, r0
 80070d0:	4607      	mov	r7, r0
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fb44 	bl	8007760 <__multiply>
 80070d8:	4659      	mov	r1, fp
 80070da:	9007      	str	r0, [sp, #28]
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fa6d 	bl	80075bc <_Bfree>
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	469b      	mov	fp, r3
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	1b9a      	subs	r2, r3, r6
 80070ea:	d004      	beq.n	80070f6 <_dtoa_r+0x7ce>
 80070ec:	4659      	mov	r1, fp
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 fbdc 	bl	80078ac <__pow5mult>
 80070f4:	4683      	mov	fp, r0
 80070f6:	2101      	movs	r1, #1
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fb1b 	bl	8007734 <__i2b>
 80070fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007100:	2b00      	cmp	r3, #0
 8007102:	4606      	mov	r6, r0
 8007104:	dd7c      	ble.n	8007200 <_dtoa_r+0x8d8>
 8007106:	461a      	mov	r2, r3
 8007108:	4601      	mov	r1, r0
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fbce 	bl	80078ac <__pow5mult>
 8007110:	9b05      	ldr	r3, [sp, #20]
 8007112:	2b01      	cmp	r3, #1
 8007114:	4606      	mov	r6, r0
 8007116:	dd76      	ble.n	8007206 <_dtoa_r+0x8de>
 8007118:	2300      	movs	r3, #0
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	6933      	ldr	r3, [r6, #16]
 800711e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007122:	6918      	ldr	r0, [r3, #16]
 8007124:	f000 fab6 	bl	8007694 <__hi0bits>
 8007128:	f1c0 0020 	rsb	r0, r0, #32
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	4418      	add	r0, r3
 8007130:	f010 001f 	ands.w	r0, r0, #31
 8007134:	f000 8086 	beq.w	8007244 <_dtoa_r+0x91c>
 8007138:	f1c0 0320 	rsb	r3, r0, #32
 800713c:	2b04      	cmp	r3, #4
 800713e:	dd7f      	ble.n	8007240 <_dtoa_r+0x918>
 8007140:	f1c0 001c 	rsb	r0, r0, #28
 8007144:	9b04      	ldr	r3, [sp, #16]
 8007146:	4403      	add	r3, r0
 8007148:	4480      	add	r8, r0
 800714a:	4405      	add	r5, r0
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	f1b8 0f00 	cmp.w	r8, #0
 8007152:	dd05      	ble.n	8007160 <_dtoa_r+0x838>
 8007154:	4659      	mov	r1, fp
 8007156:	4642      	mov	r2, r8
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fc01 	bl	8007960 <__lshift>
 800715e:	4683      	mov	fp, r0
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	dd05      	ble.n	8007172 <_dtoa_r+0x84a>
 8007166:	4631      	mov	r1, r6
 8007168:	461a      	mov	r2, r3
 800716a:	4620      	mov	r0, r4
 800716c:	f000 fbf8 	bl	8007960 <__lshift>
 8007170:	4606      	mov	r6, r0
 8007172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007174:	2b00      	cmp	r3, #0
 8007176:	d069      	beq.n	800724c <_dtoa_r+0x924>
 8007178:	4631      	mov	r1, r6
 800717a:	4658      	mov	r0, fp
 800717c:	f000 fc5c 	bl	8007a38 <__mcmp>
 8007180:	2800      	cmp	r0, #0
 8007182:	da63      	bge.n	800724c <_dtoa_r+0x924>
 8007184:	2300      	movs	r3, #0
 8007186:	4659      	mov	r1, fp
 8007188:	220a      	movs	r2, #10
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fa38 	bl	8007600 <__multadd>
 8007190:	9b08      	ldr	r3, [sp, #32]
 8007192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007196:	4683      	mov	fp, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 818f 	beq.w	80074bc <_dtoa_r+0xb94>
 800719e:	4639      	mov	r1, r7
 80071a0:	2300      	movs	r3, #0
 80071a2:	220a      	movs	r2, #10
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fa2b 	bl	8007600 <__multadd>
 80071aa:	f1b9 0f00 	cmp.w	r9, #0
 80071ae:	4607      	mov	r7, r0
 80071b0:	f300 808e 	bgt.w	80072d0 <_dtoa_r+0x9a8>
 80071b4:	9b05      	ldr	r3, [sp, #20]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	dc50      	bgt.n	800725c <_dtoa_r+0x934>
 80071ba:	e089      	b.n	80072d0 <_dtoa_r+0x9a8>
 80071bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071c2:	e75d      	b.n	8007080 <_dtoa_r+0x758>
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	1e5e      	subs	r6, r3, #1
 80071c8:	9b06      	ldr	r3, [sp, #24]
 80071ca:	42b3      	cmp	r3, r6
 80071cc:	bfbf      	itttt	lt
 80071ce:	9b06      	ldrlt	r3, [sp, #24]
 80071d0:	9606      	strlt	r6, [sp, #24]
 80071d2:	1af2      	sublt	r2, r6, r3
 80071d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071d6:	bfb6      	itet	lt
 80071d8:	189b      	addlt	r3, r3, r2
 80071da:	1b9e      	subge	r6, r3, r6
 80071dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	bfb8      	it	lt
 80071e2:	2600      	movlt	r6, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfb5      	itete	lt
 80071e8:	eba8 0503 	sublt.w	r5, r8, r3
 80071ec:	9b01      	ldrge	r3, [sp, #4]
 80071ee:	2300      	movlt	r3, #0
 80071f0:	4645      	movge	r5, r8
 80071f2:	e747      	b.n	8007084 <_dtoa_r+0x75c>
 80071f4:	9e06      	ldr	r6, [sp, #24]
 80071f6:	9f08      	ldr	r7, [sp, #32]
 80071f8:	4645      	mov	r5, r8
 80071fa:	e74c      	b.n	8007096 <_dtoa_r+0x76e>
 80071fc:	9a06      	ldr	r2, [sp, #24]
 80071fe:	e775      	b.n	80070ec <_dtoa_r+0x7c4>
 8007200:	9b05      	ldr	r3, [sp, #20]
 8007202:	2b01      	cmp	r3, #1
 8007204:	dc18      	bgt.n	8007238 <_dtoa_r+0x910>
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	b9b3      	cbnz	r3, 8007238 <_dtoa_r+0x910>
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	b9a3      	cbnz	r3, 800723c <_dtoa_r+0x914>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007218:	0d1b      	lsrs	r3, r3, #20
 800721a:	051b      	lsls	r3, r3, #20
 800721c:	b12b      	cbz	r3, 800722a <_dtoa_r+0x902>
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	3301      	adds	r3, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	f108 0801 	add.w	r8, r8, #1
 8007228:	2301      	movs	r3, #1
 800722a:	9306      	str	r3, [sp, #24]
 800722c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800722e:	2b00      	cmp	r3, #0
 8007230:	f47f af74 	bne.w	800711c <_dtoa_r+0x7f4>
 8007234:	2001      	movs	r0, #1
 8007236:	e779      	b.n	800712c <_dtoa_r+0x804>
 8007238:	2300      	movs	r3, #0
 800723a:	e7f6      	b.n	800722a <_dtoa_r+0x902>
 800723c:	9b02      	ldr	r3, [sp, #8]
 800723e:	e7f4      	b.n	800722a <_dtoa_r+0x902>
 8007240:	d085      	beq.n	800714e <_dtoa_r+0x826>
 8007242:	4618      	mov	r0, r3
 8007244:	301c      	adds	r0, #28
 8007246:	e77d      	b.n	8007144 <_dtoa_r+0x81c>
 8007248:	40240000 	.word	0x40240000
 800724c:	9b01      	ldr	r3, [sp, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dc38      	bgt.n	80072c4 <_dtoa_r+0x99c>
 8007252:	9b05      	ldr	r3, [sp, #20]
 8007254:	2b02      	cmp	r3, #2
 8007256:	dd35      	ble.n	80072c4 <_dtoa_r+0x99c>
 8007258:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800725c:	f1b9 0f00 	cmp.w	r9, #0
 8007260:	d10d      	bne.n	800727e <_dtoa_r+0x956>
 8007262:	4631      	mov	r1, r6
 8007264:	464b      	mov	r3, r9
 8007266:	2205      	movs	r2, #5
 8007268:	4620      	mov	r0, r4
 800726a:	f000 f9c9 	bl	8007600 <__multadd>
 800726e:	4601      	mov	r1, r0
 8007270:	4606      	mov	r6, r0
 8007272:	4658      	mov	r0, fp
 8007274:	f000 fbe0 	bl	8007a38 <__mcmp>
 8007278:	2800      	cmp	r0, #0
 800727a:	f73f adbd 	bgt.w	8006df8 <_dtoa_r+0x4d0>
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	9d00      	ldr	r5, [sp, #0]
 8007282:	ea6f 0a03 	mvn.w	sl, r3
 8007286:	f04f 0800 	mov.w	r8, #0
 800728a:	4631      	mov	r1, r6
 800728c:	4620      	mov	r0, r4
 800728e:	f000 f995 	bl	80075bc <_Bfree>
 8007292:	2f00      	cmp	r7, #0
 8007294:	f43f aeb4 	beq.w	8007000 <_dtoa_r+0x6d8>
 8007298:	f1b8 0f00 	cmp.w	r8, #0
 800729c:	d005      	beq.n	80072aa <_dtoa_r+0x982>
 800729e:	45b8      	cmp	r8, r7
 80072a0:	d003      	beq.n	80072aa <_dtoa_r+0x982>
 80072a2:	4641      	mov	r1, r8
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 f989 	bl	80075bc <_Bfree>
 80072aa:	4639      	mov	r1, r7
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 f985 	bl	80075bc <_Bfree>
 80072b2:	e6a5      	b.n	8007000 <_dtoa_r+0x6d8>
 80072b4:	2600      	movs	r6, #0
 80072b6:	4637      	mov	r7, r6
 80072b8:	e7e1      	b.n	800727e <_dtoa_r+0x956>
 80072ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072c0:	4637      	mov	r7, r6
 80072c2:	e599      	b.n	8006df8 <_dtoa_r+0x4d0>
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80fd 	beq.w	80074ca <_dtoa_r+0xba2>
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	dd05      	ble.n	80072e0 <_dtoa_r+0x9b8>
 80072d4:	4639      	mov	r1, r7
 80072d6:	462a      	mov	r2, r5
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 fb41 	bl	8007960 <__lshift>
 80072de:	4607      	mov	r7, r0
 80072e0:	9b06      	ldr	r3, [sp, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d05c      	beq.n	80073a0 <_dtoa_r+0xa78>
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 f927 	bl	800753c <_Balloc>
 80072ee:	4605      	mov	r5, r0
 80072f0:	b928      	cbnz	r0, 80072fe <_dtoa_r+0x9d6>
 80072f2:	4b80      	ldr	r3, [pc, #512]	; (80074f4 <_dtoa_r+0xbcc>)
 80072f4:	4602      	mov	r2, r0
 80072f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072fa:	f7ff bb2e 	b.w	800695a <_dtoa_r+0x32>
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	3202      	adds	r2, #2
 8007302:	0092      	lsls	r2, r2, #2
 8007304:	f107 010c 	add.w	r1, r7, #12
 8007308:	300c      	adds	r0, #12
 800730a:	f000 f8fd 	bl	8007508 <memcpy>
 800730e:	2201      	movs	r2, #1
 8007310:	4629      	mov	r1, r5
 8007312:	4620      	mov	r0, r4
 8007314:	f000 fb24 	bl	8007960 <__lshift>
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	444b      	add	r3, r9
 8007322:	9307      	str	r3, [sp, #28]
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	46b8      	mov	r8, r7
 800732c:	9306      	str	r3, [sp, #24]
 800732e:	4607      	mov	r7, r0
 8007330:	9b01      	ldr	r3, [sp, #4]
 8007332:	4631      	mov	r1, r6
 8007334:	3b01      	subs	r3, #1
 8007336:	4658      	mov	r0, fp
 8007338:	9302      	str	r3, [sp, #8]
 800733a:	f7ff fa67 	bl	800680c <quorem>
 800733e:	4603      	mov	r3, r0
 8007340:	3330      	adds	r3, #48	; 0x30
 8007342:	9004      	str	r0, [sp, #16]
 8007344:	4641      	mov	r1, r8
 8007346:	4658      	mov	r0, fp
 8007348:	9308      	str	r3, [sp, #32]
 800734a:	f000 fb75 	bl	8007a38 <__mcmp>
 800734e:	463a      	mov	r2, r7
 8007350:	4681      	mov	r9, r0
 8007352:	4631      	mov	r1, r6
 8007354:	4620      	mov	r0, r4
 8007356:	f000 fb8b 	bl	8007a70 <__mdiff>
 800735a:	68c2      	ldr	r2, [r0, #12]
 800735c:	9b08      	ldr	r3, [sp, #32]
 800735e:	4605      	mov	r5, r0
 8007360:	bb02      	cbnz	r2, 80073a4 <_dtoa_r+0xa7c>
 8007362:	4601      	mov	r1, r0
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fb67 	bl	8007a38 <__mcmp>
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	4602      	mov	r2, r0
 800736e:	4629      	mov	r1, r5
 8007370:	4620      	mov	r0, r4
 8007372:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007376:	f000 f921 	bl	80075bc <_Bfree>
 800737a:	9b05      	ldr	r3, [sp, #20]
 800737c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737e:	9d01      	ldr	r5, [sp, #4]
 8007380:	ea43 0102 	orr.w	r1, r3, r2
 8007384:	9b06      	ldr	r3, [sp, #24]
 8007386:	430b      	orrs	r3, r1
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	d10d      	bne.n	80073a8 <_dtoa_r+0xa80>
 800738c:	2b39      	cmp	r3, #57	; 0x39
 800738e:	d029      	beq.n	80073e4 <_dtoa_r+0xabc>
 8007390:	f1b9 0f00 	cmp.w	r9, #0
 8007394:	dd01      	ble.n	800739a <_dtoa_r+0xa72>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	3331      	adds	r3, #49	; 0x31
 800739a:	9a02      	ldr	r2, [sp, #8]
 800739c:	7013      	strb	r3, [r2, #0]
 800739e:	e774      	b.n	800728a <_dtoa_r+0x962>
 80073a0:	4638      	mov	r0, r7
 80073a2:	e7b9      	b.n	8007318 <_dtoa_r+0x9f0>
 80073a4:	2201      	movs	r2, #1
 80073a6:	e7e2      	b.n	800736e <_dtoa_r+0xa46>
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	db06      	blt.n	80073bc <_dtoa_r+0xa94>
 80073ae:	9905      	ldr	r1, [sp, #20]
 80073b0:	ea41 0909 	orr.w	r9, r1, r9
 80073b4:	9906      	ldr	r1, [sp, #24]
 80073b6:	ea59 0101 	orrs.w	r1, r9, r1
 80073ba:	d120      	bne.n	80073fe <_dtoa_r+0xad6>
 80073bc:	2a00      	cmp	r2, #0
 80073be:	ddec      	ble.n	800739a <_dtoa_r+0xa72>
 80073c0:	4659      	mov	r1, fp
 80073c2:	2201      	movs	r2, #1
 80073c4:	4620      	mov	r0, r4
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	f000 faca 	bl	8007960 <__lshift>
 80073cc:	4631      	mov	r1, r6
 80073ce:	4683      	mov	fp, r0
 80073d0:	f000 fb32 	bl	8007a38 <__mcmp>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	9b01      	ldr	r3, [sp, #4]
 80073d8:	dc02      	bgt.n	80073e0 <_dtoa_r+0xab8>
 80073da:	d1de      	bne.n	800739a <_dtoa_r+0xa72>
 80073dc:	07da      	lsls	r2, r3, #31
 80073de:	d5dc      	bpl.n	800739a <_dtoa_r+0xa72>
 80073e0:	2b39      	cmp	r3, #57	; 0x39
 80073e2:	d1d8      	bne.n	8007396 <_dtoa_r+0xa6e>
 80073e4:	9a02      	ldr	r2, [sp, #8]
 80073e6:	2339      	movs	r3, #57	; 0x39
 80073e8:	7013      	strb	r3, [r2, #0]
 80073ea:	462b      	mov	r3, r5
 80073ec:	461d      	mov	r5, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073f4:	2a39      	cmp	r2, #57	; 0x39
 80073f6:	d050      	beq.n	800749a <_dtoa_r+0xb72>
 80073f8:	3201      	adds	r2, #1
 80073fa:	701a      	strb	r2, [r3, #0]
 80073fc:	e745      	b.n	800728a <_dtoa_r+0x962>
 80073fe:	2a00      	cmp	r2, #0
 8007400:	dd03      	ble.n	800740a <_dtoa_r+0xae2>
 8007402:	2b39      	cmp	r3, #57	; 0x39
 8007404:	d0ee      	beq.n	80073e4 <_dtoa_r+0xabc>
 8007406:	3301      	adds	r3, #1
 8007408:	e7c7      	b.n	800739a <_dtoa_r+0xa72>
 800740a:	9a01      	ldr	r2, [sp, #4]
 800740c:	9907      	ldr	r1, [sp, #28]
 800740e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007412:	428a      	cmp	r2, r1
 8007414:	d02a      	beq.n	800746c <_dtoa_r+0xb44>
 8007416:	4659      	mov	r1, fp
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	4620      	mov	r0, r4
 800741e:	f000 f8ef 	bl	8007600 <__multadd>
 8007422:	45b8      	cmp	r8, r7
 8007424:	4683      	mov	fp, r0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	f04f 020a 	mov.w	r2, #10
 800742e:	4641      	mov	r1, r8
 8007430:	4620      	mov	r0, r4
 8007432:	d107      	bne.n	8007444 <_dtoa_r+0xb1c>
 8007434:	f000 f8e4 	bl	8007600 <__multadd>
 8007438:	4680      	mov	r8, r0
 800743a:	4607      	mov	r7, r0
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	3301      	adds	r3, #1
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	e775      	b.n	8007330 <_dtoa_r+0xa08>
 8007444:	f000 f8dc 	bl	8007600 <__multadd>
 8007448:	4639      	mov	r1, r7
 800744a:	4680      	mov	r8, r0
 800744c:	2300      	movs	r3, #0
 800744e:	220a      	movs	r2, #10
 8007450:	4620      	mov	r0, r4
 8007452:	f000 f8d5 	bl	8007600 <__multadd>
 8007456:	4607      	mov	r7, r0
 8007458:	e7f0      	b.n	800743c <_dtoa_r+0xb14>
 800745a:	f1b9 0f00 	cmp.w	r9, #0
 800745e:	9a00      	ldr	r2, [sp, #0]
 8007460:	bfcc      	ite	gt
 8007462:	464d      	movgt	r5, r9
 8007464:	2501      	movle	r5, #1
 8007466:	4415      	add	r5, r2
 8007468:	f04f 0800 	mov.w	r8, #0
 800746c:	4659      	mov	r1, fp
 800746e:	2201      	movs	r2, #1
 8007470:	4620      	mov	r0, r4
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	f000 fa74 	bl	8007960 <__lshift>
 8007478:	4631      	mov	r1, r6
 800747a:	4683      	mov	fp, r0
 800747c:	f000 fadc 	bl	8007a38 <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	dcb2      	bgt.n	80073ea <_dtoa_r+0xac2>
 8007484:	d102      	bne.n	800748c <_dtoa_r+0xb64>
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	07db      	lsls	r3, r3, #31
 800748a:	d4ae      	bmi.n	80073ea <_dtoa_r+0xac2>
 800748c:	462b      	mov	r3, r5
 800748e:	461d      	mov	r5, r3
 8007490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007494:	2a30      	cmp	r2, #48	; 0x30
 8007496:	d0fa      	beq.n	800748e <_dtoa_r+0xb66>
 8007498:	e6f7      	b.n	800728a <_dtoa_r+0x962>
 800749a:	9a00      	ldr	r2, [sp, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d1a5      	bne.n	80073ec <_dtoa_r+0xac4>
 80074a0:	f10a 0a01 	add.w	sl, sl, #1
 80074a4:	2331      	movs	r3, #49	; 0x31
 80074a6:	e779      	b.n	800739c <_dtoa_r+0xa74>
 80074a8:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <_dtoa_r+0xbd0>)
 80074aa:	f7ff baaf 	b.w	8006a0c <_dtoa_r+0xe4>
 80074ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f47f aa86 	bne.w	80069c2 <_dtoa_r+0x9a>
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <_dtoa_r+0xbd4>)
 80074b8:	f7ff baa8 	b.w	8006a0c <_dtoa_r+0xe4>
 80074bc:	f1b9 0f00 	cmp.w	r9, #0
 80074c0:	dc03      	bgt.n	80074ca <_dtoa_r+0xba2>
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	f73f aec9 	bgt.w	800725c <_dtoa_r+0x934>
 80074ca:	9d00      	ldr	r5, [sp, #0]
 80074cc:	4631      	mov	r1, r6
 80074ce:	4658      	mov	r0, fp
 80074d0:	f7ff f99c 	bl	800680c <quorem>
 80074d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074d8:	f805 3b01 	strb.w	r3, [r5], #1
 80074dc:	9a00      	ldr	r2, [sp, #0]
 80074de:	1aaa      	subs	r2, r5, r2
 80074e0:	4591      	cmp	r9, r2
 80074e2:	ddba      	ble.n	800745a <_dtoa_r+0xb32>
 80074e4:	4659      	mov	r1, fp
 80074e6:	2300      	movs	r3, #0
 80074e8:	220a      	movs	r2, #10
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 f888 	bl	8007600 <__multadd>
 80074f0:	4683      	mov	fp, r0
 80074f2:	e7eb      	b.n	80074cc <_dtoa_r+0xba4>
 80074f4:	08008ce7 	.word	0x08008ce7
 80074f8:	08008c40 	.word	0x08008c40
 80074fc:	08008c64 	.word	0x08008c64

08007500 <_localeconv_r>:
 8007500:	4800      	ldr	r0, [pc, #0]	; (8007504 <_localeconv_r+0x4>)
 8007502:	4770      	bx	lr
 8007504:	200003f4 	.word	0x200003f4

08007508 <memcpy>:
 8007508:	440a      	add	r2, r1
 800750a:	4291      	cmp	r1, r2
 800750c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007510:	d100      	bne.n	8007514 <memcpy+0xc>
 8007512:	4770      	bx	lr
 8007514:	b510      	push	{r4, lr}
 8007516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800751e:	4291      	cmp	r1, r2
 8007520:	d1f9      	bne.n	8007516 <memcpy+0xe>
 8007522:	bd10      	pop	{r4, pc}

08007524 <__malloc_lock>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__malloc_lock+0x8>)
 8007526:	f000 bd3a 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 800752a:	bf00      	nop
 800752c:	20000644 	.word	0x20000644

08007530 <__malloc_unlock>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__malloc_unlock+0x8>)
 8007532:	f000 bd35 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8007536:	bf00      	nop
 8007538:	20000644 	.word	0x20000644

0800753c <_Balloc>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
 8007544:	b976      	cbnz	r6, 8007564 <_Balloc+0x28>
 8007546:	2010      	movs	r0, #16
 8007548:	f7fe fbe8 	bl	8005d1c <malloc>
 800754c:	4602      	mov	r2, r0
 800754e:	6260      	str	r0, [r4, #36]	; 0x24
 8007550:	b920      	cbnz	r0, 800755c <_Balloc+0x20>
 8007552:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <_Balloc+0x78>)
 8007554:	4818      	ldr	r0, [pc, #96]	; (80075b8 <_Balloc+0x7c>)
 8007556:	2166      	movs	r1, #102	; 0x66
 8007558:	f000 fcf0 	bl	8007f3c <__assert_func>
 800755c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007560:	6006      	str	r6, [r0, #0]
 8007562:	60c6      	str	r6, [r0, #12]
 8007564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007566:	68f3      	ldr	r3, [r6, #12]
 8007568:	b183      	cbz	r3, 800758c <_Balloc+0x50>
 800756a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007572:	b9b8      	cbnz	r0, 80075a4 <_Balloc+0x68>
 8007574:	2101      	movs	r1, #1
 8007576:	fa01 f605 	lsl.w	r6, r1, r5
 800757a:	1d72      	adds	r2, r6, #5
 800757c:	0092      	lsls	r2, r2, #2
 800757e:	4620      	mov	r0, r4
 8007580:	f7fe fbdc 	bl	8005d3c <_calloc_r>
 8007584:	b160      	cbz	r0, 80075a0 <_Balloc+0x64>
 8007586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800758a:	e00e      	b.n	80075aa <_Balloc+0x6e>
 800758c:	2221      	movs	r2, #33	; 0x21
 800758e:	2104      	movs	r1, #4
 8007590:	4620      	mov	r0, r4
 8007592:	f7fe fbd3 	bl	8005d3c <_calloc_r>
 8007596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007598:	60f0      	str	r0, [r6, #12]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e4      	bne.n	800756a <_Balloc+0x2e>
 80075a0:	2000      	movs	r0, #0
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075aa:	2300      	movs	r3, #0
 80075ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b0:	e7f7      	b.n	80075a2 <_Balloc+0x66>
 80075b2:	bf00      	nop
 80075b4:	08008c71 	.word	0x08008c71
 80075b8:	08008cf8 	.word	0x08008cf8

080075bc <_Bfree>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b976      	cbnz	r6, 80075e4 <_Bfree+0x28>
 80075c6:	2010      	movs	r0, #16
 80075c8:	f7fe fba8 	bl	8005d1c <malloc>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6268      	str	r0, [r5, #36]	; 0x24
 80075d0:	b920      	cbnz	r0, 80075dc <_Bfree+0x20>
 80075d2:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <_Bfree+0x3c>)
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <_Bfree+0x40>)
 80075d6:	218a      	movs	r1, #138	; 0x8a
 80075d8:	f000 fcb0 	bl	8007f3c <__assert_func>
 80075dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e0:	6006      	str	r6, [r0, #0]
 80075e2:	60c6      	str	r6, [r0, #12]
 80075e4:	b13c      	cbz	r4, 80075f6 <_Bfree+0x3a>
 80075e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075e8:	6862      	ldr	r2, [r4, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f0:	6021      	str	r1, [r4, #0]
 80075f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	08008c71 	.word	0x08008c71
 80075fc:	08008cf8 	.word	0x08008cf8

08007600 <__multadd>:
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	690e      	ldr	r6, [r1, #16]
 8007606:	4607      	mov	r7, r0
 8007608:	4698      	mov	r8, r3
 800760a:	460c      	mov	r4, r1
 800760c:	f101 0014 	add.w	r0, r1, #20
 8007610:	2300      	movs	r3, #0
 8007612:	6805      	ldr	r5, [r0, #0]
 8007614:	b2a9      	uxth	r1, r5
 8007616:	fb02 8101 	mla	r1, r2, r1, r8
 800761a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800761e:	0c2d      	lsrs	r5, r5, #16
 8007620:	fb02 c505 	mla	r5, r2, r5, ip
 8007624:	b289      	uxth	r1, r1
 8007626:	3301      	adds	r3, #1
 8007628:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800762c:	429e      	cmp	r6, r3
 800762e:	f840 1b04 	str.w	r1, [r0], #4
 8007632:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007636:	dcec      	bgt.n	8007612 <__multadd+0x12>
 8007638:	f1b8 0f00 	cmp.w	r8, #0
 800763c:	d022      	beq.n	8007684 <__multadd+0x84>
 800763e:	68a3      	ldr	r3, [r4, #8]
 8007640:	42b3      	cmp	r3, r6
 8007642:	dc19      	bgt.n	8007678 <__multadd+0x78>
 8007644:	6861      	ldr	r1, [r4, #4]
 8007646:	4638      	mov	r0, r7
 8007648:	3101      	adds	r1, #1
 800764a:	f7ff ff77 	bl	800753c <_Balloc>
 800764e:	4605      	mov	r5, r0
 8007650:	b928      	cbnz	r0, 800765e <__multadd+0x5e>
 8007652:	4602      	mov	r2, r0
 8007654:	4b0d      	ldr	r3, [pc, #52]	; (800768c <__multadd+0x8c>)
 8007656:	480e      	ldr	r0, [pc, #56]	; (8007690 <__multadd+0x90>)
 8007658:	21b5      	movs	r1, #181	; 0xb5
 800765a:	f000 fc6f 	bl	8007f3c <__assert_func>
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	3202      	adds	r2, #2
 8007662:	f104 010c 	add.w	r1, r4, #12
 8007666:	0092      	lsls	r2, r2, #2
 8007668:	300c      	adds	r0, #12
 800766a:	f7ff ff4d 	bl	8007508 <memcpy>
 800766e:	4621      	mov	r1, r4
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff ffa3 	bl	80075bc <_Bfree>
 8007676:	462c      	mov	r4, r5
 8007678:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800767c:	3601      	adds	r6, #1
 800767e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007682:	6126      	str	r6, [r4, #16]
 8007684:	4620      	mov	r0, r4
 8007686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768a:	bf00      	nop
 800768c:	08008ce7 	.word	0x08008ce7
 8007690:	08008cf8 	.word	0x08008cf8

08007694 <__hi0bits>:
 8007694:	0c03      	lsrs	r3, r0, #16
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	b9d3      	cbnz	r3, 80076d0 <__hi0bits+0x3c>
 800769a:	0400      	lsls	r0, r0, #16
 800769c:	2310      	movs	r3, #16
 800769e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076a2:	bf04      	itt	eq
 80076a4:	0200      	lsleq	r0, r0, #8
 80076a6:	3308      	addeq	r3, #8
 80076a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076ac:	bf04      	itt	eq
 80076ae:	0100      	lsleq	r0, r0, #4
 80076b0:	3304      	addeq	r3, #4
 80076b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076b6:	bf04      	itt	eq
 80076b8:	0080      	lsleq	r0, r0, #2
 80076ba:	3302      	addeq	r3, #2
 80076bc:	2800      	cmp	r0, #0
 80076be:	db05      	blt.n	80076cc <__hi0bits+0x38>
 80076c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076c4:	f103 0301 	add.w	r3, r3, #1
 80076c8:	bf08      	it	eq
 80076ca:	2320      	moveq	r3, #32
 80076cc:	4618      	mov	r0, r3
 80076ce:	4770      	bx	lr
 80076d0:	2300      	movs	r3, #0
 80076d2:	e7e4      	b.n	800769e <__hi0bits+0xa>

080076d4 <__lo0bits>:
 80076d4:	6803      	ldr	r3, [r0, #0]
 80076d6:	f013 0207 	ands.w	r2, r3, #7
 80076da:	4601      	mov	r1, r0
 80076dc:	d00b      	beq.n	80076f6 <__lo0bits+0x22>
 80076de:	07da      	lsls	r2, r3, #31
 80076e0:	d424      	bmi.n	800772c <__lo0bits+0x58>
 80076e2:	0798      	lsls	r0, r3, #30
 80076e4:	bf49      	itett	mi
 80076e6:	085b      	lsrmi	r3, r3, #1
 80076e8:	089b      	lsrpl	r3, r3, #2
 80076ea:	2001      	movmi	r0, #1
 80076ec:	600b      	strmi	r3, [r1, #0]
 80076ee:	bf5c      	itt	pl
 80076f0:	600b      	strpl	r3, [r1, #0]
 80076f2:	2002      	movpl	r0, #2
 80076f4:	4770      	bx	lr
 80076f6:	b298      	uxth	r0, r3
 80076f8:	b9b0      	cbnz	r0, 8007728 <__lo0bits+0x54>
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	2010      	movs	r0, #16
 80076fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007702:	bf04      	itt	eq
 8007704:	0a1b      	lsreq	r3, r3, #8
 8007706:	3008      	addeq	r0, #8
 8007708:	071a      	lsls	r2, r3, #28
 800770a:	bf04      	itt	eq
 800770c:	091b      	lsreq	r3, r3, #4
 800770e:	3004      	addeq	r0, #4
 8007710:	079a      	lsls	r2, r3, #30
 8007712:	bf04      	itt	eq
 8007714:	089b      	lsreq	r3, r3, #2
 8007716:	3002      	addeq	r0, #2
 8007718:	07da      	lsls	r2, r3, #31
 800771a:	d403      	bmi.n	8007724 <__lo0bits+0x50>
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	f100 0001 	add.w	r0, r0, #1
 8007722:	d005      	beq.n	8007730 <__lo0bits+0x5c>
 8007724:	600b      	str	r3, [r1, #0]
 8007726:	4770      	bx	lr
 8007728:	4610      	mov	r0, r2
 800772a:	e7e8      	b.n	80076fe <__lo0bits+0x2a>
 800772c:	2000      	movs	r0, #0
 800772e:	4770      	bx	lr
 8007730:	2020      	movs	r0, #32
 8007732:	4770      	bx	lr

08007734 <__i2b>:
 8007734:	b510      	push	{r4, lr}
 8007736:	460c      	mov	r4, r1
 8007738:	2101      	movs	r1, #1
 800773a:	f7ff feff 	bl	800753c <_Balloc>
 800773e:	4602      	mov	r2, r0
 8007740:	b928      	cbnz	r0, 800774e <__i2b+0x1a>
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <__i2b+0x24>)
 8007744:	4805      	ldr	r0, [pc, #20]	; (800775c <__i2b+0x28>)
 8007746:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800774a:	f000 fbf7 	bl	8007f3c <__assert_func>
 800774e:	2301      	movs	r3, #1
 8007750:	6144      	str	r4, [r0, #20]
 8007752:	6103      	str	r3, [r0, #16]
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	08008ce7 	.word	0x08008ce7
 800775c:	08008cf8 	.word	0x08008cf8

08007760 <__multiply>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	4614      	mov	r4, r2
 8007766:	690a      	ldr	r2, [r1, #16]
 8007768:	6923      	ldr	r3, [r4, #16]
 800776a:	429a      	cmp	r2, r3
 800776c:	bfb8      	it	lt
 800776e:	460b      	movlt	r3, r1
 8007770:	460d      	mov	r5, r1
 8007772:	bfbc      	itt	lt
 8007774:	4625      	movlt	r5, r4
 8007776:	461c      	movlt	r4, r3
 8007778:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800777c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007780:	68ab      	ldr	r3, [r5, #8]
 8007782:	6869      	ldr	r1, [r5, #4]
 8007784:	eb0a 0709 	add.w	r7, sl, r9
 8007788:	42bb      	cmp	r3, r7
 800778a:	b085      	sub	sp, #20
 800778c:	bfb8      	it	lt
 800778e:	3101      	addlt	r1, #1
 8007790:	f7ff fed4 	bl	800753c <_Balloc>
 8007794:	b930      	cbnz	r0, 80077a4 <__multiply+0x44>
 8007796:	4602      	mov	r2, r0
 8007798:	4b42      	ldr	r3, [pc, #264]	; (80078a4 <__multiply+0x144>)
 800779a:	4843      	ldr	r0, [pc, #268]	; (80078a8 <__multiply+0x148>)
 800779c:	f240 115d 	movw	r1, #349	; 0x15d
 80077a0:	f000 fbcc 	bl	8007f3c <__assert_func>
 80077a4:	f100 0614 	add.w	r6, r0, #20
 80077a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80077ac:	4633      	mov	r3, r6
 80077ae:	2200      	movs	r2, #0
 80077b0:	4543      	cmp	r3, r8
 80077b2:	d31e      	bcc.n	80077f2 <__multiply+0x92>
 80077b4:	f105 0c14 	add.w	ip, r5, #20
 80077b8:	f104 0314 	add.w	r3, r4, #20
 80077bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	ebac 0205 	sub.w	r2, ip, r5
 80077ca:	3a15      	subs	r2, #21
 80077cc:	f022 0203 	bic.w	r2, r2, #3
 80077d0:	3204      	adds	r2, #4
 80077d2:	f105 0115 	add.w	r1, r5, #21
 80077d6:	458c      	cmp	ip, r1
 80077d8:	bf38      	it	cc
 80077da:	2204      	movcc	r2, #4
 80077dc:	9201      	str	r2, [sp, #4]
 80077de:	9a02      	ldr	r2, [sp, #8]
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d808      	bhi.n	80077f8 <__multiply+0x98>
 80077e6:	2f00      	cmp	r7, #0
 80077e8:	dc55      	bgt.n	8007896 <__multiply+0x136>
 80077ea:	6107      	str	r7, [r0, #16]
 80077ec:	b005      	add	sp, #20
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	f843 2b04 	str.w	r2, [r3], #4
 80077f6:	e7db      	b.n	80077b0 <__multiply+0x50>
 80077f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80077fc:	f1ba 0f00 	cmp.w	sl, #0
 8007800:	d020      	beq.n	8007844 <__multiply+0xe4>
 8007802:	f105 0e14 	add.w	lr, r5, #20
 8007806:	46b1      	mov	r9, r6
 8007808:	2200      	movs	r2, #0
 800780a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800780e:	f8d9 b000 	ldr.w	fp, [r9]
 8007812:	b2a1      	uxth	r1, r4
 8007814:	fa1f fb8b 	uxth.w	fp, fp
 8007818:	fb0a b101 	mla	r1, sl, r1, fp
 800781c:	4411      	add	r1, r2
 800781e:	f8d9 2000 	ldr.w	r2, [r9]
 8007822:	0c24      	lsrs	r4, r4, #16
 8007824:	0c12      	lsrs	r2, r2, #16
 8007826:	fb0a 2404 	mla	r4, sl, r4, r2
 800782a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800782e:	b289      	uxth	r1, r1
 8007830:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007834:	45f4      	cmp	ip, lr
 8007836:	f849 1b04 	str.w	r1, [r9], #4
 800783a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800783e:	d8e4      	bhi.n	800780a <__multiply+0xaa>
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	5072      	str	r2, [r6, r1]
 8007844:	9a03      	ldr	r2, [sp, #12]
 8007846:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800784a:	3304      	adds	r3, #4
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	d01f      	beq.n	8007892 <__multiply+0x132>
 8007852:	6834      	ldr	r4, [r6, #0]
 8007854:	f105 0114 	add.w	r1, r5, #20
 8007858:	46b6      	mov	lr, r6
 800785a:	f04f 0a00 	mov.w	sl, #0
 800785e:	880a      	ldrh	r2, [r1, #0]
 8007860:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007864:	fb09 b202 	mla	r2, r9, r2, fp
 8007868:	4492      	add	sl, r2
 800786a:	b2a4      	uxth	r4, r4
 800786c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007870:	f84e 4b04 	str.w	r4, [lr], #4
 8007874:	f851 4b04 	ldr.w	r4, [r1], #4
 8007878:	f8be 2000 	ldrh.w	r2, [lr]
 800787c:	0c24      	lsrs	r4, r4, #16
 800787e:	fb09 2404 	mla	r4, r9, r4, r2
 8007882:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007886:	458c      	cmp	ip, r1
 8007888:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800788c:	d8e7      	bhi.n	800785e <__multiply+0xfe>
 800788e:	9a01      	ldr	r2, [sp, #4]
 8007890:	50b4      	str	r4, [r6, r2]
 8007892:	3604      	adds	r6, #4
 8007894:	e7a3      	b.n	80077de <__multiply+0x7e>
 8007896:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1a5      	bne.n	80077ea <__multiply+0x8a>
 800789e:	3f01      	subs	r7, #1
 80078a0:	e7a1      	b.n	80077e6 <__multiply+0x86>
 80078a2:	bf00      	nop
 80078a4:	08008ce7 	.word	0x08008ce7
 80078a8:	08008cf8 	.word	0x08008cf8

080078ac <__pow5mult>:
 80078ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	4615      	mov	r5, r2
 80078b2:	f012 0203 	ands.w	r2, r2, #3
 80078b6:	4606      	mov	r6, r0
 80078b8:	460f      	mov	r7, r1
 80078ba:	d007      	beq.n	80078cc <__pow5mult+0x20>
 80078bc:	4c25      	ldr	r4, [pc, #148]	; (8007954 <__pow5mult+0xa8>)
 80078be:	3a01      	subs	r2, #1
 80078c0:	2300      	movs	r3, #0
 80078c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078c6:	f7ff fe9b 	bl	8007600 <__multadd>
 80078ca:	4607      	mov	r7, r0
 80078cc:	10ad      	asrs	r5, r5, #2
 80078ce:	d03d      	beq.n	800794c <__pow5mult+0xa0>
 80078d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078d2:	b97c      	cbnz	r4, 80078f4 <__pow5mult+0x48>
 80078d4:	2010      	movs	r0, #16
 80078d6:	f7fe fa21 	bl	8005d1c <malloc>
 80078da:	4602      	mov	r2, r0
 80078dc:	6270      	str	r0, [r6, #36]	; 0x24
 80078de:	b928      	cbnz	r0, 80078ec <__pow5mult+0x40>
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <__pow5mult+0xac>)
 80078e2:	481e      	ldr	r0, [pc, #120]	; (800795c <__pow5mult+0xb0>)
 80078e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078e8:	f000 fb28 	bl	8007f3c <__assert_func>
 80078ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078f0:	6004      	str	r4, [r0, #0]
 80078f2:	60c4      	str	r4, [r0, #12]
 80078f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078fc:	b94c      	cbnz	r4, 8007912 <__pow5mult+0x66>
 80078fe:	f240 2171 	movw	r1, #625	; 0x271
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ff16 	bl	8007734 <__i2b>
 8007908:	2300      	movs	r3, #0
 800790a:	f8c8 0008 	str.w	r0, [r8, #8]
 800790e:	4604      	mov	r4, r0
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	07eb      	lsls	r3, r5, #31
 8007918:	d50a      	bpl.n	8007930 <__pow5mult+0x84>
 800791a:	4639      	mov	r1, r7
 800791c:	4622      	mov	r2, r4
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff ff1e 	bl	8007760 <__multiply>
 8007924:	4639      	mov	r1, r7
 8007926:	4680      	mov	r8, r0
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff fe47 	bl	80075bc <_Bfree>
 800792e:	4647      	mov	r7, r8
 8007930:	106d      	asrs	r5, r5, #1
 8007932:	d00b      	beq.n	800794c <__pow5mult+0xa0>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	b938      	cbnz	r0, 8007948 <__pow5mult+0x9c>
 8007938:	4622      	mov	r2, r4
 800793a:	4621      	mov	r1, r4
 800793c:	4630      	mov	r0, r6
 800793e:	f7ff ff0f 	bl	8007760 <__multiply>
 8007942:	6020      	str	r0, [r4, #0]
 8007944:	f8c0 9000 	str.w	r9, [r0]
 8007948:	4604      	mov	r4, r0
 800794a:	e7e4      	b.n	8007916 <__pow5mult+0x6a>
 800794c:	4638      	mov	r0, r7
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	bf00      	nop
 8007954:	08008e48 	.word	0x08008e48
 8007958:	08008c71 	.word	0x08008c71
 800795c:	08008cf8 	.word	0x08008cf8

08007960 <__lshift>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	460c      	mov	r4, r1
 8007966:	6849      	ldr	r1, [r1, #4]
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	4607      	mov	r7, r0
 8007972:	4691      	mov	r9, r2
 8007974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007978:	f108 0601 	add.w	r6, r8, #1
 800797c:	42b3      	cmp	r3, r6
 800797e:	db0b      	blt.n	8007998 <__lshift+0x38>
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff fddb 	bl	800753c <_Balloc>
 8007986:	4605      	mov	r5, r0
 8007988:	b948      	cbnz	r0, 800799e <__lshift+0x3e>
 800798a:	4602      	mov	r2, r0
 800798c:	4b28      	ldr	r3, [pc, #160]	; (8007a30 <__lshift+0xd0>)
 800798e:	4829      	ldr	r0, [pc, #164]	; (8007a34 <__lshift+0xd4>)
 8007990:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007994:	f000 fad2 	bl	8007f3c <__assert_func>
 8007998:	3101      	adds	r1, #1
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	e7ee      	b.n	800797c <__lshift+0x1c>
 800799e:	2300      	movs	r3, #0
 80079a0:	f100 0114 	add.w	r1, r0, #20
 80079a4:	f100 0210 	add.w	r2, r0, #16
 80079a8:	4618      	mov	r0, r3
 80079aa:	4553      	cmp	r3, sl
 80079ac:	db33      	blt.n	8007a16 <__lshift+0xb6>
 80079ae:	6920      	ldr	r0, [r4, #16]
 80079b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079b4:	f104 0314 	add.w	r3, r4, #20
 80079b8:	f019 091f 	ands.w	r9, r9, #31
 80079bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079c4:	d02b      	beq.n	8007a1e <__lshift+0xbe>
 80079c6:	f1c9 0e20 	rsb	lr, r9, #32
 80079ca:	468a      	mov	sl, r1
 80079cc:	2200      	movs	r2, #0
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	fa00 f009 	lsl.w	r0, r0, r9
 80079d4:	4302      	orrs	r2, r0
 80079d6:	f84a 2b04 	str.w	r2, [sl], #4
 80079da:	f853 2b04 	ldr.w	r2, [r3], #4
 80079de:	459c      	cmp	ip, r3
 80079e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079e4:	d8f3      	bhi.n	80079ce <__lshift+0x6e>
 80079e6:	ebac 0304 	sub.w	r3, ip, r4
 80079ea:	3b15      	subs	r3, #21
 80079ec:	f023 0303 	bic.w	r3, r3, #3
 80079f0:	3304      	adds	r3, #4
 80079f2:	f104 0015 	add.w	r0, r4, #21
 80079f6:	4584      	cmp	ip, r0
 80079f8:	bf38      	it	cc
 80079fa:	2304      	movcc	r3, #4
 80079fc:	50ca      	str	r2, [r1, r3]
 80079fe:	b10a      	cbz	r2, 8007a04 <__lshift+0xa4>
 8007a00:	f108 0602 	add.w	r6, r8, #2
 8007a04:	3e01      	subs	r6, #1
 8007a06:	4638      	mov	r0, r7
 8007a08:	612e      	str	r6, [r5, #16]
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	f7ff fdd6 	bl	80075bc <_Bfree>
 8007a10:	4628      	mov	r0, r5
 8007a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a16:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	e7c5      	b.n	80079aa <__lshift+0x4a>
 8007a1e:	3904      	subs	r1, #4
 8007a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a24:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a28:	459c      	cmp	ip, r3
 8007a2a:	d8f9      	bhi.n	8007a20 <__lshift+0xc0>
 8007a2c:	e7ea      	b.n	8007a04 <__lshift+0xa4>
 8007a2e:	bf00      	nop
 8007a30:	08008ce7 	.word	0x08008ce7
 8007a34:	08008cf8 	.word	0x08008cf8

08007a38 <__mcmp>:
 8007a38:	b530      	push	{r4, r5, lr}
 8007a3a:	6902      	ldr	r2, [r0, #16]
 8007a3c:	690c      	ldr	r4, [r1, #16]
 8007a3e:	1b12      	subs	r2, r2, r4
 8007a40:	d10e      	bne.n	8007a60 <__mcmp+0x28>
 8007a42:	f100 0314 	add.w	r3, r0, #20
 8007a46:	3114      	adds	r1, #20
 8007a48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a58:	42a5      	cmp	r5, r4
 8007a5a:	d003      	beq.n	8007a64 <__mcmp+0x2c>
 8007a5c:	d305      	bcc.n	8007a6a <__mcmp+0x32>
 8007a5e:	2201      	movs	r2, #1
 8007a60:	4610      	mov	r0, r2
 8007a62:	bd30      	pop	{r4, r5, pc}
 8007a64:	4283      	cmp	r3, r0
 8007a66:	d3f3      	bcc.n	8007a50 <__mcmp+0x18>
 8007a68:	e7fa      	b.n	8007a60 <__mcmp+0x28>
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6e:	e7f7      	b.n	8007a60 <__mcmp+0x28>

08007a70 <__mdiff>:
 8007a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	460c      	mov	r4, r1
 8007a76:	4606      	mov	r6, r0
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4617      	mov	r7, r2
 8007a7e:	f7ff ffdb 	bl	8007a38 <__mcmp>
 8007a82:	1e05      	subs	r5, r0, #0
 8007a84:	d110      	bne.n	8007aa8 <__mdiff+0x38>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff fd57 	bl	800753c <_Balloc>
 8007a8e:	b930      	cbnz	r0, 8007a9e <__mdiff+0x2e>
 8007a90:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <__mdiff+0x108>)
 8007a92:	4602      	mov	r2, r0
 8007a94:	f240 2132 	movw	r1, #562	; 0x232
 8007a98:	4838      	ldr	r0, [pc, #224]	; (8007b7c <__mdiff+0x10c>)
 8007a9a:	f000 fa4f 	bl	8007f3c <__assert_func>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	bfa4      	itt	ge
 8007aaa:	463b      	movge	r3, r7
 8007aac:	4627      	movge	r7, r4
 8007aae:	4630      	mov	r0, r6
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	bfa6      	itte	ge
 8007ab4:	461c      	movge	r4, r3
 8007ab6:	2500      	movge	r5, #0
 8007ab8:	2501      	movlt	r5, #1
 8007aba:	f7ff fd3f 	bl	800753c <_Balloc>
 8007abe:	b920      	cbnz	r0, 8007aca <__mdiff+0x5a>
 8007ac0:	4b2d      	ldr	r3, [pc, #180]	; (8007b78 <__mdiff+0x108>)
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ac8:	e7e6      	b.n	8007a98 <__mdiff+0x28>
 8007aca:	693e      	ldr	r6, [r7, #16]
 8007acc:	60c5      	str	r5, [r0, #12]
 8007ace:	6925      	ldr	r5, [r4, #16]
 8007ad0:	f107 0114 	add.w	r1, r7, #20
 8007ad4:	f104 0914 	add.w	r9, r4, #20
 8007ad8:	f100 0e14 	add.w	lr, r0, #20
 8007adc:	f107 0210 	add.w	r2, r7, #16
 8007ae0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ae4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ae8:	46f2      	mov	sl, lr
 8007aea:	2700      	movs	r7, #0
 8007aec:	f859 3b04 	ldr.w	r3, [r9], #4
 8007af0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007af4:	fa1f f883 	uxth.w	r8, r3
 8007af8:	fa17 f78b 	uxtah	r7, r7, fp
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	eba7 0808 	sub.w	r8, r7, r8
 8007b02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b0a:	fa1f f888 	uxth.w	r8, r8
 8007b0e:	141f      	asrs	r7, r3, #16
 8007b10:	454d      	cmp	r5, r9
 8007b12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b16:	f84a 3b04 	str.w	r3, [sl], #4
 8007b1a:	d8e7      	bhi.n	8007aec <__mdiff+0x7c>
 8007b1c:	1b2b      	subs	r3, r5, r4
 8007b1e:	3b15      	subs	r3, #21
 8007b20:	f023 0303 	bic.w	r3, r3, #3
 8007b24:	3304      	adds	r3, #4
 8007b26:	3415      	adds	r4, #21
 8007b28:	42a5      	cmp	r5, r4
 8007b2a:	bf38      	it	cc
 8007b2c:	2304      	movcc	r3, #4
 8007b2e:	4419      	add	r1, r3
 8007b30:	4473      	add	r3, lr
 8007b32:	469e      	mov	lr, r3
 8007b34:	460d      	mov	r5, r1
 8007b36:	4565      	cmp	r5, ip
 8007b38:	d30e      	bcc.n	8007b58 <__mdiff+0xe8>
 8007b3a:	f10c 0203 	add.w	r2, ip, #3
 8007b3e:	1a52      	subs	r2, r2, r1
 8007b40:	f022 0203 	bic.w	r2, r2, #3
 8007b44:	3903      	subs	r1, #3
 8007b46:	458c      	cmp	ip, r1
 8007b48:	bf38      	it	cc
 8007b4a:	2200      	movcc	r2, #0
 8007b4c:	441a      	add	r2, r3
 8007b4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b52:	b17b      	cbz	r3, 8007b74 <__mdiff+0x104>
 8007b54:	6106      	str	r6, [r0, #16]
 8007b56:	e7a5      	b.n	8007aa4 <__mdiff+0x34>
 8007b58:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b5c:	fa17 f488 	uxtah	r4, r7, r8
 8007b60:	1422      	asrs	r2, r4, #16
 8007b62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b66:	b2a4      	uxth	r4, r4
 8007b68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b6c:	f84e 4b04 	str.w	r4, [lr], #4
 8007b70:	1417      	asrs	r7, r2, #16
 8007b72:	e7e0      	b.n	8007b36 <__mdiff+0xc6>
 8007b74:	3e01      	subs	r6, #1
 8007b76:	e7ea      	b.n	8007b4e <__mdiff+0xde>
 8007b78:	08008ce7 	.word	0x08008ce7
 8007b7c:	08008cf8 	.word	0x08008cf8

08007b80 <__d2b>:
 8007b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4689      	mov	r9, r1
 8007b86:	2101      	movs	r1, #1
 8007b88:	ec57 6b10 	vmov	r6, r7, d0
 8007b8c:	4690      	mov	r8, r2
 8007b8e:	f7ff fcd5 	bl	800753c <_Balloc>
 8007b92:	4604      	mov	r4, r0
 8007b94:	b930      	cbnz	r0, 8007ba4 <__d2b+0x24>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <__d2b+0xb0>)
 8007b9a:	4826      	ldr	r0, [pc, #152]	; (8007c34 <__d2b+0xb4>)
 8007b9c:	f240 310a 	movw	r1, #778	; 0x30a
 8007ba0:	f000 f9cc 	bl	8007f3c <__assert_func>
 8007ba4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bac:	bb35      	cbnz	r5, 8007bfc <__d2b+0x7c>
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	d028      	beq.n	8007c06 <__d2b+0x86>
 8007bb4:	4668      	mov	r0, sp
 8007bb6:	9600      	str	r6, [sp, #0]
 8007bb8:	f7ff fd8c 	bl	80076d4 <__lo0bits>
 8007bbc:	9900      	ldr	r1, [sp, #0]
 8007bbe:	b300      	cbz	r0, 8007c02 <__d2b+0x82>
 8007bc0:	9a01      	ldr	r2, [sp, #4]
 8007bc2:	f1c0 0320 	rsb	r3, r0, #32
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	40c2      	lsrs	r2, r0
 8007bce:	6163      	str	r3, [r4, #20]
 8007bd0:	9201      	str	r2, [sp, #4]
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	61a3      	str	r3, [r4, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bf14      	ite	ne
 8007bda:	2202      	movne	r2, #2
 8007bdc:	2201      	moveq	r2, #1
 8007bde:	6122      	str	r2, [r4, #16]
 8007be0:	b1d5      	cbz	r5, 8007c18 <__d2b+0x98>
 8007be2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007be6:	4405      	add	r5, r0
 8007be8:	f8c9 5000 	str.w	r5, [r9]
 8007bec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bf0:	f8c8 0000 	str.w	r0, [r8]
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	b003      	add	sp, #12
 8007bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c00:	e7d5      	b.n	8007bae <__d2b+0x2e>
 8007c02:	6161      	str	r1, [r4, #20]
 8007c04:	e7e5      	b.n	8007bd2 <__d2b+0x52>
 8007c06:	a801      	add	r0, sp, #4
 8007c08:	f7ff fd64 	bl	80076d4 <__lo0bits>
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	6163      	str	r3, [r4, #20]
 8007c10:	2201      	movs	r2, #1
 8007c12:	6122      	str	r2, [r4, #16]
 8007c14:	3020      	adds	r0, #32
 8007c16:	e7e3      	b.n	8007be0 <__d2b+0x60>
 8007c18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c20:	f8c9 0000 	str.w	r0, [r9]
 8007c24:	6918      	ldr	r0, [r3, #16]
 8007c26:	f7ff fd35 	bl	8007694 <__hi0bits>
 8007c2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c2e:	e7df      	b.n	8007bf0 <__d2b+0x70>
 8007c30:	08008ce7 	.word	0x08008ce7
 8007c34:	08008cf8 	.word	0x08008cf8

08007c38 <_realloc_r>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	460e      	mov	r6, r1
 8007c40:	b921      	cbnz	r1, 8007c4c <_realloc_r+0x14>
 8007c42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c46:	4611      	mov	r1, r2
 8007c48:	f7fe b8d8 	b.w	8005dfc <_malloc_r>
 8007c4c:	b922      	cbnz	r2, 8007c58 <_realloc_r+0x20>
 8007c4e:	f7fe f885 	bl	8005d5c <_free_r>
 8007c52:	4625      	mov	r5, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c58:	f000 f9cf 	bl	8007ffa <_malloc_usable_size_r>
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d20f      	bcs.n	8007c80 <_realloc_r+0x48>
 8007c60:	4621      	mov	r1, r4
 8007c62:	4638      	mov	r0, r7
 8007c64:	f7fe f8ca 	bl	8005dfc <_malloc_r>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0f2      	beq.n	8007c54 <_realloc_r+0x1c>
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4622      	mov	r2, r4
 8007c72:	f7ff fc49 	bl	8007508 <memcpy>
 8007c76:	4631      	mov	r1, r6
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7fe f86f 	bl	8005d5c <_free_r>
 8007c7e:	e7e9      	b.n	8007c54 <_realloc_r+0x1c>
 8007c80:	4635      	mov	r5, r6
 8007c82:	e7e7      	b.n	8007c54 <_realloc_r+0x1c>

08007c84 <__ssputs_r>:
 8007c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c88:	688e      	ldr	r6, [r1, #8]
 8007c8a:	429e      	cmp	r6, r3
 8007c8c:	4682      	mov	sl, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	4690      	mov	r8, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	d838      	bhi.n	8007d08 <__ssputs_r+0x84>
 8007c96:	898a      	ldrh	r2, [r1, #12]
 8007c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c9c:	d032      	beq.n	8007d04 <__ssputs_r+0x80>
 8007c9e:	6825      	ldr	r5, [r4, #0]
 8007ca0:	6909      	ldr	r1, [r1, #16]
 8007ca2:	eba5 0901 	sub.w	r9, r5, r1
 8007ca6:	6965      	ldr	r5, [r4, #20]
 8007ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	444b      	add	r3, r9
 8007cb4:	106d      	asrs	r5, r5, #1
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	bf38      	it	cc
 8007cba:	461d      	movcc	r5, r3
 8007cbc:	0553      	lsls	r3, r2, #21
 8007cbe:	d531      	bpl.n	8007d24 <__ssputs_r+0xa0>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7fe f89b 	bl	8005dfc <_malloc_r>
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	b950      	cbnz	r0, 8007ce0 <__ssputs_r+0x5c>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	f8ca 3000 	str.w	r3, [sl]
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	6921      	ldr	r1, [r4, #16]
 8007ce2:	464a      	mov	r2, r9
 8007ce4:	f7ff fc10 	bl	8007508 <memcpy>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf2:	81a3      	strh	r3, [r4, #12]
 8007cf4:	6126      	str	r6, [r4, #16]
 8007cf6:	6165      	str	r5, [r4, #20]
 8007cf8:	444e      	add	r6, r9
 8007cfa:	eba5 0509 	sub.w	r5, r5, r9
 8007cfe:	6026      	str	r6, [r4, #0]
 8007d00:	60a5      	str	r5, [r4, #8]
 8007d02:	463e      	mov	r6, r7
 8007d04:	42be      	cmp	r6, r7
 8007d06:	d900      	bls.n	8007d0a <__ssputs_r+0x86>
 8007d08:	463e      	mov	r6, r7
 8007d0a:	4632      	mov	r2, r6
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	4641      	mov	r1, r8
 8007d10:	f000 f959 	bl	8007fc6 <memmove>
 8007d14:	68a3      	ldr	r3, [r4, #8]
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	1b9b      	subs	r3, r3, r6
 8007d1a:	4432      	add	r2, r6
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	6022      	str	r2, [r4, #0]
 8007d20:	2000      	movs	r0, #0
 8007d22:	e7db      	b.n	8007cdc <__ssputs_r+0x58>
 8007d24:	462a      	mov	r2, r5
 8007d26:	f7ff ff87 	bl	8007c38 <_realloc_r>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1e1      	bne.n	8007cf4 <__ssputs_r+0x70>
 8007d30:	6921      	ldr	r1, [r4, #16]
 8007d32:	4650      	mov	r0, sl
 8007d34:	f7fe f812 	bl	8005d5c <_free_r>
 8007d38:	e7c7      	b.n	8007cca <__ssputs_r+0x46>
	...

08007d3c <_svfiprintf_r>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	4698      	mov	r8, r3
 8007d42:	898b      	ldrh	r3, [r1, #12]
 8007d44:	061b      	lsls	r3, r3, #24
 8007d46:	b09d      	sub	sp, #116	; 0x74
 8007d48:	4607      	mov	r7, r0
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	d50e      	bpl.n	8007d6e <_svfiprintf_r+0x32>
 8007d50:	690b      	ldr	r3, [r1, #16]
 8007d52:	b963      	cbnz	r3, 8007d6e <_svfiprintf_r+0x32>
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	f7fe f851 	bl	8005dfc <_malloc_r>
 8007d5a:	6028      	str	r0, [r5, #0]
 8007d5c:	6128      	str	r0, [r5, #16]
 8007d5e:	b920      	cbnz	r0, 8007d6a <_svfiprintf_r+0x2e>
 8007d60:	230c      	movs	r3, #12
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e0d1      	b.n	8007f0e <_svfiprintf_r+0x1d2>
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	616b      	str	r3, [r5, #20]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9309      	str	r3, [sp, #36]	; 0x24
 8007d72:	2320      	movs	r3, #32
 8007d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d7c:	2330      	movs	r3, #48	; 0x30
 8007d7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f28 <_svfiprintf_r+0x1ec>
 8007d82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d86:	f04f 0901 	mov.w	r9, #1
 8007d8a:	4623      	mov	r3, r4
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d92:	b10a      	cbz	r2, 8007d98 <_svfiprintf_r+0x5c>
 8007d94:	2a25      	cmp	r2, #37	; 0x25
 8007d96:	d1f9      	bne.n	8007d8c <_svfiprintf_r+0x50>
 8007d98:	ebba 0b04 	subs.w	fp, sl, r4
 8007d9c:	d00b      	beq.n	8007db6 <_svfiprintf_r+0x7a>
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4622      	mov	r2, r4
 8007da2:	4629      	mov	r1, r5
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff ff6d 	bl	8007c84 <__ssputs_r>
 8007daa:	3001      	adds	r0, #1
 8007dac:	f000 80aa 	beq.w	8007f04 <_svfiprintf_r+0x1c8>
 8007db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db2:	445a      	add	r2, fp
 8007db4:	9209      	str	r2, [sp, #36]	; 0x24
 8007db6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80a2 	beq.w	8007f04 <_svfiprintf_r+0x1c8>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dca:	f10a 0a01 	add.w	sl, sl, #1
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd8:	4654      	mov	r4, sl
 8007dda:	2205      	movs	r2, #5
 8007ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de0:	4851      	ldr	r0, [pc, #324]	; (8007f28 <_svfiprintf_r+0x1ec>)
 8007de2:	f7f8 fa05 	bl	80001f0 <memchr>
 8007de6:	9a04      	ldr	r2, [sp, #16]
 8007de8:	b9d8      	cbnz	r0, 8007e22 <_svfiprintf_r+0xe6>
 8007dea:	06d0      	lsls	r0, r2, #27
 8007dec:	bf44      	itt	mi
 8007dee:	2320      	movmi	r3, #32
 8007df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df4:	0711      	lsls	r1, r2, #28
 8007df6:	bf44      	itt	mi
 8007df8:	232b      	movmi	r3, #43	; 0x2b
 8007dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007e02:	2b2a      	cmp	r3, #42	; 0x2a
 8007e04:	d015      	beq.n	8007e32 <_svfiprintf_r+0xf6>
 8007e06:	9a07      	ldr	r2, [sp, #28]
 8007e08:	4654      	mov	r4, sl
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f04f 0c0a 	mov.w	ip, #10
 8007e10:	4621      	mov	r1, r4
 8007e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e16:	3b30      	subs	r3, #48	; 0x30
 8007e18:	2b09      	cmp	r3, #9
 8007e1a:	d94e      	bls.n	8007eba <_svfiprintf_r+0x17e>
 8007e1c:	b1b0      	cbz	r0, 8007e4c <_svfiprintf_r+0x110>
 8007e1e:	9207      	str	r2, [sp, #28]
 8007e20:	e014      	b.n	8007e4c <_svfiprintf_r+0x110>
 8007e22:	eba0 0308 	sub.w	r3, r0, r8
 8007e26:	fa09 f303 	lsl.w	r3, r9, r3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	46a2      	mov	sl, r4
 8007e30:	e7d2      	b.n	8007dd8 <_svfiprintf_r+0x9c>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9103      	str	r1, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bfbb      	ittet	lt
 8007e3e:	425b      	neglt	r3, r3
 8007e40:	f042 0202 	orrlt.w	r2, r2, #2
 8007e44:	9307      	strge	r3, [sp, #28]
 8007e46:	9307      	strlt	r3, [sp, #28]
 8007e48:	bfb8      	it	lt
 8007e4a:	9204      	strlt	r2, [sp, #16]
 8007e4c:	7823      	ldrb	r3, [r4, #0]
 8007e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e50:	d10c      	bne.n	8007e6c <_svfiprintf_r+0x130>
 8007e52:	7863      	ldrb	r3, [r4, #1]
 8007e54:	2b2a      	cmp	r3, #42	; 0x2a
 8007e56:	d135      	bne.n	8007ec4 <_svfiprintf_r+0x188>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	1d1a      	adds	r2, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9203      	str	r2, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfb8      	it	lt
 8007e64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e68:	3402      	adds	r4, #2
 8007e6a:	9305      	str	r3, [sp, #20]
 8007e6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f38 <_svfiprintf_r+0x1fc>
 8007e70:	7821      	ldrb	r1, [r4, #0]
 8007e72:	2203      	movs	r2, #3
 8007e74:	4650      	mov	r0, sl
 8007e76:	f7f8 f9bb 	bl	80001f0 <memchr>
 8007e7a:	b140      	cbz	r0, 8007e8e <_svfiprintf_r+0x152>
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	eba0 000a 	sub.w	r0, r0, sl
 8007e82:	fa03 f000 	lsl.w	r0, r3, r0
 8007e86:	9b04      	ldr	r3, [sp, #16]
 8007e88:	4303      	orrs	r3, r0
 8007e8a:	3401      	adds	r4, #1
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e92:	4826      	ldr	r0, [pc, #152]	; (8007f2c <_svfiprintf_r+0x1f0>)
 8007e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e98:	2206      	movs	r2, #6
 8007e9a:	f7f8 f9a9 	bl	80001f0 <memchr>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d038      	beq.n	8007f14 <_svfiprintf_r+0x1d8>
 8007ea2:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <_svfiprintf_r+0x1f4>)
 8007ea4:	bb1b      	cbnz	r3, 8007eee <_svfiprintf_r+0x1b2>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	3307      	adds	r3, #7
 8007eaa:	f023 0307 	bic.w	r3, r3, #7
 8007eae:	3308      	adds	r3, #8
 8007eb0:	9303      	str	r3, [sp, #12]
 8007eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb4:	4433      	add	r3, r6
 8007eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb8:	e767      	b.n	8007d8a <_svfiprintf_r+0x4e>
 8007eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	e7a5      	b.n	8007e10 <_svfiprintf_r+0xd4>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	3401      	adds	r4, #1
 8007ec8:	9305      	str	r3, [sp, #20]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	f04f 0c0a 	mov.w	ip, #10
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed6:	3a30      	subs	r2, #48	; 0x30
 8007ed8:	2a09      	cmp	r2, #9
 8007eda:	d903      	bls.n	8007ee4 <_svfiprintf_r+0x1a8>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0c5      	beq.n	8007e6c <_svfiprintf_r+0x130>
 8007ee0:	9105      	str	r1, [sp, #20]
 8007ee2:	e7c3      	b.n	8007e6c <_svfiprintf_r+0x130>
 8007ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee8:	4604      	mov	r4, r0
 8007eea:	2301      	movs	r3, #1
 8007eec:	e7f0      	b.n	8007ed0 <_svfiprintf_r+0x194>
 8007eee:	ab03      	add	r3, sp, #12
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <_svfiprintf_r+0x1f8>)
 8007ef6:	a904      	add	r1, sp, #16
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7fe f879 	bl	8005ff0 <_printf_float>
 8007efe:	1c42      	adds	r2, r0, #1
 8007f00:	4606      	mov	r6, r0
 8007f02:	d1d6      	bne.n	8007eb2 <_svfiprintf_r+0x176>
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	065b      	lsls	r3, r3, #25
 8007f08:	f53f af2c 	bmi.w	8007d64 <_svfiprintf_r+0x28>
 8007f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f0e:	b01d      	add	sp, #116	; 0x74
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	462a      	mov	r2, r5
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <_svfiprintf_r+0x1f8>)
 8007f1c:	a904      	add	r1, sp, #16
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7fe fb0a 	bl	8006538 <_printf_i>
 8007f24:	e7eb      	b.n	8007efe <_svfiprintf_r+0x1c2>
 8007f26:	bf00      	nop
 8007f28:	08008e54 	.word	0x08008e54
 8007f2c:	08008e5e 	.word	0x08008e5e
 8007f30:	08005ff1 	.word	0x08005ff1
 8007f34:	08007c85 	.word	0x08007c85
 8007f38:	08008e5a 	.word	0x08008e5a

08007f3c <__assert_func>:
 8007f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f3e:	4614      	mov	r4, r2
 8007f40:	461a      	mov	r2, r3
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <__assert_func+0x2c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4605      	mov	r5, r0
 8007f48:	68d8      	ldr	r0, [r3, #12]
 8007f4a:	b14c      	cbz	r4, 8007f60 <__assert_func+0x24>
 8007f4c:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <__assert_func+0x30>)
 8007f4e:	9100      	str	r1, [sp, #0]
 8007f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f54:	4906      	ldr	r1, [pc, #24]	; (8007f70 <__assert_func+0x34>)
 8007f56:	462b      	mov	r3, r5
 8007f58:	f000 f80e 	bl	8007f78 <fiprintf>
 8007f5c:	f000 fa7c 	bl	8008458 <abort>
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <__assert_func+0x38>)
 8007f62:	461c      	mov	r4, r3
 8007f64:	e7f3      	b.n	8007f4e <__assert_func+0x12>
 8007f66:	bf00      	nop
 8007f68:	200002a0 	.word	0x200002a0
 8007f6c:	08008e65 	.word	0x08008e65
 8007f70:	08008e72 	.word	0x08008e72
 8007f74:	08008ea0 	.word	0x08008ea0

08007f78 <fiprintf>:
 8007f78:	b40e      	push	{r1, r2, r3}
 8007f7a:	b503      	push	{r0, r1, lr}
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	4805      	ldr	r0, [pc, #20]	; (8007f98 <fiprintf+0x20>)
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	6800      	ldr	r0, [r0, #0]
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	f000 f867 	bl	800805c <_vfiprintf_r>
 8007f8e:	b002      	add	sp, #8
 8007f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f94:	b003      	add	sp, #12
 8007f96:	4770      	bx	lr
 8007f98:	200002a0 	.word	0x200002a0

08007f9c <__retarget_lock_init_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_acquire_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <__retarget_lock_release_recursive>:
 8007fa0:	4770      	bx	lr

08007fa2 <__ascii_mbtowc>:
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	b901      	cbnz	r1, 8007fa8 <__ascii_mbtowc+0x6>
 8007fa6:	a901      	add	r1, sp, #4
 8007fa8:	b142      	cbz	r2, 8007fbc <__ascii_mbtowc+0x1a>
 8007faa:	b14b      	cbz	r3, 8007fc0 <__ascii_mbtowc+0x1e>
 8007fac:	7813      	ldrb	r3, [r2, #0]
 8007fae:	600b      	str	r3, [r1, #0]
 8007fb0:	7812      	ldrb	r2, [r2, #0]
 8007fb2:	1e10      	subs	r0, r2, #0
 8007fb4:	bf18      	it	ne
 8007fb6:	2001      	movne	r0, #1
 8007fb8:	b002      	add	sp, #8
 8007fba:	4770      	bx	lr
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	e7fb      	b.n	8007fb8 <__ascii_mbtowc+0x16>
 8007fc0:	f06f 0001 	mvn.w	r0, #1
 8007fc4:	e7f8      	b.n	8007fb8 <__ascii_mbtowc+0x16>

08007fc6 <memmove>:
 8007fc6:	4288      	cmp	r0, r1
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	eb01 0402 	add.w	r4, r1, r2
 8007fce:	d902      	bls.n	8007fd6 <memmove+0x10>
 8007fd0:	4284      	cmp	r4, r0
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	d807      	bhi.n	8007fe6 <memmove+0x20>
 8007fd6:	1e43      	subs	r3, r0, #1
 8007fd8:	42a1      	cmp	r1, r4
 8007fda:	d008      	beq.n	8007fee <memmove+0x28>
 8007fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fe0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fe4:	e7f8      	b.n	8007fd8 <memmove+0x12>
 8007fe6:	4402      	add	r2, r0
 8007fe8:	4601      	mov	r1, r0
 8007fea:	428a      	cmp	r2, r1
 8007fec:	d100      	bne.n	8007ff0 <memmove+0x2a>
 8007fee:	bd10      	pop	{r4, pc}
 8007ff0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ff4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ff8:	e7f7      	b.n	8007fea <memmove+0x24>

08007ffa <_malloc_usable_size_r>:
 8007ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ffe:	1f18      	subs	r0, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	bfbc      	itt	lt
 8008004:	580b      	ldrlt	r3, [r1, r0]
 8008006:	18c0      	addlt	r0, r0, r3
 8008008:	4770      	bx	lr

0800800a <__sfputc_r>:
 800800a:	6893      	ldr	r3, [r2, #8]
 800800c:	3b01      	subs	r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	b410      	push	{r4}
 8008012:	6093      	str	r3, [r2, #8]
 8008014:	da08      	bge.n	8008028 <__sfputc_r+0x1e>
 8008016:	6994      	ldr	r4, [r2, #24]
 8008018:	42a3      	cmp	r3, r4
 800801a:	db01      	blt.n	8008020 <__sfputc_r+0x16>
 800801c:	290a      	cmp	r1, #10
 800801e:	d103      	bne.n	8008028 <__sfputc_r+0x1e>
 8008020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008024:	f000 b94a 	b.w	80082bc <__swbuf_r>
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	1c58      	adds	r0, r3, #1
 800802c:	6010      	str	r0, [r2, #0]
 800802e:	7019      	strb	r1, [r3, #0]
 8008030:	4608      	mov	r0, r1
 8008032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008036:	4770      	bx	lr

08008038 <__sfputs_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	4606      	mov	r6, r0
 800803c:	460f      	mov	r7, r1
 800803e:	4614      	mov	r4, r2
 8008040:	18d5      	adds	r5, r2, r3
 8008042:	42ac      	cmp	r4, r5
 8008044:	d101      	bne.n	800804a <__sfputs_r+0x12>
 8008046:	2000      	movs	r0, #0
 8008048:	e007      	b.n	800805a <__sfputs_r+0x22>
 800804a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804e:	463a      	mov	r2, r7
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff ffda 	bl	800800a <__sfputc_r>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	d1f3      	bne.n	8008042 <__sfputs_r+0xa>
 800805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800805c <_vfiprintf_r>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460d      	mov	r5, r1
 8008062:	b09d      	sub	sp, #116	; 0x74
 8008064:	4614      	mov	r4, r2
 8008066:	4698      	mov	r8, r3
 8008068:	4606      	mov	r6, r0
 800806a:	b118      	cbz	r0, 8008074 <_vfiprintf_r+0x18>
 800806c:	6983      	ldr	r3, [r0, #24]
 800806e:	b90b      	cbnz	r3, 8008074 <_vfiprintf_r+0x18>
 8008070:	f000 fb14 	bl	800869c <__sinit>
 8008074:	4b89      	ldr	r3, [pc, #548]	; (800829c <_vfiprintf_r+0x240>)
 8008076:	429d      	cmp	r5, r3
 8008078:	d11b      	bne.n	80080b2 <_vfiprintf_r+0x56>
 800807a:	6875      	ldr	r5, [r6, #4]
 800807c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800807e:	07d9      	lsls	r1, r3, #31
 8008080:	d405      	bmi.n	800808e <_vfiprintf_r+0x32>
 8008082:	89ab      	ldrh	r3, [r5, #12]
 8008084:	059a      	lsls	r2, r3, #22
 8008086:	d402      	bmi.n	800808e <_vfiprintf_r+0x32>
 8008088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808a:	f7ff ff88 	bl	8007f9e <__retarget_lock_acquire_recursive>
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	071b      	lsls	r3, r3, #28
 8008092:	d501      	bpl.n	8008098 <_vfiprintf_r+0x3c>
 8008094:	692b      	ldr	r3, [r5, #16]
 8008096:	b9eb      	cbnz	r3, 80080d4 <_vfiprintf_r+0x78>
 8008098:	4629      	mov	r1, r5
 800809a:	4630      	mov	r0, r6
 800809c:	f000 f96e 	bl	800837c <__swsetup_r>
 80080a0:	b1c0      	cbz	r0, 80080d4 <_vfiprintf_r+0x78>
 80080a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a4:	07dc      	lsls	r4, r3, #31
 80080a6:	d50e      	bpl.n	80080c6 <_vfiprintf_r+0x6a>
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	b01d      	add	sp, #116	; 0x74
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	4b7b      	ldr	r3, [pc, #492]	; (80082a0 <_vfiprintf_r+0x244>)
 80080b4:	429d      	cmp	r5, r3
 80080b6:	d101      	bne.n	80080bc <_vfiprintf_r+0x60>
 80080b8:	68b5      	ldr	r5, [r6, #8]
 80080ba:	e7df      	b.n	800807c <_vfiprintf_r+0x20>
 80080bc:	4b79      	ldr	r3, [pc, #484]	; (80082a4 <_vfiprintf_r+0x248>)
 80080be:	429d      	cmp	r5, r3
 80080c0:	bf08      	it	eq
 80080c2:	68f5      	ldreq	r5, [r6, #12]
 80080c4:	e7da      	b.n	800807c <_vfiprintf_r+0x20>
 80080c6:	89ab      	ldrh	r3, [r5, #12]
 80080c8:	0598      	lsls	r0, r3, #22
 80080ca:	d4ed      	bmi.n	80080a8 <_vfiprintf_r+0x4c>
 80080cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ce:	f7ff ff67 	bl	8007fa0 <__retarget_lock_release_recursive>
 80080d2:	e7e9      	b.n	80080a8 <_vfiprintf_r+0x4c>
 80080d4:	2300      	movs	r3, #0
 80080d6:	9309      	str	r3, [sp, #36]	; 0x24
 80080d8:	2320      	movs	r3, #32
 80080da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080de:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e2:	2330      	movs	r3, #48	; 0x30
 80080e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082a8 <_vfiprintf_r+0x24c>
 80080e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ec:	f04f 0901 	mov.w	r9, #1
 80080f0:	4623      	mov	r3, r4
 80080f2:	469a      	mov	sl, r3
 80080f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f8:	b10a      	cbz	r2, 80080fe <_vfiprintf_r+0xa2>
 80080fa:	2a25      	cmp	r2, #37	; 0x25
 80080fc:	d1f9      	bne.n	80080f2 <_vfiprintf_r+0x96>
 80080fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008102:	d00b      	beq.n	800811c <_vfiprintf_r+0xc0>
 8008104:	465b      	mov	r3, fp
 8008106:	4622      	mov	r2, r4
 8008108:	4629      	mov	r1, r5
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff ff94 	bl	8008038 <__sfputs_r>
 8008110:	3001      	adds	r0, #1
 8008112:	f000 80aa 	beq.w	800826a <_vfiprintf_r+0x20e>
 8008116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008118:	445a      	add	r2, fp
 800811a:	9209      	str	r2, [sp, #36]	; 0x24
 800811c:	f89a 3000 	ldrb.w	r3, [sl]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80a2 	beq.w	800826a <_vfiprintf_r+0x20e>
 8008126:	2300      	movs	r3, #0
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008130:	f10a 0a01 	add.w	sl, sl, #1
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813c:	931a      	str	r3, [sp, #104]	; 0x68
 800813e:	4654      	mov	r4, sl
 8008140:	2205      	movs	r2, #5
 8008142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008146:	4858      	ldr	r0, [pc, #352]	; (80082a8 <_vfiprintf_r+0x24c>)
 8008148:	f7f8 f852 	bl	80001f0 <memchr>
 800814c:	9a04      	ldr	r2, [sp, #16]
 800814e:	b9d8      	cbnz	r0, 8008188 <_vfiprintf_r+0x12c>
 8008150:	06d1      	lsls	r1, r2, #27
 8008152:	bf44      	itt	mi
 8008154:	2320      	movmi	r3, #32
 8008156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815a:	0713      	lsls	r3, r2, #28
 800815c:	bf44      	itt	mi
 800815e:	232b      	movmi	r3, #43	; 0x2b
 8008160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008164:	f89a 3000 	ldrb.w	r3, [sl]
 8008168:	2b2a      	cmp	r3, #42	; 0x2a
 800816a:	d015      	beq.n	8008198 <_vfiprintf_r+0x13c>
 800816c:	9a07      	ldr	r2, [sp, #28]
 800816e:	4654      	mov	r4, sl
 8008170:	2000      	movs	r0, #0
 8008172:	f04f 0c0a 	mov.w	ip, #10
 8008176:	4621      	mov	r1, r4
 8008178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817c:	3b30      	subs	r3, #48	; 0x30
 800817e:	2b09      	cmp	r3, #9
 8008180:	d94e      	bls.n	8008220 <_vfiprintf_r+0x1c4>
 8008182:	b1b0      	cbz	r0, 80081b2 <_vfiprintf_r+0x156>
 8008184:	9207      	str	r2, [sp, #28]
 8008186:	e014      	b.n	80081b2 <_vfiprintf_r+0x156>
 8008188:	eba0 0308 	sub.w	r3, r0, r8
 800818c:	fa09 f303 	lsl.w	r3, r9, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	46a2      	mov	sl, r4
 8008196:	e7d2      	b.n	800813e <_vfiprintf_r+0xe2>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	1d19      	adds	r1, r3, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	9103      	str	r1, [sp, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bfbb      	ittet	lt
 80081a4:	425b      	neglt	r3, r3
 80081a6:	f042 0202 	orrlt.w	r2, r2, #2
 80081aa:	9307      	strge	r3, [sp, #28]
 80081ac:	9307      	strlt	r3, [sp, #28]
 80081ae:	bfb8      	it	lt
 80081b0:	9204      	strlt	r2, [sp, #16]
 80081b2:	7823      	ldrb	r3, [r4, #0]
 80081b4:	2b2e      	cmp	r3, #46	; 0x2e
 80081b6:	d10c      	bne.n	80081d2 <_vfiprintf_r+0x176>
 80081b8:	7863      	ldrb	r3, [r4, #1]
 80081ba:	2b2a      	cmp	r3, #42	; 0x2a
 80081bc:	d135      	bne.n	800822a <_vfiprintf_r+0x1ce>
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	9203      	str	r2, [sp, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ce:	3402      	adds	r4, #2
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082b8 <_vfiprintf_r+0x25c>
 80081d6:	7821      	ldrb	r1, [r4, #0]
 80081d8:	2203      	movs	r2, #3
 80081da:	4650      	mov	r0, sl
 80081dc:	f7f8 f808 	bl	80001f0 <memchr>
 80081e0:	b140      	cbz	r0, 80081f4 <_vfiprintf_r+0x198>
 80081e2:	2340      	movs	r3, #64	; 0x40
 80081e4:	eba0 000a 	sub.w	r0, r0, sl
 80081e8:	fa03 f000 	lsl.w	r0, r3, r0
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	4303      	orrs	r3, r0
 80081f0:	3401      	adds	r4, #1
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f8:	482c      	ldr	r0, [pc, #176]	; (80082ac <_vfiprintf_r+0x250>)
 80081fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081fe:	2206      	movs	r2, #6
 8008200:	f7f7 fff6 	bl	80001f0 <memchr>
 8008204:	2800      	cmp	r0, #0
 8008206:	d03f      	beq.n	8008288 <_vfiprintf_r+0x22c>
 8008208:	4b29      	ldr	r3, [pc, #164]	; (80082b0 <_vfiprintf_r+0x254>)
 800820a:	bb1b      	cbnz	r3, 8008254 <_vfiprintf_r+0x1f8>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	3307      	adds	r3, #7
 8008210:	f023 0307 	bic.w	r3, r3, #7
 8008214:	3308      	adds	r3, #8
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821a:	443b      	add	r3, r7
 800821c:	9309      	str	r3, [sp, #36]	; 0x24
 800821e:	e767      	b.n	80080f0 <_vfiprintf_r+0x94>
 8008220:	fb0c 3202 	mla	r2, ip, r2, r3
 8008224:	460c      	mov	r4, r1
 8008226:	2001      	movs	r0, #1
 8008228:	e7a5      	b.n	8008176 <_vfiprintf_r+0x11a>
 800822a:	2300      	movs	r3, #0
 800822c:	3401      	adds	r4, #1
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	4619      	mov	r1, r3
 8008232:	f04f 0c0a 	mov.w	ip, #10
 8008236:	4620      	mov	r0, r4
 8008238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823c:	3a30      	subs	r2, #48	; 0x30
 800823e:	2a09      	cmp	r2, #9
 8008240:	d903      	bls.n	800824a <_vfiprintf_r+0x1ee>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0c5      	beq.n	80081d2 <_vfiprintf_r+0x176>
 8008246:	9105      	str	r1, [sp, #20]
 8008248:	e7c3      	b.n	80081d2 <_vfiprintf_r+0x176>
 800824a:	fb0c 2101 	mla	r1, ip, r1, r2
 800824e:	4604      	mov	r4, r0
 8008250:	2301      	movs	r3, #1
 8008252:	e7f0      	b.n	8008236 <_vfiprintf_r+0x1da>
 8008254:	ab03      	add	r3, sp, #12
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	462a      	mov	r2, r5
 800825a:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <_vfiprintf_r+0x258>)
 800825c:	a904      	add	r1, sp, #16
 800825e:	4630      	mov	r0, r6
 8008260:	f7fd fec6 	bl	8005ff0 <_printf_float>
 8008264:	4607      	mov	r7, r0
 8008266:	1c78      	adds	r0, r7, #1
 8008268:	d1d6      	bne.n	8008218 <_vfiprintf_r+0x1bc>
 800826a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800826c:	07d9      	lsls	r1, r3, #31
 800826e:	d405      	bmi.n	800827c <_vfiprintf_r+0x220>
 8008270:	89ab      	ldrh	r3, [r5, #12]
 8008272:	059a      	lsls	r2, r3, #22
 8008274:	d402      	bmi.n	800827c <_vfiprintf_r+0x220>
 8008276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008278:	f7ff fe92 	bl	8007fa0 <__retarget_lock_release_recursive>
 800827c:	89ab      	ldrh	r3, [r5, #12]
 800827e:	065b      	lsls	r3, r3, #25
 8008280:	f53f af12 	bmi.w	80080a8 <_vfiprintf_r+0x4c>
 8008284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008286:	e711      	b.n	80080ac <_vfiprintf_r+0x50>
 8008288:	ab03      	add	r3, sp, #12
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	462a      	mov	r2, r5
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <_vfiprintf_r+0x258>)
 8008290:	a904      	add	r1, sp, #16
 8008292:	4630      	mov	r0, r6
 8008294:	f7fe f950 	bl	8006538 <_printf_i>
 8008298:	e7e4      	b.n	8008264 <_vfiprintf_r+0x208>
 800829a:	bf00      	nop
 800829c:	08008fcc 	.word	0x08008fcc
 80082a0:	08008fec 	.word	0x08008fec
 80082a4:	08008fac 	.word	0x08008fac
 80082a8:	08008e54 	.word	0x08008e54
 80082ac:	08008e5e 	.word	0x08008e5e
 80082b0:	08005ff1 	.word	0x08005ff1
 80082b4:	08008039 	.word	0x08008039
 80082b8:	08008e5a 	.word	0x08008e5a

080082bc <__swbuf_r>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	460e      	mov	r6, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	4605      	mov	r5, r0
 80082c4:	b118      	cbz	r0, 80082ce <__swbuf_r+0x12>
 80082c6:	6983      	ldr	r3, [r0, #24]
 80082c8:	b90b      	cbnz	r3, 80082ce <__swbuf_r+0x12>
 80082ca:	f000 f9e7 	bl	800869c <__sinit>
 80082ce:	4b21      	ldr	r3, [pc, #132]	; (8008354 <__swbuf_r+0x98>)
 80082d0:	429c      	cmp	r4, r3
 80082d2:	d12b      	bne.n	800832c <__swbuf_r+0x70>
 80082d4:	686c      	ldr	r4, [r5, #4]
 80082d6:	69a3      	ldr	r3, [r4, #24]
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	071a      	lsls	r2, r3, #28
 80082de:	d52f      	bpl.n	8008340 <__swbuf_r+0x84>
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	b36b      	cbz	r3, 8008340 <__swbuf_r+0x84>
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	6820      	ldr	r0, [r4, #0]
 80082e8:	1ac0      	subs	r0, r0, r3
 80082ea:	6963      	ldr	r3, [r4, #20]
 80082ec:	b2f6      	uxtb	r6, r6
 80082ee:	4283      	cmp	r3, r0
 80082f0:	4637      	mov	r7, r6
 80082f2:	dc04      	bgt.n	80082fe <__swbuf_r+0x42>
 80082f4:	4621      	mov	r1, r4
 80082f6:	4628      	mov	r0, r5
 80082f8:	f000 f93c 	bl	8008574 <_fflush_r>
 80082fc:	bb30      	cbnz	r0, 800834c <__swbuf_r+0x90>
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	3b01      	subs	r3, #1
 8008302:	60a3      	str	r3, [r4, #8]
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	6022      	str	r2, [r4, #0]
 800830a:	701e      	strb	r6, [r3, #0]
 800830c:	6963      	ldr	r3, [r4, #20]
 800830e:	3001      	adds	r0, #1
 8008310:	4283      	cmp	r3, r0
 8008312:	d004      	beq.n	800831e <__swbuf_r+0x62>
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	07db      	lsls	r3, r3, #31
 8008318:	d506      	bpl.n	8008328 <__swbuf_r+0x6c>
 800831a:	2e0a      	cmp	r6, #10
 800831c:	d104      	bne.n	8008328 <__swbuf_r+0x6c>
 800831e:	4621      	mov	r1, r4
 8008320:	4628      	mov	r0, r5
 8008322:	f000 f927 	bl	8008574 <_fflush_r>
 8008326:	b988      	cbnz	r0, 800834c <__swbuf_r+0x90>
 8008328:	4638      	mov	r0, r7
 800832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <__swbuf_r+0x9c>)
 800832e:	429c      	cmp	r4, r3
 8008330:	d101      	bne.n	8008336 <__swbuf_r+0x7a>
 8008332:	68ac      	ldr	r4, [r5, #8]
 8008334:	e7cf      	b.n	80082d6 <__swbuf_r+0x1a>
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <__swbuf_r+0xa0>)
 8008338:	429c      	cmp	r4, r3
 800833a:	bf08      	it	eq
 800833c:	68ec      	ldreq	r4, [r5, #12]
 800833e:	e7ca      	b.n	80082d6 <__swbuf_r+0x1a>
 8008340:	4621      	mov	r1, r4
 8008342:	4628      	mov	r0, r5
 8008344:	f000 f81a 	bl	800837c <__swsetup_r>
 8008348:	2800      	cmp	r0, #0
 800834a:	d0cb      	beq.n	80082e4 <__swbuf_r+0x28>
 800834c:	f04f 37ff 	mov.w	r7, #4294967295
 8008350:	e7ea      	b.n	8008328 <__swbuf_r+0x6c>
 8008352:	bf00      	nop
 8008354:	08008fcc 	.word	0x08008fcc
 8008358:	08008fec 	.word	0x08008fec
 800835c:	08008fac 	.word	0x08008fac

08008360 <__ascii_wctomb>:
 8008360:	b149      	cbz	r1, 8008376 <__ascii_wctomb+0x16>
 8008362:	2aff      	cmp	r2, #255	; 0xff
 8008364:	bf85      	ittet	hi
 8008366:	238a      	movhi	r3, #138	; 0x8a
 8008368:	6003      	strhi	r3, [r0, #0]
 800836a:	700a      	strbls	r2, [r1, #0]
 800836c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008370:	bf98      	it	ls
 8008372:	2001      	movls	r0, #1
 8008374:	4770      	bx	lr
 8008376:	4608      	mov	r0, r1
 8008378:	4770      	bx	lr
	...

0800837c <__swsetup_r>:
 800837c:	4b32      	ldr	r3, [pc, #200]	; (8008448 <__swsetup_r+0xcc>)
 800837e:	b570      	push	{r4, r5, r6, lr}
 8008380:	681d      	ldr	r5, [r3, #0]
 8008382:	4606      	mov	r6, r0
 8008384:	460c      	mov	r4, r1
 8008386:	b125      	cbz	r5, 8008392 <__swsetup_r+0x16>
 8008388:	69ab      	ldr	r3, [r5, #24]
 800838a:	b913      	cbnz	r3, 8008392 <__swsetup_r+0x16>
 800838c:	4628      	mov	r0, r5
 800838e:	f000 f985 	bl	800869c <__sinit>
 8008392:	4b2e      	ldr	r3, [pc, #184]	; (800844c <__swsetup_r+0xd0>)
 8008394:	429c      	cmp	r4, r3
 8008396:	d10f      	bne.n	80083b8 <__swsetup_r+0x3c>
 8008398:	686c      	ldr	r4, [r5, #4]
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083a0:	0719      	lsls	r1, r3, #28
 80083a2:	d42c      	bmi.n	80083fe <__swsetup_r+0x82>
 80083a4:	06dd      	lsls	r5, r3, #27
 80083a6:	d411      	bmi.n	80083cc <__swsetup_r+0x50>
 80083a8:	2309      	movs	r3, #9
 80083aa:	6033      	str	r3, [r6, #0]
 80083ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	e03e      	b.n	8008436 <__swsetup_r+0xba>
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <__swsetup_r+0xd4>)
 80083ba:	429c      	cmp	r4, r3
 80083bc:	d101      	bne.n	80083c2 <__swsetup_r+0x46>
 80083be:	68ac      	ldr	r4, [r5, #8]
 80083c0:	e7eb      	b.n	800839a <__swsetup_r+0x1e>
 80083c2:	4b24      	ldr	r3, [pc, #144]	; (8008454 <__swsetup_r+0xd8>)
 80083c4:	429c      	cmp	r4, r3
 80083c6:	bf08      	it	eq
 80083c8:	68ec      	ldreq	r4, [r5, #12]
 80083ca:	e7e6      	b.n	800839a <__swsetup_r+0x1e>
 80083cc:	0758      	lsls	r0, r3, #29
 80083ce:	d512      	bpl.n	80083f6 <__swsetup_r+0x7a>
 80083d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d2:	b141      	cbz	r1, 80083e6 <__swsetup_r+0x6a>
 80083d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083d8:	4299      	cmp	r1, r3
 80083da:	d002      	beq.n	80083e2 <__swsetup_r+0x66>
 80083dc:	4630      	mov	r0, r6
 80083de:	f7fd fcbd 	bl	8005d5c <_free_r>
 80083e2:	2300      	movs	r3, #0
 80083e4:	6363      	str	r3, [r4, #52]	; 0x34
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083ec:	81a3      	strh	r3, [r4, #12]
 80083ee:	2300      	movs	r3, #0
 80083f0:	6063      	str	r3, [r4, #4]
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f043 0308 	orr.w	r3, r3, #8
 80083fc:	81a3      	strh	r3, [r4, #12]
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	b94b      	cbnz	r3, 8008416 <__swsetup_r+0x9a>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840c:	d003      	beq.n	8008416 <__swsetup_r+0x9a>
 800840e:	4621      	mov	r1, r4
 8008410:	4630      	mov	r0, r6
 8008412:	f000 fa05 	bl	8008820 <__smakebuf_r>
 8008416:	89a0      	ldrh	r0, [r4, #12]
 8008418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800841c:	f010 0301 	ands.w	r3, r0, #1
 8008420:	d00a      	beq.n	8008438 <__swsetup_r+0xbc>
 8008422:	2300      	movs	r3, #0
 8008424:	60a3      	str	r3, [r4, #8]
 8008426:	6963      	ldr	r3, [r4, #20]
 8008428:	425b      	negs	r3, r3
 800842a:	61a3      	str	r3, [r4, #24]
 800842c:	6923      	ldr	r3, [r4, #16]
 800842e:	b943      	cbnz	r3, 8008442 <__swsetup_r+0xc6>
 8008430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008434:	d1ba      	bne.n	80083ac <__swsetup_r+0x30>
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	0781      	lsls	r1, r0, #30
 800843a:	bf58      	it	pl
 800843c:	6963      	ldrpl	r3, [r4, #20]
 800843e:	60a3      	str	r3, [r4, #8]
 8008440:	e7f4      	b.n	800842c <__swsetup_r+0xb0>
 8008442:	2000      	movs	r0, #0
 8008444:	e7f7      	b.n	8008436 <__swsetup_r+0xba>
 8008446:	bf00      	nop
 8008448:	200002a0 	.word	0x200002a0
 800844c:	08008fcc 	.word	0x08008fcc
 8008450:	08008fec 	.word	0x08008fec
 8008454:	08008fac 	.word	0x08008fac

08008458 <abort>:
 8008458:	b508      	push	{r3, lr}
 800845a:	2006      	movs	r0, #6
 800845c:	f000 fa48 	bl	80088f0 <raise>
 8008460:	2001      	movs	r0, #1
 8008462:	f7f9 f99d 	bl	80017a0 <_exit>
	...

08008468 <__sflush_r>:
 8008468:	898a      	ldrh	r2, [r1, #12]
 800846a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	4605      	mov	r5, r0
 8008470:	0710      	lsls	r0, r2, #28
 8008472:	460c      	mov	r4, r1
 8008474:	d458      	bmi.n	8008528 <__sflush_r+0xc0>
 8008476:	684b      	ldr	r3, [r1, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc05      	bgt.n	8008488 <__sflush_r+0x20>
 800847c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	dc02      	bgt.n	8008488 <__sflush_r+0x20>
 8008482:	2000      	movs	r0, #0
 8008484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800848a:	2e00      	cmp	r6, #0
 800848c:	d0f9      	beq.n	8008482 <__sflush_r+0x1a>
 800848e:	2300      	movs	r3, #0
 8008490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008494:	682f      	ldr	r7, [r5, #0]
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	d032      	beq.n	8008500 <__sflush_r+0x98>
 800849a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800849c:	89a3      	ldrh	r3, [r4, #12]
 800849e:	075a      	lsls	r2, r3, #29
 80084a0:	d505      	bpl.n	80084ae <__sflush_r+0x46>
 80084a2:	6863      	ldr	r3, [r4, #4]
 80084a4:	1ac0      	subs	r0, r0, r3
 80084a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084a8:	b10b      	cbz	r3, 80084ae <__sflush_r+0x46>
 80084aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ac:	1ac0      	subs	r0, r0, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	4602      	mov	r2, r0
 80084b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084b4:	6a21      	ldr	r1, [r4, #32]
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b0      	blx	r6
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	d106      	bne.n	80084ce <__sflush_r+0x66>
 80084c0:	6829      	ldr	r1, [r5, #0]
 80084c2:	291d      	cmp	r1, #29
 80084c4:	d82c      	bhi.n	8008520 <__sflush_r+0xb8>
 80084c6:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <__sflush_r+0x108>)
 80084c8:	40ca      	lsrs	r2, r1
 80084ca:	07d6      	lsls	r6, r2, #31
 80084cc:	d528      	bpl.n	8008520 <__sflush_r+0xb8>
 80084ce:	2200      	movs	r2, #0
 80084d0:	6062      	str	r2, [r4, #4]
 80084d2:	04d9      	lsls	r1, r3, #19
 80084d4:	6922      	ldr	r2, [r4, #16]
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	d504      	bpl.n	80084e4 <__sflush_r+0x7c>
 80084da:	1c42      	adds	r2, r0, #1
 80084dc:	d101      	bne.n	80084e2 <__sflush_r+0x7a>
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	b903      	cbnz	r3, 80084e4 <__sflush_r+0x7c>
 80084e2:	6560      	str	r0, [r4, #84]	; 0x54
 80084e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084e6:	602f      	str	r7, [r5, #0]
 80084e8:	2900      	cmp	r1, #0
 80084ea:	d0ca      	beq.n	8008482 <__sflush_r+0x1a>
 80084ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <__sflush_r+0x92>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7fd fc31 	bl	8005d5c <_free_r>
 80084fa:	2000      	movs	r0, #0
 80084fc:	6360      	str	r0, [r4, #52]	; 0x34
 80084fe:	e7c1      	b.n	8008484 <__sflush_r+0x1c>
 8008500:	6a21      	ldr	r1, [r4, #32]
 8008502:	2301      	movs	r3, #1
 8008504:	4628      	mov	r0, r5
 8008506:	47b0      	blx	r6
 8008508:	1c41      	adds	r1, r0, #1
 800850a:	d1c7      	bne.n	800849c <__sflush_r+0x34>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0c4      	beq.n	800849c <__sflush_r+0x34>
 8008512:	2b1d      	cmp	r3, #29
 8008514:	d001      	beq.n	800851a <__sflush_r+0xb2>
 8008516:	2b16      	cmp	r3, #22
 8008518:	d101      	bne.n	800851e <__sflush_r+0xb6>
 800851a:	602f      	str	r7, [r5, #0]
 800851c:	e7b1      	b.n	8008482 <__sflush_r+0x1a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	e7ad      	b.n	8008484 <__sflush_r+0x1c>
 8008528:	690f      	ldr	r7, [r1, #16]
 800852a:	2f00      	cmp	r7, #0
 800852c:	d0a9      	beq.n	8008482 <__sflush_r+0x1a>
 800852e:	0793      	lsls	r3, r2, #30
 8008530:	680e      	ldr	r6, [r1, #0]
 8008532:	bf08      	it	eq
 8008534:	694b      	ldreq	r3, [r1, #20]
 8008536:	600f      	str	r7, [r1, #0]
 8008538:	bf18      	it	ne
 800853a:	2300      	movne	r3, #0
 800853c:	eba6 0807 	sub.w	r8, r6, r7
 8008540:	608b      	str	r3, [r1, #8]
 8008542:	f1b8 0f00 	cmp.w	r8, #0
 8008546:	dd9c      	ble.n	8008482 <__sflush_r+0x1a>
 8008548:	6a21      	ldr	r1, [r4, #32]
 800854a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800854c:	4643      	mov	r3, r8
 800854e:	463a      	mov	r2, r7
 8008550:	4628      	mov	r0, r5
 8008552:	47b0      	blx	r6
 8008554:	2800      	cmp	r0, #0
 8008556:	dc06      	bgt.n	8008566 <__sflush_r+0xfe>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	e78e      	b.n	8008484 <__sflush_r+0x1c>
 8008566:	4407      	add	r7, r0
 8008568:	eba8 0800 	sub.w	r8, r8, r0
 800856c:	e7e9      	b.n	8008542 <__sflush_r+0xda>
 800856e:	bf00      	nop
 8008570:	20400001 	.word	0x20400001

08008574 <_fflush_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	690b      	ldr	r3, [r1, #16]
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	b913      	cbnz	r3, 8008584 <_fflush_r+0x10>
 800857e:	2500      	movs	r5, #0
 8008580:	4628      	mov	r0, r5
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	b118      	cbz	r0, 800858e <_fflush_r+0x1a>
 8008586:	6983      	ldr	r3, [r0, #24]
 8008588:	b90b      	cbnz	r3, 800858e <_fflush_r+0x1a>
 800858a:	f000 f887 	bl	800869c <__sinit>
 800858e:	4b14      	ldr	r3, [pc, #80]	; (80085e0 <_fflush_r+0x6c>)
 8008590:	429c      	cmp	r4, r3
 8008592:	d11b      	bne.n	80085cc <_fflush_r+0x58>
 8008594:	686c      	ldr	r4, [r5, #4]
 8008596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0ef      	beq.n	800857e <_fflush_r+0xa>
 800859e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085a0:	07d0      	lsls	r0, r2, #31
 80085a2:	d404      	bmi.n	80085ae <_fflush_r+0x3a>
 80085a4:	0599      	lsls	r1, r3, #22
 80085a6:	d402      	bmi.n	80085ae <_fflush_r+0x3a>
 80085a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085aa:	f7ff fcf8 	bl	8007f9e <__retarget_lock_acquire_recursive>
 80085ae:	4628      	mov	r0, r5
 80085b0:	4621      	mov	r1, r4
 80085b2:	f7ff ff59 	bl	8008468 <__sflush_r>
 80085b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085b8:	07da      	lsls	r2, r3, #31
 80085ba:	4605      	mov	r5, r0
 80085bc:	d4e0      	bmi.n	8008580 <_fflush_r+0xc>
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	059b      	lsls	r3, r3, #22
 80085c2:	d4dd      	bmi.n	8008580 <_fflush_r+0xc>
 80085c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085c6:	f7ff fceb 	bl	8007fa0 <__retarget_lock_release_recursive>
 80085ca:	e7d9      	b.n	8008580 <_fflush_r+0xc>
 80085cc:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <_fflush_r+0x70>)
 80085ce:	429c      	cmp	r4, r3
 80085d0:	d101      	bne.n	80085d6 <_fflush_r+0x62>
 80085d2:	68ac      	ldr	r4, [r5, #8]
 80085d4:	e7df      	b.n	8008596 <_fflush_r+0x22>
 80085d6:	4b04      	ldr	r3, [pc, #16]	; (80085e8 <_fflush_r+0x74>)
 80085d8:	429c      	cmp	r4, r3
 80085da:	bf08      	it	eq
 80085dc:	68ec      	ldreq	r4, [r5, #12]
 80085de:	e7da      	b.n	8008596 <_fflush_r+0x22>
 80085e0:	08008fcc 	.word	0x08008fcc
 80085e4:	08008fec 	.word	0x08008fec
 80085e8:	08008fac 	.word	0x08008fac

080085ec <std>:
 80085ec:	2300      	movs	r3, #0
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	e9c0 3300 	strd	r3, r3, [r0]
 80085f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085fa:	6083      	str	r3, [r0, #8]
 80085fc:	8181      	strh	r1, [r0, #12]
 80085fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008600:	81c2      	strh	r2, [r0, #14]
 8008602:	6183      	str	r3, [r0, #24]
 8008604:	4619      	mov	r1, r3
 8008606:	2208      	movs	r2, #8
 8008608:	305c      	adds	r0, #92	; 0x5c
 800860a:	f7fd fb8f 	bl	8005d2c <memset>
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <std+0x38>)
 8008610:	6263      	str	r3, [r4, #36]	; 0x24
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <std+0x3c>)
 8008614:	62a3      	str	r3, [r4, #40]	; 0x28
 8008616:	4b05      	ldr	r3, [pc, #20]	; (800862c <std+0x40>)
 8008618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <std+0x44>)
 800861c:	6224      	str	r4, [r4, #32]
 800861e:	6323      	str	r3, [r4, #48]	; 0x30
 8008620:	bd10      	pop	{r4, pc}
 8008622:	bf00      	nop
 8008624:	08008929 	.word	0x08008929
 8008628:	0800894b 	.word	0x0800894b
 800862c:	08008983 	.word	0x08008983
 8008630:	080089a7 	.word	0x080089a7

08008634 <_cleanup_r>:
 8008634:	4901      	ldr	r1, [pc, #4]	; (800863c <_cleanup_r+0x8>)
 8008636:	f000 b8af 	b.w	8008798 <_fwalk_reent>
 800863a:	bf00      	nop
 800863c:	08008575 	.word	0x08008575

08008640 <__sfmoreglue>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	1e4a      	subs	r2, r1, #1
 8008644:	2568      	movs	r5, #104	; 0x68
 8008646:	4355      	muls	r5, r2
 8008648:	460e      	mov	r6, r1
 800864a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800864e:	f7fd fbd5 	bl	8005dfc <_malloc_r>
 8008652:	4604      	mov	r4, r0
 8008654:	b140      	cbz	r0, 8008668 <__sfmoreglue+0x28>
 8008656:	2100      	movs	r1, #0
 8008658:	e9c0 1600 	strd	r1, r6, [r0]
 800865c:	300c      	adds	r0, #12
 800865e:	60a0      	str	r0, [r4, #8]
 8008660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008664:	f7fd fb62 	bl	8005d2c <memset>
 8008668:	4620      	mov	r0, r4
 800866a:	bd70      	pop	{r4, r5, r6, pc}

0800866c <__sfp_lock_acquire>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__sfp_lock_acquire+0x8>)
 800866e:	f7ff bc96 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8008672:	bf00      	nop
 8008674:	20000648 	.word	0x20000648

08008678 <__sfp_lock_release>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__sfp_lock_release+0x8>)
 800867a:	f7ff bc91 	b.w	8007fa0 <__retarget_lock_release_recursive>
 800867e:	bf00      	nop
 8008680:	20000648 	.word	0x20000648

08008684 <__sinit_lock_acquire>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__sinit_lock_acquire+0x8>)
 8008686:	f7ff bc8a 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 800868a:	bf00      	nop
 800868c:	20000643 	.word	0x20000643

08008690 <__sinit_lock_release>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__sinit_lock_release+0x8>)
 8008692:	f7ff bc85 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8008696:	bf00      	nop
 8008698:	20000643 	.word	0x20000643

0800869c <__sinit>:
 800869c:	b510      	push	{r4, lr}
 800869e:	4604      	mov	r4, r0
 80086a0:	f7ff fff0 	bl	8008684 <__sinit_lock_acquire>
 80086a4:	69a3      	ldr	r3, [r4, #24]
 80086a6:	b11b      	cbz	r3, 80086b0 <__sinit+0x14>
 80086a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ac:	f7ff bff0 	b.w	8008690 <__sinit_lock_release>
 80086b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086b4:	6523      	str	r3, [r4, #80]	; 0x50
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <__sinit+0x68>)
 80086b8:	4a13      	ldr	r2, [pc, #76]	; (8008708 <__sinit+0x6c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80086be:	42a3      	cmp	r3, r4
 80086c0:	bf04      	itt	eq
 80086c2:	2301      	moveq	r3, #1
 80086c4:	61a3      	streq	r3, [r4, #24]
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 f820 	bl	800870c <__sfp>
 80086cc:	6060      	str	r0, [r4, #4]
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 f81c 	bl	800870c <__sfp>
 80086d4:	60a0      	str	r0, [r4, #8]
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 f818 	bl	800870c <__sfp>
 80086dc:	2200      	movs	r2, #0
 80086de:	60e0      	str	r0, [r4, #12]
 80086e0:	2104      	movs	r1, #4
 80086e2:	6860      	ldr	r0, [r4, #4]
 80086e4:	f7ff ff82 	bl	80085ec <std>
 80086e8:	68a0      	ldr	r0, [r4, #8]
 80086ea:	2201      	movs	r2, #1
 80086ec:	2109      	movs	r1, #9
 80086ee:	f7ff ff7d 	bl	80085ec <std>
 80086f2:	68e0      	ldr	r0, [r4, #12]
 80086f4:	2202      	movs	r2, #2
 80086f6:	2112      	movs	r1, #18
 80086f8:	f7ff ff78 	bl	80085ec <std>
 80086fc:	2301      	movs	r3, #1
 80086fe:	61a3      	str	r3, [r4, #24]
 8008700:	e7d2      	b.n	80086a8 <__sinit+0xc>
 8008702:	bf00      	nop
 8008704:	08008c2c 	.word	0x08008c2c
 8008708:	08008635 	.word	0x08008635

0800870c <__sfp>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	4607      	mov	r7, r0
 8008710:	f7ff ffac 	bl	800866c <__sfp_lock_acquire>
 8008714:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <__sfp+0x84>)
 8008716:	681e      	ldr	r6, [r3, #0]
 8008718:	69b3      	ldr	r3, [r6, #24]
 800871a:	b913      	cbnz	r3, 8008722 <__sfp+0x16>
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff ffbd 	bl	800869c <__sinit>
 8008722:	3648      	adds	r6, #72	; 0x48
 8008724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008728:	3b01      	subs	r3, #1
 800872a:	d503      	bpl.n	8008734 <__sfp+0x28>
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	b30b      	cbz	r3, 8008774 <__sfp+0x68>
 8008730:	6836      	ldr	r6, [r6, #0]
 8008732:	e7f7      	b.n	8008724 <__sfp+0x18>
 8008734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008738:	b9d5      	cbnz	r5, 8008770 <__sfp+0x64>
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <__sfp+0x88>)
 800873c:	60e3      	str	r3, [r4, #12]
 800873e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008742:	6665      	str	r5, [r4, #100]	; 0x64
 8008744:	f7ff fc2a 	bl	8007f9c <__retarget_lock_init_recursive>
 8008748:	f7ff ff96 	bl	8008678 <__sfp_lock_release>
 800874c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008754:	6025      	str	r5, [r4, #0]
 8008756:	61a5      	str	r5, [r4, #24]
 8008758:	2208      	movs	r2, #8
 800875a:	4629      	mov	r1, r5
 800875c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008760:	f7fd fae4 	bl	8005d2c <memset>
 8008764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800876c:	4620      	mov	r0, r4
 800876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008770:	3468      	adds	r4, #104	; 0x68
 8008772:	e7d9      	b.n	8008728 <__sfp+0x1c>
 8008774:	2104      	movs	r1, #4
 8008776:	4638      	mov	r0, r7
 8008778:	f7ff ff62 	bl	8008640 <__sfmoreglue>
 800877c:	4604      	mov	r4, r0
 800877e:	6030      	str	r0, [r6, #0]
 8008780:	2800      	cmp	r0, #0
 8008782:	d1d5      	bne.n	8008730 <__sfp+0x24>
 8008784:	f7ff ff78 	bl	8008678 <__sfp_lock_release>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	e7ee      	b.n	800876c <__sfp+0x60>
 800878e:	bf00      	nop
 8008790:	08008c2c 	.word	0x08008c2c
 8008794:	ffff0001 	.word	0xffff0001

08008798 <_fwalk_reent>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	4606      	mov	r6, r0
 800879e:	4688      	mov	r8, r1
 80087a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087a4:	2700      	movs	r7, #0
 80087a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087aa:	f1b9 0901 	subs.w	r9, r9, #1
 80087ae:	d505      	bpl.n	80087bc <_fwalk_reent+0x24>
 80087b0:	6824      	ldr	r4, [r4, #0]
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d1f7      	bne.n	80087a6 <_fwalk_reent+0xe>
 80087b6:	4638      	mov	r0, r7
 80087b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087bc:	89ab      	ldrh	r3, [r5, #12]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d907      	bls.n	80087d2 <_fwalk_reent+0x3a>
 80087c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087c6:	3301      	adds	r3, #1
 80087c8:	d003      	beq.n	80087d2 <_fwalk_reent+0x3a>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	47c0      	blx	r8
 80087d0:	4307      	orrs	r7, r0
 80087d2:	3568      	adds	r5, #104	; 0x68
 80087d4:	e7e9      	b.n	80087aa <_fwalk_reent+0x12>

080087d6 <__swhatbuf_r>:
 80087d6:	b570      	push	{r4, r5, r6, lr}
 80087d8:	460e      	mov	r6, r1
 80087da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087de:	2900      	cmp	r1, #0
 80087e0:	b096      	sub	sp, #88	; 0x58
 80087e2:	4614      	mov	r4, r2
 80087e4:	461d      	mov	r5, r3
 80087e6:	da07      	bge.n	80087f8 <__swhatbuf_r+0x22>
 80087e8:	2300      	movs	r3, #0
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	89b3      	ldrh	r3, [r6, #12]
 80087ee:	061a      	lsls	r2, r3, #24
 80087f0:	d410      	bmi.n	8008814 <__swhatbuf_r+0x3e>
 80087f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f6:	e00e      	b.n	8008816 <__swhatbuf_r+0x40>
 80087f8:	466a      	mov	r2, sp
 80087fa:	f000 f8fb 	bl	80089f4 <_fstat_r>
 80087fe:	2800      	cmp	r0, #0
 8008800:	dbf2      	blt.n	80087e8 <__swhatbuf_r+0x12>
 8008802:	9a01      	ldr	r2, [sp, #4]
 8008804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800880c:	425a      	negs	r2, r3
 800880e:	415a      	adcs	r2, r3
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	e7ee      	b.n	80087f2 <__swhatbuf_r+0x1c>
 8008814:	2340      	movs	r3, #64	; 0x40
 8008816:	2000      	movs	r0, #0
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	b016      	add	sp, #88	; 0x58
 800881c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008820 <__smakebuf_r>:
 8008820:	898b      	ldrh	r3, [r1, #12]
 8008822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008824:	079d      	lsls	r5, r3, #30
 8008826:	4606      	mov	r6, r0
 8008828:	460c      	mov	r4, r1
 800882a:	d507      	bpl.n	800883c <__smakebuf_r+0x1c>
 800882c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	2301      	movs	r3, #1
 8008836:	6163      	str	r3, [r4, #20]
 8008838:	b002      	add	sp, #8
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	ab01      	add	r3, sp, #4
 800883e:	466a      	mov	r2, sp
 8008840:	f7ff ffc9 	bl	80087d6 <__swhatbuf_r>
 8008844:	9900      	ldr	r1, [sp, #0]
 8008846:	4605      	mov	r5, r0
 8008848:	4630      	mov	r0, r6
 800884a:	f7fd fad7 	bl	8005dfc <_malloc_r>
 800884e:	b948      	cbnz	r0, 8008864 <__smakebuf_r+0x44>
 8008850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008854:	059a      	lsls	r2, r3, #22
 8008856:	d4ef      	bmi.n	8008838 <__smakebuf_r+0x18>
 8008858:	f023 0303 	bic.w	r3, r3, #3
 800885c:	f043 0302 	orr.w	r3, r3, #2
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	e7e3      	b.n	800882c <__smakebuf_r+0xc>
 8008864:	4b0d      	ldr	r3, [pc, #52]	; (800889c <__smakebuf_r+0x7c>)
 8008866:	62b3      	str	r3, [r6, #40]	; 0x28
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	6020      	str	r0, [r4, #0]
 800886c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	6163      	str	r3, [r4, #20]
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	6120      	str	r0, [r4, #16]
 800887a:	b15b      	cbz	r3, 8008894 <__smakebuf_r+0x74>
 800887c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008880:	4630      	mov	r0, r6
 8008882:	f000 f8c9 	bl	8008a18 <_isatty_r>
 8008886:	b128      	cbz	r0, 8008894 <__smakebuf_r+0x74>
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	89a0      	ldrh	r0, [r4, #12]
 8008896:	4305      	orrs	r5, r0
 8008898:	81a5      	strh	r5, [r4, #12]
 800889a:	e7cd      	b.n	8008838 <__smakebuf_r+0x18>
 800889c:	08008635 	.word	0x08008635

080088a0 <_raise_r>:
 80088a0:	291f      	cmp	r1, #31
 80088a2:	b538      	push	{r3, r4, r5, lr}
 80088a4:	4604      	mov	r4, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	d904      	bls.n	80088b4 <_raise_r+0x14>
 80088aa:	2316      	movs	r3, #22
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088b6:	b112      	cbz	r2, 80088be <_raise_r+0x1e>
 80088b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088bc:	b94b      	cbnz	r3, 80088d2 <_raise_r+0x32>
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 f830 	bl	8008924 <_getpid_r>
 80088c4:	462a      	mov	r2, r5
 80088c6:	4601      	mov	r1, r0
 80088c8:	4620      	mov	r0, r4
 80088ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ce:	f000 b817 	b.w	8008900 <_kill_r>
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d00a      	beq.n	80088ec <_raise_r+0x4c>
 80088d6:	1c59      	adds	r1, r3, #1
 80088d8:	d103      	bne.n	80088e2 <_raise_r+0x42>
 80088da:	2316      	movs	r3, #22
 80088dc:	6003      	str	r3, [r0, #0]
 80088de:	2001      	movs	r0, #1
 80088e0:	e7e7      	b.n	80088b2 <_raise_r+0x12>
 80088e2:	2400      	movs	r4, #0
 80088e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088e8:	4628      	mov	r0, r5
 80088ea:	4798      	blx	r3
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7e0      	b.n	80088b2 <_raise_r+0x12>

080088f0 <raise>:
 80088f0:	4b02      	ldr	r3, [pc, #8]	; (80088fc <raise+0xc>)
 80088f2:	4601      	mov	r1, r0
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	f7ff bfd3 	b.w	80088a0 <_raise_r>
 80088fa:	bf00      	nop
 80088fc:	200002a0 	.word	0x200002a0

08008900 <_kill_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	; (8008920 <_kill_r+0x20>)
 8008904:	2300      	movs	r3, #0
 8008906:	4604      	mov	r4, r0
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f7f8 ff37 	bl	8001780 <_kill>
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	d102      	bne.n	800891c <_kill_r+0x1c>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	b103      	cbz	r3, 800891c <_kill_r+0x1c>
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	bd38      	pop	{r3, r4, r5, pc}
 800891e:	bf00      	nop
 8008920:	2000063c 	.word	0x2000063c

08008924 <_getpid_r>:
 8008924:	f7f8 bf24 	b.w	8001770 <_getpid>

08008928 <__sread>:
 8008928:	b510      	push	{r4, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	f000 f894 	bl	8008a5c <_read_r>
 8008934:	2800      	cmp	r0, #0
 8008936:	bfab      	itete	ge
 8008938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800893a:	89a3      	ldrhlt	r3, [r4, #12]
 800893c:	181b      	addge	r3, r3, r0
 800893e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008942:	bfac      	ite	ge
 8008944:	6563      	strge	r3, [r4, #84]	; 0x54
 8008946:	81a3      	strhlt	r3, [r4, #12]
 8008948:	bd10      	pop	{r4, pc}

0800894a <__swrite>:
 800894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	461f      	mov	r7, r3
 8008950:	898b      	ldrh	r3, [r1, #12]
 8008952:	05db      	lsls	r3, r3, #23
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	4616      	mov	r6, r2
 800895a:	d505      	bpl.n	8008968 <__swrite+0x1e>
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	2302      	movs	r3, #2
 8008962:	2200      	movs	r2, #0
 8008964:	f000 f868 	bl	8008a38 <_lseek_r>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	4628      	mov	r0, r5
 800897a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	f000 b817 	b.w	80089b0 <_write_r>

08008982 <__sseek>:
 8008982:	b510      	push	{r4, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898a:	f000 f855 	bl	8008a38 <_lseek_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	bf15      	itete	ne
 8008994:	6560      	strne	r0, [r4, #84]	; 0x54
 8008996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800899a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800899e:	81a3      	strheq	r3, [r4, #12]
 80089a0:	bf18      	it	ne
 80089a2:	81a3      	strhne	r3, [r4, #12]
 80089a4:	bd10      	pop	{r4, pc}

080089a6 <__sclose>:
 80089a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089aa:	f000 b813 	b.w	80089d4 <_close_r>
	...

080089b0 <_write_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_write_r+0x20>)
 80089b4:	4604      	mov	r4, r0
 80089b6:	4608      	mov	r0, r1
 80089b8:	4611      	mov	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	602a      	str	r2, [r5, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	f7f8 fa76 	bl	8000eb0 <_write>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_write_r+0x1e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_write_r+0x1e>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	2000063c 	.word	0x2000063c

080089d4 <_close_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d06      	ldr	r5, [pc, #24]	; (80089f0 <_close_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	f7f8 ff05 	bl	80017ee <_close>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_close_r+0x1a>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_close_r+0x1a>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	2000063c 	.word	0x2000063c

080089f4 <_fstat_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d07      	ldr	r5, [pc, #28]	; (8008a14 <_fstat_r+0x20>)
 80089f8:	2300      	movs	r3, #0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	4611      	mov	r1, r2
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	f7f8 ff00 	bl	8001806 <_fstat>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d102      	bne.n	8008a10 <_fstat_r+0x1c>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	b103      	cbz	r3, 8008a10 <_fstat_r+0x1c>
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	2000063c 	.word	0x2000063c

08008a18 <_isatty_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d06      	ldr	r5, [pc, #24]	; (8008a34 <_isatty_r+0x1c>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f8 feff 	bl	8001826 <_isatty>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_isatty_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_isatty_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	2000063c 	.word	0x2000063c

08008a38 <_lseek_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4d07      	ldr	r5, [pc, #28]	; (8008a58 <_lseek_r+0x20>)
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	4608      	mov	r0, r1
 8008a40:	4611      	mov	r1, r2
 8008a42:	2200      	movs	r2, #0
 8008a44:	602a      	str	r2, [r5, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f7f8 fef8 	bl	800183c <_lseek>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_lseek_r+0x1e>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_lseek_r+0x1e>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	2000063c 	.word	0x2000063c

08008a5c <_read_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d07      	ldr	r5, [pc, #28]	; (8008a7c <_read_r+0x20>)
 8008a60:	4604      	mov	r4, r0
 8008a62:	4608      	mov	r0, r1
 8008a64:	4611      	mov	r1, r2
 8008a66:	2200      	movs	r2, #0
 8008a68:	602a      	str	r2, [r5, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f7f8 fea2 	bl	80017b4 <_read>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_read_r+0x1e>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_read_r+0x1e>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	2000063c 	.word	0x2000063c

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
