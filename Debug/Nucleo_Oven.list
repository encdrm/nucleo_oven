
Nucleo_Oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800a770  0800a770  0001a770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae2c  0800ae2c  000204c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae2c  0800ae2c  0001ae2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae34  0800ae34  000204c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c8  20000000  0800ae3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200004c8  0800b304  000204c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  0800b304  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a46f  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328e  00000000  00000000  0003a967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  0003ec98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019584  00000000  00000000  0003fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c6c  00000000  00000000  000591f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b91  00000000  00000000  0006de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001009f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005798  00000000  00000000  00100a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004c8 	.word	0x200004c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a758 	.word	0x0800a758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004cc 	.word	0x200004cc
 80001dc:	0800a758 	.word	0x0800a758

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <_write+0x30>)
 8000ec6:	f003 fc64 	bl	8004792 <HAL_UART_Transmit>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <_write+0x24>
		return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	e001      	b.n	8000ed8 <_write+0x28>
	return -1;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200006dc 	.word	0x200006dc

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fe90 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f85a 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 faa2 	bl	8001438 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000ef4:	f000 f8be 	bl	8001074 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000ef8:	f000 f8f2 	bl	80010e0 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 fa72 	bl	80013e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f00:	f000 fa46 	bl	8001390 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f04:	f000 f9a6 	bl	8001254 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f08:	f000 f922 	bl	8001150 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000f0c:	f000 fa06 	bl	800131c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f10:	2100      	movs	r1, #0
 8000f12:	481a      	ldr	r0, [pc, #104]	; (8000f7c <main+0x98>)
 8000f14:	f002 fcca 	bl	80038ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <main+0x98>)
 8000f1c:	f002 fcc6 	bl	80038ac <HAL_TIM_PWM_Start>

  /* Make temperature sensor object */
  tempBottom = Custom_Tempsensor(&hspi3, TEMPSENSOR_DOWN_CS_Port, TEMPSENSOR_DOWN_CS_Pin, 300);
 8000f20:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f28:	4915      	ldr	r1, [pc, #84]	; (8000f80 <main+0x9c>)
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <main+0xa0>)
 8000f2c:	f005 fe36 	bl	8006b9c <Custom_Tempsensor>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <main+0xa4>)
 8000f34:	6013      	str	r3, [r2, #0]
  tempTop = Custom_Tempsensor(&hspi3, TEMPSENSOR_UP_CS_Port, TEMPSENSOR_UP_CS_Pin, 300);
 8000f36:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3e:	4910      	ldr	r1, [pc, #64]	; (8000f80 <main+0x9c>)
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <main+0xa0>)
 8000f42:	f005 fe2b 	bl	8006b9c <Custom_Tempsensor>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <main+0xa8>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Initialize heater struct */
  heaterTop = Custom_HeaterControl(&htim3, TIM_CHANNEL_3);	// HU
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4810      	ldr	r0, [pc, #64]	; (8000f90 <main+0xac>)
 8000f50:	f005 fc54 	bl	80067fc <Custom_HeaterControl>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <main+0xb0>)
 8000f58:	6013      	str	r3, [r2, #0]
  heaterBottom = Custom_HeaterControl(&htim3, TIM_CHANNEL_2);	// HD
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <main+0xac>)
 8000f5e:	f005 fc4d 	bl	80067fc <Custom_HeaterControl>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a0c      	ldr	r2, [pc, #48]	; (8000f98 <main+0xb4>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* Start HeaterControl interrupt */
  HAL_TIM_Base_Start_IT(&htim9);
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <main+0xb8>)
 8000f6a:	f002 fbed 	bl	8003748 <HAL_TIM_Base_Start_IT>
  printf("Hello!\r\n");
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <main+0xbc>)
 8000f70:	f007 fa66 	bl	8008440 <puts>
  Menu();
 8000f74:	f005 fff0 	bl	8006f58 <Menu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <main+0x94>
 8000f7a:	bf00      	nop
 8000f7c:	20000560 	.word	0x20000560
 8000f80:	40020400 	.word	0x40020400
 8000f84:	200005f8 	.word	0x200005f8
 8000f88:	200005a8 	.word	0x200005a8
 8000f8c:	20000720 	.word	0x20000720
 8000f90:	200005b0 	.word	0x200005b0
 8000f94:	200005ac 	.word	0x200005ac
 8000f98:	2000055c 	.word	0x2000055c
 8000f9c:	20000694 	.word	0x20000694
 8000fa0:	0800a770 	.word	0x0800a770

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fc92 	bl	80078dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <SystemClock_Config+0xc8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <SystemClock_Config+0xc8>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <SystemClock_Config+0xcc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a20      	ldr	r2, [pc, #128]	; (8001070 <SystemClock_Config+0xcc>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f001 f94d 	bl	80022c8 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 fac2 	bl	80015bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2103      	movs	r1, #3
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fbaf 	bl	80027b8 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001060:	f000 faac 	bl	80015bc <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	; 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI2_Init+0x64>)
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <MX_SPI2_Init+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI2_Init+0x64>)
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI2_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI2_Init+0x64>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI2_Init+0x64>)
 8001094:	2202      	movs	r2, #2
 8001096:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI2_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <MX_SPI2_Init+0x64>)
 80010c6:	f001 fd47 	bl	8002b58 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010d0:	f000 fa74 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000504 	.word	0x20000504
 80010dc:	40003800 	.word	0x40003800

080010e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_SPI3_Init+0x68>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_SPI3_Init+0x6c>)
 80010e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_SPI3_Init+0x68>)
 80010ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_SPI3_Init+0x68>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_SPI3_Init+0x68>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_SPI3_Init+0x68>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_SPI3_Init+0x68>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_SPI3_Init+0x68>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SPI3_Init+0x68>)
 8001118:	2238      	movs	r2, #56	; 0x38
 800111a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_SPI3_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SPI3_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_SPI3_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_SPI3_Init+0x68>)
 8001130:	220a      	movs	r2, #10
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_SPI3_Init+0x68>)
 8001136:	f001 fd0f 	bl	8002b58 <HAL_SPI_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8001140:	f000 fa3c 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200005f8 	.word	0x200005f8
 800114c:	40003c00 	.word	0x40003c00

08001150 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <MX_TIM3_Init+0xfc>)
 8001182:	4a33      	ldr	r2, [pc, #204]	; (8001250 <MX_TIM3_Init+0x100>)
 8001184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <MX_TIM3_Init+0xfc>)
 8001188:	f242 720f 	movw	r2, #9999	; 0x270f
 800118c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <MX_TIM3_Init+0xfc>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_TIM3_Init+0xfc>)
 8001196:	f242 720f 	movw	r2, #9999	; 0x270f
 800119a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_TIM3_Init+0xfc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <MX_TIM3_Init+0xfc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <MX_TIM3_Init+0xfc>)
 80011aa:	f002 fa7d 	bl	80036a8 <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011b4:	f000 fa02 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4821      	ldr	r0, [pc, #132]	; (800124c <MX_TIM3_Init+0xfc>)
 80011c6:	f002 fe4f 	bl	8003e68 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011d0:	f000 f9f4 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011d4:	481d      	ldr	r0, [pc, #116]	; (800124c <MX_TIM3_Init+0xfc>)
 80011d6:	f002 fb19 	bl	800380c <HAL_TIM_PWM_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011e0:	f000 f9ec 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	4619      	mov	r1, r3
 80011f2:	4816      	ldr	r0, [pc, #88]	; (800124c <MX_TIM3_Init+0xfc>)
 80011f4:	f003 f9fe 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011fe:	f000 f9dd 	bl	80015bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001202:	2370      	movs	r3, #112	; 0x70
 8001204:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2204      	movs	r2, #4
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM3_Init+0xfc>)
 800121a:	f002 fd63 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001224:	f000 f9ca 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2208      	movs	r2, #8
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <MX_TIM3_Init+0xfc>)
 8001230:	f002 fd58 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800123a:	f000 f9bf 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM3_Init+0xfc>)
 8001240:	f000 fae8 	bl	8001814 <HAL_TIM_MspPostInit>

}
 8001244:	bf00      	nop
 8001246:	3738      	adds	r7, #56	; 0x38
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200005b0 	.word	0x200005b0
 8001250:	40000400 	.word	0x40000400

08001254 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <MX_TIM4_Init+0xc0>)
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <MX_TIM4_Init+0xc4>)
 800127a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <MX_TIM4_Init+0xc0>)
 800127e:	2229      	movs	r2, #41	; 0x29
 8001280:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_TIM4_Init+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1023;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_TIM4_Init+0xc0>)
 800128a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800128e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_TIM4_Init+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_TIM4_Init+0xc0>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800129c:	481d      	ldr	r0, [pc, #116]	; (8001314 <MX_TIM4_Init+0xc0>)
 800129e:	f002 fab5 	bl	800380c <HAL_TIM_PWM_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 f988 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4619      	mov	r1, r3
 80012ba:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_TIM4_Init+0xc0>)
 80012bc:	f003 f99a 	bl	80045f4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012c6:	f000 f979 	bl	80015bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ca:	2360      	movs	r3, #96	; 0x60
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_TIM4_Init+0xc0>)
 80012e2:	f002 fcff 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012ec:	f000 f966 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2204      	movs	r2, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM4_Init+0xc0>)
 80012f8:	f002 fcf4 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001302:	f000 f95b 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM4_Init+0xc0>)
 8001308:	f000 fa84 	bl	8001814 <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000560 	.word	0x20000560
 8001318:	40000800 	.word	0x40000800

0800131c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_TIM9_Init+0x6c>)
 8001330:	4a16      	ldr	r2, [pc, #88]	; (800138c <MX_TIM9_Init+0x70>)
 8001332:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_TIM9_Init+0x6c>)
 8001336:	f242 720f 	movw	r2, #9999	; 0x270f
 800133a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_TIM9_Init+0x6c>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_TIM9_Init+0x6c>)
 8001344:	f242 720f 	movw	r2, #9999	; 0x270f
 8001348:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_TIM9_Init+0x6c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_TIM9_Init+0x6c>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_TIM9_Init+0x6c>)
 8001358:	f002 f9a6 	bl	80036a8 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001362:	f000 f92b 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM9_Init+0x6c>)
 8001372:	f002 fd79 	bl	8003e68 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800137c:	f000 f91e 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000694 	.word	0x20000694
 800138c:	40014000 	.word	0x40014000

08001390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART1_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 800139c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c8:	f003 f996 	bl	80046f8 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 f8f3 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000650 	.word	0x20000650
 80013e0:	40011000 	.word	0x40011000

080013e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART2_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART2_UART_Init+0x4c>)
 800141c:	f003 f96c 	bl	80046f8 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f8c9 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200006dc 	.word	0x200006dc
 8001434:	40004400 	.word	0x40004400

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <MX_GPIO_Init+0x174>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a55      	ldr	r2, [pc, #340]	; (80015ac <MX_GPIO_Init+0x174>)
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <MX_GPIO_Init+0x174>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <MX_GPIO_Init+0x174>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a4e      	ldr	r2, [pc, #312]	; (80015ac <MX_GPIO_Init+0x174>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <MX_GPIO_Init+0x174>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b48      	ldr	r3, [pc, #288]	; (80015ac <MX_GPIO_Init+0x174>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a47      	ldr	r2, [pc, #284]	; (80015ac <MX_GPIO_Init+0x174>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b45      	ldr	r3, [pc, #276]	; (80015ac <MX_GPIO_Init+0x174>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <MX_GPIO_Init+0x174>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a40      	ldr	r2, [pc, #256]	; (80015ac <MX_GPIO_Init+0x174>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <MX_GPIO_Init+0x174>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2112      	movs	r1, #18
 80014c2:	483b      	ldr	r0, [pc, #236]	; (80015b0 <MX_GPIO_Init+0x178>)
 80014c4:	f000 fee6 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2104      	movs	r1, #4
 80014cc:	4839      	ldr	r0, [pc, #228]	; (80015b4 <MX_GPIO_Init+0x17c>)
 80014ce:	f000 fee1 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_ADD_Pin|TEMP_ADU_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014d8:	4836      	ldr	r0, [pc, #216]	; (80015b4 <MX_GPIO_Init+0x17c>)
 80014da:	f000 fedb 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	4834      	ldr	r0, [pc, #208]	; (80015b8 <MX_GPIO_Init+0x180>)
 80014e6:	f000 fed5 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor2_Pin|Motor1_Pin|LAMP_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80014f0:	482f      	ldr	r0, [pc, #188]	; (80015b0 <MX_GPIO_Init+0x178>)
 80014f2:	f000 fecf 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_DC_Pin;
 80014f6:	2312      	movs	r3, #18
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4828      	ldr	r0, [pc, #160]	; (80015b0 <MX_GPIO_Init+0x178>)
 800150e:	f000 fd25 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001512:	2304      	movs	r3, #4
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4822      	ldr	r0, [pc, #136]	; (80015b4 <MX_GPIO_Init+0x17c>)
 800152a:	f000 fd17 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_ADD_Pin TEMP_ADU_Pin */
  GPIO_InitStruct.Pin = TEMP_ADD_Pin|TEMP_ADU_Pin;
 800152e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	481b      	ldr	r0, [pc, #108]	; (80015b4 <MX_GPIO_Init+0x17c>)
 8001548:	f000 fd08 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCFAN_Pin */
  GPIO_InitStruct.Pin = DCFAN_Pin;
 800154c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001552:	2311      	movs	r3, #17
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCFAN_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_GPIO_Init+0x180>)
 8001566:	f000 fcf9 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_Pin Motor1_Pin LAMP_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin|Motor1_Pin|LAMP_Pin;
 800156a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001570:	2311      	movs	r3, #17
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <MX_GPIO_Init+0x178>)
 8001584:	f000 fcea 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001588:	f44f 734e 	mov.w	r3, #824	; 0x338
 800158c:	617b      	str	r3, [r7, #20]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001592:	2301      	movs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_GPIO_Init+0x17c>)
 800159e:	f000 fcdd 	bl	8001f5c <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_MspInit+0x4c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a42      	ldr	r2, [pc, #264]	; (8001740 <HAL_SPI_MspInit+0x128>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12d      	bne.n	8001696 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a39      	ldr	r2, [pc, #228]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 8001672:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001684:	2305      	movs	r3, #5
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	482e      	ldr	r0, [pc, #184]	; (8001748 <HAL_SPI_MspInit+0x130>)
 8001690:	f000 fc64 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001694:	e050      	b.n	8001738 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a2c      	ldr	r2, [pc, #176]	; (800174c <HAL_SPI_MspInit+0x134>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d14b      	bne.n	8001738 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	6313      	str	r3, [r2, #48]	; 0x30
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_SPI_MspInit+0x12c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_SCK_Pin;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001706:	2307      	movs	r3, #7
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SCK_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <HAL_SPI_MspInit+0x130>)
 8001712:	f000 fc23 	bl	8001f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP_SO_Pin;
 8001716:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001728:	2306      	movs	r3, #6
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SO_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <HAL_SPI_MspInit+0x138>)
 8001734:	f000 fc12 	bl	8001f5c <HAL_GPIO_Init>
}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40003800 	.word	0x40003800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400
 800174c:	40003c00 	.word	0x40003c00
 8001750:	40020800 	.word	0x40020800

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_TIM_Base_MspInit+0x70>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10e      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001782:	e01a      	b.n	80017ba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_TIM_Base_MspInit+0x78>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d115      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 8001798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_TIM_Base_MspInit+0x74>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	2018      	movs	r0, #24
 80017b0:	f000 fb9d 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017b4:	2018      	movs	r0, #24
 80017b6:	f000 fbb6 	bl	8001f26 <HAL_NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40014000 	.word	0x40014000

080017d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_TIM_PWM_MspInit+0x3c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10d      	bne.n	80017fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_TIM_PWM_MspInit+0x40>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_TIM_PWM_MspInit+0x40>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_TIM_PWM_MspInit+0x40>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40000800 	.word	0x40000800
 8001810:	40023800 	.word	0x40023800

08001814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <HAL_TIM_MspPostInit+0xb0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d11f      	bne.n	8001876 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_TIM_MspPostInit+0xb4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_TIM_MspPostInit+0xb4>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_TIM_MspPostInit+0xb4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Heater_Bottom_Pin|Heater_Top_Pin;
 8001852:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001858:	2312      	movs	r3, #18
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001864:	2302      	movs	r3, #2
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <HAL_TIM_MspPostInit+0xb8>)
 8001870:	f000 fb74 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001874:	e022      	b.n	80018bc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_TIM_MspPostInit+0xbc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d11d      	bne.n	80018bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_TIM_MspPostInit+0xb4>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_TIM_MspPostInit+0xb4>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_TIM_MspPostInit+0xb4>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_Pin|LEDB_Pin;
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018ac:	2302      	movs	r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <HAL_TIM_MspPostInit+0xc0>)
 80018b8:	f000 fb50 	bl	8001f5c <HAL_GPIO_Init>
}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40000800 	.word	0x40000800
 80018d4:	40020400 	.word	0x40020400

080018d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <HAL_UART_MspInit+0xe8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12d      	bne.n	8001956 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001904:	f043 0310 	orr.w	r3, r3, #16
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_UART_MspInit+0xec>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_UART_MspInit+0xec>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001932:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	481e      	ldr	r0, [pc, #120]	; (80019c8 <HAL_UART_MspInit+0xf0>)
 8001950:	f000 fb04 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001954:	e030      	b.n	80019b8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_UART_MspInit+0xf4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d12b      	bne.n	80019b8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <HAL_UART_MspInit+0xec>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_UART_MspInit+0xec>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_UART_MspInit+0xec>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001998:	230c      	movs	r3, #12
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_UART_MspInit+0xf0>)
 80019b4:	f000 fad2 	bl	8001f5c <HAL_GPIO_Init>
}
 80019b8:	bf00      	nop
 80019ba:	3730      	adds	r7, #48	; 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40004400 	.word	0x40004400

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Systick_Sensor_IRQ();
 8001a1c:	f005 f898 	bl	8006b50 <Systick_Sensor_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 f946 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  HeaterControl_TIM9_IRQ();
 8001a2c:	f004 feb6 	bl	800679c <HeaterControl_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a32:	f002 f84f 	bl	8003ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000694 	.word	0x20000694

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a5a:	f005 ff0d 	bl	8007878 <__errno>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2216      	movs	r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
	return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_exit>:

void _exit (int status)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ffe7 	bl	8001a50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a82:	e7fe      	b.n	8001a82 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
	}

return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f005 fe8e 	bl	8007878 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20020000 	.word	0x20020000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	200004e4 	.word	0x200004e4
 8001b90:	20000748 	.word	0x20000748

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd4:	4c0b      	ldr	r4, [pc, #44]	; (8001c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001be2:	f7ff ffd7 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f005 fe4d 	bl	8007884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff f97b 	bl	8000ee4 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	200004c8 	.word	0x200004c8
  ldr r2, =_sidata
 8001bfc:	0800ae3c 	.word	0x0800ae3c
  ldr r2, =_sbss
 8001c00:	200004c8 	.word	0x200004c8
  ldr r4, =_ebss
 8001c04:	20000744 	.word	0x20000744

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f94f 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff fcc2 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f967 	bl	8001f42 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f92f 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000724 	.word	0x20000724

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000724 	.word	0x20000724

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff8e 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff29 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff3e 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff8e 	bl	8001e2c <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff31 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffa2 	bl	8001e94 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e159      	b.n	800222c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f040 8148 	bne.w	8002226 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d005      	beq.n	8001fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d130      	bne.n	8002010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	2203      	movs	r2, #3
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 0201 	and.w	r2, r3, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	2b03      	cmp	r3, #3
 800201a:	d017      	beq.n	800204c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d123      	bne.n	80020a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	220f      	movs	r2, #15
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	69b9      	ldr	r1, [r7, #24]
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0203 	and.w	r2, r3, #3
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a2 	beq.w	8002226 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_GPIO_Init+0x2e8>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a56      	ldr	r2, [pc, #344]	; (8002244 <HAL_GPIO_Init+0x2e8>)
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <HAL_GPIO_Init+0x2e8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fe:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_GPIO_Init+0x2ec>)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a49      	ldr	r2, [pc, #292]	; (800224c <HAL_GPIO_Init+0x2f0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x202>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a48      	ldr	r2, [pc, #288]	; (8002250 <HAL_GPIO_Init+0x2f4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x1fe>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a47      	ldr	r2, [pc, #284]	; (8002254 <HAL_GPIO_Init+0x2f8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x1fa>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a46      	ldr	r2, [pc, #280]	; (8002258 <HAL_GPIO_Init+0x2fc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x1f6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a45      	ldr	r2, [pc, #276]	; (800225c <HAL_GPIO_Init+0x300>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x1f2>
 800214a:	2304      	movs	r3, #4
 800214c:	e008      	b.n	8002160 <HAL_GPIO_Init+0x204>
 800214e:	2307      	movs	r3, #7
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x204>
 8002152:	2303      	movs	r3, #3
 8002154:	e004      	b.n	8002160 <HAL_GPIO_Init+0x204>
 8002156:	2302      	movs	r3, #2
 8002158:	e002      	b.n	8002160 <HAL_GPIO_Init+0x204>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x204>
 800215e:	2300      	movs	r3, #0
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	f002 0203 	and.w	r2, r2, #3
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4093      	lsls	r3, r2
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002170:	4935      	ldr	r1, [pc, #212]	; (8002248 <HAL_GPIO_Init+0x2ec>)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_GPIO_Init+0x304>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x304>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_GPIO_Init+0x304>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021cc:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_GPIO_Init+0x304>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_GPIO_Init+0x304>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x304>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_GPIO_Init+0x304>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <HAL_GPIO_Init+0x304>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3301      	adds	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	f67f aea2 	bls.w	8001f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40013800 	.word	0x40013800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e264      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d075      	beq.n	80023d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e6:	4ba3      	ldr	r3, [pc, #652]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d00c      	beq.n	800230c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4ba0      	ldr	r3, [pc, #640]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d112      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b9d      	ldr	r3, [pc, #628]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230a:	d10b      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4b99      	ldr	r3, [pc, #612]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05b      	beq.n	80023d0 <HAL_RCC_OscConfig+0x108>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d157      	bne.n	80023d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e23f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x74>
 800232e:	4b91      	ldr	r3, [pc, #580]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a90      	ldr	r2, [pc, #576]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x98>
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a8a      	ldr	r2, [pc, #552]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 8002360:	4b84      	ldr	r3, [pc, #528]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a83      	ldr	r2, [pc, #524]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a80      	ldr	r2, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff fcaa 	bl	8001cd8 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff fca6 	bl	8001cd8 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e204      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b76      	ldr	r3, [pc, #472]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0xc0>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fc96 	bl	8001cd8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff fc92 	bl	8001cd8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e1f0      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0xe8>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d063      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023de:	4b65      	ldr	r3, [pc, #404]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b62      	ldr	r3, [pc, #392]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1c4      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4952      	ldr	r1, [pc, #328]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e03a      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <HAL_RCC_OscConfig+0x2b0>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff fc4b 	bl	8001cd8 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff fc47 	bl	8001cd8 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1a5      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4940      	ldr	r1, [pc, #256]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x2b0>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff fc2a 	bl	8001cd8 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff fc26 	bl	8001cd8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e184      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d030      	beq.n	8002514 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_OscConfig+0x2b4>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff fc0a 	bl	8001cd8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff fc06 	bl	8001cd8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e164      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x200>
 80024e6:	e015      	b.n	8002514 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_OscConfig+0x2b4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff fbf3 	bl	8001cd8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff fbef 	bl	8001cd8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e14d      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a0 	beq.w	8002662 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x2b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d121      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_RCC_OscConfig+0x2b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_RCC_OscConfig+0x2b8>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7ff fbb5 	bl	8001cd8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e011      	b.n	8002596 <HAL_RCC_OscConfig+0x2ce>
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	42470000 	.word	0x42470000
 800257c:	42470e80 	.word	0x42470e80
 8002580:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7ff fba8 	bl	8001cd8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e106      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b85      	ldr	r3, [pc, #532]	; (80027ac <HAL_RCC_OscConfig+0x4e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d106      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a80      	ldr	r2, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	e01c      	b.n	80025f2 <HAL_RCC_OscConfig+0x32a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d10c      	bne.n	80025da <HAL_RCC_OscConfig+0x312>
 80025c0:	4b7b      	ldr	r3, [pc, #492]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a7a      	ldr	r2, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a77      	ldr	r2, [pc, #476]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	e00b      	b.n	80025f2 <HAL_RCC_OscConfig+0x32a>
 80025da:	4b75      	ldr	r3, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a74      	ldr	r2, [pc, #464]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a71      	ldr	r2, [pc, #452]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d015      	beq.n	8002626 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff fb6d 	bl	8001cd8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7ff fb69 	bl	8001cd8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0c5      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <HAL_RCC_OscConfig+0x33a>
 8002624:	e014      	b.n	8002650 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7ff fb57 	bl	8001cd8 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7ff fb53 	bl	8001cd8 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0af      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ee      	bne.n	800262e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 809b 	beq.w	80027a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d05c      	beq.n	8002732 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d141      	bne.n	8002704 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff fb27 	bl	8001cd8 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff fb23 	bl	8001cd8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e081      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a0:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	019b      	lsls	r3, r3, #6
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	4937      	ldr	r1, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fafc 	bl	8001cd8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e4:	f7ff faf8 	bl	8001cd8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e056      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x41c>
 8002702:	e04e      	b.n	80027a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff fae5 	bl	8001cd8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff fae1 	bl	8001cd8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e03f      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x44a>
 8002730:	e037      	b.n	80027a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e032      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d028      	beq.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d121      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d11a      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002774:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002776:	4293      	cmp	r3, r2
 8002778:	d111      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d107      	bne.n	800279e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40007000 	.word	0x40007000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470060 	.word	0x42470060

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cc      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90c      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e067      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b37      	ldr	r3, [pc, #220]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4934      	ldr	r1, [pc, #208]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7ff fa16 	bl	8001cd8 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7ff fa12 	bl	8001cd8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e04f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f976 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	0800aa34 	.word	0x0800aa34
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800298a:	2100      	movs	r1, #0
 800298c:	6079      	str	r1, [r7, #4]
 800298e:	2100      	movs	r1, #0
 8002990:	60f9      	str	r1, [r7, #12]
 8002992:	2100      	movs	r1, #0
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002996:	2100      	movs	r1, #0
 8002998:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299a:	4952      	ldr	r1, [pc, #328]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x160>)
 800299c:	6889      	ldr	r1, [r1, #8]
 800299e:	f001 010c 	and.w	r1, r1, #12
 80029a2:	2908      	cmp	r1, #8
 80029a4:	d00d      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80029a6:	2908      	cmp	r1, #8
 80029a8:	f200 8094 	bhi.w	8002ad4 <HAL_RCC_GetSysClockFreq+0x150>
 80029ac:	2900      	cmp	r1, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x32>
 80029b0:	2904      	cmp	r1, #4
 80029b2:	d003      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x38>
 80029b4:	e08e      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b6:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x164>)
 80029b8:	60bb      	str	r3, [r7, #8]
       break;
 80029ba:	e08e      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCC_GetSysClockFreq+0x168>)
 80029be:	60bb      	str	r3, [r7, #8]
      break;
 80029c0:	e08b      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c2:	4948      	ldr	r1, [pc, #288]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029c4:	6849      	ldr	r1, [r1, #4]
 80029c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80029ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029cc:	4945      	ldr	r1, [pc, #276]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ce:	6849      	ldr	r1, [r1, #4]
 80029d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d024      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4942      	ldr	r1, [pc, #264]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x160>)
 80029da:	6849      	ldr	r1, [r1, #4]
 80029dc:	0989      	lsrs	r1, r1, #6
 80029de:	4608      	mov	r0, r1
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029e8:	f04f 0500 	mov.w	r5, #0
 80029ec:	ea00 0204 	and.w	r2, r0, r4
 80029f0:	ea01 0305 	and.w	r3, r1, r5
 80029f4:	493d      	ldr	r1, [pc, #244]	; (8002aec <HAL_RCC_GetSysClockFreq+0x168>)
 80029f6:	fb01 f003 	mul.w	r0, r1, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	fb01 f102 	mul.w	r1, r1, r2
 8002a00:	1844      	adds	r4, r0, r1
 8002a02:	493a      	ldr	r1, [pc, #232]	; (8002aec <HAL_RCC_GetSysClockFreq+0x168>)
 8002a04:	fba2 0101 	umull	r0, r1, r2, r1
 8002a08:	1863      	adds	r3, r4, r1
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f7fe f8d0 	bl	8000bb8 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e04a      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	ea02 0400 	and.w	r4, r2, r0
 8002a3a:	ea03 0501 	and.w	r5, r3, r1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4629      	mov	r1, r5
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	014b      	lsls	r3, r1, #5
 8002a4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a50:	0142      	lsls	r2, r0, #5
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	1b00      	subs	r0, r0, r4
 8002a58:	eb61 0105 	sbc.w	r1, r1, r5
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	018b      	lsls	r3, r1, #6
 8002a66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a6a:	0182      	lsls	r2, r0, #6
 8002a6c:	1a12      	subs	r2, r2, r0
 8002a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	00d9      	lsls	r1, r3, #3
 8002a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a80:	00d0      	lsls	r0, r2, #3
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	1912      	adds	r2, r2, r4
 8002a88:	eb45 0303 	adc.w	r3, r5, r3
 8002a8c:	f04f 0000 	mov.w	r0, #0
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	0299      	lsls	r1, r3, #10
 8002a96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a9a:	0290      	lsls	r0, r2, #10
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	f7fe f884 	bl	8000bb8 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	60bb      	str	r3, [r7, #8]
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ad6:	60bb      	str	r3, [r7, #8]
      break;
 8002ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ada:	68bb      	ldr	r3, [r7, #8]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	017d7840 	.word	0x017d7840

08002af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff0 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0a9b      	lsrs	r3, r3, #10
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	0800aa44 	.word	0x0800aa44

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffdc 	bl	8002af0 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0b5b      	lsrs	r3, r3, #13
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	0800aa44 	.word	0x0800aa44

08002b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07b      	b.n	8002c62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7a:	d009      	beq.n	8002b90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
 8002b82:	e005      	b.n	8002b90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe fd34 	bl	8001618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c14:	ea42 0103 	orr.w	r1, r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0104 	and.w	r1, r3, #4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f003 0210 	and.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b088      	sub	sp, #32
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_SPI_Transmit+0x22>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e126      	b.n	8002eda <HAL_SPI_Transmit+0x270>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c94:	f7ff f820 	bl	8001cd8 <HAL_GetTick>
 8002c98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
 8002cac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cae:	e10b      	b.n	8002ec8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_SPI_Transmit+0x52>
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cc0:	e102      	b.n	8002ec8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d08:	d10f      	bne.n	8002d2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d007      	beq.n	8002d48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d50:	d14b      	bne.n	8002dea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_Transmit+0xf6>
 8002d5a:	8afb      	ldrh	r3, [r7, #22]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d13e      	bne.n	8002dde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	1c9a      	adds	r2, r3, #2
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d84:	e02b      	b.n	8002dde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d112      	bne.n	8002dba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	881a      	ldrh	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	1c9a      	adds	r2, r3, #2
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002db8:	e011      	b.n	8002dde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dba:	f7fe ff8d 	bl	8001cd8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d803      	bhi.n	8002dd2 <HAL_SPI_Transmit+0x168>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d102      	bne.n	8002dd8 <HAL_SPI_Transmit+0x16e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ddc:	e074      	b.n	8002ec8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ce      	bne.n	8002d86 <HAL_SPI_Transmit+0x11c>
 8002de8:	e04c      	b.n	8002e84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Transmit+0x18e>
 8002df2:	8afb      	ldrh	r3, [r7, #22]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d140      	bne.n	8002e7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e1e:	e02c      	b.n	8002e7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d113      	bne.n	8002e56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	330c      	adds	r3, #12
 8002e38:	7812      	ldrb	r2, [r2, #0]
 8002e3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e54:	e011      	b.n	8002e7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e56:	f7fe ff3f 	bl	8001cd8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d803      	bhi.n	8002e6e <HAL_SPI_Transmit+0x204>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d102      	bne.n	8002e74 <HAL_SPI_Transmit+0x20a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e78:	e026      	b.n	8002ec8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1cd      	bne.n	8002e20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fbcb 	bl	8003624 <SPI_EndRxTxTransaction>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	e000      	b.n	8002ec8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b088      	sub	sp, #32
 8002ee6:	af02      	add	r7, sp, #8
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efe:	d112      	bne.n	8002f26 <HAL_SPI_Receive+0x44>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10e      	bne.n	8002f26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f8f1 	bl	8003104 <HAL_SPI_TransmitReceive>
 8002f22:	4603      	mov	r3, r0
 8002f24:	e0ea      	b.n	80030fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_SPI_Receive+0x52>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0e3      	b.n	80030fc <HAL_SPI_Receive+0x21a>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f3c:	f7fe fecc 	bl	8001cd8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d002      	beq.n	8002f54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f52:	e0ca      	b.n	80030ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_SPI_Receive+0x7e>
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f64:	e0c1      	b.n	80030ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2204      	movs	r2, #4
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fac:	d10f      	bne.n	8002fce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d007      	beq.n	8002fec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d162      	bne.n	80030ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ff4:	e02e      	b.n	8003054 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d115      	bne.n	8003030 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f103 020c 	add.w	r2, r3, #12
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800302e:	e011      	b.n	8003054 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003030:	f7fe fe52 	bl	8001cd8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d803      	bhi.n	8003048 <HAL_SPI_Receive+0x166>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d102      	bne.n	800304e <HAL_SPI_Receive+0x16c>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003052:	e04a      	b.n	80030ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1cb      	bne.n	8002ff6 <HAL_SPI_Receive+0x114>
 800305e:	e031      	b.n	80030c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b01      	cmp	r3, #1
 800306c:	d113      	bne.n	8003096 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	b292      	uxth	r2, r2
 800307a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003094:	e011      	b.n	80030ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003096:	f7fe fe1f 	bl	8001cd8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d803      	bhi.n	80030ae <HAL_SPI_Receive+0x1cc>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_Receive+0x1d2>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030b8:	e017      	b.n	80030ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1cd      	bne.n	8003060 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fa45 	bl	8003558 <SPI_EndRxTransaction>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e000      	b.n	80030ea <HAL_SPI_Receive+0x208>
  }

error :
 80030e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003112:	2301      	movs	r3, #1
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_SPI_TransmitReceive+0x26>
 8003126:	2302      	movs	r3, #2
 8003128:	e18a      	b.n	8003440 <HAL_SPI_TransmitReceive+0x33c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003132:	f7fe fdd1 	bl	8001cd8 <HAL_GetTick>
 8003136:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800314c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003150:	2b01      	cmp	r3, #1
 8003152:	d00f      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x70>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315a:	d107      	bne.n	800316c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <HAL_SPI_TransmitReceive+0x68>
 8003164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003168:	2b04      	cmp	r3, #4
 800316a:	d003      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800316c:	2302      	movs	r3, #2
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003172:	e15b      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x82>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x82>
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800318c:	e14e      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2205      	movs	r2, #5
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d178      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_TransmitReceive+0x10a>
 8003208:	8b7b      	ldrh	r3, [r7, #26]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d166      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003232:	e053      	b.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d11b      	bne.n	800327a <HAL_SPI_TransmitReceive+0x176>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d016      	beq.n	800327a <HAL_SPI_TransmitReceive+0x176>
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d113      	bne.n	800327a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d119      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x1b8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	b292      	uxth	r2, r2
 800329e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032b8:	2301      	movs	r3, #1
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032bc:	f7fe fd0c 	bl	8001cd8 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d807      	bhi.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d003      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032da:	e0a7      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1a6      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x130>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1a1      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x130>
 80032f0:	e07c      	b.n	80033ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x1fc>
 80032fa:	8b7b      	ldrh	r3, [r7, #26]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d16b      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003326:	e057      	b.n	80033d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11c      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x26c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x26c>
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d114      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d119      	bne.n	80033b2 <HAL_SPI_TransmitReceive+0x2ae>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d014      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033b2:	f7fe fc91 	bl	8001cd8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033be:	429a      	cmp	r2, r3
 80033c0:	d803      	bhi.n	80033ca <HAL_SPI_TransmitReceive+0x2c6>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d102      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x2cc>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033d6:	e029      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1a2      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x224>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d19d      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f917 	bl	8003624 <SPI_EndRxTxTransaction>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003408:	e010      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	e000      	b.n	800342c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800342a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003458:	f7fe fc3e 	bl	8001cd8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	4413      	add	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003468:	f7fe fc36 	bl	8001cd8 <HAL_GetTick>
 800346c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800346e:	4b39      	ldr	r3, [pc, #228]	; (8003554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	015b      	lsls	r3, r3, #5
 8003474:	0d1b      	lsrs	r3, r3, #20
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	e054      	b.n	800352a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d050      	beq.n	800352a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003488:	f7fe fc26 	bl	8001cd8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d902      	bls.n	800349e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d13d      	bne.n	800351a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034b6:	d111      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c0:	d004      	beq.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	d107      	bne.n	80034dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e4:	d10f      	bne.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e017      	b.n	800354a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3b01      	subs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	bf0c      	ite	eq
 800353a:	2301      	moveq	r3, #1
 800353c:	2300      	movne	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	429a      	cmp	r2, r3
 8003546:	d19b      	bne.n	8003480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000000 	.word	0x20000000

08003558 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356c:	d111      	bne.n	8003592 <SPI_EndRxTransaction+0x3a>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003576:	d004      	beq.n	8003582 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d107      	bne.n	8003592 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003590:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d12a      	bne.n	80035f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d012      	beq.n	80035cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff ff49 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02d      	beq.n	8003618 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e026      	b.n	800361a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2101      	movs	r1, #1
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ff36 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e013      	b.n	800361a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2101      	movs	r1, #1
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff ff23 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e000      	b.n	800361a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <SPI_EndRxTxTransaction+0x7c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <SPI_EndRxTxTransaction+0x80>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	0d5b      	lsrs	r3, r3, #21
 800363c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003640:	fb02 f303 	mul.w	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d112      	bne.n	8003676 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2200      	movs	r2, #0
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff fef4 	bl	8003448 <SPI_WaitFlagStateUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e00f      	b.n	8003696 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3b01      	subs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d0f2      	beq.n	8003676 <SPI_EndRxTxTransaction+0x52>
 8003690:	e000      	b.n	8003694 <SPI_EndRxTxTransaction+0x70>
        break;
 8003692:	bf00      	nop
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000000 	.word	0x20000000
 80036a4:	165e9f81 	.word	0x165e9f81

080036a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e041      	b.n	800373e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fe f840 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f000 fcb8 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e044      	b.n	80037ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d018      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x6c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d013      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x6c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <HAL_TIM_Base_Start_IT+0xb4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00e      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x6c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_TIM_Base_Start_IT+0xb8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x6c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_TIM_Base_Start_IT+0xbc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x6c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_TIM_Base_Start_IT+0xc0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d111      	bne.n	80037d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d010      	beq.n	80037e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	e007      	b.n	80037e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40014000 	.word	0x40014000

0800380c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e041      	b.n	80038a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd ffcc 	bl	80017d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f000 fc06 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <HAL_TIM_PWM_Start+0x24>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e022      	b.n	8003916 <HAL_TIM_PWM_Start+0x6a>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d109      	bne.n	80038ea <HAL_TIM_PWM_Start+0x3e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e015      	b.n	8003916 <HAL_TIM_PWM_Start+0x6a>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d109      	bne.n	8003904 <HAL_TIM_PWM_Start+0x58>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e008      	b.n	8003916 <HAL_TIM_PWM_Start+0x6a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e068      	b.n	80039f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Start+0x82>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	e013      	b.n	8003956 <HAL_TIM_PWM_Start+0xaa>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Start+0x92>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800393c:	e00b      	b.n	8003956 <HAL_TIM_PWM_Start+0xaa>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d104      	bne.n	800394e <HAL_TIM_PWM_Start+0xa2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394c:	e003      	b.n	8003956 <HAL_TIM_PWM_Start+0xaa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	6839      	ldr	r1, [r7, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fe22 	bl	80045a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <HAL_TIM_PWM_Start+0x14c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d107      	bne.n	800397e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_TIM_PWM_Start+0x14c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <HAL_TIM_PWM_Start+0x10e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d013      	beq.n	80039ba <HAL_TIM_PWM_Start+0x10e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_TIM_PWM_Start+0x150>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_PWM_Start+0x10e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_TIM_PWM_Start+0x154>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_PWM_Start+0x10e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <HAL_TIM_PWM_Start+0x158>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_PWM_Start+0x10e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <HAL_TIM_PWM_Start+0x15c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d111      	bne.n	80039de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d010      	beq.n	80039ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039dc:	e007      	b.n	80039ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40014000 	.word	0x40014000

08003a0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fdc2 	bl	80045a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a29      	ldr	r2, [pc, #164]	; (8003ad0 <HAL_TIM_PWM_Stop+0xc4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d117      	bne.n	8003a5e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_TIM_PWM_Stop+0x52>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	f240 4344 	movw	r3, #1092	; 0x444
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d107      	bne.n	8003a5e <HAL_TIM_PWM_Stop+0x52>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x82>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	f240 4344 	movw	r3, #1092	; 0x444
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Stop+0x92>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	e013      	b.n	8003ac6 <HAL_TIM_PWM_Stop+0xba>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Stop+0xa2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aac:	e00b      	b.n	8003ac6 <HAL_TIM_PWM_Stop+0xba>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Stop+0xb2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003abc:	e003      	b.n	8003ac6 <HAL_TIM_PWM_Stop+0xba>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40010000 	.word	0x40010000

08003ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0202 	mvn.w	r2, #2
 8003b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa81 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa73 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fa84 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0204 	mvn.w	r2, #4
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa57 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa49 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa5a 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0208 	mvn.w	r2, #8
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa2d 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa1f 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fa30 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2208      	movs	r2, #8
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa03 	bl	800401e <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f9f5 	bl	800400a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa06 	bl	8004032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0201 	mvn.w	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f9cf 	bl	8003ff6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fd30 	bl	80046e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9cb 	bl	8004046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0220 	mvn.w	r2, #32
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fcfa 	bl	80046d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0ae      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	f200 809f 	bhi.w	8003e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003e51 	.word	0x08003e51
 8003d20:	08003e51 	.word	0x08003e51
 8003d24:	08003e51 	.word	0x08003e51
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003e51 	.word	0x08003e51
 8003d30:	08003e51 	.word	0x08003e51
 8003d34:	08003e51 	.word	0x08003e51
 8003d38:	08003dcf 	.word	0x08003dcf
 8003d3c:	08003e51 	.word	0x08003e51
 8003d40:	08003e51 	.word	0x08003e51
 8003d44:	08003e51 	.word	0x08003e51
 8003d48:	08003e0f 	.word	0x08003e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa02 	bl	800415c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0208 	orr.w	r2, r2, #8
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
      break;
 8003d8a:	e064      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fa48 	bl	8004228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
      break;
 8003dcc:	e043      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fa93 	bl	8004300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0208 	orr.w	r2, r2, #8
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      break;
 8003e0c:	e023      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fadd 	bl	80043d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
      break;
 8003e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0b4      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x186>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d03e      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0xd4>
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec2:	f200 8087 	bhi.w	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	f000 8086 	beq.w	8003fda <HAL_TIM_ConfigClockSource+0x172>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d87f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b70      	cmp	r3, #112	; 0x70
 8003ed6:	d01a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xa6>
 8003ed8:	2b70      	cmp	r3, #112	; 0x70
 8003eda:	d87b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b60      	cmp	r3, #96	; 0x60
 8003ede:	d050      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ee0:	2b60      	cmp	r3, #96	; 0x60
 8003ee2:	d877      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b50      	cmp	r3, #80	; 0x50
 8003ee6:	d03c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ee8:	2b50      	cmp	r3, #80	; 0x50
 8003eea:	d873      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d058      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d86f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b30      	cmp	r3, #48	; 0x30
 8003ef6:	d064      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef8:	2b30      	cmp	r3, #48	; 0x30
 8003efa:	d86b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d060      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d867      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05c      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d05a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	e062      	b.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f000 fb23 	bl	8004568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	609a      	str	r2, [r3, #8]
      break;
 8003f3a:	e04f      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f000 fb0c 	bl	8004568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5e:	609a      	str	r2, [r3, #8]
      break;
 8003f60:	e03c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 fa80 	bl	8004474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2150      	movs	r1, #80	; 0x50
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fad9 	bl	8004532 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e02c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fa9f 	bl	80044d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2160      	movs	r1, #96	; 0x60
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fac9 	bl	8004532 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e01c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fa60 	bl	8004474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2140      	movs	r1, #64	; 0x40
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fab9 	bl	8004532 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e00c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f000 fab0 	bl	8004532 <TIM_ITRx_SetConfig>
      break;
 8003fd2:	e003      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e000      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a34      	ldr	r2, [pc, #208]	; (8004140 <TIM_Base_SetConfig+0xe4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a31      	ldr	r2, [pc, #196]	; (8004144 <TIM_Base_SetConfig+0xe8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a30      	ldr	r2, [pc, #192]	; (8004148 <TIM_Base_SetConfig+0xec>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a2f      	ldr	r2, [pc, #188]	; (800414c <TIM_Base_SetConfig+0xf0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a25      	ldr	r2, [pc, #148]	; (8004140 <TIM_Base_SetConfig+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01b      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d017      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <TIM_Base_SetConfig+0xe8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a21      	ldr	r2, [pc, #132]	; (8004148 <TIM_Base_SetConfig+0xec>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00f      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a20      	ldr	r2, [pc, #128]	; (800414c <TIM_Base_SetConfig+0xf0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1f      	ldr	r2, [pc, #124]	; (8004150 <TIM_Base_SetConfig+0xf4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <TIM_Base_SetConfig+0xf8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <TIM_Base_SetConfig+0xfc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d108      	bne.n	80040f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <TIM_Base_SetConfig+0xe4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	615a      	str	r2, [r3, #20]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <TIM_OC1_SetConfig+0xc8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10c      	bne.n	80041d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0308 	bic.w	r3, r3, #8
 80041be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <TIM_OC1_SetConfig+0xc8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d111      	bne.n	80041fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40010000 	.word	0x40010000

08004228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0210 	bic.w	r2, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f023 0320 	bic.w	r3, r3, #32
 8004272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <TIM_OC2_SetConfig+0xd4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10d      	bne.n	80042a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <TIM_OC2_SetConfig+0xd4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d113      	bne.n	80042d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <TIM_OC3_SetConfig+0xd0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10d      	bne.n	800437a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <TIM_OC3_SetConfig+0xd0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d113      	bne.n	80043aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40010000 	.word	0x40010000

080043d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800441e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	031b      	lsls	r3, r3, #12
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <TIM_OC4_SetConfig+0x9c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d109      	bne.n	8004448 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40010000 	.word	0x40010000

08004474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0201 	bic.w	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 030a 	bic.w	r3, r3, #10
 80044b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b087      	sub	sp, #28
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0210 	bic.w	r2, r3, #16
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	031b      	lsls	r3, r3, #12
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800450e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	f043 0307 	orr.w	r3, r3, #7
 8004554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	021a      	lsls	r2, r3, #8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	431a      	orrs	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	2201      	movs	r2, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1a      	ldr	r2, [r3, #32]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004608:	2302      	movs	r3, #2
 800460a:	e050      	b.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d013      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10c      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40014000 	.word	0x40014000

080046d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e03f      	b.n	800478a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd f8da 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f929 	bl	8004994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b08a      	sub	sp, #40	; 0x28
 8004796:	af02      	add	r7, sp, #8
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d17c      	bne.n	80048ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_UART_Transmit+0x2c>
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e075      	b.n	80048ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x3e>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e06e      	b.n	80048ae <HAL_UART_Transmit+0x11c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047e6:	f7fd fa77 	bl	8001cd8 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d108      	bne.n	8004814 <HAL_UART_Transmit+0x82>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	e003      	b.n	800481c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004824:	e02a      	b.n	800487c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f840 	bl	80048b6 <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e036      	b.n	80048ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3302      	adds	r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e007      	b.n	800486e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	3301      	adds	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1cf      	bne.n	8004826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	2140      	movs	r1, #64	; 0x40
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f810 	bl	80048b6 <UART_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e006      	b.n	80048ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b090      	sub	sp, #64	; 0x40
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c6:	e050      	b.n	800496a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d04c      	beq.n	800496a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80048d6:	f7fd f9ff 	bl	8001cd8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d241      	bcs.n	800496a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004906:	637a      	str	r2, [r7, #52]	; 0x34
 8004908:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800490c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	613b      	str	r3, [r7, #16]
   return(result);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	63bb      	str	r3, [r7, #56]	; 0x38
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800493a:	623a      	str	r2, [r7, #32]
 800493c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	61bb      	str	r3, [r7, #24]
   return(result);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e00f      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d09f      	beq.n	80048c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3740      	adds	r7, #64	; 0x40
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004998:	b09f      	sub	sp, #124	; 0x7c
 800499a:	af00      	add	r7, sp, #0
 800499c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	68d9      	ldr	r1, [r3, #12]
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	ea40 0301 	orr.w	r3, r0, r1
 80049b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049d8:	f021 010c 	bic.w	r1, r1, #12
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e2:	430b      	orrs	r3, r1
 80049e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f2:	6999      	ldr	r1, [r3, #24]
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	ea40 0301 	orr.w	r3, r0, r1
 80049fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4bc5      	ldr	r3, [pc, #788]	; (8004d18 <UART_SetConfig+0x384>)
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d004      	beq.n	8004a12 <UART_SetConfig+0x7e>
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4bc3      	ldr	r3, [pc, #780]	; (8004d1c <UART_SetConfig+0x388>)
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d103      	bne.n	8004a1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a12:	f7fe f88d 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8004a16:	6778      	str	r0, [r7, #116]	; 0x74
 8004a18:	e002      	b.n	8004a20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7fe f875 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a28:	f040 80b6 	bne.w	8004b98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2e:	461c      	mov	r4, r3
 8004a30:	f04f 0500 	mov.w	r5, #0
 8004a34:	4622      	mov	r2, r4
 8004a36:	462b      	mov	r3, r5
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a44:	1912      	adds	r2, r2, r4
 8004a46:	eb45 0303 	adc.w	r3, r5, r3
 8004a4a:	f04f 0000 	mov.w	r0, #0
 8004a4e:	f04f 0100 	mov.w	r1, #0
 8004a52:	00d9      	lsls	r1, r3, #3
 8004a54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a58:	00d0      	lsls	r0, r2, #3
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	1911      	adds	r1, r2, r4
 8004a60:	6639      	str	r1, [r7, #96]	; 0x60
 8004a62:	416b      	adcs	r3, r5
 8004a64:	667b      	str	r3, [r7, #100]	; 0x64
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a74:	415b      	adcs	r3, r3
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a80:	f7fc f89a 	bl	8000bb8 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4ba5      	ldr	r3, [pc, #660]	; (8004d20 <UART_SetConfig+0x38c>)
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011e      	lsls	r6, r3, #4
 8004a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a94:	461c      	mov	r4, r3
 8004a96:	f04f 0500 	mov.w	r5, #0
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	462b      	mov	r3, r5
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aaa:	1912      	adds	r2, r2, r4
 8004aac:	eb45 0303 	adc.w	r3, r5, r3
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	00d9      	lsls	r1, r3, #3
 8004aba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004abe:	00d0      	lsls	r0, r2, #3
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	1911      	adds	r1, r2, r4
 8004ac6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ac8:	416b      	adcs	r3, r5
 8004aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ada:	415b      	adcs	r3, r3
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ae6:	f7fc f867 	bl	8000bb8 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4b8c      	ldr	r3, [pc, #560]	; (8004d20 <UART_SetConfig+0x38c>)
 8004af0:	fba3 1302 	umull	r1, r3, r3, r2
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	2164      	movs	r1, #100	; 0x64
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	3332      	adds	r3, #50	; 0x32
 8004b02:	4a87      	ldr	r2, [pc, #540]	; (8004d20 <UART_SetConfig+0x38c>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b10:	441e      	add	r6, r3
 8004b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b14:	4618      	mov	r0, r3
 8004b16:	f04f 0100 	mov.w	r1, #0
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	1894      	adds	r4, r2, r2
 8004b20:	623c      	str	r4, [r7, #32]
 8004b22:	415b      	adcs	r3, r3
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b2a:	1812      	adds	r2, r2, r0
 8004b2c:	eb41 0303 	adc.w	r3, r1, r3
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	f04f 0500 	mov.w	r5, #0
 8004b38:	00dd      	lsls	r5, r3, #3
 8004b3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b3e:	00d4      	lsls	r4, r2, #3
 8004b40:	4622      	mov	r2, r4
 8004b42:	462b      	mov	r3, r5
 8004b44:	1814      	adds	r4, r2, r0
 8004b46:	653c      	str	r4, [r7, #80]	; 0x50
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	461a      	mov	r2, r3
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	61b9      	str	r1, [r7, #24]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b66:	f7fc f827 	bl	8000bb8 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <UART_SetConfig+0x38c>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	; 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	; 0x32
 8004b82:	4a67      	ldr	r2, [pc, #412]	; (8004d20 <UART_SetConfig+0x38c>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0207 	and.w	r2, r3, #7
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4432      	add	r2, r6
 8004b94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b96:	e0b9      	b.n	8004d0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	f04f 0500 	mov.w	r5, #0
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	6139      	str	r1, [r7, #16]
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bb0:	1912      	adds	r2, r2, r4
 8004bb2:	eb45 0303 	adc.w	r3, r5, r3
 8004bb6:	f04f 0000 	mov.w	r0, #0
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	00d9      	lsls	r1, r3, #3
 8004bc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc4:	00d0      	lsls	r0, r2, #3
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	eb12 0804 	adds.w	r8, r2, r4
 8004bce:	eb43 0905 	adc.w	r9, r3, r5
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	008b      	lsls	r3, r1, #2
 8004be6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bea:	0082      	lsls	r2, r0, #2
 8004bec:	4640      	mov	r0, r8
 8004bee:	4649      	mov	r1, r9
 8004bf0:	f7fb ffe2 	bl	8000bb8 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <UART_SetConfig+0x38c>)
 8004bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	011e      	lsls	r6, r3, #4
 8004c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c04:	4618      	mov	r0, r3
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	1894      	adds	r4, r2, r2
 8004c10:	60bc      	str	r4, [r7, #8]
 8004c12:	415b      	adcs	r3, r3
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1a:	1812      	adds	r2, r2, r0
 8004c1c:	eb41 0303 	adc.w	r3, r1, r3
 8004c20:	f04f 0400 	mov.w	r4, #0
 8004c24:	f04f 0500 	mov.w	r5, #0
 8004c28:	00dd      	lsls	r5, r3, #3
 8004c2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c2e:	00d4      	lsls	r4, r2, #3
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	1814      	adds	r4, r2, r0
 8004c36:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c38:	414b      	adcs	r3, r1
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c54:	0082      	lsls	r2, r0, #2
 8004c56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c5a:	f7fb ffad 	bl	8000bb8 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <UART_SetConfig+0x38c>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <UART_SetConfig+0x38c>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c82:	441e      	add	r6, r3
 8004c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c86:	4618      	mov	r0, r3
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	1894      	adds	r4, r2, r2
 8004c92:	603c      	str	r4, [r7, #0]
 8004c94:	415b      	adcs	r3, r3
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9c:	1812      	adds	r2, r2, r0
 8004c9e:	eb41 0303 	adc.w	r3, r1, r3
 8004ca2:	f04f 0400 	mov.w	r4, #0
 8004ca6:	f04f 0500 	mov.w	r5, #0
 8004caa:	00dd      	lsls	r5, r3, #3
 8004cac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cb0:	00d4      	lsls	r4, r2, #3
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	eb12 0a00 	adds.w	sl, r2, r0
 8004cba:	eb43 0b01 	adc.w	fp, r3, r1
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	008b      	lsls	r3, r1, #2
 8004cd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cd6:	0082      	lsls	r2, r0, #2
 8004cd8:	4650      	mov	r0, sl
 8004cda:	4659      	mov	r1, fp
 8004cdc:	f7fb ff6c 	bl	8000bb8 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <UART_SetConfig+0x38c>)
 8004ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	2164      	movs	r1, #100	; 0x64
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	3332      	adds	r3, #50	; 0x32
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <UART_SetConfig+0x38c>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	f003 020f 	and.w	r2, r3, #15
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4432      	add	r2, r6
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	377c      	adds	r7, #124	; 0x7c
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	51eb851f 	.word	0x51eb851f

08004d24 <_Graph_Print>:
#include <math.h>




void _Graph_Print(graph_t * graph_var, uint32_t color){
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b08b      	sub	sp, #44	; 0x2c
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < graph_var -> count - 1; i++){
 8004d2e:	2300      	movs	r3, #0
 8004d30:	83fb      	strh	r3, [r7, #30]
 8004d32:	e075      	b.n	8004e20 <_Graph_Print+0xfc>
		int32_t x1 = graph_var -> xAxisPos + graph_var -> xData [i] / graph_var -> xDensity;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7a9b      	ldrb	r3, [r3, #10]
 8004d38:	ee07 3a90 	vmov	s15, r3
 8004d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	ed93 6a00 	vldr	s12, [r3]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	edd3 6a03 	vldr	s13, [r3, #12]
 8004d54:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d60:	ee17 3a90 	vmov	r3, s15
 8004d64:	61bb      	str	r3, [r7, #24]
		int32_t x2 = graph_var -> xAxisPos + graph_var -> xData [i + 1] / graph_var -> xDensity;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7a9b      	ldrb	r3, [r3, #10]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	8bfb      	ldrh	r3, [r7, #30]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	ed93 6a00 	vldr	s12, [r3]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	edd3 6a03 	vldr	s13, [r3, #12]
 8004d88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d94:	ee17 3a90 	vmov	r3, s15
 8004d98:	617b      	str	r3, [r7, #20]
		int32_t y1 = graph_var -> yAxisPos - graph_var -> yData [i] / graph_var -> yDensity;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7adb      	ldrb	r3, [r3, #11]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	8bfb      	ldrh	r3, [r7, #30]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	ed93 6a00 	vldr	s12, [r3]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	edd3 6a04 	vldr	s13, [r3, #16]
 8004dba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc6:	ee17 3a90 	vmov	r3, s15
 8004dca:	613b      	str	r3, [r7, #16]
		int32_t y2 = graph_var -> yAxisPos - graph_var -> yData [i + 1] / graph_var -> yDensity;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7adb      	ldrb	r3, [r3, #11]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	8bfb      	ldrh	r3, [r7, #30]
 8004dde:	3301      	adds	r3, #1
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	ed93 6a00 	vldr	s12, [r3]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	edd3 6a04 	vldr	s13, [r3, #16]
 8004dee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dfa:	ee17 3a90 	vmov	r3, s15
 8004dfe:	60fb      	str	r3, [r7, #12]
		OLED_Line(x1, y1, x2, y2, color);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	b2d8      	uxtb	r0, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	b2d9      	uxtb	r1, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	b2dc      	uxtb	r4, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	4623      	mov	r3, r4
 8004e16:	f001 f98f 	bl	8006138 <OLED_Line>
	for(uint16_t i = 0; i < graph_var -> count - 1; i++){
 8004e1a:	8bfb      	ldrh	r3, [r7, #30]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	83fb      	strh	r3, [r7, #30]
 8004e20:	8bfa      	ldrh	r2, [r7, #30]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	891b      	ldrh	r3, [r3, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	db83      	blt.n	8004d34 <_Graph_Print+0x10>
	}
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	3724      	adds	r7, #36	; 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}

08004e36 <_Graph_PrintPoint>:

void _Graph_PrintPoint(graph_t * graph_var, uint16_t idx, uint32_t color){
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	817b      	strh	r3, [r7, #10]
	int32_t x1 = graph_var -> xAxisPos + graph_var -> xData [idx] / graph_var -> xDensity;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	7a9b      	ldrb	r3, [r3, #10]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	897b      	ldrh	r3, [r7, #10]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	ed93 6a00 	vldr	s12, [r3]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	edd3 6a03 	vldr	s13, [r3, #12]
 8004e64:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e70:	ee17 3a90 	vmov	r3, s15
 8004e74:	617b      	str	r3, [r7, #20]
	int32_t y1 = graph_var -> yAxisPos - graph_var -> yData [idx] / graph_var -> yDensity;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	7adb      	ldrb	r3, [r3, #11]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	ed93 6a00 	vldr	s12, [r3]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	edd3 6a04 	vldr	s13, [r3, #16]
 8004e96:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ea2:	ee17 3a90 	vmov	r3, s15
 8004ea6:	613b      	str	r3, [r7, #16]
	OLED_Dot(x1, y1, 1, color);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	b2d8      	uxtb	r0, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	b2d9      	uxtb	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f000 fc95 	bl	80057e2 <OLED_Dot>
	OLED_Dot(x1+1, y1, 1, color);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	b2d8      	uxtb	r0, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	b2d9      	uxtb	r1, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f000 fc8b 	bl	80057e2 <OLED_Dot>
	OLED_Dot(x1, y1+1, 1, color);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	b2d8      	uxtb	r0, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b2d9      	uxtb	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f000 fc81 	bl	80057e2 <OLED_Dot>
	OLED_Dot(x1-1, y1, 1, color);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b2d8      	uxtb	r0, r3
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	b2d9      	uxtb	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f000 fc77 	bl	80057e2 <OLED_Dot>
	OLED_Dot(x1, y1-1, 1, color);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	b2d8      	uxtb	r0, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b2d9      	uxtb	r1, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f000 fc6d 	bl	80057e2 <OLED_Dot>
}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <_Graph_Add>:

void _Graph_Add(graph_t * graph_var, float xData, float yData){
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f1c:	edc7 0a01 	vstr	s1, [r7, #4]
	graph_var -> xData = realloc(graph_var -> xData, (graph_var -> count + 1) * sizeof(float));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	891b      	ldrh	r3, [r3, #8]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f003 fa8e 	bl	8008450 <realloc>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]
	graph_var -> yData = realloc(graph_var -> yData, (graph_var -> count + 1) * sizeof(float));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	891b      	ldrh	r3, [r3, #8]
 8004f42:	3301      	adds	r3, #1
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f003 fa81 	bl	8008450 <realloc>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
	graph_var -> xData[graph_var -> count] = xData;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	891b      	ldrh	r3, [r3, #8]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	601a      	str	r2, [r3, #0]
	graph_var -> yData[graph_var -> count] = yData;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	891b      	ldrh	r3, [r3, #8]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
	graph_var -> count += 1;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	891b      	ldrh	r3, [r3, #8]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	811a      	strh	r2, [r3, #8]
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <_Graph_Pop>:

void _Graph_Pop(graph_t * graph_var, float * xData, float * yData){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	if(graph_var -> count > 0){
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	891b      	ldrh	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d03d      	beq.n	8005018 <_Graph_Pop+0x90>
		if(xData != NULL){
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <_Graph_Pop+0x32>
			*xData = graph_var -> xData[graph_var -> count - 1];
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	891b      	ldrh	r3, [r3, #8]
 8004faa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	601a      	str	r2, [r3, #0]
		}
		if(yData != NULL){
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <_Graph_Pop+0x50>
			*yData = graph_var -> yData[graph_var -> count - 1];
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	891b      	ldrh	r3, [r3, #8]
 8004fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	601a      	str	r2, [r3, #0]
		}
		graph_var -> xData = realloc(graph_var -> xData, (graph_var -> count - 1) * sizeof(float));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	891b      	ldrh	r3, [r3, #8]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f003 fa32 	bl	8008450 <realloc>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
		graph_var -> yData = realloc(graph_var -> yData, (graph_var -> count - 1) * sizeof(float));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	891b      	ldrh	r3, [r3, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f003 fa25 	bl	8008450 <realloc>
 8005006:	4602      	mov	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	605a      	str	r2, [r3, #4]
		graph_var -> count -= 1;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	891b      	ldrh	r3, [r3, #8]
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	811a      	strh	r2, [r3, #8]
	}
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_Graph_ChangeDensity>:

static void _Graph_ChangeDensity(struct _graphType * graph_var, float xDen, float yDen){
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	ed87 0a02 	vstr	s0, [r7, #8]
 800502c:	edc7 0a01 	vstr	s1, [r7, #4]
	graph_var -> xDensity = xDen;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	60da      	str	r2, [r3, #12]
	graph_var -> yDensity = yDen;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_Graph_ChangeAxis>:

static void _Graph_ChangeAxis(struct _graphType * graph_var, uint8_t xAxisPos, uint8_t yAxisPos){
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
 8005054:	4613      	mov	r3, r2
 8005056:	70bb      	strb	r3, [r7, #2]
	graph_var -> xAxisPos = xAxisPos;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	729a      	strb	r2, [r3, #10]
	graph_var -> yAxisPos = yAxisPos;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	78ba      	ldrb	r2, [r7, #2]
 8005062:	72da      	strb	r2, [r3, #11]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <_Graph_Init>:


graph_t * _Graph_Init(float * xData, float * yData, uint16_t count, uint8_t xAxisPos, uint8_t yAxisPos, float xDen, float yDen){
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6178      	str	r0, [r7, #20]
 8005078:	6139      	str	r1, [r7, #16]
 800507a:	4611      	mov	r1, r2
 800507c:	461a      	mov	r2, r3
 800507e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005082:	edc7 0a01 	vstr	s1, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	81fb      	strh	r3, [r7, #14]
 800508a:	4613      	mov	r3, r2
 800508c:	737b      	strb	r3, [r7, #13]
	//배열을 받는 경우에는 malloc로 굳이 동적할당 할 필요는 없다. 하지만 멤버변수 정도는 동적 할당을 한다.
	graph_t * graph_var = (graph_t *)malloc(sizeof(graph_t));
 800508e:	2028      	movs	r0, #40	; 0x28
 8005090:	f002 fc1c 	bl	80078cc <malloc>
 8005094:	4603      	mov	r3, r0
 8005096:	61bb      	str	r3, [r7, #24]
	graph_var -> xData = (float *) malloc(sizeof(float) * count);
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4618      	mov	r0, r3
 800509e:	f002 fc15 	bl	80078cc <malloc>
 80050a2:	4603      	mov	r3, r0
 80050a4:	461a      	mov	r2, r3
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	601a      	str	r2, [r3, #0]
	graph_var -> yData = (float *) malloc(sizeof(float) * count);
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f002 fc0c 	bl	80078cc <malloc>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	605a      	str	r2, [r3, #4]
	for(uint16_t i = 0; i < count; i++){
 80050bc:	2300      	movs	r3, #0
 80050be:	83fb      	strh	r3, [r7, #30]
 80050c0:	e018      	b.n	80050f4 <_Graph_Init+0x84>
		graph_var -> xData[i] = xData[i];
 80050c2:	8bfb      	ldrh	r3, [r7, #30]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	441a      	add	r2, r3
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	8bfb      	ldrh	r3, [r7, #30]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	601a      	str	r2, [r3, #0]
		graph_var -> yData[i] = yData[i];
 80050d8:	8bfb      	ldrh	r3, [r7, #30]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	441a      	add	r2, r3
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	8bfb      	ldrh	r3, [r7, #30]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < count; i++){
 80050ee:	8bfb      	ldrh	r3, [r7, #30]
 80050f0:	3301      	adds	r3, #1
 80050f2:	83fb      	strh	r3, [r7, #30]
 80050f4:	8bfa      	ldrh	r2, [r7, #30]
 80050f6:	89fb      	ldrh	r3, [r7, #14]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3e2      	bcc.n	80050c2 <_Graph_Init+0x52>
	}
	graph_var -> count = count;
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	89fa      	ldrh	r2, [r7, #14]
 8005100:	811a      	strh	r2, [r3, #8]
	graph_var -> xAxisPos = xAxisPos;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	7b7a      	ldrb	r2, [r7, #13]
 8005106:	729a      	strb	r2, [r3, #10]
	graph_var -> yAxisPos = yAxisPos;
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800510e:	72da      	strb	r2, [r3, #11]
	graph_var -> xDensity = xDen;
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	60da      	str	r2, [r3, #12]
	graph_var -> yDensity = yDen;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]
	graph_var -> Print = _Graph_Print;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <_Graph_Init+0xd4>)
 8005120:	615a      	str	r2, [r3, #20]
	graph_var -> Add = _Graph_Add;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <_Graph_Init+0xd8>)
 8005126:	619a      	str	r2, [r3, #24]
	graph_var -> Pop = _Graph_Pop;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <_Graph_Init+0xdc>)
 800512c:	61da      	str	r2, [r3, #28]
	graph_var -> ChangeDensity = _Graph_ChangeDensity;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	4a07      	ldr	r2, [pc, #28]	; (8005150 <_Graph_Init+0xe0>)
 8005132:	621a      	str	r2, [r3, #32]
	graph_var -> ChangeAxis = _Graph_ChangeAxis;
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4a07      	ldr	r2, [pc, #28]	; (8005154 <_Graph_Init+0xe4>)
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

	return graph_var;
 800513a:	69bb      	ldr	r3, [r7, #24]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08004d25 	.word	0x08004d25
 8005148:	08004f11 	.word	0x08004f11
 800514c:	08004f89 	.word	0x08004f89
 8005150:	08005021 	.word	0x08005021
 8005154:	08005049 	.word	0x08005049

08005158 <Graph_UI>:
	return _Graph_Init(xData, yData, number + 1, xAxisPos, yAxisPos, xDen, yDen);
}

//Graph_UI로 데이터를 조작하면 데이터 값이 바뀝니다. 만약 바뀌질 않는다면 xData, yData 배열을 복제하시기 바랍니다.
//일반적으로 이 UI는 온도 설정을 위한 목적으로 만들어졌습니다. 따라서 이걸로 설정하면 설정값이 바뀌니 유의하시기 바랍니다.
void Graph_UI(graph_t * gr){
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af02      	add	r7, sp, #8
 800515e:	6078      	str	r0, [r7, #4]
	uint16_t idx = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	81fb      	strh	r3, [r7, #14]
	OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005164:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2335      	movs	r3, #53	; 0x35
 800516c:	225f      	movs	r2, #95	; 0x5f
 800516e:	2135      	movs	r1, #53	; 0x35
 8005170:	2000      	movs	r0, #0
 8005172:	f000 ffe1 	bl	8006138 <OLED_Line>
	gr -> Print(gr, 0x0000FF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	21ff      	movs	r1, #255	; 0xff
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
	_Graph_PrintPoint(gr, idx, 0xFF8800);
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	4aa9      	ldr	r2, [pc, #676]	; (8005428 <Graph_UI+0x2d0>)
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fe55 	bl	8004e36 <_Graph_PrintPoint>
	OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	89fb      	ldrh	r3, [r7, #14]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	edd3 7a00 	vldr	s15, [r3]
 800519a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	edd3 7a00 	vldr	s15, [r3]
 80051ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051b0:	ee17 2a90 	vmov	r2, s15
 80051b4:	ee17 1a10 	vmov	r1, s14
 80051b8:	489c      	ldr	r0, [pc, #624]	; (800542c <Graph_UI+0x2d4>)
 80051ba:	f000 fc0b 	bl	80059d4 <OLED_Printf>
	for(;;){
		uint16_t sw = Switch_Read();
 80051be:	f001 f8e9 	bl	8006394 <Switch_Read>
 80051c2:	4603      	mov	r3, r0
 80051c4:	81bb      	strh	r3, [r7, #12]
		if((sw == SW_RIGHT || sw == SW_RIGHT_LONG) && idx < gr->count - 1){
 80051c6:	89bb      	ldrh	r3, [r7, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d002      	beq.n	80051d2 <Graph_UI+0x7a>
 80051cc:	89bb      	ldrh	r3, [r7, #12]
 80051ce:	2b21      	cmp	r3, #33	; 0x21
 80051d0:	d138      	bne.n	8005244 <Graph_UI+0xec>
 80051d2:	89fa      	ldrh	r2, [r7, #14]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	891b      	ldrh	r3, [r3, #8]
 80051d8:	3b01      	subs	r3, #1
 80051da:	429a      	cmp	r2, r3
 80051dc:	da32      	bge.n	8005244 <Graph_UI+0xec>
			idx ++;
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	3301      	adds	r3, #1
 80051e2:	81fb      	strh	r3, [r7, #14]
			OLED_Clear();
 80051e4:	f000 f998 	bl	8005518 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 80051e8:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	2335      	movs	r3, #53	; 0x35
 80051f0:	225f      	movs	r2, #95	; 0x5f
 80051f2:	2135      	movs	r1, #53	; 0x35
 80051f4:	2000      	movs	r0, #0
 80051f6:	f000 ff9f 	bl	8006138 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	21ff      	movs	r1, #255	; 0xff
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 8005204:	89fb      	ldrh	r3, [r7, #14]
 8005206:	4a88      	ldr	r2, [pc, #544]	; (8005428 <Graph_UI+0x2d0>)
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fe13 	bl	8004e36 <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	edd3 7a00 	vldr	s15, [r3]
 800521e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	89fb      	ldrh	r3, [r7, #14]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005234:	ee17 2a90 	vmov	r2, s15
 8005238:	ee17 1a10 	vmov	r1, s14
 800523c:	487b      	ldr	r0, [pc, #492]	; (800542c <Graph_UI+0x2d4>)
 800523e:	f000 fbc9 	bl	80059d4 <OLED_Printf>
 8005242:	e0ea      	b.n	800541a <Graph_UI+0x2c2>
		}
		else if((sw == SW_LEFT || sw == SW_LEFT_LONG) && idx > 0){
 8005244:	89bb      	ldrh	r3, [r7, #12]
 8005246:	2b10      	cmp	r3, #16
 8005248:	d002      	beq.n	8005250 <Graph_UI+0xf8>
 800524a:	89bb      	ldrh	r3, [r7, #12]
 800524c:	2b30      	cmp	r3, #48	; 0x30
 800524e:	d135      	bne.n	80052bc <Graph_UI+0x164>
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d032      	beq.n	80052bc <Graph_UI+0x164>
			idx --;
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	3b01      	subs	r3, #1
 800525a:	81fb      	strh	r3, [r7, #14]
			OLED_Clear();
 800525c:	f000 f95c 	bl	8005518 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 8005260:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2335      	movs	r3, #53	; 0x35
 8005268:	225f      	movs	r2, #95	; 0x5f
 800526a:	2135      	movs	r1, #53	; 0x35
 800526c:	2000      	movs	r0, #0
 800526e:	f000 ff63 	bl	8006138 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	21ff      	movs	r1, #255	; 0xff
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 800527c:	89fb      	ldrh	r3, [r7, #14]
 800527e:	4a6a      	ldr	r2, [pc, #424]	; (8005428 <Graph_UI+0x2d0>)
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fdd7 	bl	8004e36 <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	edd3 7a00 	vldr	s15, [r3]
 8005296:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	89fb      	ldrh	r3, [r7, #14]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	edd3 7a00 	vldr	s15, [r3]
 80052a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ac:	ee17 2a90 	vmov	r2, s15
 80052b0:	ee17 1a10 	vmov	r1, s14
 80052b4:	485d      	ldr	r0, [pc, #372]	; (800542c <Graph_UI+0x2d4>)
 80052b6:	f000 fb8d 	bl	80059d4 <OLED_Printf>
 80052ba:	e0ae      	b.n	800541a <Graph_UI+0x2c2>
		}
		else if((sw == SW_TOP || sw == SW_TOP_LONG) && gr->yData[idx] < 305.0f){
 80052bc:	89bb      	ldrh	r3, [r7, #12]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d002      	beq.n	80052c8 <Graph_UI+0x170>
 80052c2:	89bb      	ldrh	r3, [r7, #12]
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	d14f      	bne.n	8005368 <Graph_UI+0x210>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	89fb      	ldrh	r3, [r7, #14]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	edd3 7a00 	vldr	s15, [r3]
 80052d6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005430 <Graph_UI+0x2d8>
 80052da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e2:	d541      	bpl.n	8005368 <Graph_UI+0x210>
			gr->yData[idx] += 5.0f;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	89fb      	ldrh	r3, [r7, #14]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	89fb      	ldrh	r3, [r7, #14]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005300:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005304:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 8005308:	f000 f906 	bl	8005518 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 800530c:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2335      	movs	r3, #53	; 0x35
 8005314:	225f      	movs	r2, #95	; 0x5f
 8005316:	2135      	movs	r1, #53	; 0x35
 8005318:	2000      	movs	r0, #0
 800531a:	f000 ff0d 	bl	8006138 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	21ff      	movs	r1, #255	; 0xff
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 8005328:	89fb      	ldrh	r3, [r7, #14]
 800532a:	4a3f      	ldr	r2, [pc, #252]	; (8005428 <Graph_UI+0x2d0>)
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fd81 	bl	8004e36 <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	edd3 7a00 	vldr	s15, [r3]
 8005342:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	89fb      	ldrh	r3, [r7, #14]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	edd3 7a00 	vldr	s15, [r3]
 8005354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005358:	ee17 2a90 	vmov	r2, s15
 800535c:	ee17 1a10 	vmov	r1, s14
 8005360:	4832      	ldr	r0, [pc, #200]	; (800542c <Graph_UI+0x2d4>)
 8005362:	f000 fb37 	bl	80059d4 <OLED_Printf>
 8005366:	e058      	b.n	800541a <Graph_UI+0x2c2>
		}
		else if((sw == SW_BOTTOM || sw == SW_BOTTOM_LONG) && gr->yData[idx] > 5.0f){
 8005368:	89bb      	ldrh	r3, [r7, #12]
 800536a:	2b08      	cmp	r3, #8
 800536c:	d002      	beq.n	8005374 <Graph_UI+0x21c>
 800536e:	89bb      	ldrh	r3, [r7, #12]
 8005370:	2b28      	cmp	r3, #40	; 0x28
 8005372:	d14f      	bne.n	8005414 <Graph_UI+0x2bc>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	89fb      	ldrh	r3, [r7, #14]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	edd3 7a00 	vldr	s15, [r3]
 8005382:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538e:	dd41      	ble.n	8005414 <Graph_UI+0x2bc>
			gr->yData[idx] -= 5.0f;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	89fb      	ldrh	r3, [r7, #14]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80053ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053b0:	edc3 7a00 	vstr	s15, [r3]
			OLED_Clear();
 80053b4:	f000 f8b0 	bl	8005518 <OLED_Clear>
			OLED_Line(0, 53, 95, 53, 0xFF00FF);
 80053b8:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2335      	movs	r3, #53	; 0x35
 80053c0:	225f      	movs	r2, #95	; 0x5f
 80053c2:	2135      	movs	r1, #53	; 0x35
 80053c4:	2000      	movs	r0, #0
 80053c6:	f000 feb7 	bl	8006138 <OLED_Line>
			gr -> Print(gr, 0x0000FF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	21ff      	movs	r1, #255	; 0xff
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
			_Graph_PrintPoint(gr, idx, 0xFF8800);
 80053d4:	89fb      	ldrh	r3, [r7, #14]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <Graph_UI+0x2d0>)
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fd2b 	bl	8004e36 <_Graph_PrintPoint>
			OLED_Printf("/s/6/rx:%d, /yy:%d", (int)gr->xData[idx], (int)gr->yData[idx]);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	edd3 7a00 	vldr	s15, [r3]
 80053ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	89fb      	ldrh	r3, [r7, #14]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	edd3 7a00 	vldr	s15, [r3]
 8005400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005404:	ee17 2a90 	vmov	r2, s15
 8005408:	ee17 1a10 	vmov	r1, s14
 800540c:	4807      	ldr	r0, [pc, #28]	; (800542c <Graph_UI+0x2d4>)
 800540e:	f000 fae1 	bl	80059d4 <OLED_Printf>
 8005412:	e002      	b.n	800541a <Graph_UI+0x2c2>
		}
		else if(sw == SW_ENTER){
 8005414:	89bb      	ldrh	r3, [r7, #12]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d000      	beq.n	800541c <Graph_UI+0x2c4>
	for(;;){
 800541a:	e6d0      	b.n	80051be <Graph_UI+0x66>
			break;
 800541c:	bf00      	nop
		}
	}


}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	00ff8800 	.word	0x00ff8800
 800542c:	0800a778 	.word	0x0800a778
 8005430:	43988000 	.word	0x43988000

08005434 <OLED_CS_Set>:
		0x7C, 0x7C, 0x7C, 0x7C, 0x7C, //Full Square(/Q)
		0x7C, 0x44, 0x44, 0x44, 0x7C, //Empty Square(/q)
		0x38, 0x7C, 0x7C, 0x7C, 0x38, //Full Circle(/*)
};

static void inline OLED_CS_Set(uint8_t state){
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, state);
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	461a      	mov	r2, r3
 8005442:	2104      	movs	r1, #4
 8005444:	4803      	ldr	r0, [pc, #12]	; (8005454 <OLED_CS_Set+0x20>)
 8005446:	f7fc ff25 	bl	8002294 <HAL_GPIO_WritePin>
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40020400 	.word	0x40020400

08005458 <OLED_DC_Set>:

static void inline OLED_DC_Set(uint8_t state){
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, state);
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	461a      	mov	r2, r3
 8005466:	2110      	movs	r1, #16
 8005468:	4803      	ldr	r0, [pc, #12]	; (8005478 <OLED_DC_Set+0x20>)
 800546a:	f7fc ff13 	bl	8002294 <HAL_GPIO_WritePin>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40020000 	.word	0x40020000

0800547c <OLED_RS_Set>:

static void inline OLED_RS_Set(uint8_t state){
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_RS_GPIO_Port, OLED_RS_Pin, state);
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	461a      	mov	r2, r3
 800548a:	2102      	movs	r1, #2
 800548c:	4803      	ldr	r0, [pc, #12]	; (800549c <OLED_RS_Set+0x20>)
 800548e:	f7fc ff01 	bl	8002294 <HAL_GPIO_WritePin>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40020000 	.word	0x40020000

080054a0 <OLED_Send>:

static void inline OLED_Send(uint8_t data){
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80054aa:	b672      	cpsid	i
}
 80054ac:	bf00      	nop
	__disable_irq();//인터럽트를 중단하여 데이터 전송을 원활하게 한다.
	OLED_CS_Set(0);//OLED에 데이터를 전송하기 위해 CS를 Low신호로 만들어야 한다.
 80054ae:	2000      	movs	r0, #0
 80054b0:	f7ff ffc0 	bl	8005434 <OLED_CS_Set>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 80054b4:	1df9      	adds	r1, r7, #7
 80054b6:	2301      	movs	r3, #1
 80054b8:	2201      	movs	r2, #1
 80054ba:	4806      	ldr	r0, [pc, #24]	; (80054d4 <OLED_Send+0x34>)
 80054bc:	f7fd fbd5 	bl	8002c6a <HAL_SPI_Transmit>
	OLED_CS_Set(1);//데이터 전송이 끝나면 CS를 High로 만들어 신호가 들어와도 무시하도록 해야 한다.
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7ff ffb7 	bl	8005434 <OLED_CS_Set>
  __ASM volatile ("cpsie i" : : : "memory");
 80054c6:	b662      	cpsie	i
}
 80054c8:	bf00      	nop
	__enable_irq();
}
 80054ca:	bf00      	nop
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000504 	.word	0x20000504

080054d8 <OLED_WriteCommand>:

static void inline OLED_WriteCommand(uint8_t data){
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(0);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7ff ffb8 	bl	8005458 <OLED_DC_Set>
	OLED_Send(data);
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ffd8 	bl	80054a0 <OLED_Send>
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <OLED_WriteData>:

static void inline OLED_WriteData(uint8_t data){
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(1);
 8005502:	2001      	movs	r0, #1
 8005504:	f7ff ffa8 	bl	8005458 <OLED_DC_Set>
	OLED_Send(data);
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff ffc8 	bl	80054a0 <OLED_Send>
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <OLED_Clear>:

void OLED_Clear(){
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	OLED_row = 1;
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <OLED_Clear+0x50>)
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8005524:	4b11      	ldr	r3, [pc, #68]	; (800556c <OLED_Clear+0x54>)
 8005526:	2201      	movs	r2, #1
 8005528:	701a      	strb	r2, [r3, #0]
	OLED_charColor = 0xFFFFFF;
 800552a:	4b11      	ldr	r3, [pc, #68]	; (8005570 <OLED_Clear+0x58>)
 800552c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005530:	601a      	str	r2, [r3, #0]
	OLED_charPoint = 2;
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <OLED_Clear+0x5c>)
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
	OLED_AddrWindow(0, 0, 96, 64);
 8005538:	2340      	movs	r3, #64	; 0x40
 800553a:	2260      	movs	r2, #96	; 0x60
 800553c:	2100      	movs	r1, #0
 800553e:	2000      	movs	r0, #0
 8005540:	f000 f8a1 	bl	8005686 <OLED_AddrWindow>
	for(int i=0; i<12288; i++){
 8005544:	2300      	movs	r3, #0
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	e005      	b.n	8005556 <OLED_Clear+0x3e>
		OLED_WriteData(0);
 800554a:	2000      	movs	r0, #0
 800554c:	f7ff ffd4 	bl	80054f8 <OLED_WriteData>
	for(int i=0; i<12288; i++){
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3301      	adds	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800555c:	dbf5      	blt.n	800554a <OLED_Clear+0x32>
	}
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000009 	.word	0x20000009
 800556c:	2000000a 	.word	0x2000000a
 8005570:	2000000c 	.word	0x2000000c
 8005574:	20000010 	.word	0x20000010

08005578 <OLED_Begin>:

void OLED_Begin(){
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
	//15ms 이상 대기
	HAL_Delay(100);
 800557c:	2064      	movs	r0, #100	; 0x64
 800557e:	f7fc fbb7 	bl	8001cf0 <HAL_Delay>

	//초기 작업(리셋)
	OLED_CS_Set(1);
 8005582:	2001      	movs	r0, #1
 8005584:	f7ff ff56 	bl	8005434 <OLED_CS_Set>
	OLED_RS_Set(0);
 8005588:	2000      	movs	r0, #0
 800558a:	f7ff ff77 	bl	800547c <OLED_RS_Set>
	HAL_Delay(3);
 800558e:	2003      	movs	r0, #3
 8005590:	f7fc fbae 	bl	8001cf0 <HAL_Delay>
	OLED_RS_Set(1);
 8005594:	2001      	movs	r0, #1
 8005596:	f7ff ff71 	bl	800547c <OLED_RS_Set>

	//기본 설정 명령어
	OLED_WriteCommand(0xAE);
 800559a:	20ae      	movs	r0, #174	; 0xae
 800559c:	f7ff ff9c 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xA0);
 80055a0:	20a0      	movs	r0, #160	; 0xa0
 80055a2:	f7ff ff99 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x72);
 80055a6:	2072      	movs	r0, #114	; 0x72
 80055a8:	f7ff ff96 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xA1);
 80055ac:	20a1      	movs	r0, #161	; 0xa1
 80055ae:	f7ff ff93 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7ff ff90 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xA2);
 80055b8:	20a2      	movs	r0, #162	; 0xa2
 80055ba:	f7ff ff8d 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80055be:	2000      	movs	r0, #0
 80055c0:	f7ff ff8a 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4);
 80055c4:	20a4      	movs	r0, #164	; 0xa4
 80055c6:	f7ff ff87 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xA8);
 80055ca:	20a8      	movs	r0, #168	; 0xa8
 80055cc:	f7ff ff84 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80055d0:	203f      	movs	r0, #63	; 0x3f
 80055d2:	f7ff ff81 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xAD);
 80055d6:	20ad      	movs	r0, #173	; 0xad
 80055d8:	f7ff ff7e 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x8E);
 80055dc:	208e      	movs	r0, #142	; 0x8e
 80055de:	f7ff ff7b 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xB0);
 80055e2:	20b0      	movs	r0, #176	; 0xb0
 80055e4:	f7ff ff78 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x0B);
 80055e8:	200b      	movs	r0, #11
 80055ea:	f7ff ff75 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xB1);
 80055ee:	20b1      	movs	r0, #177	; 0xb1
 80055f0:	f7ff ff72 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x31);
 80055f4:	2031      	movs	r0, #49	; 0x31
 80055f6:	f7ff ff6f 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xB3);
 80055fa:	20b3      	movs	r0, #179	; 0xb3
 80055fc:	f7ff ff6c 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xF0);
 8005600:	20f0      	movs	r0, #240	; 0xf0
 8005602:	f7ff ff69 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x8A);
 8005606:	208a      	movs	r0, #138	; 0x8a
 8005608:	f7ff ff66 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 800560c:	2064      	movs	r0, #100	; 0x64
 800560e:	f7ff ff63 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x8B);
 8005612:	208b      	movs	r0, #139	; 0x8b
 8005614:	f7ff ff60 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x78);
 8005618:	2078      	movs	r0, #120	; 0x78
 800561a:	f7ff ff5d 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x8C);
 800561e:	208c      	movs	r0, #140	; 0x8c
 8005620:	f7ff ff5a 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 8005624:	2064      	movs	r0, #100	; 0x64
 8005626:	f7ff ff57 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xBB);
 800562a:	20bb      	movs	r0, #187	; 0xbb
 800562c:	f7ff ff54 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x3A);
 8005630:	203a      	movs	r0, #58	; 0x3a
 8005632:	f7ff ff51 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0xBE);
 8005636:	20be      	movs	r0, #190	; 0xbe
 8005638:	f7ff ff4e 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x3E);
 800563c:	203e      	movs	r0, #62	; 0x3e
 800563e:	f7ff ff4b 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x87);
 8005642:	2087      	movs	r0, #135	; 0x87
 8005644:	f7ff ff48 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x06);
 8005648:	2006      	movs	r0, #6
 800564a:	f7ff ff45 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x81);
 800564e:	2081      	movs	r0, #129	; 0x81
 8005650:	f7ff ff42 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x91);
 8005654:	2091      	movs	r0, #145	; 0x91
 8005656:	f7ff ff3f 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x82);
 800565a:	2082      	movs	r0, #130	; 0x82
 800565c:	f7ff ff3c 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x50);
 8005660:	2050      	movs	r0, #80	; 0x50
 8005662:	f7ff ff39 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x83);
 8005666:	2083      	movs	r0, #131	; 0x83
 8005668:	f7ff ff36 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x7D);
 800566c:	207d      	movs	r0, #125	; 0x7d
 800566e:	f7ff ff33 	bl	80054d8 <OLED_WriteCommand>

	OLED_Clear();
 8005672:	f7ff ff51 	bl	8005518 <OLED_Clear>
	OLED_WriteCommand(0xAF);
 8005676:	20af      	movs	r0, #175	; 0xaf
 8005678:	f7ff ff2e 	bl	80054d8 <OLED_WriteCommand>
	HAL_Delay(100);
 800567c:	2064      	movs	r0, #100	; 0x64
 800567e:	f7fc fb37 	bl	8001cf0 <HAL_Delay>

}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}

08005686 <OLED_AddrWindow>:

void OLED_AddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 8005686:	b590      	push	{r4, r7, lr}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	4604      	mov	r4, r0
 800568e:	4608      	mov	r0, r1
 8005690:	4611      	mov	r1, r2
 8005692:	461a      	mov	r2, r3
 8005694:	4623      	mov	r3, r4
 8005696:	71fb      	strb	r3, [r7, #7]
 8005698:	4603      	mov	r3, r0
 800569a:	71bb      	strb	r3, [r7, #6]
 800569c:	460b      	mov	r3, r1
 800569e:	717b      	strb	r3, [r7, #5]
 80056a0:	4613      	mov	r3, r2
 80056a2:	713b      	strb	r3, [r7, #4]
	uint8_t x1 = x;
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	73fb      	strb	r3, [r7, #15]
	uint8_t y1 = y;
 80056a8:	79bb      	ldrb	r3, [r7, #6]
 80056aa:	73bb      	strb	r3, [r7, #14]
	if(x1 > 95){
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b5f      	cmp	r3, #95	; 0x5f
 80056b0:	d901      	bls.n	80056b6 <OLED_AddrWindow+0x30>
		x1 = 95;
 80056b2:	235f      	movs	r3, #95	; 0x5f
 80056b4:	73fb      	strb	r3, [r7, #15]
	}
	if(y1 > 63){
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	2b3f      	cmp	r3, #63	; 0x3f
 80056ba:	d901      	bls.n	80056c0 <OLED_AddrWindow+0x3a>
		y1 = 63;
 80056bc:	233f      	movs	r3, #63	; 0x3f
 80056be:	73bb      	strb	r3, [r7, #14]
	}

	uint8_t x2 = x + w - 1;
 80056c0:	79fa      	ldrb	r2, [r7, #7]
 80056c2:	797b      	ldrb	r3, [r7, #5]
 80056c4:	4413      	add	r3, r2
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	737b      	strb	r3, [r7, #13]
	uint8_t y2 = y + h - 1;
 80056cc:	79ba      	ldrb	r2, [r7, #6]
 80056ce:	793b      	ldrb	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	733b      	strb	r3, [r7, #12]
	if(x2>95)
 80056d8:	7b7b      	ldrb	r3, [r7, #13]
 80056da:	2b5f      	cmp	r3, #95	; 0x5f
 80056dc:	d901      	bls.n	80056e2 <OLED_AddrWindow+0x5c>
		x2 = 95;
 80056de:	235f      	movs	r3, #95	; 0x5f
 80056e0:	737b      	strb	r3, [r7, #13]
	if(y2>63)
 80056e2:	7b3b      	ldrb	r3, [r7, #12]
 80056e4:	2b3f      	cmp	r3, #63	; 0x3f
 80056e6:	d901      	bls.n	80056ec <OLED_AddrWindow+0x66>
		y2 = 63;
 80056e8:	233f      	movs	r3, #63	; 0x3f
 80056ea:	733b      	strb	r3, [r7, #12]

	if(x1>x2){
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	7b7b      	ldrb	r3, [r7, #13]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d905      	bls.n	8005700 <OLED_AddrWindow+0x7a>
		uint8_t temp = x2;
 80056f4:	7b7b      	ldrb	r3, [r7, #13]
 80056f6:	72fb      	strb	r3, [r7, #11]
		x2=x1;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	737b      	strb	r3, [r7, #13]
		x1=temp;
 80056fc:	7afb      	ldrb	r3, [r7, #11]
 80056fe:	73fb      	strb	r3, [r7, #15]
	}
	if(y1>y2){
 8005700:	7bba      	ldrb	r2, [r7, #14]
 8005702:	7b3b      	ldrb	r3, [r7, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d905      	bls.n	8005714 <OLED_AddrWindow+0x8e>
		uint8_t temp = y2;
 8005708:	7b3b      	ldrb	r3, [r7, #12]
 800570a:	72bb      	strb	r3, [r7, #10]
		y2=y1;
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	733b      	strb	r3, [r7, #12]
		y1=temp;
 8005710:	7abb      	ldrb	r3, [r7, #10]
 8005712:	73bb      	strb	r3, [r7, #14]
	}

	OLED_WriteCommand(0x15);
 8005714:	2015      	movs	r0, #21
 8005716:	f7ff fedf 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(x1);
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fedb 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(x2);
 8005722:	7b7b      	ldrb	r3, [r7, #13]
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fed7 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(0x75);
 800572a:	2075      	movs	r0, #117	; 0x75
 800572c:	f7ff fed4 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(y1);
 8005730:	7bbb      	ldrb	r3, [r7, #14]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fed0 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(y2);
 8005738:	7b3b      	ldrb	r3, [r7, #12]
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fecc 	bl	80054d8 <OLED_WriteCommand>
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bd90      	pop	{r4, r7, pc}

08005748 <OLED_Rectangle>:



void OLED_Rectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int32_t color){
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	4611      	mov	r1, r2
 8005754:	461a      	mov	r2, r3
 8005756:	4623      	mov	r3, r4
 8005758:	71fb      	strb	r3, [r7, #7]
 800575a:	4603      	mov	r3, r0
 800575c:	71bb      	strb	r3, [r7, #6]
 800575e:	460b      	mov	r3, r1
 8005760:	717b      	strb	r3, [r7, #5]
 8005762:	4613      	mov	r3, r2
 8005764:	713b      	strb	r3, [r7, #4]
	OLED_AddrWindow(x, y, w, h);
 8005766:	793b      	ldrb	r3, [r7, #4]
 8005768:	797a      	ldrb	r2, [r7, #5]
 800576a:	79b9      	ldrb	r1, [r7, #6]
 800576c:	79f8      	ldrb	r0, [r7, #7]
 800576e:	f7ff ff8a 	bl	8005686 <OLED_AddrWindow>
	uint32_t red = (color >> 19) & 0x1F;
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	14db      	asrs	r3, r3, #19
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	61bb      	str	r3, [r7, #24]
	uint32_t gre = (color >> 10) & 0x3F;
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	129b      	asrs	r3, r3, #10
 8005780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005784:	617b      	str	r3, [r7, #20]
	uint32_t blu = (color >> 3) & 0x1F;
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	10db      	asrs	r3, r3, #3
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	613b      	str	r3, [r7, #16]
	uint32_t data = (red << 11) | (gre << 5) | blu;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	02da      	lsls	r2, r3, #11
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	015b      	lsls	r3, r3, #5
 8005798:	4313      	orrs	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
	uint16_t size = (uint32_t)w * (uint32_t)h;
 80057a0:	797b      	ldrb	r3, [r7, #5]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	793b      	ldrb	r3, [r7, #4]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	fb12 f303 	smulbb	r3, r2, r3
 80057ac:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<size; i++){
 80057ae:	2300      	movs	r3, #0
 80057b0:	83fb      	strh	r3, [r7, #30]
 80057b2:	e00d      	b.n	80057d0 <OLED_Rectangle+0x88>
		OLED_WriteData(data >> 8);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fe9c 	bl	80054f8 <OLED_WriteData>
		OLED_WriteData(data & 0xFF);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fe97 	bl	80054f8 <OLED_WriteData>
	for(uint16_t i=0; i<size; i++){
 80057ca:	8bfb      	ldrh	r3, [r7, #30]
 80057cc:	3301      	adds	r3, #1
 80057ce:	83fb      	strh	r3, [r7, #30]
 80057d0:	8bfa      	ldrh	r2, [r7, #30]
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3ed      	bcc.n	80057b4 <OLED_Rectangle+0x6c>
	}
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3724      	adds	r7, #36	; 0x24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}

080057e2 <OLED_Dot>:


void OLED_Dot(uint8_t x,uint8_t y,uint8_t size, uint32_t color){
 80057e2:	b590      	push	{r4, r7, lr}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af02      	add	r7, sp, #8
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	460b      	mov	r3, r1
 80057f0:	71bb      	strb	r3, [r7, #6]
 80057f2:	4613      	mov	r3, r2
 80057f4:	717b      	strb	r3, [r7, #5]
	OLED_Rectangle(x, y, size, size, color);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	797c      	ldrb	r4, [r7, #5]
 80057fa:	797a      	ldrb	r2, [r7, #5]
 80057fc:	79b9      	ldrb	r1, [r7, #6]
 80057fe:	79f8      	ldrb	r0, [r7, #7]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	4623      	mov	r3, r4
 8005804:	f7ff ffa0 	bl	8005748 <OLED_Rectangle>
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bd90      	pop	{r4, r7, pc}

08005810 <OLED_WriteChar>:


void OLED_WriteChar(int16_t ch){
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	80fb      	strh	r3, [r7, #6]
	if(ch <= -1 && ch >= -3){
 800581a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da09      	bge.n	8005836 <OLED_WriteChar+0x26>
 8005822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005826:	f113 0f03 	cmn.w	r3, #3
 800582a:	db04      	blt.n	8005836 <OLED_WriteChar+0x26>
		ch = 131 + ch;
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	3383      	adds	r3, #131	; 0x83
 8005830:	b29b      	uxth	r3, r3
 8005832:	80fb      	strh	r3, [r7, #6]
 8005834:	e009      	b.n	800584a <OLED_WriteChar+0x3a>
	}
	else if(ch < 32 || ch >= 128){
 8005836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800583a:	2b1f      	cmp	r3, #31
 800583c:	dd03      	ble.n	8005846 <OLED_WriteChar+0x36>
 800583e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005842:	2b7f      	cmp	r3, #127	; 0x7f
 8005844:	dd01      	ble.n	800584a <OLED_WriteChar+0x3a>
		ch = 63;
 8005846:	233f      	movs	r3, #63	; 0x3f
 8005848:	80fb      	strh	r3, [r7, #6]
	}

	ch -= 32;
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	3b20      	subs	r3, #32
 800584e:	b29b      	uxth	r3, r3
 8005850:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<5; i++){
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	e03d      	b.n	80058d4 <OLED_WriteChar+0xc4>
		uint8_t byte = characters[ch * 5 + i];
 8005858:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	4413      	add	r3, r2
 8005866:	4a25      	ldr	r2, [pc, #148]	; (80058fc <OLED_WriteChar+0xec>)
 8005868:	5cd3      	ldrb	r3, [r2, r3]
 800586a:	737b      	strb	r3, [r7, #13]
		for(uint8_t j=0; j<8; j++){
 800586c:	2300      	movs	r3, #0
 800586e:	73bb      	strb	r3, [r7, #14]
 8005870:	e02a      	b.n	80058c8 <OLED_WriteChar+0xb8>
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 8005872:	4b23      	ldr	r3, [pc, #140]	; (8005900 <OLED_WriteChar+0xf0>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	7bfa      	ldrb	r2, [r7, #15]
 8005878:	fb12 f303 	smulbb	r3, r2, r3
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4b21      	ldr	r3, [pc, #132]	; (8005904 <OLED_WriteChar+0xf4>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4413      	add	r3, r2
 8005884:	b2d8      	uxtb	r0, r3
 8005886:	4b1e      	ldr	r3, [pc, #120]	; (8005900 <OLED_WriteChar+0xf0>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	7bba      	ldrb	r2, [r7, #14]
 800588c:	fb12 f303 	smulbb	r3, r2, r3
 8005890:	b2da      	uxtb	r2, r3
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <OLED_WriteChar+0xf8>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	4413      	add	r3, r2
 8005898:	b2d9      	uxtb	r1, r3
 800589a:	4b19      	ldr	r3, [pc, #100]	; (8005900 <OLED_WriteChar+0xf0>)
 800589c:	781c      	ldrb	r4, [r3, #0]
					((byte>>(7-j))&0x01) ? OLED_charColor : OLED_bgColor);
 800589e:	7b7a      	ldrb	r2, [r7, #13]
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	f1c3 0307 	rsb	r3, r3, #7
 80058a6:	fa42 f303 	asr.w	r3, r2, r3
 80058aa:	f003 0301 	and.w	r3, r3, #1
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <OLED_WriteChar+0xa8>
 80058b2:	4b16      	ldr	r3, [pc, #88]	; (800590c <OLED_WriteChar+0xfc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	e001      	b.n	80058bc <OLED_WriteChar+0xac>
 80058b8:	4b15      	ldr	r3, [pc, #84]	; (8005910 <OLED_WriteChar+0x100>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4622      	mov	r2, r4
 80058be:	f7ff ff90 	bl	80057e2 <OLED_Dot>
		for(uint8_t j=0; j<8; j++){
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	3301      	adds	r3, #1
 80058c6:	73bb      	strb	r3, [r7, #14]
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b07      	cmp	r3, #7
 80058cc:	d9d1      	bls.n	8005872 <OLED_WriteChar+0x62>
	for(uint8_t i=0; i<5; i++){
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	3301      	adds	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d9be      	bls.n	8005858 <OLED_WriteChar+0x48>
		}
	}
	OLED_col += 6 * OLED_charPoint;
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <OLED_WriteChar+0xf0>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	0052      	lsls	r2, r2, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <OLED_WriteChar+0xf4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	4b04      	ldr	r3, [pc, #16]	; (8005904 <OLED_WriteChar+0xf4>)
 80058f2:	701a      	strb	r2, [r3, #0]

}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	20000014 	.word	0x20000014
 8005900:	20000010 	.word	0x20000010
 8005904:	2000000a 	.word	0x2000000a
 8005908:	20000009 	.word	0x20000009
 800590c:	2000000c 	.word	0x2000000c
 8005910:	200004e8 	.word	0x200004e8

08005914 <str2hex>:


static int str2hex(char * str){
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	int result = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 8005920:	2300      	movs	r3, #0
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	e049      	b.n	80059ba <str2hex+0xa6>
		if(str[i] >= '0' && str[i] <= '9'){
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b2f      	cmp	r3, #47	; 0x2f
 8005930:	d911      	bls.n	8005956 <str2hex+0x42>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b39      	cmp	r3, #57	; 0x39
 800593c:	d80b      	bhi.n	8005956 <str2hex+0x42>
			result <<= 4;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
			result |= str[i] - '0';
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	3b30      	subs	r3, #48	; 0x30
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e02e      	b.n	80059b4 <str2hex+0xa0>
		}
		else if(str[i] >= 'A' && str[i] <= 'F'){
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4413      	add	r3, r2
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d911      	bls.n	8005986 <str2hex+0x72>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b46      	cmp	r3, #70	; 0x46
 800596c:	d80b      	bhi.n	8005986 <str2hex+0x72>
			result <<= 4;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'A' + 10;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	3b37      	subs	r3, #55	; 0x37
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e016      	b.n	80059b4 <str2hex+0xa0>
		}
		else if(str[i] >= 'a' && str[i] <= 'f'){
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4413      	add	r3, r2
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b60      	cmp	r3, #96	; 0x60
 8005990:	d910      	bls.n	80059b4 <str2hex+0xa0>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b66      	cmp	r3, #102	; 0x66
 800599c:	d80a      	bhi.n	80059b4 <str2hex+0xa0>
			result <<= 4;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'a' + 10;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	3b57      	subs	r3, #87	; 0x57
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4413      	add	r3, r2
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1af      	bne.n	8005926 <str2hex+0x12>
		}
	}
	return result;
 80059c6:	68fb      	ldr	r3, [r7, #12]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <OLED_Printf>:

#define OLED
void OLED_Printf(const char * format, ...){
 80059d4:	b40f      	push	{r0, r1, r2, r3}
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b0c4      	sub	sp, #272	; 0x110
 80059da:	af00      	add	r7, sp, #0
	/*
	 * buffer를 많이 할당받거나 static으로 선언하면 좋겠지만, 보통 프로세스당 4GB의 메모리를 가지는 일반 컴퓨터와 다르게
	 * STM32F411의 경우 전체 메모리 공간이 오직 128kB의 저장용량만 가지므로 메모리 공간을 아껴 써야 한다.
	 */
	char buffer[256] = { 0 };
 80059dc:	f107 030c 	add.w	r3, r7, #12
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	3304      	adds	r3, #4
 80059e6:	22fc      	movs	r2, #252	; 0xfc
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 ff76 	bl	80078dc <memset>

	// 가변 인자를 받아서 buffer에 쓴다.
	va_list args;
	va_start(args, format);
 80059f0:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80059f4:	f107 0308 	add.w	r3, r7, #8
 80059f8:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 80059fa:	f107 0308 	add.w	r3, r7, #8
 80059fe:	f107 000c 	add.w	r0, r7, #12
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005a08:	f002 fd64 	bl	80084d4 <vsiprintf>
//#ifdef OLED
//	oled_row = 0;
//	oled_col = 0;
//#endif
	// 줄바꿈 기호인 /0, /1을 만나면 커서 위치를 설정해주는 부분.
	for (char *c = buffer; *c; c++) {
 8005a0c:	f107 030c 	add.w	r3, r7, #12
 8005a10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a14:	e37a      	b.n	800610c <OLED_Printf+0x738>
		if (*c == '/' && (*(c + 1) >= '0' && *(c + 1) <= '6')) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 8005a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b2f      	cmp	r3, #47	; 0x2f
 8005a1e:	d13c      	bne.n	8005a9a <OLED_Printf+0xc6>
 8005a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a24:	3301      	adds	r3, #1
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b2f      	cmp	r3, #47	; 0x2f
 8005a2a:	d936      	bls.n	8005a9a <OLED_Printf+0xc6>
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a30:	3301      	adds	r3, #1
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b36      	cmp	r3, #54	; 0x36
 8005a36:	d830      	bhi.n	8005a9a <OLED_Printf+0xc6>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 8005a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	3b30      	subs	r3, #48	; 0x30
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4bb8      	ldr	r3, [pc, #736]	; (8005d28 <OLED_Printf+0x354>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	fb12 f303 	smulbb	r3, r2, r3
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	00d2      	lsls	r2, r2, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4bb4      	ldr	r3, [pc, #720]	; (8005d2c <OLED_Printf+0x358>)
 8005a5c:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 8005a5e:	4bb3      	ldr	r3, [pc, #716]	; (8005d2c <OLED_Printf+0x358>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b3c      	cmp	r3, #60	; 0x3c
 8005a64:	d807      	bhi.n	8005a76 <OLED_Printf+0xa2>
 8005a66:	4bb1      	ldr	r3, [pc, #708]	; (8005d2c <OLED_Printf+0x358>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b35      	cmp	r3, #53	; 0x35
 8005a6c:	d90c      	bls.n	8005a88 <OLED_Printf+0xb4>
 8005a6e:	4bae      	ldr	r3, [pc, #696]	; (8005d28 <OLED_Printf+0x354>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d108      	bne.n	8005a88 <OLED_Printf+0xb4>
				OLED_row = 18 * OLED_charPoint;
 8005a76:	4bac      	ldr	r3, [pc, #688]	; (8005d28 <OLED_Printf+0x354>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	00d2      	lsls	r2, r2, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	4ba9      	ldr	r3, [pc, #676]	; (8005d2c <OLED_Printf+0x358>)
 8005a86:	701a      	strb	r2, [r3, #0]
			}
			OLED_col = 1;
 8005a88:	4ba9      	ldr	r3, [pc, #676]	; (8005d30 <OLED_Printf+0x35c>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a92:	3301      	adds	r3, #1
 8005a94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005a98:	e333      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '$' && (*(c + 1) >= '0' && *(c + 1) <= '6') && ((*(c + 2) >= '0' && *(c + 2) <= '9')||(*(c + 2) >= 'A' && *(c + 2) <= 'F'))) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 8005a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b24      	cmp	r3, #36	; 0x24
 8005aa2:	d172      	bne.n	8005b8a <OLED_Printf+0x1b6>
 8005aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b2f      	cmp	r3, #47	; 0x2f
 8005aae:	d96c      	bls.n	8005b8a <OLED_Printf+0x1b6>
 8005ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b36      	cmp	r3, #54	; 0x36
 8005aba:	d866      	bhi.n	8005b8a <OLED_Printf+0x1b6>
 8005abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ac6:	d905      	bls.n	8005ad4 <OLED_Printf+0x100>
 8005ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005acc:	3302      	adds	r3, #2
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b39      	cmp	r3, #57	; 0x39
 8005ad2:	d90b      	bls.n	8005aec <OLED_Printf+0x118>
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad8:	3302      	adds	r3, #2
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d954      	bls.n	8005b8a <OLED_Printf+0x1b6>
 8005ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b46      	cmp	r3, #70	; 0x46
 8005aea:	d84e      	bhi.n	8005b8a <OLED_Printf+0x1b6>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 8005aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af0:	3301      	adds	r3, #1
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	3b30      	subs	r3, #48	; 0x30
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	4b8b      	ldr	r3, [pc, #556]	; (8005d28 <OLED_Printf+0x354>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	fb12 f303 	smulbb	r3, r2, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	00d2      	lsls	r2, r2, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	4b87      	ldr	r3, [pc, #540]	; (8005d2c <OLED_Printf+0x358>)
 8005b10:	701a      	strb	r2, [r3, #0]
			OLED_col = 1 + 6 * OLED_charPoint * (*(c + 2) >= 'A' ? (*(c + 2) - 'A' + 10) :(*(c + 2) - '0'));
 8005b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b16:	3302      	adds	r3, #2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d906      	bls.n	8005b2c <OLED_Printf+0x158>
 8005b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b22:	3302      	adds	r3, #2
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	3b37      	subs	r3, #55	; 0x37
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e005      	b.n	8005b38 <OLED_Printf+0x164>
 8005b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b30:	3302      	adds	r3, #2
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	3b30      	subs	r3, #48	; 0x30
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	4a7b      	ldr	r2, [pc, #492]	; (8005d28 <OLED_Printf+0x354>)
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	fb13 f302 	smulbb	r3, r3, r2
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	0052      	lsls	r2, r2, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b77      	ldr	r3, [pc, #476]	; (8005d30 <OLED_Printf+0x35c>)
 8005b52:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 8005b54:	4b75      	ldr	r3, [pc, #468]	; (8005d2c <OLED_Printf+0x358>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b3c      	cmp	r3, #60	; 0x3c
 8005b5a:	d807      	bhi.n	8005b6c <OLED_Printf+0x198>
 8005b5c:	4b73      	ldr	r3, [pc, #460]	; (8005d2c <OLED_Printf+0x358>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b35      	cmp	r3, #53	; 0x35
 8005b62:	d90c      	bls.n	8005b7e <OLED_Printf+0x1aa>
 8005b64:	4b70      	ldr	r3, [pc, #448]	; (8005d28 <OLED_Printf+0x354>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d108      	bne.n	8005b7e <OLED_Printf+0x1aa>
				OLED_row = 18 * OLED_charPoint;
 8005b6c:	4b6e      	ldr	r3, [pc, #440]	; (8005d28 <OLED_Printf+0x354>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	00d2      	lsls	r2, r2, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	4b6c      	ldr	r3, [pc, #432]	; (8005d2c <OLED_Printf+0x358>)
 8005b7c:	701a      	strb	r2, [r3, #0]
			}
			c += 2;
 8005b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b82:	3302      	adds	r3, #2
 8005b84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005b88:	e2bb      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 8005b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b2f      	cmp	r3, #47	; 0x2f
 8005b92:	d125      	bne.n	8005be0 <OLED_Printf+0x20c>
 8005b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b98:	3301      	adds	r3, #1
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b23      	cmp	r3, #35	; 0x23
 8005b9e:	d11f      	bne.n	8005be0 <OLED_Printf+0x20c>
			char str[7] = {0,0,0,0,0,0,0};
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	4a64      	ldr	r2, [pc, #400]	; (8005d34 <OLED_Printf+0x360>)
 8005ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ba8:	6018      	str	r0, [r3, #0]
 8005baa:	3304      	adds	r3, #4
 8005bac:	8019      	strh	r1, [r3, #0]
 8005bae:	3302      	adds	r3, #2
 8005bb0:	0c0a      	lsrs	r2, r1, #16
 8005bb2:	701a      	strb	r2, [r3, #0]
			strncpy(str, c+2, 6);
 8005bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb8:	1c99      	adds	r1, r3, #2
 8005bba:	463b      	mov	r3, r7
 8005bbc:	2206      	movs	r2, #6
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f002 fc5e 	bl	8008480 <strncpy>
			OLED_charColor = str2hex(str);
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fea4 	bl	8005914 <str2hex>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4b59      	ldr	r3, [pc, #356]	; (8005d38 <OLED_Printf+0x364>)
 8005bd2:	601a      	str	r2, [r3, #0]
			c += 7;
 8005bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd8:	3307      	adds	r3, #7
 8005bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bde:	e290      	b.n	8006102 <OLED_Printf+0x72e>
			continue;
		}
		else if (*c == '/' && *(c + 1) == 'S'){
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b2f      	cmp	r3, #47	; 0x2f
 8005be8:	d10e      	bne.n	8005c08 <OLED_Printf+0x234>
 8005bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bee:	3301      	adds	r3, #1
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b53      	cmp	r3, #83	; 0x53
 8005bf4:	d108      	bne.n	8005c08 <OLED_Printf+0x234>
			//Size Big
			OLED_charPoint = 2;
 8005bf6:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <OLED_Printf+0x354>)
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c00:	3301      	adds	r3, #1
 8005c02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005c06:	e27c      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 's'){
 8005c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b2f      	cmp	r3, #47	; 0x2f
 8005c10:	d10e      	bne.n	8005c30 <OLED_Printf+0x25c>
 8005c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c16:	3301      	adds	r3, #1
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b73      	cmp	r3, #115	; 0x73
 8005c1c:	d108      	bne.n	8005c30 <OLED_Printf+0x25c>
			//Size Big
			OLED_charPoint = 1;
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <OLED_Printf+0x354>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005c2e:	e268      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'r'){//RGBCMY는 오직 2색 이상 OLED만 지원(예외로 노랑색 라인이 있는 파랑 OLED는 조금 다르게 취급)
 8005c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b2f      	cmp	r3, #47	; 0x2f
 8005c38:	d10f      	bne.n	8005c5a <OLED_Printf+0x286>
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	3301      	adds	r3, #1
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b72      	cmp	r3, #114	; 0x72
 8005c44:	d109      	bne.n	8005c5a <OLED_Printf+0x286>
			OLED_charColor = 0xFF0000;
 8005c46:	4b3c      	ldr	r3, [pc, #240]	; (8005d38 <OLED_Printf+0x364>)
 8005c48:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005c4c:	601a      	str	r2, [r3, #0]
			c += 1;
 8005c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c52:	3301      	adds	r3, #1
 8005c54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005c58:	e253      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'g'){
 8005c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b2f      	cmp	r3, #47	; 0x2f
 8005c62:	d10f      	bne.n	8005c84 <OLED_Printf+0x2b0>
 8005c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c68:	3301      	adds	r3, #1
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b67      	cmp	r3, #103	; 0x67
 8005c6e:	d109      	bne.n	8005c84 <OLED_Printf+0x2b0>
			OLED_charColor = 0x00FF00;
 8005c70:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <OLED_Printf+0x364>)
 8005c72:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005c76:	601a      	str	r2, [r3, #0]
			c += 1;
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005c82:	e23e      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'b'){
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b2f      	cmp	r3, #47	; 0x2f
 8005c8c:	d10e      	bne.n	8005cac <OLED_Printf+0x2d8>
 8005c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c92:	3301      	adds	r3, #1
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b62      	cmp	r3, #98	; 0x62
 8005c98:	d108      	bne.n	8005cac <OLED_Printf+0x2d8>
			OLED_charColor = 0x0000FF;
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <OLED_Printf+0x364>)
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	601a      	str	r2, [r3, #0]
			c += 1;
 8005ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005caa:	e22a      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'y'){
 8005cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b2f      	cmp	r3, #47	; 0x2f
 8005cb4:	d10e      	bne.n	8005cd4 <OLED_Printf+0x300>
 8005cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cba:	3301      	adds	r3, #1
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b79      	cmp	r3, #121	; 0x79
 8005cc0:	d108      	bne.n	8005cd4 <OLED_Printf+0x300>
			OLED_charColor = 0xFFFF00;
 8005cc2:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <OLED_Printf+0x364>)
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <OLED_Printf+0x368>)
 8005cc6:	601a      	str	r2, [r3, #0]
			c += 1;
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	3301      	adds	r3, #1
 8005cce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005cd2:	e216      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'c'){
 8005cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b2f      	cmp	r3, #47	; 0x2f
 8005cdc:	d10f      	bne.n	8005cfe <OLED_Printf+0x32a>
 8005cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b63      	cmp	r3, #99	; 0x63
 8005ce8:	d109      	bne.n	8005cfe <OLED_Printf+0x32a>
			OLED_charColor = 0x00FFFF;
 8005cea:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <OLED_Printf+0x364>)
 8005cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cf0:	601a      	str	r2, [r3, #0]
			c += 1;
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005cfc:	e201      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'm'){
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b2f      	cmp	r3, #47	; 0x2f
 8005d06:	d11b      	bne.n	8005d40 <OLED_Printf+0x36c>
 8005d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b6d      	cmp	r3, #109	; 0x6d
 8005d12:	d115      	bne.n	8005d40 <OLED_Printf+0x36c>
			OLED_charColor = 0xFF00FF;
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <OLED_Printf+0x364>)
 8005d16:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8005d1a:	601a      	str	r2, [r3, #0]
			c += 1;
 8005d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005d26:	e1ec      	b.n	8006102 <OLED_Printf+0x72e>
 8005d28:	20000010 	.word	0x20000010
 8005d2c:	20000009 	.word	0x20000009
 8005d30:	2000000a 	.word	0x2000000a
 8005d34:	0800a78c 	.word	0x0800a78c
 8005d38:	2000000c 	.word	0x2000000c
 8005d3c:	00ffff00 	.word	0x00ffff00
		}
		else if (*c == '/' && *(c + 1) == 'w'){//White는 단색 OLED에서는 켜짐을 의미
 8005d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b2f      	cmp	r3, #47	; 0x2f
 8005d48:	d10f      	bne.n	8005d6a <OLED_Printf+0x396>
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4e:	3301      	adds	r3, #1
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b77      	cmp	r3, #119	; 0x77
 8005d54:	d109      	bne.n	8005d6a <OLED_Printf+0x396>
			OLED_charColor = 0xFFFFFF;
 8005d56:	4bb1      	ldr	r3, [pc, #708]	; (800601c <OLED_Printf+0x648>)
 8005d58:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005d5c:	601a      	str	r2, [r3, #0]
			c += 1;
 8005d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005d68:	e1cb      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'k'){//key color는 단색 OLED에서도 지원
 8005d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b2f      	cmp	r3, #47	; 0x2f
 8005d72:	d10f      	bne.n	8005d94 <OLED_Printf+0x3c0>
 8005d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d78:	3301      	adds	r3, #1
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b6b      	cmp	r3, #107	; 0x6b
 8005d7e:	d109      	bne.n	8005d94 <OLED_Printf+0x3c0>
			OLED_charColor = 0xFFFFFF;
 8005d80:	4ba6      	ldr	r3, [pc, #664]	; (800601c <OLED_Printf+0x648>)
 8005d82:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005d86:	601a      	str	r2, [r3, #0]
			c += 1;
 8005d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005d92:	e1b6      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'R'){
 8005d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b2f      	cmp	r3, #47	; 0x2f
 8005d9c:	d10e      	bne.n	8005dbc <OLED_Printf+0x3e8>
 8005d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da2:	3301      	adds	r3, #1
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b52      	cmp	r3, #82	; 0x52
 8005da8:	d108      	bne.n	8005dbc <OLED_Printf+0x3e8>
			OLED_charColor = 0xFF7777;
 8005daa:	4b9c      	ldr	r3, [pc, #624]	; (800601c <OLED_Printf+0x648>)
 8005dac:	4a9c      	ldr	r2, [pc, #624]	; (8006020 <OLED_Printf+0x64c>)
 8005dae:	601a      	str	r2, [r3, #0]
			c += 1;
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	3301      	adds	r3, #1
 8005db6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005dba:	e1a2      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'G'){
 8005dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8005dc4:	d10e      	bne.n	8005de4 <OLED_Printf+0x410>
 8005dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dca:	3301      	adds	r3, #1
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b47      	cmp	r3, #71	; 0x47
 8005dd0:	d108      	bne.n	8005de4 <OLED_Printf+0x410>
			OLED_charColor = 0x77FF77;
 8005dd2:	4b92      	ldr	r3, [pc, #584]	; (800601c <OLED_Printf+0x648>)
 8005dd4:	4a93      	ldr	r2, [pc, #588]	; (8006024 <OLED_Printf+0x650>)
 8005dd6:	601a      	str	r2, [r3, #0]
			c += 1;
 8005dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005de2:	e18e      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'B'){
 8005de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b2f      	cmp	r3, #47	; 0x2f
 8005dec:	d10e      	bne.n	8005e0c <OLED_Printf+0x438>
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df2:	3301      	adds	r3, #1
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b42      	cmp	r3, #66	; 0x42
 8005df8:	d108      	bne.n	8005e0c <OLED_Printf+0x438>
			OLED_charColor = 0x7777FF;
 8005dfa:	4b88      	ldr	r3, [pc, #544]	; (800601c <OLED_Printf+0x648>)
 8005dfc:	4a8a      	ldr	r2, [pc, #552]	; (8006028 <OLED_Printf+0x654>)
 8005dfe:	601a      	str	r2, [r3, #0]
			c += 1;
 8005e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e04:	3301      	adds	r3, #1
 8005e06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e0a:	e17a      	b.n	8006102 <OLED_Printf+0x72e>
		}

		//Additional Color : 비표준 색상입니다.
		else if (*c == '/' && *(c + 1) == 'o'){
 8005e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b2f      	cmp	r3, #47	; 0x2f
 8005e14:	d10e      	bne.n	8005e34 <OLED_Printf+0x460>
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b6f      	cmp	r3, #111	; 0x6f
 8005e20:	d108      	bne.n	8005e34 <OLED_Printf+0x460>
			OLED_charColor = 0xFF7700;
 8005e22:	4b7e      	ldr	r3, [pc, #504]	; (800601c <OLED_Printf+0x648>)
 8005e24:	4a81      	ldr	r2, [pc, #516]	; (800602c <OLED_Printf+0x658>)
 8005e26:	601a      	str	r2, [r3, #0]
			c += 1;
 8005e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e32:	e166      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'l'){
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b2f      	cmp	r3, #47	; 0x2f
 8005e3c:	d10e      	bne.n	8005e5c <OLED_Printf+0x488>
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	3301      	adds	r3, #1
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b6c      	cmp	r3, #108	; 0x6c
 8005e48:	d108      	bne.n	8005e5c <OLED_Printf+0x488>
			OLED_charColor = 0x77FF00;
 8005e4a:	4b74      	ldr	r3, [pc, #464]	; (800601c <OLED_Printf+0x648>)
 8005e4c:	4a78      	ldr	r2, [pc, #480]	; (8006030 <OLED_Printf+0x65c>)
 8005e4e:	601a      	str	r2, [r3, #0]
			c += 1;
 8005e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e54:	3301      	adds	r3, #1
 8005e56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e5a:	e152      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 't'){
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b2f      	cmp	r3, #47	; 0x2f
 8005e64:	d10f      	bne.n	8005e86 <OLED_Printf+0x4b2>
 8005e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b74      	cmp	r3, #116	; 0x74
 8005e70:	d109      	bne.n	8005e86 <OLED_Printf+0x4b2>
			OLED_charColor = 0x00FF77;
 8005e72:	4b6a      	ldr	r3, [pc, #424]	; (800601c <OLED_Printf+0x648>)
 8005e74:	f64f 7277 	movw	r2, #65399	; 0xff77
 8005e78:	601a      	str	r2, [r3, #0]
			c += 1;
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005e84:	e13d      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'e'){
 8005e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e8e:	d10f      	bne.n	8005eb0 <OLED_Printf+0x4dc>
 8005e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e94:	3301      	adds	r3, #1
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b65      	cmp	r3, #101	; 0x65
 8005e9a:	d109      	bne.n	8005eb0 <OLED_Printf+0x4dc>
			OLED_charColor = 0x0077FF;
 8005e9c:	4b5f      	ldr	r3, [pc, #380]	; (800601c <OLED_Printf+0x648>)
 8005e9e:	f247 72ff 	movw	r2, #30719	; 0x77ff
 8005ea2:	601a      	str	r2, [r3, #0]
			c += 1;
 8005ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005eae:	e128      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'p'){
 8005eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b2f      	cmp	r3, #47	; 0x2f
 8005eb8:	d10e      	bne.n	8005ed8 <OLED_Printf+0x504>
 8005eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b70      	cmp	r3, #112	; 0x70
 8005ec4:	d108      	bne.n	8005ed8 <OLED_Printf+0x504>
			OLED_charColor = 0x7700FF;
 8005ec6:	4b55      	ldr	r3, [pc, #340]	; (800601c <OLED_Printf+0x648>)
 8005ec8:	4a5a      	ldr	r2, [pc, #360]	; (8006034 <OLED_Printf+0x660>)
 8005eca:	601a      	str	r2, [r3, #0]
			c += 1;
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005ed6:	e114      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'M'){
 8005ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	2b2f      	cmp	r3, #47	; 0x2f
 8005ee0:	d10e      	bne.n	8005f00 <OLED_Printf+0x52c>
 8005ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b4d      	cmp	r3, #77	; 0x4d
 8005eec:	d108      	bne.n	8005f00 <OLED_Printf+0x52c>
			OLED_charColor = 0xFF0077;
 8005eee:	4b4b      	ldr	r3, [pc, #300]	; (800601c <OLED_Printf+0x648>)
 8005ef0:	4a51      	ldr	r2, [pc, #324]	; (8006038 <OLED_Printf+0x664>)
 8005ef2:	601a      	str	r2, [r3, #0]
			c += 1;
 8005ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef8:	3301      	adds	r3, #1
 8005efa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005efe:	e100      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'A'){
 8005f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b2f      	cmp	r3, #47	; 0x2f
 8005f08:	d10e      	bne.n	8005f28 <OLED_Printf+0x554>
 8005f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f0e:	3301      	adds	r3, #1
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b41      	cmp	r3, #65	; 0x41
 8005f14:	d108      	bne.n	8005f28 <OLED_Printf+0x554>
			OLED_charColor = 0x888888;
 8005f16:	4b41      	ldr	r3, [pc, #260]	; (800601c <OLED_Printf+0x648>)
 8005f18:	4a48      	ldr	r2, [pc, #288]	; (800603c <OLED_Printf+0x668>)
 8005f1a:	601a      	str	r2, [r3, #0]
			c += 1;
 8005f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f20:	3301      	adds	r3, #1
 8005f22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005f26:	e0ec      	b.n	8006102 <OLED_Printf+0x72e>
		}
		else if (*c == '/' && *(c + 1) == 'a'){
 8005f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8005f30:	d10e      	bne.n	8005f50 <OLED_Printf+0x57c>
 8005f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f36:	3301      	adds	r3, #1
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b61      	cmp	r3, #97	; 0x61
 8005f3c:	d108      	bne.n	8005f50 <OLED_Printf+0x57c>
			OLED_charColor = 0x444444;
 8005f3e:	4b37      	ldr	r3, [pc, #220]	; (800601c <OLED_Printf+0x648>)
 8005f40:	4a3f      	ldr	r2, [pc, #252]	; (8006040 <OLED_Printf+0x66c>)
 8005f42:	601a      	str	r2, [r3, #0]
			c += 1;
 8005f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f48:	3301      	adds	r3, #1
 8005f4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005f4e:	e0d8      	b.n	8006102 <OLED_Printf+0x72e>
		}

		else if (*c == '/' && *(c + 1) == '/'){
 8005f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b2f      	cmp	r3, #47	; 0x2f
 8005f58:	d10b      	bne.n	8005f72 <OLED_Printf+0x59e>
 8005f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5e:	3301      	adds	r3, #1
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b2f      	cmp	r3, #47	; 0x2f
 8005f64:	d105      	bne.n	8005f72 <OLED_Printf+0x59e>
			c += 1;
 8005f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f70:	e013      	b.n	8005f9a <OLED_Printf+0x5c6>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 8005f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b2f      	cmp	r3, #47	; 0x2f
 8005f7a:	d10e      	bne.n	8005f9a <OLED_Printf+0x5c6>
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	3301      	adds	r3, #1
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b23      	cmp	r3, #35	; 0x23
 8005f86:	d108      	bne.n	8005f9a <OLED_Printf+0x5c6>
			*c = '#';
 8005f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8c:	2223      	movs	r2, #35	; 0x23
 8005f8e:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f94:	3301      	adds	r3, #1
 8005f96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		// \n, \r 등은 깨져서 출력되므로 무시한다.
		if (*c == '\r') continue;
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b0d      	cmp	r3, #13
 8005fa2:	f000 80ad 	beq.w	8006100 <OLED_Printf+0x72c>
		if (*c == '\n') {
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b0a      	cmp	r3, #10
 8005fae:	d10f      	bne.n	8005fd0 <OLED_Printf+0x5fc>
			OLED_row += 9 * OLED_charPoint;
 8005fb0:	4b24      	ldr	r3, [pc, #144]	; (8006044 <OLED_Printf+0x670>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	00d2      	lsls	r2, r2, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	4b22      	ldr	r3, [pc, #136]	; (8006048 <OLED_Printf+0x674>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	4b20      	ldr	r3, [pc, #128]	; (8006048 <OLED_Printf+0x674>)
 8005fc6:	701a      	strb	r2, [r3, #0]
			OLED_col = 1;
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <OLED_Printf+0x678>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
			continue;
 8005fce:	e098      	b.n	8006102 <OLED_Printf+0x72e>
		}
		if (*c == '\t') {
 8005fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b09      	cmp	r3, #9
 8005fd8:	d14b      	bne.n	8006072 <OLED_Printf+0x69e>
			if(OLED_col < 25 && OLED_charPoint == 1){
 8005fda:	4b1c      	ldr	r3, [pc, #112]	; (800604c <OLED_Printf+0x678>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b18      	cmp	r3, #24
 8005fe0:	d807      	bhi.n	8005ff2 <OLED_Printf+0x61e>
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <OLED_Printf+0x670>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d103      	bne.n	8005ff2 <OLED_Printf+0x61e>
				OLED_col = 25;
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <OLED_Printf+0x678>)
 8005fec:	2219      	movs	r2, #25
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	e03e      	b.n	8006070 <OLED_Printf+0x69c>
			}
			else if(OLED_col < 49){
 8005ff2:	4b16      	ldr	r3, [pc, #88]	; (800604c <OLED_Printf+0x678>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d803      	bhi.n	8006002 <OLED_Printf+0x62e>
				OLED_col = 49;
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <OLED_Printf+0x678>)
 8005ffc:	2231      	movs	r2, #49	; 0x31
 8005ffe:	701a      	strb	r2, [r3, #0]
			}
			else{
				OLED_col = 1;
				OLED_row += 9 * OLED_charPoint;
			}
			continue;
 8006000:	e07f      	b.n	8006102 <OLED_Printf+0x72e>
			else if(OLED_col < 73 && OLED_charPoint == 1){
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <OLED_Printf+0x678>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b48      	cmp	r3, #72	; 0x48
 8006008:	d822      	bhi.n	8006050 <OLED_Printf+0x67c>
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <OLED_Printf+0x670>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d11e      	bne.n	8006050 <OLED_Printf+0x67c>
				OLED_col = 75;
 8006012:	4b0e      	ldr	r3, [pc, #56]	; (800604c <OLED_Printf+0x678>)
 8006014:	224b      	movs	r2, #75	; 0x4b
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e02a      	b.n	8006070 <OLED_Printf+0x69c>
 800601a:	bf00      	nop
 800601c:	2000000c 	.word	0x2000000c
 8006020:	00ff7777 	.word	0x00ff7777
 8006024:	0077ff77 	.word	0x0077ff77
 8006028:	007777ff 	.word	0x007777ff
 800602c:	00ff7700 	.word	0x00ff7700
 8006030:	0077ff00 	.word	0x0077ff00
 8006034:	007700ff 	.word	0x007700ff
 8006038:	00ff0077 	.word	0x00ff0077
 800603c:	00888888 	.word	0x00888888
 8006040:	00444444 	.word	0x00444444
 8006044:	20000010 	.word	0x20000010
 8006048:	20000009 	.word	0x20000009
 800604c:	2000000a 	.word	0x2000000a
				OLED_col = 1;
 8006050:	4b36      	ldr	r3, [pc, #216]	; (800612c <OLED_Printf+0x758>)
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
				OLED_row += 9 * OLED_charPoint;
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <OLED_Printf+0x75c>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	00d2      	lsls	r2, r2, #3
 800605e:	4413      	add	r3, r2
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b34      	ldr	r3, [pc, #208]	; (8006134 <OLED_Printf+0x760>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	4413      	add	r3, r2
 8006068:	b2da      	uxtb	r2, r3
 800606a:	4b32      	ldr	r3, [pc, #200]	; (8006134 <OLED_Printf+0x760>)
 800606c:	701a      	strb	r2, [r3, #0]
			continue;
 800606e:	e048      	b.n	8006102 <OLED_Printf+0x72e>
 8006070:	e047      	b.n	8006102 <OLED_Printf+0x72e>
		}
		if (*c == '/' && *(c+1) == '*'){
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b2f      	cmp	r3, #47	; 0x2f
 800607a:	d10f      	bne.n	800609c <OLED_Printf+0x6c8>
 800607c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006080:	3301      	adds	r3, #1
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b2a      	cmp	r3, #42	; 0x2a
 8006086:	d109      	bne.n	800609c <OLED_Printf+0x6c8>
			c += 1;
 8006088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608c:	3301      	adds	r3, #1
 800608e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-1);
 8006092:	f04f 30ff 	mov.w	r0, #4294967295
 8006096:	f7ff fbbb 	bl	8005810 <OLED_WriteChar>
			continue;
 800609a:	e032      	b.n	8006102 <OLED_Printf+0x72e>
		}
		if (*c == '/' && *(c+1) == 'q'){
 800609c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b2f      	cmp	r3, #47	; 0x2f
 80060a4:	d10f      	bne.n	80060c6 <OLED_Printf+0x6f2>
 80060a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060aa:	3301      	adds	r3, #1
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b71      	cmp	r3, #113	; 0x71
 80060b0:	d109      	bne.n	80060c6 <OLED_Printf+0x6f2>
			c += 1;
 80060b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b6:	3301      	adds	r3, #1
 80060b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-2);
 80060bc:	f06f 0001 	mvn.w	r0, #1
 80060c0:	f7ff fba6 	bl	8005810 <OLED_WriteChar>
			continue;
 80060c4:	e01d      	b.n	8006102 <OLED_Printf+0x72e>
		}
		if (*c == '/' && *(c+1) == 'Q'){
 80060c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b2f      	cmp	r3, #47	; 0x2f
 80060ce:	d10f      	bne.n	80060f0 <OLED_Printf+0x71c>
 80060d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d4:	3301      	adds	r3, #1
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b51      	cmp	r3, #81	; 0x51
 80060da:	d109      	bne.n	80060f0 <OLED_Printf+0x71c>
			c += 1;
 80060dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e0:	3301      	adds	r3, #1
 80060e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-3);
 80060e6:	f06f 0002 	mvn.w	r0, #2
 80060ea:	f7ff fb91 	bl	8005810 <OLED_WriteChar>
			continue;
 80060ee:	e008      	b.n	8006102 <OLED_Printf+0x72e>
		}
		OLED_WriteChar(*c);
 80060f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b21b      	sxth	r3, r3
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fb89 	bl	8005810 <OLED_WriteChar>
 80060fe:	e000      	b.n	8006102 <OLED_Printf+0x72e>
		if (*c == '\r') continue;
 8006100:	bf00      	nop
	for (char *c = buffer; *c; c++) {
 8006102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006106:	3301      	adds	r3, #1
 8006108:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800610c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f47f ac7f 	bne.w	8005a16 <OLED_Printf+0x42>
	}
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006126:	b004      	add	sp, #16
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2000000a 	.word	0x2000000a
 8006130:	20000010 	.word	0x20000010
 8006134:	20000009 	.word	0x20000009

08006138 <OLED_Line>:

void OLED_Line(uint8_t xi, uint8_t yi, uint8_t xe, uint8_t ye, int32_t color){
 8006138:	b590      	push	{r4, r7, lr}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4623      	mov	r3, r4
 8006148:	71fb      	strb	r3, [r7, #7]
 800614a:	4603      	mov	r3, r0
 800614c:	71bb      	strb	r3, [r7, #6]
 800614e:	460b      	mov	r3, r1
 8006150:	717b      	strb	r3, [r7, #5]
 8006152:	4613      	mov	r3, r2
 8006154:	713b      	strb	r3, [r7, #4]
	uint8_t red = (color >> 16) & 0xF8;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	141b      	asrs	r3, r3, #16
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f023 0307 	bic.w	r3, r3, #7
 8006160:	73fb      	strb	r3, [r7, #15]
	uint8_t gre = (color >> 8) & 0xFC;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	121b      	asrs	r3, r3, #8
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f023 0303 	bic.w	r3, r3, #3
 800616c:	73bb      	strb	r3, [r7, #14]
	uint8_t blu = color & 0xF8;
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f023 0307 	bic.w	r3, r3, #7
 8006176:	737b      	strb	r3, [r7, #13]

	//선을 그리기 위해서는 0x21 신호가 필요합니다.
	OLED_WriteCommand(0x21);
 8006178:	2021      	movs	r0, #33	; 0x21
 800617a:	f7ff f9ad 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(xi);
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff f9a9 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(yi);
 8006186:	79bb      	ldrb	r3, [r7, #6]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff f9a5 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(xe);
 800618e:	797b      	ldrb	r3, [r7, #5]
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff f9a1 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(ye);
 8006196:	793b      	ldrb	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff f99d 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(red>>2);
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	089b      	lsrs	r3, r3, #2
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff f997 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(gre>>2);
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	089b      	lsrs	r3, r3, #2
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff f991 	bl	80054d8 <OLED_WriteCommand>
	OLED_WriteCommand(blu>>2);
 80061b6:	7b7b      	ldrb	r3, [r7, #13]
 80061b8:	089b      	lsrs	r3, r3, #2
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff f98b 	bl	80054d8 <OLED_WriteCommand>
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd90      	pop	{r4, r7, pc}
	...

080061cc <OLED_MenuUI>:

void OLED_MenuUI(char * title, uint32_t titleBgColor, uint32_t titleTextColor, Menu_t * menu, uint32_t count, uint32_t textColor){
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
	OLED_Rectangle(0, 0, 96, 9, titleBgColor);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2309      	movs	r3, #9
 80061e0:	2260      	movs	r2, #96	; 0x60
 80061e2:	2100      	movs	r1, #0
 80061e4:	2000      	movs	r0, #0
 80061e6:	f7ff faaf 	bl	8005748 <OLED_Rectangle>
	OLED_row = 1;
 80061ea:	4b19      	ldr	r3, [pc, #100]	; (8006250 <OLED_MenuUI+0x84>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 80061f0:	4b18      	ldr	r3, [pc, #96]	; (8006254 <OLED_MenuUI+0x88>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
	OLED_charColor = titleTextColor;
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <OLED_MenuUI+0x8c>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6013      	str	r3, [r2, #0]
	OLED_bgColor = titleBgColor;
 80061fc:	4a17      	ldr	r2, [pc, #92]	; (800625c <OLED_MenuUI+0x90>)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6013      	str	r3, [r2, #0]
	OLED_Printf("/s%s\n", title);
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	4816      	ldr	r0, [pc, #88]	; (8006260 <OLED_MenuUI+0x94>)
 8006206:	f7ff fbe5 	bl	80059d4 <OLED_Printf>
	OLED_charColor = textColor;
 800620a:	4a13      	ldr	r2, [pc, #76]	; (8006258 <OLED_MenuUI+0x8c>)
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	6013      	str	r3, [r2, #0]
	OLED_bgColor = 0;
 8006210:	4b12      	ldr	r3, [pc, #72]	; (800625c <OLED_MenuUI+0x90>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < count; i++){
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
 800621a:	e00f      	b.n	800623c <OLED_MenuUI+0x70>
		OLED_Printf("/s%s\n", menu[i].message);
 800621c:	7dfa      	ldrb	r2, [r7, #23]
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	461a      	mov	r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	4413      	add	r3, r2
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	4619      	mov	r1, r3
 8006230:	480b      	ldr	r0, [pc, #44]	; (8006260 <OLED_MenuUI+0x94>)
 8006232:	f7ff fbcf 	bl	80059d4 <OLED_Printf>
	for(uint8_t i = 0; i < count; i++){
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	3301      	adds	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	429a      	cmp	r2, r3
 8006242:	d8eb      	bhi.n	800621c <OLED_MenuUI+0x50>
	}
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000009 	.word	0x20000009
 8006254:	2000000a 	.word	0x2000000a
 8006258:	2000000c 	.word	0x2000000c
 800625c:	200004e8 	.word	0x200004e8
 8006260:	0800a794 	.word	0x0800a794

08006264 <OLED_Cursor>:

void OLED_Cursor(uint8_t n, uint32_t color){
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af02      	add	r7, sp, #8
 800626a:	4603      	mov	r3, r0
 800626c:	6039      	str	r1, [r7, #0]
 800626e:	71fb      	strb	r3, [r7, #7]
	//Line Erase
	for(uint8_t i = 9; i < 64; i+=9){
 8006270:	2309      	movs	r3, #9
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	e00a      	b.n	800628c <OLED_Cursor+0x28>
		OLED_Line(0, i, 95, i, 0);
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	7bf9      	ldrb	r1, [r7, #15]
 800627a:	2200      	movs	r2, #0
 800627c:	9200      	str	r2, [sp, #0]
 800627e:	225f      	movs	r2, #95	; 0x5f
 8006280:	2000      	movs	r0, #0
 8006282:	f7ff ff59 	bl	8006138 <OLED_Line>
	for(uint8_t i = 9; i < 64; i+=9){
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	3309      	adds	r3, #9
 800628a:	73fb      	strb	r3, [r7, #15]
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b3f      	cmp	r3, #63	; 0x3f
 8006290:	d9f1      	bls.n	8006276 <OLED_Cursor+0x12>
	}
	OLED_Line(0, 9, 0, 63, 0);
 8006292:	2300      	movs	r3, #0
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	233f      	movs	r3, #63	; 0x3f
 8006298:	2200      	movs	r2, #0
 800629a:	2109      	movs	r1, #9
 800629c:	2000      	movs	r0, #0
 800629e:	f7ff ff4b 	bl	8006138 <OLED_Line>
	OLED_Line(95, 9, 95, 63, 0);
 80062a2:	2300      	movs	r3, #0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	233f      	movs	r3, #63	; 0x3f
 80062a8:	225f      	movs	r2, #95	; 0x5f
 80062aa:	2109      	movs	r1, #9
 80062ac:	205f      	movs	r0, #95	; 0x5f
 80062ae:	f7ff ff43 	bl	8006138 <OLED_Line>

	//Line Drawing
	OLED_Line(0, 9 + 9 * n, 95, 9 + 9 * n, color);
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	3301      	adds	r3, #1
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	00d2      	lsls	r2, r2, #3
 80062bc:	4413      	add	r3, r2
 80062be:	b2d9      	uxtb	r1, r3
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	3301      	adds	r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	00d2      	lsls	r2, r2, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4613      	mov	r3, r2
 80062d4:	225f      	movs	r2, #95	; 0x5f
 80062d6:	2000      	movs	r0, #0
 80062d8:	f7ff ff2e 	bl	8006138 <OLED_Line>
	OLED_Line(0, 18 + 9 * n, 95, 18 + 9 * n, color);
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	461a      	mov	r2, r3
 80062e0:	00d2      	lsls	r2, r2, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3312      	adds	r3, #18
 80062e8:	b2d9      	uxtb	r1, r3
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	461a      	mov	r2, r3
 80062ee:	00d2      	lsls	r2, r2, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	3312      	adds	r3, #18
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	225f      	movs	r2, #95	; 0x5f
 8006300:	2000      	movs	r0, #0
 8006302:	f7ff ff19 	bl	8006138 <OLED_Line>
	OLED_Line(0, 9 + 9 * n, 0, 18 + 9 * n, color);
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	3301      	adds	r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	00d2      	lsls	r2, r2, #3
 8006310:	4413      	add	r3, r2
 8006312:	b2d9      	uxtb	r1, r3
 8006314:	79fb      	ldrb	r3, [r7, #7]
 8006316:	461a      	mov	r2, r3
 8006318:	00d2      	lsls	r2, r2, #3
 800631a:	4413      	add	r3, r2
 800631c:	b2db      	uxtb	r3, r3
 800631e:	3312      	adds	r3, #18
 8006320:	b2da      	uxtb	r2, r3
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	2200      	movs	r2, #0
 800632a:	2000      	movs	r0, #0
 800632c:	f7ff ff04 	bl	8006138 <OLED_Line>
	OLED_Line(95, 9 + 9 * n, 95, 18 + 9 * n, color);
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	3301      	adds	r3, #1
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	00d2      	lsls	r2, r2, #3
 800633a:	4413      	add	r3, r2
 800633c:	b2d9      	uxtb	r1, r3
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	461a      	mov	r2, r3
 8006342:	00d2      	lsls	r2, r2, #3
 8006344:	4413      	add	r3, r2
 8006346:	b2db      	uxtb	r3, r3
 8006348:	3312      	adds	r3, #18
 800634a:	b2da      	uxtb	r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	4613      	mov	r3, r2
 8006352:	225f      	movs	r2, #95	; 0x5f
 8006354:	205f      	movs	r0, #95	; 0x5f
 8006356:	f7ff feef 	bl	8006138 <OLED_Line>
}
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <Switch_LED>:
#define LONG_FLAG 0x20

#define LINE_TRACER_SWITCH
extern TIM_HandleTypeDef htim4;

void Switch_LED(uint16_t red, uint16_t blue){
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	460a      	mov	r2, r1
 800636e:	80fb      	strh	r3, [r7, #6]
 8006370:	4613      	mov	r3, r2
 8006372:	80bb      	strh	r3, [r7, #4]
	htim4.Instance -> CCR1 = red;
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <Switch_LED+0x2c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance -> CCR2 = blue;
 800637c:	4b04      	ldr	r3, [pc, #16]	; (8006390 <Switch_LED+0x2c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	88ba      	ldrh	r2, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	20000560 	.word	0x20000560

08006394 <Switch_Read>:

uint16_t Switch_Read(){
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
	static uint16_t Switch_sum = 0;
	static uint16_t Switch_input = 0;
	static uint32_t Switch_time = 0;
	static uint32_t Switch_lowTime = 0;
#ifdef LINE_TRACER_SWITCH
	uint8_t sw1 = !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 800639a:	2108      	movs	r1, #8
 800639c:	4893      	ldr	r0, [pc, #588]	; (80065ec <Switch_Read+0x258>)
 800639e:	f7fb ff61 	bl	8002264 <HAL_GPIO_ReadPin>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2 = !HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 80063b0:	2110      	movs	r1, #16
 80063b2:	488e      	ldr	r0, [pc, #568]	; (80065ec <Switch_Read+0x258>)
 80063b4:	f7fb ff56 	bl	8002264 <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3 = !HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 80063c6:	2120      	movs	r1, #32
 80063c8:	4888      	ldr	r0, [pc, #544]	; (80065ec <Switch_Read+0x258>)
 80063ca:	f7fb ff4b 	bl	8002264 <HAL_GPIO_ReadPin>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	717b      	strb	r3, [r7, #5]
	uint8_t sw4 = !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin);
 80063dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063e0:	4882      	ldr	r0, [pc, #520]	; (80065ec <Switch_Read+0x258>)
 80063e2:	f7fb ff3f 	bl	8002264 <HAL_GPIO_ReadPin>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	713b      	strb	r3, [r7, #4]
	uint8_t sw5 = !HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin);
 80063f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063f8:	487c      	ldr	r0, [pc, #496]	; (80065ec <Switch_Read+0x258>)
 80063fa:	f7fb ff33 	bl	8002264 <HAL_GPIO_ReadPin>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	70fb      	strb	r3, [r7, #3]
	Switch_input = sw1 | (sw2 << 1) | (sw3 << 2) | (sw4 << 3) | (sw5 << 4);
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	b21a      	sxth	r2, r3
 8006410:	79bb      	ldrb	r3, [r7, #6]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	b21b      	sxth	r3, r3
 8006416:	4313      	orrs	r3, r2
 8006418:	b21a      	sxth	r2, r3
 800641a:	797b      	ldrb	r3, [r7, #5]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	b21b      	sxth	r3, r3
 8006420:	4313      	orrs	r3, r2
 8006422:	b21a      	sxth	r2, r3
 8006424:	793b      	ldrb	r3, [r7, #4]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	b21b      	sxth	r3, r3
 800642a:	4313      	orrs	r3, r2
 800642c:	b21a      	sxth	r2, r3
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	b21b      	sxth	r3, r3
 8006434:	4313      	orrs	r3, r2
 8006436:	b21b      	sxth	r3, r3
 8006438:	b29a      	uxth	r2, r3
 800643a:	4b6d      	ldr	r3, [pc, #436]	; (80065f0 <Switch_Read+0x25c>)
 800643c:	801a      	strh	r2, [r3, #0]
#endif
	switch(Switch_state){
 800643e:	4b6d      	ldr	r3, [pc, #436]	; (80065f4 <Switch_Read+0x260>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b05      	cmp	r3, #5
 8006444:	f200 80cd 	bhi.w	80065e2 <Switch_Read+0x24e>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <Switch_Read+0xbc>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006469 	.word	0x08006469
 8006454:	08006495 	.word	0x08006495
 8006458:	080064d9 	.word	0x080064d9
 800645c:	08006521 	.word	0x08006521
 8006460:	08006559 	.word	0x08006559
 8006464:	08006599 	.word	0x08006599
	case SWITCH_STATE_IDLE:
		if(Switch_input){
 8006468:	4b61      	ldr	r3, [pc, #388]	; (80065f0 <Switch_Read+0x25c>)
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80af 	beq.w	80065d0 <Switch_Read+0x23c>
			Switch_time = HAL_GetTick();
 8006472:	f7fb fc31 	bl	8001cd8 <HAL_GetTick>
 8006476:	4603      	mov	r3, r0
 8006478:	4a5f      	ldr	r2, [pc, #380]	; (80065f8 <Switch_Read+0x264>)
 800647a:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_DOWN;
 800647c:	4b5d      	ldr	r3, [pc, #372]	; (80065f4 <Switch_Read+0x260>)
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
			Switch_sum |= Switch_input;
 8006482:	4b5e      	ldr	r3, [pc, #376]	; (80065fc <Switch_Read+0x268>)
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	4b5a      	ldr	r3, [pc, #360]	; (80065f0 <Switch_Read+0x25c>)
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	b29a      	uxth	r2, r3
 800648e:	4b5b      	ldr	r3, [pc, #364]	; (80065fc <Switch_Read+0x268>)
 8006490:	801a      	strh	r2, [r3, #0]
		}
		break;
 8006492:	e09d      	b.n	80065d0 <Switch_Read+0x23c>
	case SWITCH_STATE_PRE_DOWN:
		if(Switch_input){
 8006494:	4b56      	ldr	r3, [pc, #344]	; (80065f0 <Switch_Read+0x25c>)
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d016      	beq.n	80064ca <Switch_Read+0x136>
			if(HAL_GetTick() - Switch_time > 80){
 800649c:	f7fb fc1c 	bl	8001cd8 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <Switch_Read+0x264>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b50      	cmp	r3, #80	; 0x50
 80064aa:	d905      	bls.n	80064b8 <Switch_Read+0x124>
				Switch_state = SWITCH_STATE_DOWN;
 80064ac:	4b51      	ldr	r3, [pc, #324]	; (80065f4 <Switch_Read+0x260>)
 80064ae:	2202      	movs	r2, #2
 80064b0:	701a      	strb	r2, [r3, #0]
				return Switch_sum;
 80064b2:	4b52      	ldr	r3, [pc, #328]	; (80065fc <Switch_Read+0x268>)
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	e095      	b.n	80065e4 <Switch_Read+0x250>
			}
			Switch_sum |= Switch_input;
 80064b8:	4b50      	ldr	r3, [pc, #320]	; (80065fc <Switch_Read+0x268>)
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	4b4c      	ldr	r3, [pc, #304]	; (80065f0 <Switch_Read+0x25c>)
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	4b4d      	ldr	r3, [pc, #308]	; (80065fc <Switch_Read+0x268>)
 80064c6:	801a      	strh	r2, [r3, #0]
		}
		else{
			Switch_state = SWITCH_STATE_IDLE;
			Switch_sum = 0;
		}
		break;
 80064c8:	e08b      	b.n	80065e2 <Switch_Read+0x24e>
			Switch_state = SWITCH_STATE_IDLE;
 80064ca:	4b4a      	ldr	r3, [pc, #296]	; (80065f4 <Switch_Read+0x260>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
			Switch_sum = 0;
 80064d0:	4b4a      	ldr	r3, [pc, #296]	; (80065fc <Switch_Read+0x268>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	801a      	strh	r2, [r3, #0]
		break;
 80064d6:	e084      	b.n	80065e2 <Switch_Read+0x24e>
	case SWITCH_STATE_DOWN:
		if(!Switch_input){
 80064d8:	4b45      	ldr	r3, [pc, #276]	; (80065f0 <Switch_Read+0x25c>)
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d108      	bne.n	80064f2 <Switch_Read+0x15e>
			Switch_lowTime = HAL_GetTick();
 80064e0:	f7fb fbfa 	bl	8001cd8 <HAL_GetTick>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4a46      	ldr	r2, [pc, #280]	; (8006600 <Switch_Read+0x26c>)
 80064e8:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE;
 80064ea:	4b42      	ldr	r3, [pc, #264]	; (80065f4 <Switch_Read+0x260>)
 80064ec:	2203      	movs	r2, #3
 80064ee:	701a      	strb	r2, [r3, #0]
		else if(HAL_GetTick() - Switch_time > 400){
			Switch_time = HAL_GetTick();
			Switch_state = SWITCH_STATE_LONG;
			return Switch_sum | LONG_FLAG;
		}
		break;
 80064f0:	e070      	b.n	80065d4 <Switch_Read+0x240>
		else if(HAL_GetTick() - Switch_time > 400){
 80064f2:	f7fb fbf1 	bl	8001cd8 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	4b3f      	ldr	r3, [pc, #252]	; (80065f8 <Switch_Read+0x264>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006502:	d967      	bls.n	80065d4 <Switch_Read+0x240>
			Switch_time = HAL_GetTick();
 8006504:	f7fb fbe8 	bl	8001cd8 <HAL_GetTick>
 8006508:	4603      	mov	r3, r0
 800650a:	4a3b      	ldr	r2, [pc, #236]	; (80065f8 <Switch_Read+0x264>)
 800650c:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_LONG;
 800650e:	4b39      	ldr	r3, [pc, #228]	; (80065f4 <Switch_Read+0x260>)
 8006510:	2204      	movs	r2, #4
 8006512:	701a      	strb	r2, [r3, #0]
			return Switch_sum | LONG_FLAG;
 8006514:	4b39      	ldr	r3, [pc, #228]	; (80065fc <Switch_Read+0x268>)
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	f043 0320 	orr.w	r3, r3, #32
 800651c:	b29b      	uxth	r3, r3
 800651e:	e061      	b.n	80065e4 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE:
		if(!Switch_input){
 8006520:	4b33      	ldr	r3, [pc, #204]	; (80065f0 <Switch_Read+0x25c>)
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d113      	bne.n	8006550 <Switch_Read+0x1bc>
			if(HAL_GetTick() - Switch_lowTime > 80){
 8006528:	f7fb fbd6 	bl	8001cd8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	4b34      	ldr	r3, [pc, #208]	; (8006600 <Switch_Read+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b50      	cmp	r3, #80	; 0x50
 8006536:	d94f      	bls.n	80065d8 <Switch_Read+0x244>
				Switch_time = HAL_GetTick();
 8006538:	f7fb fbce 	bl	8001cd8 <HAL_GetTick>
 800653c:	4603      	mov	r3, r0
 800653e:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <Switch_Read+0x264>)
 8006540:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 8006542:	4b2c      	ldr	r3, [pc, #176]	; (80065f4 <Switch_Read+0x260>)
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 8006548:	4b2c      	ldr	r3, [pc, #176]	; (80065fc <Switch_Read+0x268>)
 800654a:	2200      	movs	r2, #0
 800654c:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_DOWN;
		}
		break;
 800654e:	e043      	b.n	80065d8 <Switch_Read+0x244>
			Switch_state = SWITCH_STATE_DOWN;
 8006550:	4b28      	ldr	r3, [pc, #160]	; (80065f4 <Switch_Read+0x260>)
 8006552:	2202      	movs	r2, #2
 8006554:	701a      	strb	r2, [r3, #0]
		break;
 8006556:	e03f      	b.n	80065d8 <Switch_Read+0x244>
	case SWITCH_STATE_LONG:
		if(!Switch_input){
 8006558:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <Switch_Read+0x25c>)
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d108      	bne.n	8006572 <Switch_Read+0x1de>
			Switch_lowTime = HAL_GetTick();
 8006560:	f7fb fbba 	bl	8001cd8 <HAL_GetTick>
 8006564:	4603      	mov	r3, r0
 8006566:	4a26      	ldr	r2, [pc, #152]	; (8006600 <Switch_Read+0x26c>)
 8006568:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE_LONG;
 800656a:	4b22      	ldr	r3, [pc, #136]	; (80065f4 <Switch_Read+0x260>)
 800656c:	2205      	movs	r2, #5
 800656e:	701a      	strb	r2, [r3, #0]
		}
		else if(HAL_GetTick() - Switch_time > 100){
			Switch_time = HAL_GetTick();
			return Switch_sum | LONG_FLAG;
		}
		break;
 8006570:	e034      	b.n	80065dc <Switch_Read+0x248>
		else if(HAL_GetTick() - Switch_time > 100){
 8006572:	f7fb fbb1 	bl	8001cd8 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <Switch_Read+0x264>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b64      	cmp	r3, #100	; 0x64
 8006580:	d92c      	bls.n	80065dc <Switch_Read+0x248>
			Switch_time = HAL_GetTick();
 8006582:	f7fb fba9 	bl	8001cd8 <HAL_GetTick>
 8006586:	4603      	mov	r3, r0
 8006588:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <Switch_Read+0x264>)
 800658a:	6013      	str	r3, [r2, #0]
			return Switch_sum | LONG_FLAG;
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <Switch_Read+0x268>)
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	f043 0320 	orr.w	r3, r3, #32
 8006594:	b29b      	uxth	r3, r3
 8006596:	e025      	b.n	80065e4 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE_LONG:
		if(!Switch_input){
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <Switch_Read+0x25c>)
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d113      	bne.n	80065c8 <Switch_Read+0x234>
			if(HAL_GetTick() - Switch_lowTime > 80){
 80065a0:	f7fb fb9a 	bl	8001cd8 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b16      	ldr	r3, [pc, #88]	; (8006600 <Switch_Read+0x26c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b50      	cmp	r3, #80	; 0x50
 80065ae:	d917      	bls.n	80065e0 <Switch_Read+0x24c>
				Switch_time = HAL_GetTick();
 80065b0:	f7fb fb92 	bl	8001cd8 <HAL_GetTick>
 80065b4:	4603      	mov	r3, r0
 80065b6:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <Switch_Read+0x264>)
 80065b8:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <Switch_Read+0x260>)
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <Switch_Read+0x268>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_LONG;
		}
		break;
 80065c6:	e00b      	b.n	80065e0 <Switch_Read+0x24c>
			Switch_state = SWITCH_STATE_LONG;
 80065c8:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <Switch_Read+0x260>)
 80065ca:	2204      	movs	r2, #4
 80065cc:	701a      	strb	r2, [r3, #0]
		break;
 80065ce:	e007      	b.n	80065e0 <Switch_Read+0x24c>
		break;
 80065d0:	bf00      	nop
 80065d2:	e006      	b.n	80065e2 <Switch_Read+0x24e>
		break;
 80065d4:	bf00      	nop
 80065d6:	e004      	b.n	80065e2 <Switch_Read+0x24e>
		break;
 80065d8:	bf00      	nop
 80065da:	e002      	b.n	80065e2 <Switch_Read+0x24e>
		break;
 80065dc:	bf00      	nop
 80065de:	e000      	b.n	80065e2 <Switch_Read+0x24e>
		break;
 80065e0:	bf00      	nop
	}
	return 0;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40020400 	.word	0x40020400
 80065f0:	200004ec 	.word	0x200004ec
 80065f4:	200004ee 	.word	0x200004ee
 80065f8:	200004f0 	.word	0x200004f0
 80065fc:	200004f4 	.word	0x200004f4
 8006600:	200004f8 	.word	0x200004f8

08006604 <Control_PID>:
		1.f,		// kd
		10.f,		// filterConst
		5.f			// antiWindUpConst
};

float Control_PID(float sensorADCRead, heater_t *heaterobj, PIDConst PIDMode){
 8006604:	b084      	sub	sp, #16
 8006606:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800660a:	b08c      	sub	sp, #48	; 0x30
 800660c:	af06      	add	r7, sp, #24
 800660e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006612:	6038      	str	r0, [r7, #0]
 8006614:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8006618:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	float duty;
	heaterobj->prev = heaterobj->current;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	619a      	str	r2, [r3, #24]
	heaterobj->current = sensorADCRead;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	615a      	str	r2, [r3, #20]

	// Proportional term
	float temperatureError = heaterobj->target - heaterobj->current;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	edd3 7a05 	vldr	s15, [r3, #20]
 8006636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800663a:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative term
	float temperatureDifferential = (heaterobj->current - heaterobj->prev) / PERIOD;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	ed93 7a05 	vldr	s14, [r3, #20]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	edd3 7a06 	vldr	s15, [r3, #24]
 800664a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800664e:	edc7 7a03 	vstr	s15, [r7, #12]

	// Integral term
	heaterobj->errorSum += temperatureError * PERIOD;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	ed93 7a07 	vldr	s14, [r3, #28]
 8006658:	edd7 7a04 	vldr	s15, [r7, #16]
 800665c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	edc3 7a07 	vstr	s15, [r3, #28]

	// Low Pass Filtering
	float temperatureDifferentialFilt = PIDMode.filterConst / (1 + PIDMode.filterConst / temperatureDifferential);
 8006666:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800666a:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 800666e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006672:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8006676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800667a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006682:	edc7 7a02 	vstr	s15, [r7, #8]

	// anti wind-up
	if (heaterobj->errorSum > PIDMode.antiWindUpConst) heaterobj->errorSum = PIDMode.antiWindUpConst;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	ed93 7a07 	vldr	s14, [r3, #28]
 800668c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006698:	dd03      	ble.n	80066a2 <Control_PID+0x9e>
 800669a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	61da      	str	r2, [r3, #28]
 80066a0:	e012      	b.n	80066c8 <Control_PID+0xc4>
	else if (heaterobj->errorSum < -PIDMode.antiWindUpConst) heaterobj->errorSum = -PIDMode.antiWindUpConst;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80066a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80066ac:	eef1 7a67 	vneg.f32	s15, s15
 80066b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	d506      	bpl.n	80066c8 <Control_PID+0xc4>
 80066ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80066be:	eef1 7a67 	vneg.f32	s15, s15
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	edc3 7a07 	vstr	s15, [r3, #28]

	// PID control
	duty = (temperatureError * PIDMode.kp + temperatureDifferentialFilt * PIDMode.kd + heaterobj->errorSum * PIDMode.ki)/100;
 80066c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80066d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066d4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80066d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80066dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80066ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80066ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066f6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800678c <Control_PID+0x188>
 80066fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066fe:	edc7 7a05 	vstr	s15, [r7, #20]

	// output limit
	if (duty < 0.01f) duty = 0.f;
 8006702:	edd7 7a05 	vldr	s15, [r7, #20]
 8006706:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006790 <Control_PID+0x18c>
 800670a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800670e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006712:	d502      	bpl.n	800671a <Control_PID+0x116>
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
	if (duty > 0.99f) duty = 1.f;
 800671a:	edd7 7a05 	vldr	s15, [r7, #20]
 800671e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006794 <Control_PID+0x190>
 8006722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672a:	dd02      	ble.n	8006732 <Control_PID+0x12e>
 800672c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006730:	617b      	str	r3, [r7, #20]
	printf("Te: %f, Td: %f, ES: %f, duty: %f\r\n", temperatureError, temperatureDifferential, heaterobj->errorSum, duty);
 8006732:	6938      	ldr	r0, [r7, #16]
 8006734:	f7f9 ff10 	bl	8000558 <__aeabi_f2d>
 8006738:	4682      	mov	sl, r0
 800673a:	468b      	mov	fp, r1
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7f9 ff0b 	bl	8000558 <__aeabi_f2d>
 8006742:	4604      	mov	r4, r0
 8006744:	460d      	mov	r5, r1
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	4618      	mov	r0, r3
 800674c:	f7f9 ff04 	bl	8000558 <__aeabi_f2d>
 8006750:	4680      	mov	r8, r0
 8006752:	4689      	mov	r9, r1
 8006754:	6978      	ldr	r0, [r7, #20]
 8006756:	f7f9 feff 	bl	8000558 <__aeabi_f2d>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006762:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006766:	e9cd 4500 	strd	r4, r5, [sp]
 800676a:	4652      	mov	r2, sl
 800676c:	465b      	mov	r3, fp
 800676e:	480a      	ldr	r0, [pc, #40]	; (8006798 <Control_PID+0x194>)
 8006770:	f001 fde0 	bl	8008334 <iprintf>
	return duty;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	ee07 3a90 	vmov	s15, r3
}
 800677a:	eeb0 0a67 	vmov.f32	s0, s15
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006786:	b004      	add	sp, #16
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	42c80000 	.word	0x42c80000
 8006790:	3c23d70a 	.word	0x3c23d70a
 8006794:	3f7d70a4 	.word	0x3f7d70a4
 8006798:	0800a79c 	.word	0x0800a79c

0800679c <HeaterControl_TIM9_IRQ>:
static void Heater_Start(heater_t *heaterobj);
static void Heater_Stop(heater_t *heaterobj);
static void Heater_Set(heater_t *heaterobj);
static void Heater_Controller(tempsensor_t *tempsensor, heater_t *heaterobj);

void HeaterControl_TIM9_IRQ(){
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
	Heater_Controller(tempTop, heaterTop);
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <HeaterControl_TIM9_IRQ+0x50>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <HeaterControl_TIM9_IRQ+0x54>)
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	4611      	mov	r1, r2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f8d4 	bl	8006958 <Heater_Controller>
	Heater_Controller(tempBottom, heaterBottom);
 80067b0:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <HeaterControl_TIM9_IRQ+0x58>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <HeaterControl_TIM9_IRQ+0x5c>)
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f8cc 	bl	8006958 <Heater_Controller>
	if(heaterTop->state)
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HeaterControl_TIM9_IRQ+0x54>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <HeaterControl_TIM9_IRQ+0x38>
		Heater_Set(heaterTop);
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HeaterControl_TIM9_IRQ+0x54>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f87e 	bl	80068d0 <Heater_Set>
	if(heaterBottom->state)
 80067d4:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <HeaterControl_TIM9_IRQ+0x5c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <HeaterControl_TIM9_IRQ+0x4c>
		Heater_Set(heaterBottom);
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HeaterControl_TIM9_IRQ+0x5c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f874 	bl	80068d0 <Heater_Set>
}
 80067e8:	bf00      	nop
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000720 	.word	0x20000720
 80067f0:	200005ac 	.word	0x200005ac
 80067f4:	200005a8 	.word	0x200005a8
 80067f8:	2000055c 	.word	0x2000055c

080067fc <Custom_HeaterControl>:

heater_t *Custom_HeaterControl(TIM_HandleTypeDef *htim, uint32_t Channel){
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	//
	heater_t *heaterobj = (heater_t*) calloc(1, sizeof(heater_t));
 8006806:	212c      	movs	r1, #44	; 0x2c
 8006808:	2001      	movs	r0, #1
 800680a:	f001 f82d 	bl	8007868 <calloc>
 800680e:	4603      	mov	r3, r0
 8006810:	60fb      	str	r3, [r7, #12]

	// Setting methods
	heaterobj->channel = Channel;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	605a      	str	r2, [r3, #4]
	heaterobj->current = .0f;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	615a      	str	r2, [r3, #20]
	heaterobj->duty = .0f;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	60da      	str	r2, [r3, #12]
	heaterobj->errorSum = .0f;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	61da      	str	r2, [r3, #28]
	heaterobj->htim = htim;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
	heaterobj->onFlag = false;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2020 	strb.w	r2, [r3, #32]
	heaterobj->prev = .0f;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	619a      	str	r2, [r3, #24]
	heaterobj->state = OFF;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	609a      	str	r2, [r3, #8]
	heaterobj->target = .0f;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	611a      	str	r2, [r3, #16]

	// Setting fields
	heaterobj->start = Heater_Start;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a05      	ldr	r2, [pc, #20]	; (800686c <Custom_HeaterControl+0x70>)
 8006858:	625a      	str	r2, [r3, #36]	; 0x24
	heaterobj->stop = Heater_Stop;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a04      	ldr	r2, [pc, #16]	; (8006870 <Custom_HeaterControl+0x74>)
 800685e:	629a      	str	r2, [r3, #40]	; 0x28

	return heaterobj;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	08006875 	.word	0x08006875
 8006870:	0800689d 	.word	0x0800689d

08006874 <Heater_Start>:

static void Heater_Start(heater_t *heaterobj){
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = true;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_TIM_PWM_Start(heaterobj->htim, heaterobj->channel);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f7fd f80c 	bl	80038ac <HAL_TIM_PWM_Start>
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <Heater_Stop>:

static void Heater_Stop(heater_t *heaterobj){
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = false;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2020 	strb.w	r2, [r3, #32]
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 80068ac:	e007      	b.n	80068be <Heater_Stop+0x22>
	HAL_TIM_PWM_Stop(heaterobj->htim, heaterobj->channel);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7fd f8a7 	bl	8003a0c <HAL_TIM_PWM_Stop>
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f3      	bne.n	80068ae <Heater_Stop+0x12>
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <Heater_Set>:

static void Heater_Set(heater_t *heaterobj){
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	// Duty ratio to duty cycle conversion
	uint32_t dutycycle = heaterobj->duty * (__HAL_TIM_GET_AUTORELOAD(heaterobj->htim)+1) - 1;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	ed93 7a03 	vldr	s14, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	3301      	adds	r3, #1
 80068e8:	ee07 3a90 	vmov	s15, r3
 80068ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006900:	ee17 3a90 	vmov	r3, s15
 8006904:	60fb      	str	r3, [r7, #12]
	// Set duty rate of PWM
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <Heater_Set+0x4a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006918:	e018      	b.n	800694c <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b04      	cmp	r3, #4
 8006920:	d105      	bne.n	800692e <Heater_Set+0x5e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800692c:	e00e      	b.n	800694c <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b08      	cmp	r3, #8
 8006934:	d105      	bne.n	8006942 <Heater_Set+0x72>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006940:	e004      	b.n	800694c <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <Heater_Controller>:

static void Heater_Controller(tempsensor_t *tempsensorobj, heater_t *heaterobj){
 8006958:	b590      	push	{r4, r7, lr}
 800695a:	b087      	sub	sp, #28
 800695c:	af02      	add	r7, sp, #8
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	float sensorADCRead = tempsensorobj->read(tempsensorobj);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
 800696a:	ed87 0a03 	vstr	s0, [r7, #12]
	if (sensorADCRead == NAN)
		return;

	switch (heaterobj->state){
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2b04      	cmp	r3, #4
 8006974:	f200 80d9 	bhi.w	8006b2a <Heater_Controller+0x1d2>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <Heater_Controller+0x28>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006995 	.word	0x08006995
 8006984:	080069d9 	.word	0x080069d9
 8006988:	08006a21 	.word	0x08006a21
 800698c:	08006b2b 	.word	0x08006b2b
 8006990:	08006aa7 	.word	0x08006aa7
		case OFF:
			heaterobj->duty = 0.f;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	60da      	str	r2, [r3, #12]
			heaterobj->target = 0.f;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	611a      	str	r2, [r3, #16]
			heaterobj->errorSum = 0.f;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	61da      	str	r2, [r3, #28]
			heaterobj->prev = 0.f;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	619a      	str	r2, [r3, #24]
			heaterobj->current = 0.f;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	615a      	str	r2, [r3, #20]
			if (heaterobj->onFlag) {
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80b9 	beq.w	8006b3a <Heater_Controller+0x1e2>
				heaterobj->start(heaterobj);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	6838      	ldr	r0, [r7, #0]
 80069ce:	4798      	blx	r3
				heaterobj->state = PREHEATING;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	609a      	str	r2, [r3, #8]
			}
			break;
 80069d6:	e0b0      	b.n	8006b3a <Heater_Controller+0x1e2>

		case PREHEATING:
			heaterobj->duty = 1.f;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80069de:	60da      	str	r2, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069e6:	f083 0301 	eor.w	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <Heater_Controller+0xa0>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
			break;
 80069f6:	e0a1      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a04:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006a08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a14:	dc00      	bgt.n	8006a18 <Heater_Controller+0xc0>
			break;
 8006a16:	e091      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	609a      	str	r2, [r3, #8]
			break;
 8006a1e:	e08d      	b.n	8006b3c <Heater_Controller+0x1e4>

		case TRANSIENT:
			heaterobj->duty = Control_PID(sensorADCRead, heaterobj, PIDTransient);
 8006a20:	4b48      	ldr	r3, [pc, #288]	; (8006b44 <Heater_Controller+0x1ec>)
 8006a22:	466c      	mov	r4, sp
 8006a24:	f103 020c 	add.w	r2, r3, #12
 8006a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a2c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a32:	6838      	ldr	r0, [r7, #0]
 8006a34:	ed97 0a03 	vldr	s0, [r7, #12]
 8006a38:	f7ff fde4 	bl	8006604 <Control_PID>
 8006a3c:	eef0 7a40 	vmov.f32	s15, s0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a4c:	f083 0301 	eor.w	r3, r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <Heater_Controller+0x106>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	609a      	str	r2, [r3, #8]
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
			break;
 8006a5c:	e06e      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	ed93 7a05 	vldr	s14, [r3, #20]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a6a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006b48 <Heater_Controller+0x1f0>
 8006a6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7a:	dc00      	bgt.n	8006a7e <Heater_Controller+0x126>
			break;
 8006a7c:	e05e      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	ed93 7a05 	vldr	s14, [r3, #20]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a8a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006b48 <Heater_Controller+0x1f0>
 8006a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9a:	d400      	bmi.n	8006a9e <Heater_Controller+0x146>
			break;
 8006a9c:	e04e      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	609a      	str	r2, [r3, #8]
			break;
 8006aa4:	e04a      	b.n	8006b3c <Heater_Controller+0x1e4>

		case STEADY:
			heaterobj->duty = Control_PID(sensorADCRead, heaterobj, PIDSteady);
 8006aa6:	4b29      	ldr	r3, [pc, #164]	; (8006b4c <Heater_Controller+0x1f4>)
 8006aa8:	466c      	mov	r4, sp
 8006aaa:	f103 020c 	add.w	r2, r3, #12
 8006aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ab2:	e884 0003 	stmia.w	r4, {r0, r1}
 8006ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ab8:	6838      	ldr	r0, [r7, #0]
 8006aba:	ed97 0a03 	vldr	s0, [r7, #12]
 8006abe:	f7ff fda1 	bl	8006604 <Control_PID>
 8006ac2:	eef0 7a40 	vmov.f32	s15, s0
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ad2:	f083 0301 	eor.w	r3, r3, #1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <Heater_Controller+0x18c>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	609a      	str	r2, [r3, #8]
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
			break;
 8006ae2:	e02b      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	ed93 7a05 	vldr	s14, [r3, #20]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	edd3 7a06 	vldr	s15, [r3, #24]
 8006af0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006b48 <Heater_Controller+0x1f0>
 8006af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b00:	d90f      	bls.n	8006b22 <Heater_Controller+0x1ca>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	ed93 7a05 	vldr	s14, [r3, #20]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006b0e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006b48 <Heater_Controller+0x1f0>
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	da00      	bge.n	8006b22 <Heater_Controller+0x1ca>
			break;
 8006b20:	e00c      	b.n	8006b3c <Heater_Controller+0x1e4>
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2202      	movs	r2, #2
 8006b26:	609a      	str	r2, [r3, #8]
			break;
 8006b28:	e008      	b.n	8006b3c <Heater_Controller+0x1e4>

		default:
			heaterobj->onFlag = 0;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2020 	strb.w	r2, [r3, #32]
			heaterobj->state = OFF;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	609a      	str	r2, [r3, #8]
 8006b38:	e000      	b.n	8006b3c <Heater_Controller+0x1e4>
			break;
 8006b3a:	bf00      	nop
	}
}
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd90      	pop	{r4, r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000204 	.word	0x20000204
 8006b48:	3e4ccccd 	.word	0x3e4ccccd
 8006b4c:	20000218 	.word	0x20000218

08006b50 <Systick_Sensor_IRQ>:
/* Functions */

// 카운트 값을 1씩 줄이기 위한 인터럽트 핸들러.
// HAL_InitTick 함수에서 Systick 인터럽트가 1ms마다 실행되도록 설정되므로,
// 핸들러의 실행주기도 1ms이다.
void Systick_Sensor_IRQ() {
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
	// 카운트가 0이 아니면, waitcount의 값을 1 감소시킨다.
	// 현재 카운트 node를 읽으면, next node가 없을 때까지 다음으로 넘어가 읽기를 반복한다.
	if (waitcount_node_storage.size > 0) {
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <Systick_Sensor_IRQ+0x48>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d015      	beq.n	8006b8a <Systick_Sensor_IRQ+0x3a>
		waitcount_node *cur_node = waitcount_node_storage.frontPtr;
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <Systick_Sensor_IRQ+0x48>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 8006b64:	e00e      	b.n	8006b84 <Systick_Sensor_IRQ+0x34>
			cur_node->data -= (cur_node->data == 0) ? 0 : 1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	bf14      	ite	ne
 8006b72:	2201      	movne	r2, #1
 8006b74:	2200      	moveq	r2, #0
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	1a9a      	subs	r2, r3, r2
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
			cur_node = cur_node->next;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ed      	bne.n	8006b66 <Systick_Sensor_IRQ+0x16>
		}
	}
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20000728 	.word	0x20000728

08006b9c <Custom_Tempsensor>:

tempsensor_t* Custom_Tempsensor(SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t interval) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	80fb      	strh	r3, [r7, #6]
	// Setting methods
	tempsensor_t *sensorobj = (tempsensor_t*) calloc(1, sizeof(tempsensor_t));
 8006bac:	212c      	movs	r1, #44	; 0x2c
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f000 fe5a 	bl	8007868 <calloc>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	617b      	str	r3, [r7, #20]

	sensorobj->read = read;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <Custom_Tempsensor+0x8c>)
 8006bbc:	619a      	str	r2, [r3, #24]
	sensorobj->is_readable = is_readable;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <Custom_Tempsensor+0x90>)
 8006bc2:	61da      	str	r2, [r3, #28]
	sensorobj->set_interval = set_interval;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <Custom_Tempsensor+0x94>)
 8006bc8:	621a      	str	r2, [r3, #32]
	sensorobj->get_interval = get_interval;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <Custom_Tempsensor+0x98>)
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
	sensorobj->read_waitcount = read_waitcount;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <Custom_Tempsensor+0x9c>)
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28


	// Setting fields
	sensorobj->hspi = hspi;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	601a      	str	r2, [r3, #0]
	sensorobj->__sensor_interval = interval;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	60da      	str	r2, [r3, #12]

	// Setting CS pin
	sensorobj->csPin = GPIO_Pin;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	829a      	strh	r2, [r3, #20]
	sensorobj->csPort = GPIOx;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	605a      	str	r2, [r3, #4]

	// Pulling up CS pin
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	6858      	ldr	r0, [r3, #4]
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	8a9b      	ldrh	r3, [r3, #20]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f7fb fb4b 	bl	8002294 <HAL_GPIO_WritePin>

	// setting waitCount object
	waitcount_node *waitCntNode = (waitcount_node*) calloc(1, sizeof(waitcount_node));
 8006bfe:	2108      	movs	r1, #8
 8006c00:	2001      	movs	r0, #1
 8006c02:	f000 fe31 	bl	8007868 <calloc>
 8006c06:	4603      	mov	r3, r0
 8006c08:	613b      	str	r3, [r7, #16]
	sensorobj->waitCount = &(waitCntNode->data);
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	609a      	str	r2, [r3, #8]
	*(sensorobj->waitCount) = 10;	// for initialize&interrupt working test
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	220a      	movs	r2, #10
 8006c16:	601a      	str	r2, [r3, #0]
	Add_GlobalWaitCountNode(waitCntNode);
 8006c18:	6938      	ldr	r0, [r7, #16]
 8006c1a:	f000 f80f 	bl	8006c3c <Add_GlobalWaitCountNode>

	return sensorobj;
 8006c1e:	697b      	ldr	r3, [r7, #20]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	08006d0d 	.word	0x08006d0d
 8006c2c:	08006d5b 	.word	0x08006d5b
 8006c30:	08006d7f 	.word	0x08006d7f
 8006c34:	08006d9b 	.word	0x08006d9b
 8006c38:	08006db3 	.word	0x08006db3

08006c3c <Add_GlobalWaitCountNode>:

void Add_GlobalWaitCountNode(waitcount_node *waitCntNode) {
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	if (waitCntNode != NULL) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d013      	beq.n	8006c72 <Add_GlobalWaitCountNode+0x36>

		if (waitcount_node_storage.size == 0) {
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <Add_GlobalWaitCountNode+0x44>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <Add_GlobalWaitCountNode+0x1e>
			waitcount_node_storage.frontPtr = waitCntNode;
 8006c52:	4a0b      	ldr	r2, [pc, #44]	; (8006c80 <Add_GlobalWaitCountNode+0x44>)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e003      	b.n	8006c62 <Add_GlobalWaitCountNode+0x26>
		} else {
			waitcount_node_storage.backPtr->next = waitCntNode;
 8006c5a:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <Add_GlobalWaitCountNode+0x44>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	605a      	str	r2, [r3, #4]

		}
		waitcount_node_storage.backPtr = waitCntNode;
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <Add_GlobalWaitCountNode+0x44>)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6053      	str	r3, [r2, #4]
		waitcount_node_storage.size++;
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <Add_GlobalWaitCountNode+0x44>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <Add_GlobalWaitCountNode+0x44>)
 8006c70:	6093      	str	r3, [r2, #8]
	}
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20000728 	.word	0x20000728

08006c84 <__sensor_read>:

/* Methods */
__weak float __sensor_read(tempsensor_t *sensorobj) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float temp = 0;
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]

	// 16비트 데이터를 MSB부터 차례대로 받는다.
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_RESET);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6858      	ldr	r0, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8a9b      	ldrh	r3, [r3, #20]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f7fb faf9 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(sensorobj->hspi, pData, 1, 50);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	f107 0108 	add.w	r1, r7, #8
 8006caa:	2332      	movs	r3, #50	; 0x32
 8006cac:	2201      	movs	r2, #1
 8006cae:	f7fc f918 	bl	8002ee2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6858      	ldr	r0, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8a9b      	ldrh	r3, [r3, #20]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f7fb fae9 	bl	8002294 <HAL_GPIO_WritePin>

	if (((pData[0]|(pData[1]<<8))>>2)& 0x0001)
 8006cc2:	7a3b      	ldrb	r3, [r7, #8]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	7a7b      	ldrb	r3, [r7, #9]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <__sensor_read+0x56>
	   return NAN;
 8006cd4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8006d08 <__sensor_read+0x84>
 8006cd8:	e011      	b.n	8006cfe <__sensor_read+0x7a>
	temp = ((((pData[0]|pData[1]<<8)))>>3);
 8006cda:	7a3b      	ldrb	r3, [r7, #8]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	7a7b      	ldrb	r3, [r7, #9]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	10db      	asrs	r3, r3, #3
 8006ce6:	ee07 3a90 	vmov	s15, r3
 8006cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cee:	edc7 7a03 	vstr	s15, [r7, #12]

	return temp * 0.25f;
 8006cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cf6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8006cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	7fc00000 	.word	0x7fc00000

08006d0c <read>:
float read(tempsensor_t *sensorobj) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	float data = .0f;
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
	if (sensorobj->is_readable(sensorobj)) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00d      	beq.n	8006d44 <read+0x38>
		data = __sensor_read(sensorobj);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ffab 	bl	8006c84 <__sensor_read>
 8006d2e:	ed87 0a03 	vstr	s0, [r7, #12]
		*(sensorobj->waitCount) = sensorobj->__sensor_interval;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68d2      	ldr	r2, [r2, #12]
 8006d3a:	601a      	str	r2, [r3, #0]
		sensorobj->lastTemp = data;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	611a      	str	r2, [r3, #16]
 8006d42:	e002      	b.n	8006d4a <read+0x3e>
	} else {
		data = sensorobj->lastTemp;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	ee07 3a90 	vmov	s15, r3
}
 8006d50:	eeb0 0a67 	vmov.f32	s0, s15
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <is_readable>:
bool is_readable(tempsensor_t *sensorobj) {
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
	return !(sensorobj->read_waitcount(sensorobj));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <set_interval>:

void set_interval(tempsensor_t *sensorobj, uint32_t interval) {
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
	sensorobj->__sensor_interval = interval;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <get_interval>:
uint32_t get_interval(tempsensor_t *sensorobj) {
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
	return sensorobj->__sensor_interval;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <read_waitcount>:
uint32_t read_waitcount(tempsensor_t *sensorobj) {
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
	return *(sensorobj->waitCount);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <testTemp>:

extern heater_t *heaterTop;
extern heater_t *heaterBottom;

void testTemp();
void testTemp(){
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
	SwitchLED(COLOR_BLACK);
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	f7ff fac5 	bl	8006364 <Switch_LED>
	for(;;){
		uint16_t sw = Switch_Read();
 8006dda:	f7ff fadb 	bl	8006394 <Switch_Read>
 8006dde:	4603      	mov	r3, r0
 8006de0:	81fb      	strh	r3, [r7, #14]
		if(sw) break;
 8006de2:	89fb      	ldrh	r3, [r7, #14]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d136      	bne.n	8006e56 <testTemp+0x8a>
		if (tempTop->is_readable(tempTop) && tempBottom->is_readable(tempBottom)) {
 8006de8:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <testTemp+0x94>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <testTemp+0x94>)
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	4610      	mov	r0, r2
 8006df4:	4798      	blx	r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ee      	beq.n	8006dda <testTemp+0xe>
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <testTemp+0x98>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	4a18      	ldr	r2, [pc, #96]	; (8006e64 <testTemp+0x98>)
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	4610      	mov	r0, r2
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0e4      	beq.n	8006dda <testTemp+0xe>
			float temp1 = tempTop->read(tempTop);
 8006e10:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <testTemp+0x94>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	4a12      	ldr	r2, [pc, #72]	; (8006e60 <testTemp+0x94>)
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4798      	blx	r3
 8006e1e:	ed87 0a02 	vstr	s0, [r7, #8]
			float temp2 = tempBottom->read(tempBottom);
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <testTemp+0x98>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <testTemp+0x98>)
 8006e2a:	6812      	ldr	r2, [r2, #0]
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	ed87 0a01 	vstr	s0, [r7, #4]
			OLED_Printf("/s/0/rtempU: /y%f\r\n", temp1);
 8006e34:	68b8      	ldr	r0, [r7, #8]
 8006e36:	f7f9 fb8f 	bl	8000558 <__aeabi_f2d>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	480a      	ldr	r0, [pc, #40]	; (8006e68 <testTemp+0x9c>)
 8006e40:	f7fe fdc8 	bl	80059d4 <OLED_Printf>
			OLED_Printf("/s/1/rtempD: /y%f\r\n", temp2);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7f9 fb87 	bl	8000558 <__aeabi_f2d>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4807      	ldr	r0, [pc, #28]	; (8006e6c <testTemp+0xa0>)
 8006e50:	f7fe fdc0 	bl	80059d4 <OLED_Printf>
	for(;;){
 8006e54:	e7c1      	b.n	8006dda <testTemp+0xe>
		if(sw) break;
 8006e56:	bf00      	nop
//			printf("temp: %f\r\n", temp1->read(temp1));
		}
	}
}
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20000720 	.word	0x20000720
 8006e64:	200005a8 	.word	0x200005a8
 8006e68:	0800a7c0 	.word	0x0800a7c0
 8006e6c:	0800a7d4 	.word	0x0800a7d4

08006e70 <profile>:
void testHeat();




void profile(){}
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	bf00      	nop
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <GraphUITest>:
void test();
void DCFan_Set(uint8_t level);
void GraphUITest(){
 8006e80:	b5b0      	push	{r4, r5, r7, lr}
 8006e82:	b098      	sub	sp, #96	; 0x60
 8006e84:	af02      	add	r7, sp, #8
	float xData[10] = {0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0};
 8006e86:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <GraphUITest+0x60>)
 8006e88:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006e9a:	e884 0003 	stmia.w	r4, {r0, r1}
	float yData[10] = {30.0, 100.0, 250.0, 250.0, 250.0, 250.0, 250.0, 250.0, 250.0, 250.0};
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <GraphUITest+0x64>)
 8006ea0:	1d3c      	adds	r4, r7, #4
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006eb0:	e884 0003 	stmia.w	r4, {r0, r1}
	graph_t * g = Graph_InitEdge(xData, yData, 1.0, 6.0);
 8006eb4:	1d39      	adds	r1, r7, #4
 8006eb6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8006eba:	2334      	movs	r3, #52	; 0x34
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8006ec2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	220a      	movs	r2, #10
 8006eca:	f7fe f8d1 	bl	8005070 <_Graph_Init>
 8006ece:	6578      	str	r0, [r7, #84]	; 0x54
	Graph_UI(g);
 8006ed0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006ed2:	f7fe f941 	bl	8005158 <Graph_UI>
}
 8006ed6:	bf00      	nop
 8006ed8:	3758      	adds	r7, #88	; 0x58
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	0800a7e8 	.word	0x0800a7e8
 8006ee4:	0800a810 	.word	0x0800a810

08006ee8 <Menu_Setup>:

};

const uint8_t menuCnt = sizeof(menuList) / sizeof(Menu_t);

void Menu_Setup(){
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af02      	add	r7, sp, #8
	OLED_Begin();
 8006eee:	f7fe fb43 	bl	8005578 <OLED_Begin>
	OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt > 6 ? 6 : menuCnt, 0xFFFF00);
 8006ef2:	2307      	movs	r3, #7
 8006ef4:	2b06      	cmp	r3, #6
 8006ef6:	bf28      	it	cs
 8006ef8:	2306      	movcs	r3, #6
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <Menu_Setup+0x60>)
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	9200      	str	r2, [sp, #0]
 8006f04:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <Menu_Setup+0x64>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	4911      	ldr	r1, [pc, #68]	; (8006f50 <Menu_Setup+0x68>)
 8006f0a:	4812      	ldr	r0, [pc, #72]	; (8006f54 <Menu_Setup+0x6c>)
 8006f0c:	f7ff f95e 	bl	80061cc <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8006f10:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7ff f9a5 	bl	8006264 <OLED_Cursor>
	SwitchLED(menuList[0].color);
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <Menu_Setup+0x64>)
 8006f1c:	891b      	ldrh	r3, [r3, #8]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <Menu_Setup+0x64>)
 8006f2e:	891b      	ldrh	r3, [r3, #8]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7ff fa11 	bl	8006364 <Switch_LED>
}
 8006f42:	bf00      	nop
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	00ffff00 	.word	0x00ffff00
 8006f4c:	2000022c 	.word	0x2000022c
 8006f50:	00ff8800 	.word	0x00ff8800
 8006f54:	0800a87c 	.word	0x0800a87c

08006f58 <Menu>:

void Menu(){
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af02      	add	r7, sp, #8
	Menu_Setup();
 8006f5e:	f7ff ffc3 	bl	8006ee8 <Menu_Setup>
	uint8_t idx = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	71fb      	strb	r3, [r7, #7]
	for(;;){
		uint16_t sw = Switch_Read();
 8006f66:	f7ff fa15 	bl	8006394 <Switch_Read>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8006f6e:	88bb      	ldrh	r3, [r7, #4]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d002      	beq.n	8006f7a <Menu+0x22>
 8006f74:	88bb      	ldrh	r3, [r7, #4]
 8006f76:	2b22      	cmp	r3, #34	; 0x22
 8006f78:	d17f      	bne.n	800707a <Menu+0x122>
			idx+=menuCnt - 1;
 8006f7a:	2207      	movs	r2, #7
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	4413      	add	r3, r2
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8006f86:	2207      	movs	r2, #7
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f8e:	fb02 f201 	mul.w	r2, r2, r1
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && (idx % 6 == 5 || idx == menuCnt - 1)){
 8006f96:	2307      	movs	r3, #7
 8006f98:	2b06      	cmp	r3, #6
 8006f9a:	d93c      	bls.n	8007016 <Menu+0xbe>
 8006f9c:	79fa      	ldrb	r2, [r7, #7]
 8006f9e:	4b95      	ldr	r3, [pc, #596]	; (80071f4 <Menu+0x29c>)
 8006fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa4:	0899      	lsrs	r1, r3, #2
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	440b      	add	r3, r1
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d004      	beq.n	8006fc0 <Menu+0x68>
 8006fb6:	79fa      	ldrb	r2, [r7, #7]
 8006fb8:	2307      	movs	r3, #7
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d12a      	bne.n	8007016 <Menu+0xbe>
				OLED_Clear();
 8006fc0:	f7fe faaa 	bl	8005518 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + (idx / 6) * 6, menuCnt - (idx / 6) * 6 > 6 ? 6 : menuCnt - (idx / 6) * 6, 0xFFFF00);
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	4a8b      	ldr	r2, [pc, #556]	; (80071f4 <Menu+0x29c>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	089b      	lsrs	r3, r3, #2
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b86      	ldr	r3, [pc, #536]	; (80071f8 <Menu+0x2a0>)
 8006fde:	18d1      	adds	r1, r2, r3
 8006fe0:	2307      	movs	r3, #7
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	4a83      	ldr	r2, [pc, #524]	; (80071f4 <Menu+0x29c>)
 8006fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fec:	089b      	lsrs	r3, r3, #2
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	4403      	add	r3, r0
 8006ffc:	2b06      	cmp	r3, #6
 8006ffe:	bfa8      	it	ge
 8007000:	2306      	movge	r3, #6
 8007002:	461a      	mov	r2, r3
 8007004:	4b7d      	ldr	r3, [pc, #500]	; (80071fc <Menu+0x2a4>)
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	9200      	str	r2, [sp, #0]
 800700a:	460b      	mov	r3, r1
 800700c:	2200      	movs	r2, #0
 800700e:	497c      	ldr	r1, [pc, #496]	; (8007200 <Menu+0x2a8>)
 8007010:	487c      	ldr	r0, [pc, #496]	; (8007204 <Menu+0x2ac>)
 8007012:	f7ff f8db 	bl	80061cc <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 8007016:	79fa      	ldrb	r2, [r7, #7]
 8007018:	4b76      	ldr	r3, [pc, #472]	; (80071f4 <Menu+0x29c>)
 800701a:	fba3 1302 	umull	r1, r3, r3, r2
 800701e:	0899      	lsrs	r1, r3, #2
 8007020:	460b      	mov	r3, r1
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	440b      	add	r3, r1
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff f917 	bl	8006264 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8007036:	79fa      	ldrb	r2, [r7, #7]
 8007038:	496f      	ldr	r1, [pc, #444]	; (80071f8 <Menu+0x2a0>)
 800703a:	4613      	mov	r3, r2
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3308      	adds	r3, #8
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	0a1b      	lsrs	r3, r3, #8
 800704a:	b29b      	uxth	r3, r3
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	b29b      	uxth	r3, r3
 8007050:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007054:	b298      	uxth	r0, r3
 8007056:	79fa      	ldrb	r2, [r7, #7]
 8007058:	4967      	ldr	r1, [pc, #412]	; (80071f8 <Menu+0x2a0>)
 800705a:	4613      	mov	r3, r2
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3308      	adds	r3, #8
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	b29b      	uxth	r3, r3
 800706c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007070:	b29b      	uxth	r3, r3
 8007072:	4619      	mov	r1, r3
 8007074:	f7ff f976 	bl	8006364 <Switch_LED>
 8007078:	e0ba      	b.n	80071f0 <Menu+0x298>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 800707a:	88bb      	ldrh	r3, [r7, #4]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d002      	beq.n	8007086 <Menu+0x12e>
 8007080:	88bb      	ldrh	r3, [r7, #4]
 8007082:	2b28      	cmp	r3, #40	; 0x28
 8007084:	d167      	bne.n	8007156 <Menu+0x1fe>
			idx+=1;
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	3301      	adds	r3, #1
 800708a:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 800708c:	2207      	movs	r2, #7
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	fbb3 f1f2 	udiv	r1, r3, r2
 8007094:	fb02 f201 	mul.w	r2, r2, r1
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && idx % 6 == 0){
 800709c:	2307      	movs	r3, #7
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d927      	bls.n	80070f2 <Menu+0x19a>
 80070a2:	79fa      	ldrb	r2, [r7, #7]
 80070a4:	4b53      	ldr	r3, [pc, #332]	; (80071f4 <Menu+0x29c>)
 80070a6:	fba3 1302 	umull	r1, r3, r3, r2
 80070aa:	0899      	lsrs	r1, r3, #2
 80070ac:	460b      	mov	r3, r1
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	440b      	add	r3, r1
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d11a      	bne.n	80070f2 <Menu+0x19a>
				OLED_Clear();
 80070bc:	f7fe fa2c 	bl	8005518 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + idx, menuCnt - idx > 6 ? 6 : menuCnt - idx, 0xFFFF00);
 80070c0:	79fa      	ldrb	r2, [r7, #7]
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	461a      	mov	r2, r3
 80070cc:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <Menu+0x2a0>)
 80070ce:	441a      	add	r2, r3
 80070d0:	2307      	movs	r3, #7
 80070d2:	4619      	mov	r1, r3
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	1acb      	subs	r3, r1, r3
 80070d8:	2b06      	cmp	r3, #6
 80070da:	bfa8      	it	ge
 80070dc:	2306      	movge	r3, #6
 80070de:	4619      	mov	r1, r3
 80070e0:	4b46      	ldr	r3, [pc, #280]	; (80071fc <Menu+0x2a4>)
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	9100      	str	r1, [sp, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	4945      	ldr	r1, [pc, #276]	; (8007200 <Menu+0x2a8>)
 80070ec:	4845      	ldr	r0, [pc, #276]	; (8007204 <Menu+0x2ac>)
 80070ee:	f7ff f86d 	bl	80061cc <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 80070f2:	79fa      	ldrb	r2, [r7, #7]
 80070f4:	4b3f      	ldr	r3, [pc, #252]	; (80071f4 <Menu+0x29c>)
 80070f6:	fba3 1302 	umull	r1, r3, r3, r2
 80070fa:	0899      	lsrs	r1, r3, #2
 80070fc:	460b      	mov	r3, r1
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	440b      	add	r3, r1
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff f8a9 	bl	8006264 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8007112:	79fa      	ldrb	r2, [r7, #7]
 8007114:	4938      	ldr	r1, [pc, #224]	; (80071f8 <Menu+0x2a0>)
 8007116:	4613      	mov	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	3308      	adds	r3, #8
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	0a1b      	lsrs	r3, r3, #8
 8007126:	b29b      	uxth	r3, r3
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	b29b      	uxth	r3, r3
 800712c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007130:	b298      	uxth	r0, r3
 8007132:	79fa      	ldrb	r2, [r7, #7]
 8007134:	4930      	ldr	r1, [pc, #192]	; (80071f8 <Menu+0x2a0>)
 8007136:	4613      	mov	r3, r2
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	3308      	adds	r3, #8
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	b29b      	uxth	r3, r3
 8007148:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800714c:	b29b      	uxth	r3, r3
 800714e:	4619      	mov	r1, r3
 8007150:	f7ff f908 	bl	8006364 <Switch_LED>
 8007154:	e04c      	b.n	80071f0 <Menu+0x298>
		}
		else if(sw == SW_ENTER){
 8007156:	88bb      	ldrh	r3, [r7, #4]
 8007158:	2b04      	cmp	r3, #4
 800715a:	f47f af04 	bne.w	8006f66 <Menu+0xe>
			OLED_Clear();//OLED를 지웁니다.
 800715e:	f7fe f9db 	bl	8005518 <OLED_Clear>
			menuList[idx].function();
 8007162:	79fa      	ldrb	r2, [r7, #7]
 8007164:	4924      	ldr	r1, [pc, #144]	; (80071f8 <Menu+0x2a0>)
 8007166:	4613      	mov	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4798      	blx	r3
			OLED_Clear();//OLED를 지웁니다.
 8007174:	f7fe f9d0 	bl	8005518 <OLED_Clear>
			OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt, 0xFFFF00);
 8007178:	2307      	movs	r3, #7
 800717a:	461a      	mov	r2, r3
 800717c:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <Menu+0x2a4>)
 800717e:	9301      	str	r3, [sp, #4]
 8007180:	9200      	str	r2, [sp, #0]
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <Menu+0x2a0>)
 8007184:	2200      	movs	r2, #0
 8007186:	491e      	ldr	r1, [pc, #120]	; (8007200 <Menu+0x2a8>)
 8007188:	481e      	ldr	r0, [pc, #120]	; (8007204 <Menu+0x2ac>)
 800718a:	f7ff f81f 	bl	80061cc <OLED_MenuUI>
			OLED_Cursor(idx % 6, 0xFF0000);
 800718e:	79fa      	ldrb	r2, [r7, #7]
 8007190:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <Menu+0x29c>)
 8007192:	fba3 1302 	umull	r1, r3, r3, r2
 8007196:	0899      	lsrs	r1, r3, #2
 8007198:	460b      	mov	r3, r1
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	440b      	add	r3, r1
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff f85b 	bl	8006264 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 80071ae:	79fa      	ldrb	r2, [r7, #7]
 80071b0:	4911      	ldr	r1, [pc, #68]	; (80071f8 <Menu+0x2a0>)
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	3308      	adds	r3, #8
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80071cc:	b298      	uxth	r0, r3
 80071ce:	79fa      	ldrb	r2, [r7, #7]
 80071d0:	4909      	ldr	r1, [pc, #36]	; (80071f8 <Menu+0x2a0>)
 80071d2:	4613      	mov	r3, r2
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3308      	adds	r3, #8
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4619      	mov	r1, r3
 80071ec:	f7ff f8ba 	bl	8006364 <Switch_LED>
	for(;;){
 80071f0:	e6b9      	b.n	8006f66 <Menu+0xe>
 80071f2:	bf00      	nop
 80071f4:	aaaaaaab 	.word	0xaaaaaaab
 80071f8:	2000022c 	.word	0x2000022c
 80071fc:	00ffff00 	.word	0x00ffff00
 8007200:	00ff8800 	.word	0x00ff8800
 8007204:	0800a87c 	.word	0x0800a87c

08007208 <test>:
		{NULL, "HD    : OFF", COLOR_RED},
		{NULL, "FAN   : OFF", COLOR_RED},
};

//출력 단자가 잘 동작하는지 테스트합니다.
void test(){
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af02      	add	r7, sp, #8
	uint8_t idx = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	71fb      	strb	r3, [r7, #7]
	OLED_MenuUI("TEST", 0xFF00FF, 0x000000, testList, 6, 0x6600FF);
 8007212:	4bbe      	ldr	r3, [pc, #760]	; (800750c <test+0x304>)
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	2306      	movs	r3, #6
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	4bbd      	ldr	r3, [pc, #756]	; (8007510 <test+0x308>)
 800721c:	2200      	movs	r2, #0
 800721e:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
 8007222:	48bc      	ldr	r0, [pc, #752]	; (8007514 <test+0x30c>)
 8007224:	f7fe ffd2 	bl	80061cc <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8007228:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800722c:	2000      	movs	r0, #0
 800722e:	f7ff f819 	bl	8006264 <OLED_Cursor>
	SwitchLED(testList[0].color);
 8007232:	4bb7      	ldr	r3, [pc, #732]	; (8007510 <test+0x308>)
 8007234:	891b      	ldrh	r3, [r3, #8]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	b29b      	uxth	r3, r3
 800723e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007242:	b29a      	uxth	r2, r3
 8007244:	4bb2      	ldr	r3, [pc, #712]	; (8007510 <test+0x308>)
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	b29b      	uxth	r3, r3
 800724c:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007250:	b29b      	uxth	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f7ff f885 	bl	8006364 <Switch_LED>
	testList[0].color = COLOR_RED;
 800725a:	4bad      	ldr	r3, [pc, #692]	; (8007510 <test+0x308>)
 800725c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007260:	811a      	strh	r2, [r3, #8]
	testList[1].color = COLOR_RED;
 8007262:	4bab      	ldr	r3, [pc, #684]	; (8007510 <test+0x308>)
 8007264:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007268:	829a      	strh	r2, [r3, #20]
	testList[2].color = COLOR_RED;
 800726a:	4ba9      	ldr	r3, [pc, #676]	; (8007510 <test+0x308>)
 800726c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007270:	841a      	strh	r2, [r3, #32]
	testList[3].color = COLOR_RED;
 8007272:	4ba7      	ldr	r3, [pc, #668]	; (8007510 <test+0x308>)
 8007274:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007278:	859a      	strh	r2, [r3, #44]	; 0x2c
	testList[4].color = COLOR_RED;
 800727a:	4ba5      	ldr	r3, [pc, #660]	; (8007510 <test+0x308>)
 800727c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007280:	871a      	strh	r2, [r3, #56]	; 0x38
	testList[5].color = COLOR_RED;
 8007282:	4ba3      	ldr	r3, [pc, #652]	; (8007510 <test+0x308>)
 8007284:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	for(;;){
		uint16_t sw = Switch_Read();
 800728c:	f7ff f882 	bl	8006394 <Switch_Read>
 8007290:	4603      	mov	r3, r0
 8007292:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8007294:	88bb      	ldrh	r3, [r7, #4]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d002      	beq.n	80072a0 <test+0x98>
 800729a:	88bb      	ldrh	r3, [r7, #4]
 800729c:	2b22      	cmp	r3, #34	; 0x22
 800729e:	d135      	bne.n	800730c <test+0x104>
			idx+=5;
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	3305      	adds	r3, #5
 80072a4:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 80072a6:	79fa      	ldrb	r2, [r7, #7]
 80072a8:	4b9b      	ldr	r3, [pc, #620]	; (8007518 <test+0x310>)
 80072aa:	fba3 1302 	umull	r1, r3, r3, r2
 80072ae:	0899      	lsrs	r1, r3, #2
 80072b0:	460b      	mov	r3, r1
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	440b      	add	r3, r1
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe ffce 	bl	8006264 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 80072c8:	79fa      	ldrb	r2, [r7, #7]
 80072ca:	4991      	ldr	r1, [pc, #580]	; (8007510 <test+0x308>)
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3308      	adds	r3, #8
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80072e6:	b298      	uxth	r0, r3
 80072e8:	79fa      	ldrb	r2, [r7, #7]
 80072ea:	4989      	ldr	r1, [pc, #548]	; (8007510 <test+0x308>)
 80072ec:	4613      	mov	r3, r2
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	440b      	add	r3, r1
 80072f6:	3308      	adds	r3, #8
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007302:	b29b      	uxth	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	f7ff f82d 	bl	8006364 <Switch_LED>
 800730a:	e154      	b.n	80075b6 <test+0x3ae>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 800730c:	88bb      	ldrh	r3, [r7, #4]
 800730e:	2b08      	cmp	r3, #8
 8007310:	d002      	beq.n	8007318 <test+0x110>
 8007312:	88bb      	ldrh	r3, [r7, #4]
 8007314:	2b28      	cmp	r3, #40	; 0x28
 8007316:	d135      	bne.n	8007384 <test+0x17c>
			idx+=1;
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	3301      	adds	r3, #1
 800731c:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 800731e:	79fa      	ldrb	r2, [r7, #7]
 8007320:	4b7d      	ldr	r3, [pc, #500]	; (8007518 <test+0x310>)
 8007322:	fba3 1302 	umull	r1, r3, r3, r2
 8007326:	0899      	lsrs	r1, r3, #2
 8007328:	460b      	mov	r3, r1
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	440b      	add	r3, r1
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe ff92 	bl	8006264 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 8007340:	79fa      	ldrb	r2, [r7, #7]
 8007342:	4973      	ldr	r1, [pc, #460]	; (8007510 <test+0x308>)
 8007344:	4613      	mov	r3, r2
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	3308      	adds	r3, #8
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	b29b      	uxth	r3, r3
 800735a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800735e:	b298      	uxth	r0, r3
 8007360:	79fa      	ldrb	r2, [r7, #7]
 8007362:	496b      	ldr	r1, [pc, #428]	; (8007510 <test+0x308>)
 8007364:	4613      	mov	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3308      	adds	r3, #8
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	b29b      	uxth	r3, r3
 8007376:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800737a:	b29b      	uxth	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	f7fe fff1 	bl	8006364 <Switch_LED>
 8007382:	e118      	b.n	80075b6 <test+0x3ae>
		}
		else if(sw == SW_ENTER){
 8007384:	88bb      	ldrh	r3, [r7, #4]
 8007386:	2b04      	cmp	r3, #4
 8007388:	f000 8116 	beq.w	80075b8 <test+0x3b0>
			break;
		}
		else if(sw == SW_LEFT || sw == SW_RIGHT){
 800738c:	88bb      	ldrh	r3, [r7, #4]
 800738e:	2b10      	cmp	r3, #16
 8007390:	d003      	beq.n	800739a <test+0x192>
 8007392:	88bb      	ldrh	r3, [r7, #4]
 8007394:	2b01      	cmp	r3, #1
 8007396:	f47f af79 	bne.w	800728c <test+0x84>
			if(testList[idx].color == COLOR_RED){
 800739a:	79fa      	ldrb	r2, [r7, #7]
 800739c:	495c      	ldr	r1, [pc, #368]	; (8007510 <test+0x308>)
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	3308      	adds	r3, #8
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073b0:	d159      	bne.n	8007466 <test+0x25e>
				testList[idx].color = COLOR_WHITE;
 80073b2:	79fa      	ldrb	r2, [r7, #7]
 80073b4:	4956      	ldr	r1, [pc, #344]	; (8007510 <test+0x308>)
 80073b6:	4613      	mov	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3308      	adds	r3, #8
 80073c2:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 80073c6:	801a      	strh	r2, [r3, #0]
				switch(idx){
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	f200 80d2 	bhi.w	8007574 <test+0x36c>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <test+0x1d0>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	080073f1 	.word	0x080073f1
 80073dc:	08007405 	.word	0x08007405
 80073e0:	08007419 	.word	0x08007419
 80073e4:	0800742d 	.word	0x0800742d
 80073e8:	08007441 	.word	0x08007441
 80073ec:	08007453 	.word	0x08007453
				case 0:
					// Convection Fan
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 80073f0:	2200      	movs	r2, #0
 80073f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073f6:	4849      	ldr	r0, [pc, #292]	; (800751c <test+0x314>)
 80073f8:	f7fa ff4c 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: ON ");
 80073fc:	4848      	ldr	r0, [pc, #288]	; (8007520 <test+0x318>)
 80073fe:	f7fe fae9 	bl	80059d4 <OLED_Printf>
					break;
 8007402:	e0b7      	b.n	8007574 <test+0x36c>
				case 1:
					// Rotisserie Motor
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 8007404:	2200      	movs	r2, #0
 8007406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800740a:	4844      	ldr	r0, [pc, #272]	; (800751c <test+0x314>)
 800740c:	f7fa ff42 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: ON ");
 8007410:	4844      	ldr	r0, [pc, #272]	; (8007524 <test+0x31c>)
 8007412:	f7fe fadf 	bl	80059d4 <OLED_Printf>
					break;
 8007416:	e0ad      	b.n	8007574 <test+0x36c>
				case 2:
					// Lamp
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 0);
 8007418:	2200      	movs	r2, #0
 800741a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800741e:	483f      	ldr	r0, [pc, #252]	; (800751c <test+0x314>)
 8007420:	f7fa ff38 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : ON ");
 8007424:	4840      	ldr	r0, [pc, #256]	; (8007528 <test+0x320>)
 8007426:	f7fe fad5 	bl	80059d4 <OLED_Printf>
					break;
 800742a:	e0a3      	b.n	8007574 <test+0x36c>
				case 3:
					// Heater Top
					HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 0);
 800742c:	2200      	movs	r2, #0
 800742e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007432:	483e      	ldr	r0, [pc, #248]	; (800752c <test+0x324>)
 8007434:	f7fa ff2e 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : ON ");
 8007438:	483d      	ldr	r0, [pc, #244]	; (8007530 <test+0x328>)
 800743a:	f7fe facb 	bl	80059d4 <OLED_Printf>
					break;
 800743e:	e099      	b.n	8007574 <test+0x36c>
				case 4:
					// Heater Bottom
					HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 0);
 8007440:	2200      	movs	r2, #0
 8007442:	2180      	movs	r1, #128	; 0x80
 8007444:	4839      	ldr	r0, [pc, #228]	; (800752c <test+0x324>)
 8007446:	f7fa ff25 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : ON ");
 800744a:	483a      	ldr	r0, [pc, #232]	; (8007534 <test+0x32c>)
 800744c:	f7fe fac2 	bl	80059d4 <OLED_Printf>
					break;
 8007450:	e090      	b.n	8007574 <test+0x36c>
				case 5:
					// Mainboard Fan
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 1);
 8007452:	2201      	movs	r2, #1
 8007454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007458:	4834      	ldr	r0, [pc, #208]	; (800752c <test+0x324>)
 800745a:	f7fa ff1b 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : ON ");
 800745e:	4836      	ldr	r0, [pc, #216]	; (8007538 <test+0x330>)
 8007460:	f7fe fab8 	bl	80059d4 <OLED_Printf>
					break;
 8007464:	e086      	b.n	8007574 <test+0x36c>
				}
			}
			else if(testList[idx].color == COLOR_WHITE){
 8007466:	79fa      	ldrb	r2, [r7, #7]
 8007468:	4929      	ldr	r1, [pc, #164]	; (8007510 <test+0x308>)
 800746a:	4613      	mov	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	3308      	adds	r3, #8
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 800747c:	4293      	cmp	r3, r2
 800747e:	d178      	bne.n	8007572 <test+0x36a>
				testList[idx].color = COLOR_RED;
 8007480:	79fa      	ldrb	r2, [r7, #7]
 8007482:	4923      	ldr	r1, [pc, #140]	; (8007510 <test+0x308>)
 8007484:	4613      	mov	r3, r2
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	3308      	adds	r3, #8
 8007490:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007494:	801a      	strh	r2, [r3, #0]
				switch(idx){
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	2b05      	cmp	r3, #5
 800749a:	d86b      	bhi.n	8007574 <test+0x36c>
 800749c:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <test+0x29c>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074bd 	.word	0x080074bd
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074e5 	.word	0x080074e5
 80074b0:	080074f9 	.word	0x080074f9
 80074b4:	0800754d 	.word	0x0800754d
 80074b8:	0800755f 	.word	0x0800755f
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80074bc:	2201      	movs	r2, #1
 80074be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074c2:	4816      	ldr	r0, [pc, #88]	; (800751c <test+0x314>)
 80074c4:	f7fa fee6 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: OFF");
 80074c8:	481c      	ldr	r0, [pc, #112]	; (800753c <test+0x334>)
 80074ca:	f7fe fa83 	bl	80059d4 <OLED_Printf>
					break;
 80074ce:	e051      	b.n	8007574 <test+0x36c>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 80074d0:	2201      	movs	r2, #1
 80074d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074d6:	4811      	ldr	r0, [pc, #68]	; (800751c <test+0x314>)
 80074d8:	f7fa fedc 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: OFF");
 80074dc:	4818      	ldr	r0, [pc, #96]	; (8007540 <test+0x338>)
 80074de:	f7fe fa79 	bl	80059d4 <OLED_Printf>
					break;
 80074e2:	e047      	b.n	8007574 <test+0x36c>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 80074e4:	2201      	movs	r2, #1
 80074e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074ea:	480c      	ldr	r0, [pc, #48]	; (800751c <test+0x314>)
 80074ec:	f7fa fed2 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : OFF");
 80074f0:	4814      	ldr	r0, [pc, #80]	; (8007544 <test+0x33c>)
 80074f2:	f7fe fa6f 	bl	80059d4 <OLED_Printf>
					break;
 80074f6:	e03d      	b.n	8007574 <test+0x36c>
				case 3:
					HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 1);
 80074f8:	2201      	movs	r2, #1
 80074fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074fe:	480b      	ldr	r0, [pc, #44]	; (800752c <test+0x324>)
 8007500:	f7fa fec8 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : OFF");
 8007504:	4810      	ldr	r0, [pc, #64]	; (8007548 <test+0x340>)
 8007506:	f7fe fa65 	bl	80059d4 <OLED_Printf>
					break;
 800750a:	e033      	b.n	8007574 <test+0x36c>
 800750c:	006600ff 	.word	0x006600ff
 8007510:	20000280 	.word	0x20000280
 8007514:	0800a8d0 	.word	0x0800a8d0
 8007518:	aaaaaaab 	.word	0xaaaaaaab
 800751c:	40020000 	.word	0x40020000
 8007520:	0800a8d8 	.word	0x0800a8d8
 8007524:	0800a8e8 	.word	0x0800a8e8
 8007528:	0800a8f8 	.word	0x0800a8f8
 800752c:	40020800 	.word	0x40020800
 8007530:	0800a908 	.word	0x0800a908
 8007534:	0800a918 	.word	0x0800a918
 8007538:	0800a928 	.word	0x0800a928
 800753c:	0800a938 	.word	0x0800a938
 8007540:	0800a948 	.word	0x0800a948
 8007544:	0800a958 	.word	0x0800a958
 8007548:	0800a968 	.word	0x0800a968
				case 4:
					HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 1);
 800754c:	2201      	movs	r2, #1
 800754e:	2180      	movs	r1, #128	; 0x80
 8007550:	482d      	ldr	r0, [pc, #180]	; (8007608 <test+0x400>)
 8007552:	f7fa fe9f 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : OFF");
 8007556:	482d      	ldr	r0, [pc, #180]	; (800760c <test+0x404>)
 8007558:	f7fe fa3c 	bl	80059d4 <OLED_Printf>
					break;
 800755c:	e00a      	b.n	8007574 <test+0x36c>
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 800755e:	2200      	movs	r2, #0
 8007560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007564:	4828      	ldr	r0, [pc, #160]	; (8007608 <test+0x400>)
 8007566:	f7fa fe95 	bl	8002294 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : OFF");
 800756a:	4829      	ldr	r0, [pc, #164]	; (8007610 <test+0x408>)
 800756c:	f7fe fa32 	bl	80059d4 <OLED_Printf>
					break;
 8007570:	e000      	b.n	8007574 <test+0x36c>
				}
			}
 8007572:	bf00      	nop

			SwitchLED(testList[idx].color);
 8007574:	79fa      	ldrb	r2, [r7, #7]
 8007576:	4927      	ldr	r1, [pc, #156]	; (8007614 <test+0x40c>)
 8007578:	4613      	mov	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	440b      	add	r3, r1
 8007582:	3308      	adds	r3, #8
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	b29b      	uxth	r3, r3
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	b29b      	uxth	r3, r3
 800758e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8007592:	b298      	uxth	r0, r3
 8007594:	79fa      	ldrb	r2, [r7, #7]
 8007596:	491f      	ldr	r1, [pc, #124]	; (8007614 <test+0x40c>)
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	3308      	adds	r3, #8
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	f7fe fed7 	bl	8006364 <Switch_LED>
	for(;;){
 80075b6:	e669      	b.n	800728c <test+0x84>
			break;
 80075b8:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 80075ba:	2201      	movs	r2, #1
 80075bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075c0:	4815      	ldr	r0, [pc, #84]	; (8007618 <test+0x410>)
 80075c2:	f7fa fe67 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 80075c6:	2201      	movs	r2, #1
 80075c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075cc:	4812      	ldr	r0, [pc, #72]	; (8007618 <test+0x410>)
 80075ce:	f7fa fe61 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 80075d2:	2201      	movs	r2, #1
 80075d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075d8:	480f      	ldr	r0, [pc, #60]	; (8007618 <test+0x410>)
 80075da:	f7fa fe5b 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Heater_Top_GPIO_Port, Heater_Top_Pin, 1);
 80075de:	2201      	movs	r2, #1
 80075e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075e4:	4808      	ldr	r0, [pc, #32]	; (8007608 <test+0x400>)
 80075e6:	f7fa fe55 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Heater_Bottom_GPIO_Port, Heater_Bottom_Pin, 1);
 80075ea:	2201      	movs	r2, #1
 80075ec:	2180      	movs	r1, #128	; 0x80
 80075ee:	4806      	ldr	r0, [pc, #24]	; (8007608 <test+0x400>)
 80075f0:	f7fa fe50 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 80075f4:	2200      	movs	r2, #0
 80075f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075fa:	4803      	ldr	r0, [pc, #12]	; (8007608 <test+0x400>)
 80075fc:	f7fa fe4a 	bl	8002294 <HAL_GPIO_WritePin>

}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40020800 	.word	0x40020800
 800760c:	0800a978 	.word	0x0800a978
 8007610:	0800a988 	.word	0x0800a988
 8007614:	20000280 	.word	0x20000280
 8007618:	40020000 	.word	0x40020000

0800761c <testHeat>:
		{NULL, "/s/3/rConvect:", COLOR_SKY},
		{NULL, "/s/4/wdutyU:", COLOR_SKY},
};

// FLAG_TEMPSENSOR_DEBUG가 설정되면 온도를 직접 제어할 수 있다.
void testHeat(){
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af02      	add	r7, sp, #8
	SwitchLED(COLOR_SKY);
 8007622:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007626:	20d4      	movs	r0, #212	; 0xd4
 8007628:	f7fe fe9c 	bl	8006364 <Switch_LED>
	OLED_MenuUI("TEST HEAT", 0xFF0000, 0x000000, testHeatList, 4, 0xFFFF00);
 800762c:	4b81      	ldr	r3, [pc, #516]	; (8007834 <testHeat+0x218>)
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	2304      	movs	r3, #4
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4b80      	ldr	r3, [pc, #512]	; (8007838 <testHeat+0x21c>)
 8007636:	2200      	movs	r2, #0
 8007638:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800763c:	487f      	ldr	r0, [pc, #508]	; (800783c <testHeat+0x220>)
 800763e:	f7fe fdc5 	bl	80061cc <OLED_MenuUI>
	OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 8007642:	4b7f      	ldr	r3, [pc, #508]	; (8007840 <testHeat+0x224>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 ff85 	bl	8000558 <__aeabi_f2d>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	487c      	ldr	r0, [pc, #496]	; (8007844 <testHeat+0x228>)
 8007654:	f7fe f9be 	bl	80059d4 <OLED_Printf>
	OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 8007658:	4b7b      	ldr	r3, [pc, #492]	; (8007848 <testHeat+0x22c>)
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <testHeat+0x4c>
 8007664:	4b79      	ldr	r3, [pc, #484]	; (800784c <testHeat+0x230>)
 8007666:	e000      	b.n	800766a <testHeat+0x4e>
 8007668:	4b79      	ldr	r3, [pc, #484]	; (8007850 <testHeat+0x234>)
 800766a:	4619      	mov	r1, r3
 800766c:	4879      	ldr	r0, [pc, #484]	; (8007854 <testHeat+0x238>)
 800766e:	f7fe f9b1 	bl	80059d4 <OLED_Printf>
	OLED_Cursor(0, 0xFF6600);
 8007672:	4979      	ldr	r1, [pc, #484]	; (8007858 <testHeat+0x23c>)
 8007674:	2000      	movs	r0, #0
 8007676:	f7fe fdf5 	bl	8006264 <OLED_Cursor>
	int idx = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
	heaterTop->start(heaterTop);
 800767e:	4b70      	ldr	r3, [pc, #448]	; (8007840 <testHeat+0x224>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	4a6e      	ldr	r2, [pc, #440]	; (8007840 <testHeat+0x224>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);	// Convection 팬 끄기
 800768c:	2201      	movs	r2, #1
 800768e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007692:	486d      	ldr	r0, [pc, #436]	; (8007848 <testHeat+0x22c>)
 8007694:	f7fa fdfe 	bl	8002294 <HAL_GPIO_WritePin>
	for(;;){
		uint16_t sw = Switch_Read();
 8007698:	f7fe fe7c 	bl	8006394 <Switch_Read>
 800769c:	4603      	mov	r3, r0
 800769e:	817b      	strh	r3, [r7, #10]

		if(sw==SW_ENTER) break;
 80076a0:	897b      	ldrh	r3, [r7, #10]
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	f000 80b9 	beq.w	800781a <testHeat+0x1fe>
		else if (sw==SW_TOP) {
 80076a8:	897b      	ldrh	r3, [r7, #10]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d110      	bne.n	80076d0 <testHeat+0xb4>
			idx -= (idx>0)?1:0;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfcc      	ite	gt
 80076b4:	2301      	movgt	r3, #1
 80076b6:	2300      	movle	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
			OLED_Cursor(idx, 0xFF6600);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	4964      	ldr	r1, [pc, #400]	; (8007858 <testHeat+0x23c>)
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fdcb 	bl	8006264 <OLED_Cursor>
 80076ce:	e087      	b.n	80077e0 <testHeat+0x1c4>
		}
		else if (sw==SW_BOTTOM) {
 80076d0:	897b      	ldrh	r3, [r7, #10]
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d110      	bne.n	80076f8 <testHeat+0xdc>
			idx += (idx<2)?1:0;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	bfd4      	ite	le
 80076dc:	2301      	movle	r3, #1
 80076de:	2300      	movgt	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
			OLED_Cursor(idx, 0xFF6600);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	495a      	ldr	r1, [pc, #360]	; (8007858 <testHeat+0x23c>)
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fdb7 	bl	8006264 <OLED_Cursor>
 80076f6:	e073      	b.n	80077e0 <testHeat+0x1c4>
		}
		else if (sw==SW_RIGHT || sw==SW_RIGHT_LONG) {
 80076f8:	897b      	ldrh	r3, [r7, #10]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d002      	beq.n	8007704 <testHeat+0xe8>
 80076fe:	897b      	ldrh	r3, [r7, #10]
 8007700:	2b21      	cmp	r3, #33	; 0x21
 8007702:	d133      	bne.n	800776c <testHeat+0x150>
			switch(idx) {
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d003      	beq.n	8007712 <testHeat+0xf6>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d018      	beq.n	8007742 <testHeat+0x126>
 8007710:	e066      	b.n	80077e0 <testHeat+0x1c4>
			case 0:
				tempTop->lastTemp += 10.0f;
				break;
#endif
			case 1:
				heaterTop->target += 1.0f;
 8007712:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <testHeat+0x224>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	edd3 7a04 	vldr	s15, [r3, #16]
 800771a:	4b49      	ldr	r3, [pc, #292]	; (8007840 <testHeat+0x224>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007726:	edc3 7a04 	vstr	s15, [r3, #16]
				OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 800772a:	4b45      	ldr	r3, [pc, #276]	; (8007840 <testHeat+0x224>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	4618      	mov	r0, r3
 8007732:	f7f8 ff11 	bl	8000558 <__aeabi_f2d>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4842      	ldr	r0, [pc, #264]	; (8007844 <testHeat+0x228>)
 800773c:	f7fe f94a 	bl	80059d4 <OLED_Printf>
				break;
 8007740:	e013      	b.n	800776a <testHeat+0x14e>
			case 2:
				HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_RESET);
 8007742:	2200      	movs	r2, #0
 8007744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007748:	483f      	ldr	r0, [pc, #252]	; (8007848 <testHeat+0x22c>)
 800774a:	f7fa fda3 	bl	8002294 <HAL_GPIO_WritePin>
				OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 800774e:	4b3e      	ldr	r3, [pc, #248]	; (8007848 <testHeat+0x22c>)
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <testHeat+0x142>
 800775a:	4b3c      	ldr	r3, [pc, #240]	; (800784c <testHeat+0x230>)
 800775c:	e000      	b.n	8007760 <testHeat+0x144>
 800775e:	4b3c      	ldr	r3, [pc, #240]	; (8007850 <testHeat+0x234>)
 8007760:	4619      	mov	r1, r3
 8007762:	483c      	ldr	r0, [pc, #240]	; (8007854 <testHeat+0x238>)
 8007764:	f7fe f936 	bl	80059d4 <OLED_Printf>
				break;
 8007768:	bf00      	nop
			switch(idx) {
 800776a:	e039      	b.n	80077e0 <testHeat+0x1c4>
			}
		}
		else if (sw==SW_LEFT || sw==SW_LEFT_LONG) {
 800776c:	897b      	ldrh	r3, [r7, #10]
 800776e:	2b10      	cmp	r3, #16
 8007770:	d002      	beq.n	8007778 <testHeat+0x15c>
 8007772:	897b      	ldrh	r3, [r7, #10]
 8007774:	2b30      	cmp	r3, #48	; 0x30
 8007776:	d132      	bne.n	80077de <testHeat+0x1c2>
			switch(idx) {
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d003      	beq.n	8007786 <testHeat+0x16a>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d018      	beq.n	80077b6 <testHeat+0x19a>
 8007784:	e02c      	b.n	80077e0 <testHeat+0x1c4>
			case 0:
				tempTop->lastTemp -= 10.0f;
				break;
#endif
			case 1:
				heaterTop->target -= 1.0f;
 8007786:	4b2e      	ldr	r3, [pc, #184]	; (8007840 <testHeat+0x224>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	edd3 7a04 	vldr	s15, [r3, #16]
 800778e:	4b2c      	ldr	r3, [pc, #176]	; (8007840 <testHeat+0x224>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800779a:	edc3 7a04 	vstr	s15, [r3, #16]
				OLED_Printf("/s$29/y%3.2f  \r\n", heaterTop->target);
 800779e:	4b28      	ldr	r3, [pc, #160]	; (8007840 <testHeat+0x224>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7f8 fed7 	bl	8000558 <__aeabi_f2d>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4825      	ldr	r0, [pc, #148]	; (8007844 <testHeat+0x228>)
 80077b0:	f7fe f910 	bl	80059d4 <OLED_Printf>
				break;
 80077b4:	e014      	b.n	80077e0 <testHeat+0x1c4>
			case 2:
				HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, GPIO_PIN_SET);
 80077b6:	2201      	movs	r2, #1
 80077b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077bc:	4822      	ldr	r0, [pc, #136]	; (8007848 <testHeat+0x22c>)
 80077be:	f7fa fd69 	bl	8002294 <HAL_GPIO_WritePin>
				OLED_Printf("/s$39/y%s\r\n", (Motor1_GPIO_Port->ODR) & Motor1_Pin?"OFF":"ON ");
 80077c2:	4b21      	ldr	r3, [pc, #132]	; (8007848 <testHeat+0x22c>)
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <testHeat+0x1b6>
 80077ce:	4b1f      	ldr	r3, [pc, #124]	; (800784c <testHeat+0x230>)
 80077d0:	e000      	b.n	80077d4 <testHeat+0x1b8>
 80077d2:	4b1f      	ldr	r3, [pc, #124]	; (8007850 <testHeat+0x234>)
 80077d4:	4619      	mov	r1, r3
 80077d6:	481f      	ldr	r0, [pc, #124]	; (8007854 <testHeat+0x238>)
 80077d8:	f7fe f8fc 	bl	80059d4 <OLED_Printf>
				break;
 80077dc:	e000      	b.n	80077e0 <testHeat+0x1c4>
			}
		}
 80077de:	bf00      	nop
		float temp = tempTop->read(tempTop);
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <testHeat+0x240>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	4a1d      	ldr	r2, [pc, #116]	; (800785c <testHeat+0x240>)
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	4610      	mov	r0, r2
 80077ec:	4798      	blx	r3
 80077ee:	ed87 0a01 	vstr	s0, [r7, #4]

		OLED_Printf("/s$19/y%3.2f  \r\n", temp);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f8 feb0 	bl	8000558 <__aeabi_f2d>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4818      	ldr	r0, [pc, #96]	; (8007860 <testHeat+0x244>)
 80077fe:	f7fe f8e9 	bl	80059d4 <OLED_Printf>
		OLED_Printf("/s$49/p%3.2f  \r\n", heaterTop->duty);
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <testHeat+0x224>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	4618      	mov	r0, r3
 800780a:	f7f8 fea5 	bl	8000558 <__aeabi_f2d>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4814      	ldr	r0, [pc, #80]	; (8007864 <testHeat+0x248>)
 8007814:	f7fe f8de 	bl	80059d4 <OLED_Printf>
	for(;;){
 8007818:	e73e      	b.n	8007698 <testHeat+0x7c>
		if(sw==SW_ENTER) break;
 800781a:	bf00      	nop
	}
	heaterTop->stop(heaterTop);
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <testHeat+0x224>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	4a07      	ldr	r2, [pc, #28]	; (8007840 <testHeat+0x224>)
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	00ffff00 	.word	0x00ffff00
 8007838:	200002c8 	.word	0x200002c8
 800783c:	0800a9d8 	.word	0x0800a9d8
 8007840:	200005ac 	.word	0x200005ac
 8007844:	0800a9e4 	.word	0x0800a9e4
 8007848:	40020000 	.word	0x40020000
 800784c:	0800a9f8 	.word	0x0800a9f8
 8007850:	0800a9fc 	.word	0x0800a9fc
 8007854:	0800aa00 	.word	0x0800aa00
 8007858:	00ff6600 	.word	0x00ff6600
 800785c:	20000720 	.word	0x20000720
 8007860:	0800aa0c 	.word	0x0800aa0c
 8007864:	0800aa20 	.word	0x0800aa20

08007868 <calloc>:
 8007868:	4b02      	ldr	r3, [pc, #8]	; (8007874 <calloc+0xc>)
 800786a:	460a      	mov	r2, r1
 800786c:	4601      	mov	r1, r0
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	f000 b83c 	b.w	80078ec <_calloc_r>
 8007874:	200002f8 	.word	0x200002f8

08007878 <__errno>:
 8007878:	4b01      	ldr	r3, [pc, #4]	; (8007880 <__errno+0x8>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	200002f8 	.word	0x200002f8

08007884 <__libc_init_array>:
 8007884:	b570      	push	{r4, r5, r6, lr}
 8007886:	4d0d      	ldr	r5, [pc, #52]	; (80078bc <__libc_init_array+0x38>)
 8007888:	4c0d      	ldr	r4, [pc, #52]	; (80078c0 <__libc_init_array+0x3c>)
 800788a:	1b64      	subs	r4, r4, r5
 800788c:	10a4      	asrs	r4, r4, #2
 800788e:	2600      	movs	r6, #0
 8007890:	42a6      	cmp	r6, r4
 8007892:	d109      	bne.n	80078a8 <__libc_init_array+0x24>
 8007894:	4d0b      	ldr	r5, [pc, #44]	; (80078c4 <__libc_init_array+0x40>)
 8007896:	4c0c      	ldr	r4, [pc, #48]	; (80078c8 <__libc_init_array+0x44>)
 8007898:	f002 ff5e 	bl	800a758 <_init>
 800789c:	1b64      	subs	r4, r4, r5
 800789e:	10a4      	asrs	r4, r4, #2
 80078a0:	2600      	movs	r6, #0
 80078a2:	42a6      	cmp	r6, r4
 80078a4:	d105      	bne.n	80078b2 <__libc_init_array+0x2e>
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ac:	4798      	blx	r3
 80078ae:	3601      	adds	r6, #1
 80078b0:	e7ee      	b.n	8007890 <__libc_init_array+0xc>
 80078b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b6:	4798      	blx	r3
 80078b8:	3601      	adds	r6, #1
 80078ba:	e7f2      	b.n	80078a2 <__libc_init_array+0x1e>
 80078bc:	0800ae34 	.word	0x0800ae34
 80078c0:	0800ae34 	.word	0x0800ae34
 80078c4:	0800ae34 	.word	0x0800ae34
 80078c8:	0800ae38 	.word	0x0800ae38

080078cc <malloc>:
 80078cc:	4b02      	ldr	r3, [pc, #8]	; (80078d8 <malloc+0xc>)
 80078ce:	4601      	mov	r1, r0
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	f000 b86b 	b.w	80079ac <_malloc_r>
 80078d6:	bf00      	nop
 80078d8:	200002f8 	.word	0x200002f8

080078dc <memset>:
 80078dc:	4402      	add	r2, r0
 80078de:	4603      	mov	r3, r0
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d100      	bne.n	80078e6 <memset+0xa>
 80078e4:	4770      	bx	lr
 80078e6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ea:	e7f9      	b.n	80078e0 <memset+0x4>

080078ec <_calloc_r>:
 80078ec:	b513      	push	{r0, r1, r4, lr}
 80078ee:	434a      	muls	r2, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	f000 f85a 	bl	80079ac <_malloc_r>
 80078f8:	4604      	mov	r4, r0
 80078fa:	b118      	cbz	r0, 8007904 <_calloc_r+0x18>
 80078fc:	9a01      	ldr	r2, [sp, #4]
 80078fe:	2100      	movs	r1, #0
 8007900:	f7ff ffec 	bl	80078dc <memset>
 8007904:	4620      	mov	r0, r4
 8007906:	b002      	add	sp, #8
 8007908:	bd10      	pop	{r4, pc}
	...

0800790c <_free_r>:
 800790c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800790e:	2900      	cmp	r1, #0
 8007910:	d048      	beq.n	80079a4 <_free_r+0x98>
 8007912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007916:	9001      	str	r0, [sp, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f1a1 0404 	sub.w	r4, r1, #4
 800791e:	bfb8      	it	lt
 8007920:	18e4      	addlt	r4, r4, r3
 8007922:	f001 ff4b 	bl	80097bc <__malloc_lock>
 8007926:	4a20      	ldr	r2, [pc, #128]	; (80079a8 <_free_r+0x9c>)
 8007928:	9801      	ldr	r0, [sp, #4]
 800792a:	6813      	ldr	r3, [r2, #0]
 800792c:	4615      	mov	r5, r2
 800792e:	b933      	cbnz	r3, 800793e <_free_r+0x32>
 8007930:	6063      	str	r3, [r4, #4]
 8007932:	6014      	str	r4, [r2, #0]
 8007934:	b003      	add	sp, #12
 8007936:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800793a:	f001 bf45 	b.w	80097c8 <__malloc_unlock>
 800793e:	42a3      	cmp	r3, r4
 8007940:	d90b      	bls.n	800795a <_free_r+0x4e>
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	1862      	adds	r2, r4, r1
 8007946:	4293      	cmp	r3, r2
 8007948:	bf04      	itt	eq
 800794a:	681a      	ldreq	r2, [r3, #0]
 800794c:	685b      	ldreq	r3, [r3, #4]
 800794e:	6063      	str	r3, [r4, #4]
 8007950:	bf04      	itt	eq
 8007952:	1852      	addeq	r2, r2, r1
 8007954:	6022      	streq	r2, [r4, #0]
 8007956:	602c      	str	r4, [r5, #0]
 8007958:	e7ec      	b.n	8007934 <_free_r+0x28>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x58>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x4e>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1855      	adds	r5, r2, r1
 8007968:	42a5      	cmp	r5, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x78>
 800796c:	6824      	ldr	r4, [r4, #0]
 800796e:	4421      	add	r1, r4
 8007970:	1854      	adds	r4, r2, r1
 8007972:	42a3      	cmp	r3, r4
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1dd      	bne.n	8007934 <_free_r+0x28>
 8007978:	681c      	ldr	r4, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	4421      	add	r1, r4
 8007980:	6011      	str	r1, [r2, #0]
 8007982:	e7d7      	b.n	8007934 <_free_r+0x28>
 8007984:	d902      	bls.n	800798c <_free_r+0x80>
 8007986:	230c      	movs	r3, #12
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	e7d3      	b.n	8007934 <_free_r+0x28>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf04      	itt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	bf04      	itt	eq
 800799c:	1949      	addeq	r1, r1, r5
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	6054      	str	r4, [r2, #4]
 80079a2:	e7c7      	b.n	8007934 <_free_r+0x28>
 80079a4:	b003      	add	sp, #12
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	200004fc 	.word	0x200004fc

080079ac <_malloc_r>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	1ccd      	adds	r5, r1, #3
 80079b0:	f025 0503 	bic.w	r5, r5, #3
 80079b4:	3508      	adds	r5, #8
 80079b6:	2d0c      	cmp	r5, #12
 80079b8:	bf38      	it	cc
 80079ba:	250c      	movcc	r5, #12
 80079bc:	2d00      	cmp	r5, #0
 80079be:	4606      	mov	r6, r0
 80079c0:	db01      	blt.n	80079c6 <_malloc_r+0x1a>
 80079c2:	42a9      	cmp	r1, r5
 80079c4:	d903      	bls.n	80079ce <_malloc_r+0x22>
 80079c6:	230c      	movs	r3, #12
 80079c8:	6033      	str	r3, [r6, #0]
 80079ca:	2000      	movs	r0, #0
 80079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ce:	f001 fef5 	bl	80097bc <__malloc_lock>
 80079d2:	4921      	ldr	r1, [pc, #132]	; (8007a58 <_malloc_r+0xac>)
 80079d4:	680a      	ldr	r2, [r1, #0]
 80079d6:	4614      	mov	r4, r2
 80079d8:	b99c      	cbnz	r4, 8007a02 <_malloc_r+0x56>
 80079da:	4f20      	ldr	r7, [pc, #128]	; (8007a5c <_malloc_r+0xb0>)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	b923      	cbnz	r3, 80079ea <_malloc_r+0x3e>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 fd3c 	bl	8008460 <_sbrk_r>
 80079e8:	6038      	str	r0, [r7, #0]
 80079ea:	4629      	mov	r1, r5
 80079ec:	4630      	mov	r0, r6
 80079ee:	f000 fd37 	bl	8008460 <_sbrk_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d123      	bne.n	8007a3e <_malloc_r+0x92>
 80079f6:	230c      	movs	r3, #12
 80079f8:	6033      	str	r3, [r6, #0]
 80079fa:	4630      	mov	r0, r6
 80079fc:	f001 fee4 	bl	80097c8 <__malloc_unlock>
 8007a00:	e7e3      	b.n	80079ca <_malloc_r+0x1e>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	1b5b      	subs	r3, r3, r5
 8007a06:	d417      	bmi.n	8007a38 <_malloc_r+0x8c>
 8007a08:	2b0b      	cmp	r3, #11
 8007a0a:	d903      	bls.n	8007a14 <_malloc_r+0x68>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	441c      	add	r4, r3
 8007a10:	6025      	str	r5, [r4, #0]
 8007a12:	e004      	b.n	8007a1e <_malloc_r+0x72>
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	42a2      	cmp	r2, r4
 8007a18:	bf0c      	ite	eq
 8007a1a:	600b      	streq	r3, [r1, #0]
 8007a1c:	6053      	strne	r3, [r2, #4]
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f001 fed2 	bl	80097c8 <__malloc_unlock>
 8007a24:	f104 000b 	add.w	r0, r4, #11
 8007a28:	1d23      	adds	r3, r4, #4
 8007a2a:	f020 0007 	bic.w	r0, r0, #7
 8007a2e:	1ac2      	subs	r2, r0, r3
 8007a30:	d0cc      	beq.n	80079cc <_malloc_r+0x20>
 8007a32:	1a1b      	subs	r3, r3, r0
 8007a34:	50a3      	str	r3, [r4, r2]
 8007a36:	e7c9      	b.n	80079cc <_malloc_r+0x20>
 8007a38:	4622      	mov	r2, r4
 8007a3a:	6864      	ldr	r4, [r4, #4]
 8007a3c:	e7cc      	b.n	80079d8 <_malloc_r+0x2c>
 8007a3e:	1cc4      	adds	r4, r0, #3
 8007a40:	f024 0403 	bic.w	r4, r4, #3
 8007a44:	42a0      	cmp	r0, r4
 8007a46:	d0e3      	beq.n	8007a10 <_malloc_r+0x64>
 8007a48:	1a21      	subs	r1, r4, r0
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f000 fd08 	bl	8008460 <_sbrk_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1dd      	bne.n	8007a10 <_malloc_r+0x64>
 8007a54:	e7cf      	b.n	80079f6 <_malloc_r+0x4a>
 8007a56:	bf00      	nop
 8007a58:	200004fc 	.word	0x200004fc
 8007a5c:	20000500 	.word	0x20000500

08007a60 <__cvt>:
 8007a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	ec55 4b10 	vmov	r4, r5, d0
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	460e      	mov	r6, r1
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	462b      	mov	r3, r5
 8007a70:	bfbb      	ittet	lt
 8007a72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a76:	461d      	movlt	r5, r3
 8007a78:	2300      	movge	r3, #0
 8007a7a:	232d      	movlt	r3, #45	; 0x2d
 8007a7c:	700b      	strb	r3, [r1, #0]
 8007a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a84:	4691      	mov	r9, r2
 8007a86:	f023 0820 	bic.w	r8, r3, #32
 8007a8a:	bfbc      	itt	lt
 8007a8c:	4622      	movlt	r2, r4
 8007a8e:	4614      	movlt	r4, r2
 8007a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a94:	d005      	beq.n	8007aa2 <__cvt+0x42>
 8007a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a9a:	d100      	bne.n	8007a9e <__cvt+0x3e>
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	e000      	b.n	8007aa4 <__cvt+0x44>
 8007aa2:	2103      	movs	r1, #3
 8007aa4:	ab03      	add	r3, sp, #12
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	ab02      	add	r3, sp, #8
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	ec45 4b10 	vmov	d0, r4, r5
 8007ab0:	4653      	mov	r3, sl
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	f000 fe64 	bl	8008780 <_dtoa_r>
 8007ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007abc:	4607      	mov	r7, r0
 8007abe:	d102      	bne.n	8007ac6 <__cvt+0x66>
 8007ac0:	f019 0f01 	tst.w	r9, #1
 8007ac4:	d022      	beq.n	8007b0c <__cvt+0xac>
 8007ac6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007aca:	eb07 0906 	add.w	r9, r7, r6
 8007ace:	d110      	bne.n	8007af2 <__cvt+0x92>
 8007ad0:	783b      	ldrb	r3, [r7, #0]
 8007ad2:	2b30      	cmp	r3, #48	; 0x30
 8007ad4:	d10a      	bne.n	8007aec <__cvt+0x8c>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4620      	mov	r0, r4
 8007adc:	4629      	mov	r1, r5
 8007ade:	f7f8 fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ae2:	b918      	cbnz	r0, 8007aec <__cvt+0x8c>
 8007ae4:	f1c6 0601 	rsb	r6, r6, #1
 8007ae8:	f8ca 6000 	str.w	r6, [sl]
 8007aec:	f8da 3000 	ldr.w	r3, [sl]
 8007af0:	4499      	add	r9, r3
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 8007afe:	b108      	cbz	r0, 8007b04 <__cvt+0xa4>
 8007b00:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b04:	2230      	movs	r2, #48	; 0x30
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	454b      	cmp	r3, r9
 8007b0a:	d307      	bcc.n	8007b1c <__cvt+0xbc>
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b10:	1bdb      	subs	r3, r3, r7
 8007b12:	4638      	mov	r0, r7
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	b004      	add	sp, #16
 8007b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1c:	1c59      	adds	r1, r3, #1
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	e7f0      	b.n	8007b06 <__cvt+0xa6>

08007b24 <__exponent>:
 8007b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b26:	4603      	mov	r3, r0
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	bfb8      	it	lt
 8007b2c:	4249      	neglt	r1, r1
 8007b2e:	f803 2b02 	strb.w	r2, [r3], #2
 8007b32:	bfb4      	ite	lt
 8007b34:	222d      	movlt	r2, #45	; 0x2d
 8007b36:	222b      	movge	r2, #43	; 0x2b
 8007b38:	2909      	cmp	r1, #9
 8007b3a:	7042      	strb	r2, [r0, #1]
 8007b3c:	dd2a      	ble.n	8007b94 <__exponent+0x70>
 8007b3e:	f10d 0407 	add.w	r4, sp, #7
 8007b42:	46a4      	mov	ip, r4
 8007b44:	270a      	movs	r7, #10
 8007b46:	46a6      	mov	lr, r4
 8007b48:	460a      	mov	r2, r1
 8007b4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8007b52:	3530      	adds	r5, #48	; 0x30
 8007b54:	2a63      	cmp	r2, #99	; 0x63
 8007b56:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b5e:	4631      	mov	r1, r6
 8007b60:	dcf1      	bgt.n	8007b46 <__exponent+0x22>
 8007b62:	3130      	adds	r1, #48	; 0x30
 8007b64:	f1ae 0502 	sub.w	r5, lr, #2
 8007b68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b6c:	1c44      	adds	r4, r0, #1
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4561      	cmp	r1, ip
 8007b72:	d30a      	bcc.n	8007b8a <__exponent+0x66>
 8007b74:	f10d 0209 	add.w	r2, sp, #9
 8007b78:	eba2 020e 	sub.w	r2, r2, lr
 8007b7c:	4565      	cmp	r5, ip
 8007b7e:	bf88      	it	hi
 8007b80:	2200      	movhi	r2, #0
 8007b82:	4413      	add	r3, r2
 8007b84:	1a18      	subs	r0, r3, r0
 8007b86:	b003      	add	sp, #12
 8007b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b92:	e7ed      	b.n	8007b70 <__exponent+0x4c>
 8007b94:	2330      	movs	r3, #48	; 0x30
 8007b96:	3130      	adds	r1, #48	; 0x30
 8007b98:	7083      	strb	r3, [r0, #2]
 8007b9a:	70c1      	strb	r1, [r0, #3]
 8007b9c:	1d03      	adds	r3, r0, #4
 8007b9e:	e7f1      	b.n	8007b84 <__exponent+0x60>

08007ba0 <_printf_float>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	ed2d 8b02 	vpush	{d8}
 8007ba8:	b08d      	sub	sp, #52	; 0x34
 8007baa:	460c      	mov	r4, r1
 8007bac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	f001 fd87 	bl	80096c8 <_localeconv_r>
 8007bba:	f8d0 a000 	ldr.w	sl, [r0]
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	f7f8 fb0e 	bl	80001e0 <strlen>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	9305      	str	r3, [sp, #20]
 8007bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bd4:	3307      	adds	r3, #7
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	f103 0208 	add.w	r2, r3, #8
 8007bde:	f8c8 2000 	str.w	r2, [r8]
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007bea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007bee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bf8:	ee08 0a10 	vmov	s16, r0
 8007bfc:	4b9f      	ldr	r3, [pc, #636]	; (8007e7c <_printf_float+0x2dc>)
 8007bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c02:	f04f 32ff 	mov.w	r2, #4294967295
 8007c06:	f7f8 ff99 	bl	8000b3c <__aeabi_dcmpun>
 8007c0a:	bb88      	cbnz	r0, 8007c70 <_printf_float+0xd0>
 8007c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c10:	4b9a      	ldr	r3, [pc, #616]	; (8007e7c <_printf_float+0x2dc>)
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295
 8007c16:	f7f8 ff73 	bl	8000b00 <__aeabi_dcmple>
 8007c1a:	bb48      	cbnz	r0, 8007c70 <_printf_float+0xd0>
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4640      	mov	r0, r8
 8007c22:	4649      	mov	r1, r9
 8007c24:	f7f8 ff62 	bl	8000aec <__aeabi_dcmplt>
 8007c28:	b110      	cbz	r0, 8007c30 <_printf_float+0x90>
 8007c2a:	232d      	movs	r3, #45	; 0x2d
 8007c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c30:	4b93      	ldr	r3, [pc, #588]	; (8007e80 <_printf_float+0x2e0>)
 8007c32:	4894      	ldr	r0, [pc, #592]	; (8007e84 <_printf_float+0x2e4>)
 8007c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c38:	bf94      	ite	ls
 8007c3a:	4698      	movls	r8, r3
 8007c3c:	4680      	movhi	r8, r0
 8007c3e:	2303      	movs	r3, #3
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	f023 0204 	bic.w	r2, r3, #4
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	f04f 0900 	mov.w	r9, #0
 8007c4e:	9700      	str	r7, [sp, #0]
 8007c50:	4633      	mov	r3, r6
 8007c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f000 f9d8 	bl	800800c <_printf_common>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f040 8090 	bne.w	8007d82 <_printf_float+0x1e2>
 8007c62:	f04f 30ff 	mov.w	r0, #4294967295
 8007c66:	b00d      	add	sp, #52	; 0x34
 8007c68:	ecbd 8b02 	vpop	{d8}
 8007c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c70:	4642      	mov	r2, r8
 8007c72:	464b      	mov	r3, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	4649      	mov	r1, r9
 8007c78:	f7f8 ff60 	bl	8000b3c <__aeabi_dcmpun>
 8007c7c:	b140      	cbz	r0, 8007c90 <_printf_float+0xf0>
 8007c7e:	464b      	mov	r3, r9
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bfbc      	itt	lt
 8007c84:	232d      	movlt	r3, #45	; 0x2d
 8007c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c8a:	487f      	ldr	r0, [pc, #508]	; (8007e88 <_printf_float+0x2e8>)
 8007c8c:	4b7f      	ldr	r3, [pc, #508]	; (8007e8c <_printf_float+0x2ec>)
 8007c8e:	e7d1      	b.n	8007c34 <_printf_float+0x94>
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c96:	9206      	str	r2, [sp, #24]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	d13f      	bne.n	8007d1c <_printf_float+0x17c>
 8007c9c:	2306      	movs	r3, #6
 8007c9e:	6063      	str	r3, [r4, #4]
 8007ca0:	9b05      	ldr	r3, [sp, #20]
 8007ca2:	6861      	ldr	r1, [r4, #4]
 8007ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9303      	str	r3, [sp, #12]
 8007cac:	ab0a      	add	r3, sp, #40	; 0x28
 8007cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cb2:	ab09      	add	r3, sp, #36	; 0x24
 8007cb4:	ec49 8b10 	vmov	d0, r8, r9
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f7ff fecd 	bl	8007a60 <__cvt>
 8007cc6:	9b06      	ldr	r3, [sp, #24]
 8007cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cca:	2b47      	cmp	r3, #71	; 0x47
 8007ccc:	4680      	mov	r8, r0
 8007cce:	d108      	bne.n	8007ce2 <_printf_float+0x142>
 8007cd0:	1cc8      	adds	r0, r1, #3
 8007cd2:	db02      	blt.n	8007cda <_printf_float+0x13a>
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	dd41      	ble.n	8007d5e <_printf_float+0x1be>
 8007cda:	f1ab 0b02 	sub.w	fp, fp, #2
 8007cde:	fa5f fb8b 	uxtb.w	fp, fp
 8007ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ce6:	d820      	bhi.n	8007d2a <_printf_float+0x18a>
 8007ce8:	3901      	subs	r1, #1
 8007cea:	465a      	mov	r2, fp
 8007cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8007cf2:	f7ff ff17 	bl	8007b24 <__exponent>
 8007cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf8:	1813      	adds	r3, r2, r0
 8007cfa:	2a01      	cmp	r2, #1
 8007cfc:	4681      	mov	r9, r0
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	dc02      	bgt.n	8007d08 <_printf_float+0x168>
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	07d2      	lsls	r2, r2, #31
 8007d06:	d501      	bpl.n	8007d0c <_printf_float+0x16c>
 8007d08:	3301      	adds	r3, #1
 8007d0a:	6123      	str	r3, [r4, #16]
 8007d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d09c      	beq.n	8007c4e <_printf_float+0xae>
 8007d14:	232d      	movs	r3, #45	; 0x2d
 8007d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1a:	e798      	b.n	8007c4e <_printf_float+0xae>
 8007d1c:	9a06      	ldr	r2, [sp, #24]
 8007d1e:	2a47      	cmp	r2, #71	; 0x47
 8007d20:	d1be      	bne.n	8007ca0 <_printf_float+0x100>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1bc      	bne.n	8007ca0 <_printf_float+0x100>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e7b9      	b.n	8007c9e <_printf_float+0xfe>
 8007d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d2e:	d118      	bne.n	8007d62 <_printf_float+0x1c2>
 8007d30:	2900      	cmp	r1, #0
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	dd0b      	ble.n	8007d4e <_printf_float+0x1ae>
 8007d36:	6121      	str	r1, [r4, #16]
 8007d38:	b913      	cbnz	r3, 8007d40 <_printf_float+0x1a0>
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	07d0      	lsls	r0, r2, #31
 8007d3e:	d502      	bpl.n	8007d46 <_printf_float+0x1a6>
 8007d40:	3301      	adds	r3, #1
 8007d42:	440b      	add	r3, r1
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d48:	f04f 0900 	mov.w	r9, #0
 8007d4c:	e7de      	b.n	8007d0c <_printf_float+0x16c>
 8007d4e:	b913      	cbnz	r3, 8007d56 <_printf_float+0x1b6>
 8007d50:	6822      	ldr	r2, [r4, #0]
 8007d52:	07d2      	lsls	r2, r2, #31
 8007d54:	d501      	bpl.n	8007d5a <_printf_float+0x1ba>
 8007d56:	3302      	adds	r3, #2
 8007d58:	e7f4      	b.n	8007d44 <_printf_float+0x1a4>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e7f2      	b.n	8007d44 <_printf_float+0x1a4>
 8007d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d64:	4299      	cmp	r1, r3
 8007d66:	db05      	blt.n	8007d74 <_printf_float+0x1d4>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	6121      	str	r1, [r4, #16]
 8007d6c:	07d8      	lsls	r0, r3, #31
 8007d6e:	d5ea      	bpl.n	8007d46 <_printf_float+0x1a6>
 8007d70:	1c4b      	adds	r3, r1, #1
 8007d72:	e7e7      	b.n	8007d44 <_printf_float+0x1a4>
 8007d74:	2900      	cmp	r1, #0
 8007d76:	bfd4      	ite	le
 8007d78:	f1c1 0202 	rsble	r2, r1, #2
 8007d7c:	2201      	movgt	r2, #1
 8007d7e:	4413      	add	r3, r2
 8007d80:	e7e0      	b.n	8007d44 <_printf_float+0x1a4>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	055a      	lsls	r2, r3, #21
 8007d86:	d407      	bmi.n	8007d98 <_printf_float+0x1f8>
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	4642      	mov	r2, r8
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	d12c      	bne.n	8007df0 <_printf_float+0x250>
 8007d96:	e764      	b.n	8007c62 <_printf_float+0xc2>
 8007d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d9c:	f240 80e0 	bls.w	8007f60 <_printf_float+0x3c0>
 8007da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	f7f8 fe96 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d034      	beq.n	8007e1a <_printf_float+0x27a>
 8007db0:	4a37      	ldr	r2, [pc, #220]	; (8007e90 <_printf_float+0x2f0>)
 8007db2:	2301      	movs	r3, #1
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f af51 	beq.w	8007c62 <_printf_float+0xc2>
 8007dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	db02      	blt.n	8007dce <_printf_float+0x22e>
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	07d8      	lsls	r0, r3, #31
 8007dcc:	d510      	bpl.n	8007df0 <_printf_float+0x250>
 8007dce:	ee18 3a10 	vmov	r3, s16
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	f43f af41 	beq.w	8007c62 <_printf_float+0xc2>
 8007de0:	f04f 0800 	mov.w	r8, #0
 8007de4:	f104 091a 	add.w	r9, r4, #26
 8007de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dea:	3b01      	subs	r3, #1
 8007dec:	4543      	cmp	r3, r8
 8007dee:	dc09      	bgt.n	8007e04 <_printf_float+0x264>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	079b      	lsls	r3, r3, #30
 8007df4:	f100 8105 	bmi.w	8008002 <_printf_float+0x462>
 8007df8:	68e0      	ldr	r0, [r4, #12]
 8007dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dfc:	4298      	cmp	r0, r3
 8007dfe:	bfb8      	it	lt
 8007e00:	4618      	movlt	r0, r3
 8007e02:	e730      	b.n	8007c66 <_printf_float+0xc6>
 8007e04:	2301      	movs	r3, #1
 8007e06:	464a      	mov	r2, r9
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	47b8      	blx	r7
 8007e0e:	3001      	adds	r0, #1
 8007e10:	f43f af27 	beq.w	8007c62 <_printf_float+0xc2>
 8007e14:	f108 0801 	add.w	r8, r8, #1
 8007e18:	e7e6      	b.n	8007de8 <_printf_float+0x248>
 8007e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dc39      	bgt.n	8007e94 <_printf_float+0x2f4>
 8007e20:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <_printf_float+0x2f0>)
 8007e22:	2301      	movs	r3, #1
 8007e24:	4631      	mov	r1, r6
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f43f af19 	beq.w	8007c62 <_printf_float+0xc2>
 8007e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e34:	4313      	orrs	r3, r2
 8007e36:	d102      	bne.n	8007e3e <_printf_float+0x29e>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	d5d8      	bpl.n	8007df0 <_printf_float+0x250>
 8007e3e:	ee18 3a10 	vmov	r3, s16
 8007e42:	4652      	mov	r2, sl
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f af09 	beq.w	8007c62 <_printf_float+0xc2>
 8007e50:	f04f 0900 	mov.w	r9, #0
 8007e54:	f104 0a1a 	add.w	sl, r4, #26
 8007e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5a:	425b      	negs	r3, r3
 8007e5c:	454b      	cmp	r3, r9
 8007e5e:	dc01      	bgt.n	8007e64 <_printf_float+0x2c4>
 8007e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e62:	e792      	b.n	8007d8a <_printf_float+0x1ea>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4652      	mov	r2, sl
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b8      	blx	r7
 8007e6e:	3001      	adds	r0, #1
 8007e70:	f43f aef7 	beq.w	8007c62 <_printf_float+0xc2>
 8007e74:	f109 0901 	add.w	r9, r9, #1
 8007e78:	e7ee      	b.n	8007e58 <_printf_float+0x2b8>
 8007e7a:	bf00      	nop
 8007e7c:	7fefffff 	.word	0x7fefffff
 8007e80:	0800aa50 	.word	0x0800aa50
 8007e84:	0800aa54 	.word	0x0800aa54
 8007e88:	0800aa5c 	.word	0x0800aa5c
 8007e8c:	0800aa58 	.word	0x0800aa58
 8007e90:	0800aa60 	.word	0x0800aa60
 8007e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	bfa8      	it	ge
 8007e9c:	461a      	movge	r2, r3
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	4691      	mov	r9, r2
 8007ea2:	dc37      	bgt.n	8007f14 <_printf_float+0x374>
 8007ea4:	f04f 0b00 	mov.w	fp, #0
 8007ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eac:	f104 021a 	add.w	r2, r4, #26
 8007eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eb2:	9305      	str	r3, [sp, #20]
 8007eb4:	eba3 0309 	sub.w	r3, r3, r9
 8007eb8:	455b      	cmp	r3, fp
 8007eba:	dc33      	bgt.n	8007f24 <_printf_float+0x384>
 8007ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	db3b      	blt.n	8007f3c <_printf_float+0x39c>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	07da      	lsls	r2, r3, #31
 8007ec8:	d438      	bmi.n	8007f3c <_printf_float+0x39c>
 8007eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ecc:	9b05      	ldr	r3, [sp, #20]
 8007ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	eba2 0901 	sub.w	r9, r2, r1
 8007ed6:	4599      	cmp	r9, r3
 8007ed8:	bfa8      	it	ge
 8007eda:	4699      	movge	r9, r3
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	dc35      	bgt.n	8007f4e <_printf_float+0x3ae>
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eea:	f104 0a1a 	add.w	sl, r4, #26
 8007eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ef2:	1a9b      	subs	r3, r3, r2
 8007ef4:	eba3 0309 	sub.w	r3, r3, r9
 8007ef8:	4543      	cmp	r3, r8
 8007efa:	f77f af79 	ble.w	8007df0 <_printf_float+0x250>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4652      	mov	r2, sl
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	47b8      	blx	r7
 8007f08:	3001      	adds	r0, #1
 8007f0a:	f43f aeaa 	beq.w	8007c62 <_printf_float+0xc2>
 8007f0e:	f108 0801 	add.w	r8, r8, #1
 8007f12:	e7ec      	b.n	8007eee <_printf_float+0x34e>
 8007f14:	4613      	mov	r3, r2
 8007f16:	4631      	mov	r1, r6
 8007f18:	4642      	mov	r2, r8
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b8      	blx	r7
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d1c0      	bne.n	8007ea4 <_printf_float+0x304>
 8007f22:	e69e      	b.n	8007c62 <_printf_float+0xc2>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4631      	mov	r1, r6
 8007f28:	4628      	mov	r0, r5
 8007f2a:	9205      	str	r2, [sp, #20]
 8007f2c:	47b8      	blx	r7
 8007f2e:	3001      	adds	r0, #1
 8007f30:	f43f ae97 	beq.w	8007c62 <_printf_float+0xc2>
 8007f34:	9a05      	ldr	r2, [sp, #20]
 8007f36:	f10b 0b01 	add.w	fp, fp, #1
 8007f3a:	e7b9      	b.n	8007eb0 <_printf_float+0x310>
 8007f3c:	ee18 3a10 	vmov	r3, s16
 8007f40:	4652      	mov	r2, sl
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d1be      	bne.n	8007eca <_printf_float+0x32a>
 8007f4c:	e689      	b.n	8007c62 <_printf_float+0xc2>
 8007f4e:	9a05      	ldr	r2, [sp, #20]
 8007f50:	464b      	mov	r3, r9
 8007f52:	4442      	add	r2, r8
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d1c1      	bne.n	8007ee2 <_printf_float+0x342>
 8007f5e:	e680      	b.n	8007c62 <_printf_float+0xc2>
 8007f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f62:	2a01      	cmp	r2, #1
 8007f64:	dc01      	bgt.n	8007f6a <_printf_float+0x3ca>
 8007f66:	07db      	lsls	r3, r3, #31
 8007f68:	d538      	bpl.n	8007fdc <_printf_float+0x43c>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	f43f ae74 	beq.w	8007c62 <_printf_float+0xc2>
 8007f7a:	ee18 3a10 	vmov	r3, s16
 8007f7e:	4652      	mov	r2, sl
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f ae6b 	beq.w	8007c62 <_printf_float+0xc2>
 8007f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f90:	2200      	movs	r2, #0
 8007f92:	2300      	movs	r3, #0
 8007f94:	f7f8 fda0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f98:	b9d8      	cbnz	r0, 8007fd2 <_printf_float+0x432>
 8007f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9c:	f108 0201 	add.w	r2, r8, #1
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d10e      	bne.n	8007fca <_printf_float+0x42a>
 8007fac:	e659      	b.n	8007c62 <_printf_float+0xc2>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b8      	blx	r7
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f43f ae52 	beq.w	8007c62 <_printf_float+0xc2>
 8007fbe:	f108 0801 	add.w	r8, r8, #1
 8007fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4543      	cmp	r3, r8
 8007fc8:	dcf1      	bgt.n	8007fae <_printf_float+0x40e>
 8007fca:	464b      	mov	r3, r9
 8007fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fd0:	e6dc      	b.n	8007d8c <_printf_float+0x1ec>
 8007fd2:	f04f 0800 	mov.w	r8, #0
 8007fd6:	f104 0a1a 	add.w	sl, r4, #26
 8007fda:	e7f2      	b.n	8007fc2 <_printf_float+0x422>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4642      	mov	r2, r8
 8007fe0:	e7df      	b.n	8007fa2 <_printf_float+0x402>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	464a      	mov	r2, r9
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	f43f ae38 	beq.w	8007c62 <_printf_float+0xc2>
 8007ff2:	f108 0801 	add.w	r8, r8, #1
 8007ff6:	68e3      	ldr	r3, [r4, #12]
 8007ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ffa:	1a5b      	subs	r3, r3, r1
 8007ffc:	4543      	cmp	r3, r8
 8007ffe:	dcf0      	bgt.n	8007fe2 <_printf_float+0x442>
 8008000:	e6fa      	b.n	8007df8 <_printf_float+0x258>
 8008002:	f04f 0800 	mov.w	r8, #0
 8008006:	f104 0919 	add.w	r9, r4, #25
 800800a:	e7f4      	b.n	8007ff6 <_printf_float+0x456>

0800800c <_printf_common>:
 800800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	4616      	mov	r6, r2
 8008012:	4699      	mov	r9, r3
 8008014:	688a      	ldr	r2, [r1, #8]
 8008016:	690b      	ldr	r3, [r1, #16]
 8008018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800801c:	4293      	cmp	r3, r2
 800801e:	bfb8      	it	lt
 8008020:	4613      	movlt	r3, r2
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008028:	4607      	mov	r7, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b10a      	cbz	r2, 8008032 <_printf_common+0x26>
 800802e:	3301      	adds	r3, #1
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	0699      	lsls	r1, r3, #26
 8008036:	bf42      	ittt	mi
 8008038:	6833      	ldrmi	r3, [r6, #0]
 800803a:	3302      	addmi	r3, #2
 800803c:	6033      	strmi	r3, [r6, #0]
 800803e:	6825      	ldr	r5, [r4, #0]
 8008040:	f015 0506 	ands.w	r5, r5, #6
 8008044:	d106      	bne.n	8008054 <_printf_common+0x48>
 8008046:	f104 0a19 	add.w	sl, r4, #25
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	6832      	ldr	r2, [r6, #0]
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	42ab      	cmp	r3, r5
 8008052:	dc26      	bgt.n	80080a2 <_printf_common+0x96>
 8008054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008058:	1e13      	subs	r3, r2, #0
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	bf18      	it	ne
 800805e:	2301      	movne	r3, #1
 8008060:	0692      	lsls	r2, r2, #26
 8008062:	d42b      	bmi.n	80080bc <_printf_common+0xb0>
 8008064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008068:	4649      	mov	r1, r9
 800806a:	4638      	mov	r0, r7
 800806c:	47c0      	blx	r8
 800806e:	3001      	adds	r0, #1
 8008070:	d01e      	beq.n	80080b0 <_printf_common+0xa4>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	68e5      	ldr	r5, [r4, #12]
 8008076:	6832      	ldr	r2, [r6, #0]
 8008078:	f003 0306 	and.w	r3, r3, #6
 800807c:	2b04      	cmp	r3, #4
 800807e:	bf08      	it	eq
 8008080:	1aad      	subeq	r5, r5, r2
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	6922      	ldr	r2, [r4, #16]
 8008086:	bf0c      	ite	eq
 8008088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800808c:	2500      	movne	r5, #0
 800808e:	4293      	cmp	r3, r2
 8008090:	bfc4      	itt	gt
 8008092:	1a9b      	subgt	r3, r3, r2
 8008094:	18ed      	addgt	r5, r5, r3
 8008096:	2600      	movs	r6, #0
 8008098:	341a      	adds	r4, #26
 800809a:	42b5      	cmp	r5, r6
 800809c:	d11a      	bne.n	80080d4 <_printf_common+0xc8>
 800809e:	2000      	movs	r0, #0
 80080a0:	e008      	b.n	80080b4 <_printf_common+0xa8>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4652      	mov	r2, sl
 80080a6:	4649      	mov	r1, r9
 80080a8:	4638      	mov	r0, r7
 80080aa:	47c0      	blx	r8
 80080ac:	3001      	adds	r0, #1
 80080ae:	d103      	bne.n	80080b8 <_printf_common+0xac>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b8:	3501      	adds	r5, #1
 80080ba:	e7c6      	b.n	800804a <_printf_common+0x3e>
 80080bc:	18e1      	adds	r1, r4, r3
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	2030      	movs	r0, #48	; 0x30
 80080c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080c6:	4422      	add	r2, r4
 80080c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080d0:	3302      	adds	r3, #2
 80080d2:	e7c7      	b.n	8008064 <_printf_common+0x58>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4622      	mov	r2, r4
 80080d8:	4649      	mov	r1, r9
 80080da:	4638      	mov	r0, r7
 80080dc:	47c0      	blx	r8
 80080de:	3001      	adds	r0, #1
 80080e0:	d0e6      	beq.n	80080b0 <_printf_common+0xa4>
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7d9      	b.n	800809a <_printf_common+0x8e>
	...

080080e8 <_printf_i>:
 80080e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	460c      	mov	r4, r1
 80080ee:	4691      	mov	r9, r2
 80080f0:	7e27      	ldrb	r7, [r4, #24]
 80080f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080f4:	2f78      	cmp	r7, #120	; 0x78
 80080f6:	4680      	mov	r8, r0
 80080f8:	469a      	mov	sl, r3
 80080fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080fe:	d807      	bhi.n	8008110 <_printf_i+0x28>
 8008100:	2f62      	cmp	r7, #98	; 0x62
 8008102:	d80a      	bhi.n	800811a <_printf_i+0x32>
 8008104:	2f00      	cmp	r7, #0
 8008106:	f000 80d8 	beq.w	80082ba <_printf_i+0x1d2>
 800810a:	2f58      	cmp	r7, #88	; 0x58
 800810c:	f000 80a3 	beq.w	8008256 <_printf_i+0x16e>
 8008110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008118:	e03a      	b.n	8008190 <_printf_i+0xa8>
 800811a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800811e:	2b15      	cmp	r3, #21
 8008120:	d8f6      	bhi.n	8008110 <_printf_i+0x28>
 8008122:	a001      	add	r0, pc, #4	; (adr r0, 8008128 <_printf_i+0x40>)
 8008124:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008128:	08008181 	.word	0x08008181
 800812c:	08008195 	.word	0x08008195
 8008130:	08008111 	.word	0x08008111
 8008134:	08008111 	.word	0x08008111
 8008138:	08008111 	.word	0x08008111
 800813c:	08008111 	.word	0x08008111
 8008140:	08008195 	.word	0x08008195
 8008144:	08008111 	.word	0x08008111
 8008148:	08008111 	.word	0x08008111
 800814c:	08008111 	.word	0x08008111
 8008150:	08008111 	.word	0x08008111
 8008154:	080082a1 	.word	0x080082a1
 8008158:	080081c5 	.word	0x080081c5
 800815c:	08008283 	.word	0x08008283
 8008160:	08008111 	.word	0x08008111
 8008164:	08008111 	.word	0x08008111
 8008168:	080082c3 	.word	0x080082c3
 800816c:	08008111 	.word	0x08008111
 8008170:	080081c5 	.word	0x080081c5
 8008174:	08008111 	.word	0x08008111
 8008178:	08008111 	.word	0x08008111
 800817c:	0800828b 	.word	0x0800828b
 8008180:	680b      	ldr	r3, [r1, #0]
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	600a      	str	r2, [r1, #0]
 8008188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800818c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008190:	2301      	movs	r3, #1
 8008192:	e0a3      	b.n	80082dc <_printf_i+0x1f4>
 8008194:	6825      	ldr	r5, [r4, #0]
 8008196:	6808      	ldr	r0, [r1, #0]
 8008198:	062e      	lsls	r6, r5, #24
 800819a:	f100 0304 	add.w	r3, r0, #4
 800819e:	d50a      	bpl.n	80081b6 <_printf_i+0xce>
 80081a0:	6805      	ldr	r5, [r0, #0]
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	2d00      	cmp	r5, #0
 80081a6:	da03      	bge.n	80081b0 <_printf_i+0xc8>
 80081a8:	232d      	movs	r3, #45	; 0x2d
 80081aa:	426d      	negs	r5, r5
 80081ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b0:	485e      	ldr	r0, [pc, #376]	; (800832c <_printf_i+0x244>)
 80081b2:	230a      	movs	r3, #10
 80081b4:	e019      	b.n	80081ea <_printf_i+0x102>
 80081b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081ba:	6805      	ldr	r5, [r0, #0]
 80081bc:	600b      	str	r3, [r1, #0]
 80081be:	bf18      	it	ne
 80081c0:	b22d      	sxthne	r5, r5
 80081c2:	e7ef      	b.n	80081a4 <_printf_i+0xbc>
 80081c4:	680b      	ldr	r3, [r1, #0]
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	1d18      	adds	r0, r3, #4
 80081ca:	6008      	str	r0, [r1, #0]
 80081cc:	0628      	lsls	r0, r5, #24
 80081ce:	d501      	bpl.n	80081d4 <_printf_i+0xec>
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	e002      	b.n	80081da <_printf_i+0xf2>
 80081d4:	0669      	lsls	r1, r5, #25
 80081d6:	d5fb      	bpl.n	80081d0 <_printf_i+0xe8>
 80081d8:	881d      	ldrh	r5, [r3, #0]
 80081da:	4854      	ldr	r0, [pc, #336]	; (800832c <_printf_i+0x244>)
 80081dc:	2f6f      	cmp	r7, #111	; 0x6f
 80081de:	bf0c      	ite	eq
 80081e0:	2308      	moveq	r3, #8
 80081e2:	230a      	movne	r3, #10
 80081e4:	2100      	movs	r1, #0
 80081e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081ea:	6866      	ldr	r6, [r4, #4]
 80081ec:	60a6      	str	r6, [r4, #8]
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	bfa2      	ittt	ge
 80081f2:	6821      	ldrge	r1, [r4, #0]
 80081f4:	f021 0104 	bicge.w	r1, r1, #4
 80081f8:	6021      	strge	r1, [r4, #0]
 80081fa:	b90d      	cbnz	r5, 8008200 <_printf_i+0x118>
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	d04d      	beq.n	800829c <_printf_i+0x1b4>
 8008200:	4616      	mov	r6, r2
 8008202:	fbb5 f1f3 	udiv	r1, r5, r3
 8008206:	fb03 5711 	mls	r7, r3, r1, r5
 800820a:	5dc7      	ldrb	r7, [r0, r7]
 800820c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008210:	462f      	mov	r7, r5
 8008212:	42bb      	cmp	r3, r7
 8008214:	460d      	mov	r5, r1
 8008216:	d9f4      	bls.n	8008202 <_printf_i+0x11a>
 8008218:	2b08      	cmp	r3, #8
 800821a:	d10b      	bne.n	8008234 <_printf_i+0x14c>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	07df      	lsls	r7, r3, #31
 8008220:	d508      	bpl.n	8008234 <_printf_i+0x14c>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6861      	ldr	r1, [r4, #4]
 8008226:	4299      	cmp	r1, r3
 8008228:	bfde      	ittt	le
 800822a:	2330      	movle	r3, #48	; 0x30
 800822c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008234:	1b92      	subs	r2, r2, r6
 8008236:	6122      	str	r2, [r4, #16]
 8008238:	f8cd a000 	str.w	sl, [sp]
 800823c:	464b      	mov	r3, r9
 800823e:	aa03      	add	r2, sp, #12
 8008240:	4621      	mov	r1, r4
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff fee2 	bl	800800c <_printf_common>
 8008248:	3001      	adds	r0, #1
 800824a:	d14c      	bne.n	80082e6 <_printf_i+0x1fe>
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	b004      	add	sp, #16
 8008252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008256:	4835      	ldr	r0, [pc, #212]	; (800832c <_printf_i+0x244>)
 8008258:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	680e      	ldr	r6, [r1, #0]
 8008260:	061f      	lsls	r7, r3, #24
 8008262:	f856 5b04 	ldr.w	r5, [r6], #4
 8008266:	600e      	str	r6, [r1, #0]
 8008268:	d514      	bpl.n	8008294 <_printf_i+0x1ac>
 800826a:	07d9      	lsls	r1, r3, #31
 800826c:	bf44      	itt	mi
 800826e:	f043 0320 	orrmi.w	r3, r3, #32
 8008272:	6023      	strmi	r3, [r4, #0]
 8008274:	b91d      	cbnz	r5, 800827e <_printf_i+0x196>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	f023 0320 	bic.w	r3, r3, #32
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	2310      	movs	r3, #16
 8008280:	e7b0      	b.n	80081e4 <_printf_i+0xfc>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	f043 0320 	orr.w	r3, r3, #32
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	2378      	movs	r3, #120	; 0x78
 800828c:	4828      	ldr	r0, [pc, #160]	; (8008330 <_printf_i+0x248>)
 800828e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008292:	e7e3      	b.n	800825c <_printf_i+0x174>
 8008294:	065e      	lsls	r6, r3, #25
 8008296:	bf48      	it	mi
 8008298:	b2ad      	uxthmi	r5, r5
 800829a:	e7e6      	b.n	800826a <_printf_i+0x182>
 800829c:	4616      	mov	r6, r2
 800829e:	e7bb      	b.n	8008218 <_printf_i+0x130>
 80082a0:	680b      	ldr	r3, [r1, #0]
 80082a2:	6826      	ldr	r6, [r4, #0]
 80082a4:	6960      	ldr	r0, [r4, #20]
 80082a6:	1d1d      	adds	r5, r3, #4
 80082a8:	600d      	str	r5, [r1, #0]
 80082aa:	0635      	lsls	r5, r6, #24
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	d501      	bpl.n	80082b4 <_printf_i+0x1cc>
 80082b0:	6018      	str	r0, [r3, #0]
 80082b2:	e002      	b.n	80082ba <_printf_i+0x1d2>
 80082b4:	0671      	lsls	r1, r6, #25
 80082b6:	d5fb      	bpl.n	80082b0 <_printf_i+0x1c8>
 80082b8:	8018      	strh	r0, [r3, #0]
 80082ba:	2300      	movs	r3, #0
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	4616      	mov	r6, r2
 80082c0:	e7ba      	b.n	8008238 <_printf_i+0x150>
 80082c2:	680b      	ldr	r3, [r1, #0]
 80082c4:	1d1a      	adds	r2, r3, #4
 80082c6:	600a      	str	r2, [r1, #0]
 80082c8:	681e      	ldr	r6, [r3, #0]
 80082ca:	6862      	ldr	r2, [r4, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7f7 ff8e 	bl	80001f0 <memchr>
 80082d4:	b108      	cbz	r0, 80082da <_printf_i+0x1f2>
 80082d6:	1b80      	subs	r0, r0, r6
 80082d8:	6060      	str	r0, [r4, #4]
 80082da:	6863      	ldr	r3, [r4, #4]
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	2300      	movs	r3, #0
 80082e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082e4:	e7a8      	b.n	8008238 <_printf_i+0x150>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	4632      	mov	r2, r6
 80082ea:	4649      	mov	r1, r9
 80082ec:	4640      	mov	r0, r8
 80082ee:	47d0      	blx	sl
 80082f0:	3001      	adds	r0, #1
 80082f2:	d0ab      	beq.n	800824c <_printf_i+0x164>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	079b      	lsls	r3, r3, #30
 80082f8:	d413      	bmi.n	8008322 <_printf_i+0x23a>
 80082fa:	68e0      	ldr	r0, [r4, #12]
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	4298      	cmp	r0, r3
 8008300:	bfb8      	it	lt
 8008302:	4618      	movlt	r0, r3
 8008304:	e7a4      	b.n	8008250 <_printf_i+0x168>
 8008306:	2301      	movs	r3, #1
 8008308:	4632      	mov	r2, r6
 800830a:	4649      	mov	r1, r9
 800830c:	4640      	mov	r0, r8
 800830e:	47d0      	blx	sl
 8008310:	3001      	adds	r0, #1
 8008312:	d09b      	beq.n	800824c <_printf_i+0x164>
 8008314:	3501      	adds	r5, #1
 8008316:	68e3      	ldr	r3, [r4, #12]
 8008318:	9903      	ldr	r1, [sp, #12]
 800831a:	1a5b      	subs	r3, r3, r1
 800831c:	42ab      	cmp	r3, r5
 800831e:	dcf2      	bgt.n	8008306 <_printf_i+0x21e>
 8008320:	e7eb      	b.n	80082fa <_printf_i+0x212>
 8008322:	2500      	movs	r5, #0
 8008324:	f104 0619 	add.w	r6, r4, #25
 8008328:	e7f5      	b.n	8008316 <_printf_i+0x22e>
 800832a:	bf00      	nop
 800832c:	0800aa62 	.word	0x0800aa62
 8008330:	0800aa73 	.word	0x0800aa73

08008334 <iprintf>:
 8008334:	b40f      	push	{r0, r1, r2, r3}
 8008336:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <iprintf+0x2c>)
 8008338:	b513      	push	{r0, r1, r4, lr}
 800833a:	681c      	ldr	r4, [r3, #0]
 800833c:	b124      	cbz	r4, 8008348 <iprintf+0x14>
 800833e:	69a3      	ldr	r3, [r4, #24]
 8008340:	b913      	cbnz	r3, 8008348 <iprintf+0x14>
 8008342:	4620      	mov	r0, r4
 8008344:	f001 f922 	bl	800958c <__sinit>
 8008348:	ab05      	add	r3, sp, #20
 800834a:	9a04      	ldr	r2, [sp, #16]
 800834c:	68a1      	ldr	r1, [r4, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	4620      	mov	r0, r4
 8008352:	f001 ff69 	bl	800a228 <_vfiprintf_r>
 8008356:	b002      	add	sp, #8
 8008358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835c:	b004      	add	sp, #16
 800835e:	4770      	bx	lr
 8008360:	200002f8 	.word	0x200002f8

08008364 <_puts_r>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	460e      	mov	r6, r1
 8008368:	4605      	mov	r5, r0
 800836a:	b118      	cbz	r0, 8008374 <_puts_r+0x10>
 800836c:	6983      	ldr	r3, [r0, #24]
 800836e:	b90b      	cbnz	r3, 8008374 <_puts_r+0x10>
 8008370:	f001 f90c 	bl	800958c <__sinit>
 8008374:	69ab      	ldr	r3, [r5, #24]
 8008376:	68ac      	ldr	r4, [r5, #8]
 8008378:	b913      	cbnz	r3, 8008380 <_puts_r+0x1c>
 800837a:	4628      	mov	r0, r5
 800837c:	f001 f906 	bl	800958c <__sinit>
 8008380:	4b2c      	ldr	r3, [pc, #176]	; (8008434 <_puts_r+0xd0>)
 8008382:	429c      	cmp	r4, r3
 8008384:	d120      	bne.n	80083c8 <_puts_r+0x64>
 8008386:	686c      	ldr	r4, [r5, #4]
 8008388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800838a:	07db      	lsls	r3, r3, #31
 800838c:	d405      	bmi.n	800839a <_puts_r+0x36>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	0598      	lsls	r0, r3, #22
 8008392:	d402      	bmi.n	800839a <_puts_r+0x36>
 8008394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008396:	f001 f99c 	bl	80096d2 <__retarget_lock_acquire_recursive>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	0719      	lsls	r1, r3, #28
 800839e:	d51d      	bpl.n	80083dc <_puts_r+0x78>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	b1db      	cbz	r3, 80083dc <_puts_r+0x78>
 80083a4:	3e01      	subs	r6, #1
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083ac:	3b01      	subs	r3, #1
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	bb39      	cbnz	r1, 8008402 <_puts_r+0x9e>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	da38      	bge.n	8008428 <_puts_r+0xc4>
 80083b6:	4622      	mov	r2, r4
 80083b8:	210a      	movs	r1, #10
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f894 	bl	80084e8 <__swbuf_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	d011      	beq.n	80083e8 <_puts_r+0x84>
 80083c4:	250a      	movs	r5, #10
 80083c6:	e011      	b.n	80083ec <_puts_r+0x88>
 80083c8:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <_puts_r+0xd4>)
 80083ca:	429c      	cmp	r4, r3
 80083cc:	d101      	bne.n	80083d2 <_puts_r+0x6e>
 80083ce:	68ac      	ldr	r4, [r5, #8]
 80083d0:	e7da      	b.n	8008388 <_puts_r+0x24>
 80083d2:	4b1a      	ldr	r3, [pc, #104]	; (800843c <_puts_r+0xd8>)
 80083d4:	429c      	cmp	r4, r3
 80083d6:	bf08      	it	eq
 80083d8:	68ec      	ldreq	r4, [r5, #12]
 80083da:	e7d5      	b.n	8008388 <_puts_r+0x24>
 80083dc:	4621      	mov	r1, r4
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f8d4 	bl	800858c <__swsetup_r>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0dd      	beq.n	80083a4 <_puts_r+0x40>
 80083e8:	f04f 35ff 	mov.w	r5, #4294967295
 80083ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ee:	07da      	lsls	r2, r3, #31
 80083f0:	d405      	bmi.n	80083fe <_puts_r+0x9a>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	059b      	lsls	r3, r3, #22
 80083f6:	d402      	bmi.n	80083fe <_puts_r+0x9a>
 80083f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083fa:	f001 f96b 	bl	80096d4 <__retarget_lock_release_recursive>
 80083fe:	4628      	mov	r0, r5
 8008400:	bd70      	pop	{r4, r5, r6, pc}
 8008402:	2b00      	cmp	r3, #0
 8008404:	da04      	bge.n	8008410 <_puts_r+0xac>
 8008406:	69a2      	ldr	r2, [r4, #24]
 8008408:	429a      	cmp	r2, r3
 800840a:	dc06      	bgt.n	800841a <_puts_r+0xb6>
 800840c:	290a      	cmp	r1, #10
 800840e:	d004      	beq.n	800841a <_puts_r+0xb6>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	6022      	str	r2, [r4, #0]
 8008416:	7019      	strb	r1, [r3, #0]
 8008418:	e7c5      	b.n	80083a6 <_puts_r+0x42>
 800841a:	4622      	mov	r2, r4
 800841c:	4628      	mov	r0, r5
 800841e:	f000 f863 	bl	80084e8 <__swbuf_r>
 8008422:	3001      	adds	r0, #1
 8008424:	d1bf      	bne.n	80083a6 <_puts_r+0x42>
 8008426:	e7df      	b.n	80083e8 <_puts_r+0x84>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	250a      	movs	r5, #10
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	701d      	strb	r5, [r3, #0]
 8008432:	e7db      	b.n	80083ec <_puts_r+0x88>
 8008434:	0800ab38 	.word	0x0800ab38
 8008438:	0800ab58 	.word	0x0800ab58
 800843c:	0800ab18 	.word	0x0800ab18

08008440 <puts>:
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <puts+0xc>)
 8008442:	4601      	mov	r1, r0
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f7ff bf8d 	b.w	8008364 <_puts_r>
 800844a:	bf00      	nop
 800844c:	200002f8 	.word	0x200002f8

08008450 <realloc>:
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <realloc+0xc>)
 8008452:	460a      	mov	r2, r1
 8008454:	4601      	mov	r1, r0
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	f001 bd3a 	b.w	8009ed0 <_realloc_r>
 800845c:	200002f8 	.word	0x200002f8

08008460 <_sbrk_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d06      	ldr	r5, [pc, #24]	; (800847c <_sbrk_r+0x1c>)
 8008464:	2300      	movs	r3, #0
 8008466:	4604      	mov	r4, r0
 8008468:	4608      	mov	r0, r1
 800846a:	602b      	str	r3, [r5, #0]
 800846c:	f7f9 fb5c 	bl	8001b28 <_sbrk>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_sbrk_r+0x1a>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	b103      	cbz	r3, 800847a <_sbrk_r+0x1a>
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	20000740 	.word	0x20000740

08008480 <strncpy>:
 8008480:	b510      	push	{r4, lr}
 8008482:	3901      	subs	r1, #1
 8008484:	4603      	mov	r3, r0
 8008486:	b132      	cbz	r2, 8008496 <strncpy+0x16>
 8008488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800848c:	f803 4b01 	strb.w	r4, [r3], #1
 8008490:	3a01      	subs	r2, #1
 8008492:	2c00      	cmp	r4, #0
 8008494:	d1f7      	bne.n	8008486 <strncpy+0x6>
 8008496:	441a      	add	r2, r3
 8008498:	2100      	movs	r1, #0
 800849a:	4293      	cmp	r3, r2
 800849c:	d100      	bne.n	80084a0 <strncpy+0x20>
 800849e:	bd10      	pop	{r4, pc}
 80084a0:	f803 1b01 	strb.w	r1, [r3], #1
 80084a4:	e7f9      	b.n	800849a <strncpy+0x1a>
	...

080084a8 <_vsiprintf_r>:
 80084a8:	b500      	push	{lr}
 80084aa:	b09b      	sub	sp, #108	; 0x6c
 80084ac:	9100      	str	r1, [sp, #0]
 80084ae:	9104      	str	r1, [sp, #16]
 80084b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084b4:	9105      	str	r1, [sp, #20]
 80084b6:	9102      	str	r1, [sp, #8]
 80084b8:	4905      	ldr	r1, [pc, #20]	; (80084d0 <_vsiprintf_r+0x28>)
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	4669      	mov	r1, sp
 80084be:	f001 fd89 	bl	8009fd4 <_svfiprintf_r>
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	2200      	movs	r2, #0
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	b01b      	add	sp, #108	; 0x6c
 80084ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80084ce:	bf00      	nop
 80084d0:	ffff0208 	.word	0xffff0208

080084d4 <vsiprintf>:
 80084d4:	4613      	mov	r3, r2
 80084d6:	460a      	mov	r2, r1
 80084d8:	4601      	mov	r1, r0
 80084da:	4802      	ldr	r0, [pc, #8]	; (80084e4 <vsiprintf+0x10>)
 80084dc:	6800      	ldr	r0, [r0, #0]
 80084de:	f7ff bfe3 	b.w	80084a8 <_vsiprintf_r>
 80084e2:	bf00      	nop
 80084e4:	200002f8 	.word	0x200002f8

080084e8 <__swbuf_r>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	460e      	mov	r6, r1
 80084ec:	4614      	mov	r4, r2
 80084ee:	4605      	mov	r5, r0
 80084f0:	b118      	cbz	r0, 80084fa <__swbuf_r+0x12>
 80084f2:	6983      	ldr	r3, [r0, #24]
 80084f4:	b90b      	cbnz	r3, 80084fa <__swbuf_r+0x12>
 80084f6:	f001 f849 	bl	800958c <__sinit>
 80084fa:	4b21      	ldr	r3, [pc, #132]	; (8008580 <__swbuf_r+0x98>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d12b      	bne.n	8008558 <__swbuf_r+0x70>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	69a3      	ldr	r3, [r4, #24]
 8008504:	60a3      	str	r3, [r4, #8]
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	071a      	lsls	r2, r3, #28
 800850a:	d52f      	bpl.n	800856c <__swbuf_r+0x84>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	b36b      	cbz	r3, 800856c <__swbuf_r+0x84>
 8008510:	6923      	ldr	r3, [r4, #16]
 8008512:	6820      	ldr	r0, [r4, #0]
 8008514:	1ac0      	subs	r0, r0, r3
 8008516:	6963      	ldr	r3, [r4, #20]
 8008518:	b2f6      	uxtb	r6, r6
 800851a:	4283      	cmp	r3, r0
 800851c:	4637      	mov	r7, r6
 800851e:	dc04      	bgt.n	800852a <__swbuf_r+0x42>
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f000 ff9e 	bl	8009464 <_fflush_r>
 8008528:	bb30      	cbnz	r0, 8008578 <__swbuf_r+0x90>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	3b01      	subs	r3, #1
 800852e:	60a3      	str	r3, [r4, #8]
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	701e      	strb	r6, [r3, #0]
 8008538:	6963      	ldr	r3, [r4, #20]
 800853a:	3001      	adds	r0, #1
 800853c:	4283      	cmp	r3, r0
 800853e:	d004      	beq.n	800854a <__swbuf_r+0x62>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	07db      	lsls	r3, r3, #31
 8008544:	d506      	bpl.n	8008554 <__swbuf_r+0x6c>
 8008546:	2e0a      	cmp	r6, #10
 8008548:	d104      	bne.n	8008554 <__swbuf_r+0x6c>
 800854a:	4621      	mov	r1, r4
 800854c:	4628      	mov	r0, r5
 800854e:	f000 ff89 	bl	8009464 <_fflush_r>
 8008552:	b988      	cbnz	r0, 8008578 <__swbuf_r+0x90>
 8008554:	4638      	mov	r0, r7
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <__swbuf_r+0x9c>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <__swbuf_r+0x7a>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7cf      	b.n	8008502 <__swbuf_r+0x1a>
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <__swbuf_r+0xa0>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7ca      	b.n	8008502 <__swbuf_r+0x1a>
 800856c:	4621      	mov	r1, r4
 800856e:	4628      	mov	r0, r5
 8008570:	f000 f80c 	bl	800858c <__swsetup_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0cb      	beq.n	8008510 <__swbuf_r+0x28>
 8008578:	f04f 37ff 	mov.w	r7, #4294967295
 800857c:	e7ea      	b.n	8008554 <__swbuf_r+0x6c>
 800857e:	bf00      	nop
 8008580:	0800ab38 	.word	0x0800ab38
 8008584:	0800ab58 	.word	0x0800ab58
 8008588:	0800ab18 	.word	0x0800ab18

0800858c <__swsetup_r>:
 800858c:	4b32      	ldr	r3, [pc, #200]	; (8008658 <__swsetup_r+0xcc>)
 800858e:	b570      	push	{r4, r5, r6, lr}
 8008590:	681d      	ldr	r5, [r3, #0]
 8008592:	4606      	mov	r6, r0
 8008594:	460c      	mov	r4, r1
 8008596:	b125      	cbz	r5, 80085a2 <__swsetup_r+0x16>
 8008598:	69ab      	ldr	r3, [r5, #24]
 800859a:	b913      	cbnz	r3, 80085a2 <__swsetup_r+0x16>
 800859c:	4628      	mov	r0, r5
 800859e:	f000 fff5 	bl	800958c <__sinit>
 80085a2:	4b2e      	ldr	r3, [pc, #184]	; (800865c <__swsetup_r+0xd0>)
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d10f      	bne.n	80085c8 <__swsetup_r+0x3c>
 80085a8:	686c      	ldr	r4, [r5, #4]
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085b0:	0719      	lsls	r1, r3, #28
 80085b2:	d42c      	bmi.n	800860e <__swsetup_r+0x82>
 80085b4:	06dd      	lsls	r5, r3, #27
 80085b6:	d411      	bmi.n	80085dc <__swsetup_r+0x50>
 80085b8:	2309      	movs	r3, #9
 80085ba:	6033      	str	r3, [r6, #0]
 80085bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085c0:	81a3      	strh	r3, [r4, #12]
 80085c2:	f04f 30ff 	mov.w	r0, #4294967295
 80085c6:	e03e      	b.n	8008646 <__swsetup_r+0xba>
 80085c8:	4b25      	ldr	r3, [pc, #148]	; (8008660 <__swsetup_r+0xd4>)
 80085ca:	429c      	cmp	r4, r3
 80085cc:	d101      	bne.n	80085d2 <__swsetup_r+0x46>
 80085ce:	68ac      	ldr	r4, [r5, #8]
 80085d0:	e7eb      	b.n	80085aa <__swsetup_r+0x1e>
 80085d2:	4b24      	ldr	r3, [pc, #144]	; (8008664 <__swsetup_r+0xd8>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	bf08      	it	eq
 80085d8:	68ec      	ldreq	r4, [r5, #12]
 80085da:	e7e6      	b.n	80085aa <__swsetup_r+0x1e>
 80085dc:	0758      	lsls	r0, r3, #29
 80085de:	d512      	bpl.n	8008606 <__swsetup_r+0x7a>
 80085e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085e2:	b141      	cbz	r1, 80085f6 <__swsetup_r+0x6a>
 80085e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085e8:	4299      	cmp	r1, r3
 80085ea:	d002      	beq.n	80085f2 <__swsetup_r+0x66>
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff f98d 	bl	800790c <_free_r>
 80085f2:	2300      	movs	r3, #0
 80085f4:	6363      	str	r3, [r4, #52]	; 0x34
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	2300      	movs	r3, #0
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f043 0308 	orr.w	r3, r3, #8
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	6923      	ldr	r3, [r4, #16]
 8008610:	b94b      	cbnz	r3, 8008626 <__swsetup_r+0x9a>
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800861c:	d003      	beq.n	8008626 <__swsetup_r+0x9a>
 800861e:	4621      	mov	r1, r4
 8008620:	4630      	mov	r0, r6
 8008622:	f001 f87d 	bl	8009720 <__smakebuf_r>
 8008626:	89a0      	ldrh	r0, [r4, #12]
 8008628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800862c:	f010 0301 	ands.w	r3, r0, #1
 8008630:	d00a      	beq.n	8008648 <__swsetup_r+0xbc>
 8008632:	2300      	movs	r3, #0
 8008634:	60a3      	str	r3, [r4, #8]
 8008636:	6963      	ldr	r3, [r4, #20]
 8008638:	425b      	negs	r3, r3
 800863a:	61a3      	str	r3, [r4, #24]
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	b943      	cbnz	r3, 8008652 <__swsetup_r+0xc6>
 8008640:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008644:	d1ba      	bne.n	80085bc <__swsetup_r+0x30>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	0781      	lsls	r1, r0, #30
 800864a:	bf58      	it	pl
 800864c:	6963      	ldrpl	r3, [r4, #20]
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	e7f4      	b.n	800863c <__swsetup_r+0xb0>
 8008652:	2000      	movs	r0, #0
 8008654:	e7f7      	b.n	8008646 <__swsetup_r+0xba>
 8008656:	bf00      	nop
 8008658:	200002f8 	.word	0x200002f8
 800865c:	0800ab38 	.word	0x0800ab38
 8008660:	0800ab58 	.word	0x0800ab58
 8008664:	0800ab18 	.word	0x0800ab18

08008668 <quorem>:
 8008668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	6903      	ldr	r3, [r0, #16]
 800866e:	690c      	ldr	r4, [r1, #16]
 8008670:	42a3      	cmp	r3, r4
 8008672:	4607      	mov	r7, r0
 8008674:	f2c0 8081 	blt.w	800877a <quorem+0x112>
 8008678:	3c01      	subs	r4, #1
 800867a:	f101 0814 	add.w	r8, r1, #20
 800867e:	f100 0514 	add.w	r5, r0, #20
 8008682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800868c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008690:	3301      	adds	r3, #1
 8008692:	429a      	cmp	r2, r3
 8008694:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800869c:	fbb2 f6f3 	udiv	r6, r2, r3
 80086a0:	d331      	bcc.n	8008706 <quorem+0x9e>
 80086a2:	f04f 0e00 	mov.w	lr, #0
 80086a6:	4640      	mov	r0, r8
 80086a8:	46ac      	mov	ip, r5
 80086aa:	46f2      	mov	sl, lr
 80086ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80086b0:	b293      	uxth	r3, r2
 80086b2:	fb06 e303 	mla	r3, r6, r3, lr
 80086b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ebaa 0303 	sub.w	r3, sl, r3
 80086c0:	0c12      	lsrs	r2, r2, #16
 80086c2:	f8dc a000 	ldr.w	sl, [ip]
 80086c6:	fb06 e202 	mla	r2, r6, r2, lr
 80086ca:	fa13 f38a 	uxtah	r3, r3, sl
 80086ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086d2:	fa1f fa82 	uxth.w	sl, r2
 80086d6:	f8dc 2000 	ldr.w	r2, [ip]
 80086da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80086de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e8:	4581      	cmp	r9, r0
 80086ea:	f84c 3b04 	str.w	r3, [ip], #4
 80086ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086f2:	d2db      	bcs.n	80086ac <quorem+0x44>
 80086f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80086f8:	b92b      	cbnz	r3, 8008706 <quorem+0x9e>
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	3b04      	subs	r3, #4
 80086fe:	429d      	cmp	r5, r3
 8008700:	461a      	mov	r2, r3
 8008702:	d32e      	bcc.n	8008762 <quorem+0xfa>
 8008704:	613c      	str	r4, [r7, #16]
 8008706:	4638      	mov	r0, r7
 8008708:	f001 fae2 	bl	8009cd0 <__mcmp>
 800870c:	2800      	cmp	r0, #0
 800870e:	db24      	blt.n	800875a <quorem+0xf2>
 8008710:	3601      	adds	r6, #1
 8008712:	4628      	mov	r0, r5
 8008714:	f04f 0c00 	mov.w	ip, #0
 8008718:	f858 2b04 	ldr.w	r2, [r8], #4
 800871c:	f8d0 e000 	ldr.w	lr, [r0]
 8008720:	b293      	uxth	r3, r2
 8008722:	ebac 0303 	sub.w	r3, ip, r3
 8008726:	0c12      	lsrs	r2, r2, #16
 8008728:	fa13 f38e 	uxtah	r3, r3, lr
 800872c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008734:	b29b      	uxth	r3, r3
 8008736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800873a:	45c1      	cmp	r9, r8
 800873c:	f840 3b04 	str.w	r3, [r0], #4
 8008740:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008744:	d2e8      	bcs.n	8008718 <quorem+0xb0>
 8008746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800874a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800874e:	b922      	cbnz	r2, 800875a <quorem+0xf2>
 8008750:	3b04      	subs	r3, #4
 8008752:	429d      	cmp	r5, r3
 8008754:	461a      	mov	r2, r3
 8008756:	d30a      	bcc.n	800876e <quorem+0x106>
 8008758:	613c      	str	r4, [r7, #16]
 800875a:	4630      	mov	r0, r6
 800875c:	b003      	add	sp, #12
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	3b04      	subs	r3, #4
 8008766:	2a00      	cmp	r2, #0
 8008768:	d1cc      	bne.n	8008704 <quorem+0x9c>
 800876a:	3c01      	subs	r4, #1
 800876c:	e7c7      	b.n	80086fe <quorem+0x96>
 800876e:	6812      	ldr	r2, [r2, #0]
 8008770:	3b04      	subs	r3, #4
 8008772:	2a00      	cmp	r2, #0
 8008774:	d1f0      	bne.n	8008758 <quorem+0xf0>
 8008776:	3c01      	subs	r4, #1
 8008778:	e7eb      	b.n	8008752 <quorem+0xea>
 800877a:	2000      	movs	r0, #0
 800877c:	e7ee      	b.n	800875c <quorem+0xf4>
	...

08008780 <_dtoa_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	ed2d 8b02 	vpush	{d8}
 8008788:	ec57 6b10 	vmov	r6, r7, d0
 800878c:	b095      	sub	sp, #84	; 0x54
 800878e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800879a:	4604      	mov	r4, r0
 800879c:	9209      	str	r2, [sp, #36]	; 0x24
 800879e:	930f      	str	r3, [sp, #60]	; 0x3c
 80087a0:	b975      	cbnz	r5, 80087c0 <_dtoa_r+0x40>
 80087a2:	2010      	movs	r0, #16
 80087a4:	f7ff f892 	bl	80078cc <malloc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6260      	str	r0, [r4, #36]	; 0x24
 80087ac:	b920      	cbnz	r0, 80087b8 <_dtoa_r+0x38>
 80087ae:	4bb2      	ldr	r3, [pc, #712]	; (8008a78 <_dtoa_r+0x2f8>)
 80087b0:	21ea      	movs	r1, #234	; 0xea
 80087b2:	48b2      	ldr	r0, [pc, #712]	; (8008a7c <_dtoa_r+0x2fc>)
 80087b4:	f001 febe 	bl	800a534 <__assert_func>
 80087b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087bc:	6005      	str	r5, [r0, #0]
 80087be:	60c5      	str	r5, [r0, #12]
 80087c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	b151      	cbz	r1, 80087dc <_dtoa_r+0x5c>
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	604a      	str	r2, [r1, #4]
 80087ca:	2301      	movs	r3, #1
 80087cc:	4093      	lsls	r3, r2
 80087ce:	608b      	str	r3, [r1, #8]
 80087d0:	4620      	mov	r0, r4
 80087d2:	f001 f83f 	bl	8009854 <_Bfree>
 80087d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	1e3b      	subs	r3, r7, #0
 80087de:	bfb9      	ittee	lt
 80087e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087e4:	9303      	strlt	r3, [sp, #12]
 80087e6:	2300      	movge	r3, #0
 80087e8:	f8c8 3000 	strge.w	r3, [r8]
 80087ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087f0:	4ba3      	ldr	r3, [pc, #652]	; (8008a80 <_dtoa_r+0x300>)
 80087f2:	bfbc      	itt	lt
 80087f4:	2201      	movlt	r2, #1
 80087f6:	f8c8 2000 	strlt.w	r2, [r8]
 80087fa:	ea33 0309 	bics.w	r3, r3, r9
 80087fe:	d11b      	bne.n	8008838 <_dtoa_r+0xb8>
 8008800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008802:	f242 730f 	movw	r3, #9999	; 0x270f
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800880c:	4333      	orrs	r3, r6
 800880e:	f000 857a 	beq.w	8009306 <_dtoa_r+0xb86>
 8008812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008814:	b963      	cbnz	r3, 8008830 <_dtoa_r+0xb0>
 8008816:	4b9b      	ldr	r3, [pc, #620]	; (8008a84 <_dtoa_r+0x304>)
 8008818:	e024      	b.n	8008864 <_dtoa_r+0xe4>
 800881a:	4b9b      	ldr	r3, [pc, #620]	; (8008a88 <_dtoa_r+0x308>)
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	9800      	ldr	r0, [sp, #0]
 8008826:	b015      	add	sp, #84	; 0x54
 8008828:	ecbd 8b02 	vpop	{d8}
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008830:	4b94      	ldr	r3, [pc, #592]	; (8008a84 <_dtoa_r+0x304>)
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	3303      	adds	r3, #3
 8008836:	e7f3      	b.n	8008820 <_dtoa_r+0xa0>
 8008838:	ed9d 7b02 	vldr	d7, [sp, #8]
 800883c:	2200      	movs	r2, #0
 800883e:	ec51 0b17 	vmov	r0, r1, d7
 8008842:	2300      	movs	r3, #0
 8008844:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008848:	f7f8 f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800884c:	4680      	mov	r8, r0
 800884e:	b158      	cbz	r0, 8008868 <_dtoa_r+0xe8>
 8008850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008852:	2301      	movs	r3, #1
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8551 	beq.w	8009300 <_dtoa_r+0xb80>
 800885e:	488b      	ldr	r0, [pc, #556]	; (8008a8c <_dtoa_r+0x30c>)
 8008860:	6018      	str	r0, [r3, #0]
 8008862:	1e43      	subs	r3, r0, #1
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	e7dd      	b.n	8008824 <_dtoa_r+0xa4>
 8008868:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800886c:	aa12      	add	r2, sp, #72	; 0x48
 800886e:	a913      	add	r1, sp, #76	; 0x4c
 8008870:	4620      	mov	r0, r4
 8008872:	f001 fad1 	bl	8009e18 <__d2b>
 8008876:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800887a:	4683      	mov	fp, r0
 800887c:	2d00      	cmp	r5, #0
 800887e:	d07c      	beq.n	800897a <_dtoa_r+0x1fa>
 8008880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008882:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800888a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800888e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008892:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800889a:	4b7d      	ldr	r3, [pc, #500]	; (8008a90 <_dtoa_r+0x310>)
 800889c:	2200      	movs	r2, #0
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fcf9 	bl	8000298 <__aeabi_dsub>
 80088a6:	a36e      	add	r3, pc, #440	; (adr r3, 8008a60 <_dtoa_r+0x2e0>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 feac 	bl	8000608 <__aeabi_dmul>
 80088b0:	a36d      	add	r3, pc, #436	; (adr r3, 8008a68 <_dtoa_r+0x2e8>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fcf1 	bl	800029c <__adddf3>
 80088ba:	4606      	mov	r6, r0
 80088bc:	4628      	mov	r0, r5
 80088be:	460f      	mov	r7, r1
 80088c0:	f7f7 fe38 	bl	8000534 <__aeabi_i2d>
 80088c4:	a36a      	add	r3, pc, #424	; (adr r3, 8008a70 <_dtoa_r+0x2f0>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fe9d 	bl	8000608 <__aeabi_dmul>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f7 fce1 	bl	800029c <__adddf3>
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	f7f8 f943 	bl	8000b68 <__aeabi_d2iz>
 80088e2:	2200      	movs	r2, #0
 80088e4:	4682      	mov	sl, r0
 80088e6:	2300      	movs	r3, #0
 80088e8:	4630      	mov	r0, r6
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f8 f8fe 	bl	8000aec <__aeabi_dcmplt>
 80088f0:	b148      	cbz	r0, 8008906 <_dtoa_r+0x186>
 80088f2:	4650      	mov	r0, sl
 80088f4:	f7f7 fe1e 	bl	8000534 <__aeabi_i2d>
 80088f8:	4632      	mov	r2, r6
 80088fa:	463b      	mov	r3, r7
 80088fc:	f7f8 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008900:	b908      	cbnz	r0, 8008906 <_dtoa_r+0x186>
 8008902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008906:	f1ba 0f16 	cmp.w	sl, #22
 800890a:	d854      	bhi.n	80089b6 <_dtoa_r+0x236>
 800890c:	4b61      	ldr	r3, [pc, #388]	; (8008a94 <_dtoa_r+0x314>)
 800890e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800891a:	f7f8 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	d04b      	beq.n	80089ba <_dtoa_r+0x23a>
 8008922:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008926:	2300      	movs	r3, #0
 8008928:	930e      	str	r3, [sp, #56]	; 0x38
 800892a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800892c:	1b5d      	subs	r5, r3, r5
 800892e:	1e6b      	subs	r3, r5, #1
 8008930:	9304      	str	r3, [sp, #16]
 8008932:	bf43      	ittte	mi
 8008934:	2300      	movmi	r3, #0
 8008936:	f1c5 0801 	rsbmi	r8, r5, #1
 800893a:	9304      	strmi	r3, [sp, #16]
 800893c:	f04f 0800 	movpl.w	r8, #0
 8008940:	f1ba 0f00 	cmp.w	sl, #0
 8008944:	db3b      	blt.n	80089be <_dtoa_r+0x23e>
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800894c:	4453      	add	r3, sl
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	2300      	movs	r3, #0
 8008952:	9306      	str	r3, [sp, #24]
 8008954:	9b05      	ldr	r3, [sp, #20]
 8008956:	2b09      	cmp	r3, #9
 8008958:	d869      	bhi.n	8008a2e <_dtoa_r+0x2ae>
 800895a:	2b05      	cmp	r3, #5
 800895c:	bfc4      	itt	gt
 800895e:	3b04      	subgt	r3, #4
 8008960:	9305      	strgt	r3, [sp, #20]
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	f1a3 0302 	sub.w	r3, r3, #2
 8008968:	bfcc      	ite	gt
 800896a:	2500      	movgt	r5, #0
 800896c:	2501      	movle	r5, #1
 800896e:	2b03      	cmp	r3, #3
 8008970:	d869      	bhi.n	8008a46 <_dtoa_r+0x2c6>
 8008972:	e8df f003 	tbb	[pc, r3]
 8008976:	4e2c      	.short	0x4e2c
 8008978:	5a4c      	.short	0x5a4c
 800897a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800897e:	441d      	add	r5, r3
 8008980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008984:	2b20      	cmp	r3, #32
 8008986:	bfc1      	itttt	gt
 8008988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800898c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008990:	fa09 f303 	lslgt.w	r3, r9, r3
 8008994:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008998:	bfda      	itte	le
 800899a:	f1c3 0320 	rsble	r3, r3, #32
 800899e:	fa06 f003 	lslle.w	r0, r6, r3
 80089a2:	4318      	orrgt	r0, r3
 80089a4:	f7f7 fdb6 	bl	8000514 <__aeabi_ui2d>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4606      	mov	r6, r0
 80089ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80089b0:	3d01      	subs	r5, #1
 80089b2:	9310      	str	r3, [sp, #64]	; 0x40
 80089b4:	e771      	b.n	800889a <_dtoa_r+0x11a>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e7b6      	b.n	8008928 <_dtoa_r+0x1a8>
 80089ba:	900e      	str	r0, [sp, #56]	; 0x38
 80089bc:	e7b5      	b.n	800892a <_dtoa_r+0x1aa>
 80089be:	f1ca 0300 	rsb	r3, sl, #0
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	2300      	movs	r3, #0
 80089c6:	eba8 080a 	sub.w	r8, r8, sl
 80089ca:	930d      	str	r3, [sp, #52]	; 0x34
 80089cc:	e7c2      	b.n	8008954 <_dtoa_r+0x1d4>
 80089ce:	2300      	movs	r3, #0
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dc39      	bgt.n	8008a4c <_dtoa_r+0x2cc>
 80089d8:	f04f 0901 	mov.w	r9, #1
 80089dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80089e0:	464b      	mov	r3, r9
 80089e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80089e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80089e8:	2200      	movs	r2, #0
 80089ea:	6042      	str	r2, [r0, #4]
 80089ec:	2204      	movs	r2, #4
 80089ee:	f102 0614 	add.w	r6, r2, #20
 80089f2:	429e      	cmp	r6, r3
 80089f4:	6841      	ldr	r1, [r0, #4]
 80089f6:	d92f      	bls.n	8008a58 <_dtoa_r+0x2d8>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 feeb 	bl	80097d4 <_Balloc>
 80089fe:	9000      	str	r0, [sp, #0]
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d14b      	bne.n	8008a9c <_dtoa_r+0x31c>
 8008a04:	4b24      	ldr	r3, [pc, #144]	; (8008a98 <_dtoa_r+0x318>)
 8008a06:	4602      	mov	r2, r0
 8008a08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a0c:	e6d1      	b.n	80087b2 <_dtoa_r+0x32>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7de      	b.n	80089d0 <_dtoa_r+0x250>
 8008a12:	2300      	movs	r3, #0
 8008a14:	9308      	str	r3, [sp, #32]
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	eb0a 0903 	add.w	r9, sl, r3
 8008a1c:	f109 0301 	add.w	r3, r9, #1
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	9301      	str	r3, [sp, #4]
 8008a24:	bfb8      	it	lt
 8008a26:	2301      	movlt	r3, #1
 8008a28:	e7dd      	b.n	80089e6 <_dtoa_r+0x266>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e7f2      	b.n	8008a14 <_dtoa_r+0x294>
 8008a2e:	2501      	movs	r5, #1
 8008a30:	2300      	movs	r3, #0
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	9508      	str	r5, [sp, #32]
 8008a36:	f04f 39ff 	mov.w	r9, #4294967295
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a40:	2312      	movs	r3, #18
 8008a42:	9209      	str	r2, [sp, #36]	; 0x24
 8008a44:	e7cf      	b.n	80089e6 <_dtoa_r+0x266>
 8008a46:	2301      	movs	r3, #1
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	e7f4      	b.n	8008a36 <_dtoa_r+0x2b6>
 8008a4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a50:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a54:	464b      	mov	r3, r9
 8008a56:	e7c6      	b.n	80089e6 <_dtoa_r+0x266>
 8008a58:	3101      	adds	r1, #1
 8008a5a:	6041      	str	r1, [r0, #4]
 8008a5c:	0052      	lsls	r2, r2, #1
 8008a5e:	e7c6      	b.n	80089ee <_dtoa_r+0x26e>
 8008a60:	636f4361 	.word	0x636f4361
 8008a64:	3fd287a7 	.word	0x3fd287a7
 8008a68:	8b60c8b3 	.word	0x8b60c8b3
 8008a6c:	3fc68a28 	.word	0x3fc68a28
 8008a70:	509f79fb 	.word	0x509f79fb
 8008a74:	3fd34413 	.word	0x3fd34413
 8008a78:	0800aa91 	.word	0x0800aa91
 8008a7c:	0800aaa8 	.word	0x0800aaa8
 8008a80:	7ff00000 	.word	0x7ff00000
 8008a84:	0800aa8d 	.word	0x0800aa8d
 8008a88:	0800aa84 	.word	0x0800aa84
 8008a8c:	0800aa61 	.word	0x0800aa61
 8008a90:	3ff80000 	.word	0x3ff80000
 8008a94:	0800ac00 	.word	0x0800ac00
 8008a98:	0800ab07 	.word	0x0800ab07
 8008a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a9e:	9a00      	ldr	r2, [sp, #0]
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	2b0e      	cmp	r3, #14
 8008aa6:	f200 80ad 	bhi.w	8008c04 <_dtoa_r+0x484>
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	f000 80aa 	beq.w	8008c04 <_dtoa_r+0x484>
 8008ab0:	f1ba 0f00 	cmp.w	sl, #0
 8008ab4:	dd36      	ble.n	8008b24 <_dtoa_r+0x3a4>
 8008ab6:	4ac3      	ldr	r2, [pc, #780]	; (8008dc4 <_dtoa_r+0x644>)
 8008ab8:	f00a 030f 	and.w	r3, sl, #15
 8008abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008ac0:	ed93 7b00 	vldr	d7, [r3]
 8008ac4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008ac8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008acc:	eeb0 8a47 	vmov.f32	s16, s14
 8008ad0:	eef0 8a67 	vmov.f32	s17, s15
 8008ad4:	d016      	beq.n	8008b04 <_dtoa_r+0x384>
 8008ad6:	4bbc      	ldr	r3, [pc, #752]	; (8008dc8 <_dtoa_r+0x648>)
 8008ad8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008adc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ae0:	f7f7 febc 	bl	800085c <__aeabi_ddiv>
 8008ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae8:	f007 070f 	and.w	r7, r7, #15
 8008aec:	2503      	movs	r5, #3
 8008aee:	4eb6      	ldr	r6, [pc, #728]	; (8008dc8 <_dtoa_r+0x648>)
 8008af0:	b957      	cbnz	r7, 8008b08 <_dtoa_r+0x388>
 8008af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af6:	ec53 2b18 	vmov	r2, r3, d8
 8008afa:	f7f7 feaf 	bl	800085c <__aeabi_ddiv>
 8008afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b02:	e029      	b.n	8008b58 <_dtoa_r+0x3d8>
 8008b04:	2502      	movs	r5, #2
 8008b06:	e7f2      	b.n	8008aee <_dtoa_r+0x36e>
 8008b08:	07f9      	lsls	r1, r7, #31
 8008b0a:	d508      	bpl.n	8008b1e <_dtoa_r+0x39e>
 8008b0c:	ec51 0b18 	vmov	r0, r1, d8
 8008b10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b14:	f7f7 fd78 	bl	8000608 <__aeabi_dmul>
 8008b18:	ec41 0b18 	vmov	d8, r0, r1
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	107f      	asrs	r7, r7, #1
 8008b20:	3608      	adds	r6, #8
 8008b22:	e7e5      	b.n	8008af0 <_dtoa_r+0x370>
 8008b24:	f000 80a6 	beq.w	8008c74 <_dtoa_r+0x4f4>
 8008b28:	f1ca 0600 	rsb	r6, sl, #0
 8008b2c:	4ba5      	ldr	r3, [pc, #660]	; (8008dc4 <_dtoa_r+0x644>)
 8008b2e:	4fa6      	ldr	r7, [pc, #664]	; (8008dc8 <_dtoa_r+0x648>)
 8008b30:	f006 020f 	and.w	r2, r6, #15
 8008b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b40:	f7f7 fd62 	bl	8000608 <__aeabi_dmul>
 8008b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b48:	1136      	asrs	r6, r6, #4
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2502      	movs	r5, #2
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	f040 8085 	bne.w	8008c5e <_dtoa_r+0x4de>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1d2      	bne.n	8008afe <_dtoa_r+0x37e>
 8008b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 808c 	beq.w	8008c78 <_dtoa_r+0x4f8>
 8008b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b64:	4b99      	ldr	r3, [pc, #612]	; (8008dcc <_dtoa_r+0x64c>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 ffbe 	bl	8000aec <__aeabi_dcmplt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f000 8081 	beq.w	8008c78 <_dtoa_r+0x4f8>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d07d      	beq.n	8008c78 <_dtoa_r+0x4f8>
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	dd3c      	ble.n	8008bfc <_dtoa_r+0x47c>
 8008b82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4b91      	ldr	r3, [pc, #580]	; (8008dd0 <_dtoa_r+0x650>)
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	4639      	mov	r1, r7
 8008b90:	f7f7 fd3a 	bl	8000608 <__aeabi_dmul>
 8008b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b98:	3501      	adds	r5, #1
 8008b9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7f7 fcc6 	bl	8000534 <__aeabi_i2d>
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	f7f7 fd2c 	bl	8000608 <__aeabi_dmul>
 8008bb0:	4b88      	ldr	r3, [pc, #544]	; (8008dd4 <_dtoa_r+0x654>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f7f7 fb72 	bl	800029c <__adddf3>
 8008bb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d15c      	bne.n	8008c82 <_dtoa_r+0x502>
 8008bc8:	4b83      	ldr	r3, [pc, #524]	; (8008dd8 <_dtoa_r+0x658>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb62 	bl	8000298 <__aeabi_dsub>
 8008bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	f7f7 ffa4 	bl	8000b28 <__aeabi_dcmpgt>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f040 8296 	bne.w	8009112 <_dtoa_r+0x992>
 8008be6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008bea:	4630      	mov	r0, r6
 8008bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	f7f7 ff7b 	bl	8000aec <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f040 8288 	bne.w	800910c <_dtoa_r+0x98c>
 8008bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f2c0 8158 	blt.w	8008ebc <_dtoa_r+0x73c>
 8008c0c:	f1ba 0f0e 	cmp.w	sl, #14
 8008c10:	f300 8154 	bgt.w	8008ebc <_dtoa_r+0x73c>
 8008c14:	4b6b      	ldr	r3, [pc, #428]	; (8008dc4 <_dtoa_r+0x644>)
 8008c16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f280 80e3 	bge.w	8008dec <_dtoa_r+0x66c>
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f300 80df 	bgt.w	8008dec <_dtoa_r+0x66c>
 8008c2e:	f040 826d 	bne.w	800910c <_dtoa_r+0x98c>
 8008c32:	4b69      	ldr	r3, [pc, #420]	; (8008dd8 <_dtoa_r+0x658>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	f7f7 fce5 	bl	8000608 <__aeabi_dmul>
 8008c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c42:	f7f7 ff67 	bl	8000b14 <__aeabi_dcmpge>
 8008c46:	9e01      	ldr	r6, [sp, #4]
 8008c48:	4637      	mov	r7, r6
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f040 8243 	bne.w	80090d6 <_dtoa_r+0x956>
 8008c50:	9d00      	ldr	r5, [sp, #0]
 8008c52:	2331      	movs	r3, #49	; 0x31
 8008c54:	f805 3b01 	strb.w	r3, [r5], #1
 8008c58:	f10a 0a01 	add.w	sl, sl, #1
 8008c5c:	e23f      	b.n	80090de <_dtoa_r+0x95e>
 8008c5e:	07f2      	lsls	r2, r6, #31
 8008c60:	d505      	bpl.n	8008c6e <_dtoa_r+0x4ee>
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	f7f7 fccf 	bl	8000608 <__aeabi_dmul>
 8008c6a:	3501      	adds	r5, #1
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	1076      	asrs	r6, r6, #1
 8008c70:	3708      	adds	r7, #8
 8008c72:	e76c      	b.n	8008b4e <_dtoa_r+0x3ce>
 8008c74:	2502      	movs	r5, #2
 8008c76:	e76f      	b.n	8008b58 <_dtoa_r+0x3d8>
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c80:	e78d      	b.n	8008b9e <_dtoa_r+0x41e>
 8008c82:	9900      	ldr	r1, [sp, #0]
 8008c84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c88:	4b4e      	ldr	r3, [pc, #312]	; (8008dc4 <_dtoa_r+0x644>)
 8008c8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c8e:	4401      	add	r1, r0
 8008c90:	9102      	str	r1, [sp, #8]
 8008c92:	9908      	ldr	r1, [sp, #32]
 8008c94:	eeb0 8a47 	vmov.f32	s16, s14
 8008c98:	eef0 8a67 	vmov.f32	s17, s15
 8008c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	d045      	beq.n	8008d34 <_dtoa_r+0x5b4>
 8008ca8:	494c      	ldr	r1, [pc, #304]	; (8008ddc <_dtoa_r+0x65c>)
 8008caa:	2000      	movs	r0, #0
 8008cac:	f7f7 fdd6 	bl	800085c <__aeabi_ddiv>
 8008cb0:	ec53 2b18 	vmov	r2, r3, d8
 8008cb4:	f7f7 faf0 	bl	8000298 <__aeabi_dsub>
 8008cb8:	9d00      	ldr	r5, [sp, #0]
 8008cba:	ec41 0b18 	vmov	d8, r0, r1
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7f7 ff51 	bl	8000b68 <__aeabi_d2iz>
 8008cc6:	900c      	str	r0, [sp, #48]	; 0x30
 8008cc8:	f7f7 fc34 	bl	8000534 <__aeabi_i2d>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fae0 	bl	8000298 <__aeabi_dsub>
 8008cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cda:	3330      	adds	r3, #48	; 0x30
 8008cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8008ce0:	ec53 2b18 	vmov	r2, r3, d8
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	460f      	mov	r7, r1
 8008ce8:	f7f7 ff00 	bl	8000aec <__aeabi_dcmplt>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d165      	bne.n	8008dbc <_dtoa_r+0x63c>
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	4935      	ldr	r1, [pc, #212]	; (8008dcc <_dtoa_r+0x64c>)
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f7f7 face 	bl	8000298 <__aeabi_dsub>
 8008cfc:	ec53 2b18 	vmov	r2, r3, d8
 8008d00:	f7f7 fef4 	bl	8000aec <__aeabi_dcmplt>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	f040 80b9 	bne.w	8008e7c <_dtoa_r+0x6fc>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	f43f af75 	beq.w	8008bfc <_dtoa_r+0x47c>
 8008d12:	4b2f      	ldr	r3, [pc, #188]	; (8008dd0 <_dtoa_r+0x650>)
 8008d14:	ec51 0b18 	vmov	r0, r1, d8
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f7f7 fc75 	bl	8000608 <__aeabi_dmul>
 8008d1e:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <_dtoa_r+0x650>)
 8008d20:	ec41 0b18 	vmov	d8, r0, r1
 8008d24:	2200      	movs	r2, #0
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f7 fc6d 	bl	8000608 <__aeabi_dmul>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460f      	mov	r7, r1
 8008d32:	e7c4      	b.n	8008cbe <_dtoa_r+0x53e>
 8008d34:	ec51 0b17 	vmov	r0, r1, d7
 8008d38:	f7f7 fc66 	bl	8000608 <__aeabi_dmul>
 8008d3c:	9b02      	ldr	r3, [sp, #8]
 8008d3e:	9d00      	ldr	r5, [sp, #0]
 8008d40:	930c      	str	r3, [sp, #48]	; 0x30
 8008d42:	ec41 0b18 	vmov	d8, r0, r1
 8008d46:	4639      	mov	r1, r7
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7f7 ff0d 	bl	8000b68 <__aeabi_d2iz>
 8008d4e:	9011      	str	r0, [sp, #68]	; 0x44
 8008d50:	f7f7 fbf0 	bl	8000534 <__aeabi_i2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fa9c 	bl	8000298 <__aeabi_dsub>
 8008d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d62:	3330      	adds	r3, #48	; 0x30
 8008d64:	f805 3b01 	strb.w	r3, [r5], #1
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	429d      	cmp	r5, r3
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	460f      	mov	r7, r1
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	d134      	bne.n	8008de0 <_dtoa_r+0x660>
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <_dtoa_r+0x65c>)
 8008d78:	ec51 0b18 	vmov	r0, r1, d8
 8008d7c:	f7f7 fa8e 	bl	800029c <__adddf3>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	f7f7 fece 	bl	8000b28 <__aeabi_dcmpgt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d175      	bne.n	8008e7c <_dtoa_r+0x6fc>
 8008d90:	ec53 2b18 	vmov	r2, r3, d8
 8008d94:	4911      	ldr	r1, [pc, #68]	; (8008ddc <_dtoa_r+0x65c>)
 8008d96:	2000      	movs	r0, #0
 8008d98:	f7f7 fa7e 	bl	8000298 <__aeabi_dsub>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4630      	mov	r0, r6
 8008da2:	4639      	mov	r1, r7
 8008da4:	f7f7 fea2 	bl	8000aec <__aeabi_dcmplt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f43f af27 	beq.w	8008bfc <_dtoa_r+0x47c>
 8008dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008db0:	1e6b      	subs	r3, r5, #1
 8008db2:	930c      	str	r3, [sp, #48]	; 0x30
 8008db4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008db8:	2b30      	cmp	r3, #48	; 0x30
 8008dba:	d0f8      	beq.n	8008dae <_dtoa_r+0x62e>
 8008dbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008dc0:	e04a      	b.n	8008e58 <_dtoa_r+0x6d8>
 8008dc2:	bf00      	nop
 8008dc4:	0800ac00 	.word	0x0800ac00
 8008dc8:	0800abd8 	.word	0x0800abd8
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	40240000 	.word	0x40240000
 8008dd4:	401c0000 	.word	0x401c0000
 8008dd8:	40140000 	.word	0x40140000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	4baf      	ldr	r3, [pc, #700]	; (80090a0 <_dtoa_r+0x920>)
 8008de2:	f7f7 fc11 	bl	8000608 <__aeabi_dmul>
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	e7ac      	b.n	8008d46 <_dtoa_r+0x5c6>
 8008dec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008df0:	9d00      	ldr	r5, [sp, #0]
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	f7f7 fd2f 	bl	800085c <__aeabi_ddiv>
 8008dfe:	f7f7 feb3 	bl	8000b68 <__aeabi_d2iz>
 8008e02:	9002      	str	r0, [sp, #8]
 8008e04:	f7f7 fb96 	bl	8000534 <__aeabi_i2d>
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	f7f7 fbfc 	bl	8000608 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fa3e 	bl	8000298 <__aeabi_dsub>
 8008e1c:	9e02      	ldr	r6, [sp, #8]
 8008e1e:	9f01      	ldr	r7, [sp, #4]
 8008e20:	3630      	adds	r6, #48	; 0x30
 8008e22:	f805 6b01 	strb.w	r6, [r5], #1
 8008e26:	9e00      	ldr	r6, [sp, #0]
 8008e28:	1bae      	subs	r6, r5, r6
 8008e2a:	42b7      	cmp	r7, r6
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	d137      	bne.n	8008ea2 <_dtoa_r+0x722>
 8008e32:	f7f7 fa33 	bl	800029c <__adddf3>
 8008e36:	4642      	mov	r2, r8
 8008e38:	464b      	mov	r3, r9
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	f7f7 fe73 	bl	8000b28 <__aeabi_dcmpgt>
 8008e42:	b9c8      	cbnz	r0, 8008e78 <_dtoa_r+0x6f8>
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e50:	b110      	cbz	r0, 8008e58 <_dtoa_r+0x6d8>
 8008e52:	9b02      	ldr	r3, [sp, #8]
 8008e54:	07d9      	lsls	r1, r3, #31
 8008e56:	d40f      	bmi.n	8008e78 <_dtoa_r+0x6f8>
 8008e58:	4620      	mov	r0, r4
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	f000 fcfa 	bl	8009854 <_Bfree>
 8008e60:	2300      	movs	r3, #0
 8008e62:	702b      	strb	r3, [r5, #0]
 8008e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e66:	f10a 0001 	add.w	r0, sl, #1
 8008e6a:	6018      	str	r0, [r3, #0]
 8008e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f43f acd8 	beq.w	8008824 <_dtoa_r+0xa4>
 8008e74:	601d      	str	r5, [r3, #0]
 8008e76:	e4d5      	b.n	8008824 <_dtoa_r+0xa4>
 8008e78:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	461d      	mov	r5, r3
 8008e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e84:	2a39      	cmp	r2, #57	; 0x39
 8008e86:	d108      	bne.n	8008e9a <_dtoa_r+0x71a>
 8008e88:	9a00      	ldr	r2, [sp, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d1f7      	bne.n	8008e7e <_dtoa_r+0x6fe>
 8008e8e:	9a07      	ldr	r2, [sp, #28]
 8008e90:	9900      	ldr	r1, [sp, #0]
 8008e92:	3201      	adds	r2, #1
 8008e94:	9207      	str	r2, [sp, #28]
 8008e96:	2230      	movs	r2, #48	; 0x30
 8008e98:	700a      	strb	r2, [r1, #0]
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	701a      	strb	r2, [r3, #0]
 8008ea0:	e78c      	b.n	8008dbc <_dtoa_r+0x63c>
 8008ea2:	4b7f      	ldr	r3, [pc, #508]	; (80090a0 <_dtoa_r+0x920>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f7f7 fbaf 	bl	8000608 <__aeabi_dmul>
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2300      	movs	r3, #0
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460f      	mov	r7, r1
 8008eb2:	f7f7 fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d09b      	beq.n	8008df2 <_dtoa_r+0x672>
 8008eba:	e7cd      	b.n	8008e58 <_dtoa_r+0x6d8>
 8008ebc:	9a08      	ldr	r2, [sp, #32]
 8008ebe:	2a00      	cmp	r2, #0
 8008ec0:	f000 80c4 	beq.w	800904c <_dtoa_r+0x8cc>
 8008ec4:	9a05      	ldr	r2, [sp, #20]
 8008ec6:	2a01      	cmp	r2, #1
 8008ec8:	f300 80a8 	bgt.w	800901c <_dtoa_r+0x89c>
 8008ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	f000 80a0 	beq.w	8009014 <_dtoa_r+0x894>
 8008ed4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ed8:	9e06      	ldr	r6, [sp, #24]
 8008eda:	4645      	mov	r5, r8
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	2101      	movs	r1, #1
 8008ee0:	441a      	add	r2, r3
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4498      	add	r8, r3
 8008ee6:	9204      	str	r2, [sp, #16]
 8008ee8:	f000 fd70 	bl	80099cc <__i2b>
 8008eec:	4607      	mov	r7, r0
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	dd0b      	ble.n	8008f0a <_dtoa_r+0x78a>
 8008ef2:	9b04      	ldr	r3, [sp, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	dd08      	ble.n	8008f0a <_dtoa_r+0x78a>
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	9a04      	ldr	r2, [sp, #16]
 8008efc:	bfa8      	it	ge
 8008efe:	462b      	movge	r3, r5
 8008f00:	eba8 0803 	sub.w	r8, r8, r3
 8008f04:	1aed      	subs	r5, r5, r3
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	9304      	str	r3, [sp, #16]
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	b1fb      	cbz	r3, 8008f4e <_dtoa_r+0x7ce>
 8008f0e:	9b08      	ldr	r3, [sp, #32]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 809f 	beq.w	8009054 <_dtoa_r+0x8d4>
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	dd11      	ble.n	8008f3e <_dtoa_r+0x7be>
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fe10 	bl	8009b44 <__pow5mult>
 8008f24:	465a      	mov	r2, fp
 8008f26:	4601      	mov	r1, r0
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fd64 	bl	80099f8 <__multiply>
 8008f30:	4659      	mov	r1, fp
 8008f32:	9007      	str	r0, [sp, #28]
 8008f34:	4620      	mov	r0, r4
 8008f36:	f000 fc8d 	bl	8009854 <_Bfree>
 8008f3a:	9b07      	ldr	r3, [sp, #28]
 8008f3c:	469b      	mov	fp, r3
 8008f3e:	9b06      	ldr	r3, [sp, #24]
 8008f40:	1b9a      	subs	r2, r3, r6
 8008f42:	d004      	beq.n	8008f4e <_dtoa_r+0x7ce>
 8008f44:	4659      	mov	r1, fp
 8008f46:	4620      	mov	r0, r4
 8008f48:	f000 fdfc 	bl	8009b44 <__pow5mult>
 8008f4c:	4683      	mov	fp, r0
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fd3b 	bl	80099cc <__i2b>
 8008f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	dd7c      	ble.n	8009058 <_dtoa_r+0x8d8>
 8008f5e:	461a      	mov	r2, r3
 8008f60:	4601      	mov	r1, r0
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 fdee 	bl	8009b44 <__pow5mult>
 8008f68:	9b05      	ldr	r3, [sp, #20]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	dd76      	ble.n	800905e <_dtoa_r+0x8de>
 8008f70:	2300      	movs	r3, #0
 8008f72:	9306      	str	r3, [sp, #24]
 8008f74:	6933      	ldr	r3, [r6, #16]
 8008f76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f7a:	6918      	ldr	r0, [r3, #16]
 8008f7c:	f000 fcd6 	bl	800992c <__hi0bits>
 8008f80:	f1c0 0020 	rsb	r0, r0, #32
 8008f84:	9b04      	ldr	r3, [sp, #16]
 8008f86:	4418      	add	r0, r3
 8008f88:	f010 001f 	ands.w	r0, r0, #31
 8008f8c:	f000 8086 	beq.w	800909c <_dtoa_r+0x91c>
 8008f90:	f1c0 0320 	rsb	r3, r0, #32
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	dd7f      	ble.n	8009098 <_dtoa_r+0x918>
 8008f98:	f1c0 001c 	rsb	r0, r0, #28
 8008f9c:	9b04      	ldr	r3, [sp, #16]
 8008f9e:	4403      	add	r3, r0
 8008fa0:	4480      	add	r8, r0
 8008fa2:	4405      	add	r5, r0
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	f1b8 0f00 	cmp.w	r8, #0
 8008faa:	dd05      	ble.n	8008fb8 <_dtoa_r+0x838>
 8008fac:	4659      	mov	r1, fp
 8008fae:	4642      	mov	r2, r8
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fe21 	bl	8009bf8 <__lshift>
 8008fb6:	4683      	mov	fp, r0
 8008fb8:	9b04      	ldr	r3, [sp, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dd05      	ble.n	8008fca <_dtoa_r+0x84a>
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fe18 	bl	8009bf8 <__lshift>
 8008fc8:	4606      	mov	r6, r0
 8008fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d069      	beq.n	80090a4 <_dtoa_r+0x924>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4658      	mov	r0, fp
 8008fd4:	f000 fe7c 	bl	8009cd0 <__mcmp>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	da63      	bge.n	80090a4 <_dtoa_r+0x924>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	4659      	mov	r1, fp
 8008fe0:	220a      	movs	r2, #10
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 fc58 	bl	8009898 <__multadd>
 8008fe8:	9b08      	ldr	r3, [sp, #32]
 8008fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fee:	4683      	mov	fp, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 818f 	beq.w	8009314 <_dtoa_r+0xb94>
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	220a      	movs	r2, #10
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fc4b 	bl	8009898 <__multadd>
 8009002:	f1b9 0f00 	cmp.w	r9, #0
 8009006:	4607      	mov	r7, r0
 8009008:	f300 808e 	bgt.w	8009128 <_dtoa_r+0x9a8>
 800900c:	9b05      	ldr	r3, [sp, #20]
 800900e:	2b02      	cmp	r3, #2
 8009010:	dc50      	bgt.n	80090b4 <_dtoa_r+0x934>
 8009012:	e089      	b.n	8009128 <_dtoa_r+0x9a8>
 8009014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009016:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800901a:	e75d      	b.n	8008ed8 <_dtoa_r+0x758>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	1e5e      	subs	r6, r3, #1
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	42b3      	cmp	r3, r6
 8009024:	bfbf      	itttt	lt
 8009026:	9b06      	ldrlt	r3, [sp, #24]
 8009028:	9606      	strlt	r6, [sp, #24]
 800902a:	1af2      	sublt	r2, r6, r3
 800902c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800902e:	bfb6      	itet	lt
 8009030:	189b      	addlt	r3, r3, r2
 8009032:	1b9e      	subge	r6, r3, r6
 8009034:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	bfb8      	it	lt
 800903a:	2600      	movlt	r6, #0
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfb5      	itete	lt
 8009040:	eba8 0503 	sublt.w	r5, r8, r3
 8009044:	9b01      	ldrge	r3, [sp, #4]
 8009046:	2300      	movlt	r3, #0
 8009048:	4645      	movge	r5, r8
 800904a:	e747      	b.n	8008edc <_dtoa_r+0x75c>
 800904c:	9e06      	ldr	r6, [sp, #24]
 800904e:	9f08      	ldr	r7, [sp, #32]
 8009050:	4645      	mov	r5, r8
 8009052:	e74c      	b.n	8008eee <_dtoa_r+0x76e>
 8009054:	9a06      	ldr	r2, [sp, #24]
 8009056:	e775      	b.n	8008f44 <_dtoa_r+0x7c4>
 8009058:	9b05      	ldr	r3, [sp, #20]
 800905a:	2b01      	cmp	r3, #1
 800905c:	dc18      	bgt.n	8009090 <_dtoa_r+0x910>
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	b9b3      	cbnz	r3, 8009090 <_dtoa_r+0x910>
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009068:	b9a3      	cbnz	r3, 8009094 <_dtoa_r+0x914>
 800906a:	9b03      	ldr	r3, [sp, #12]
 800906c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009070:	0d1b      	lsrs	r3, r3, #20
 8009072:	051b      	lsls	r3, r3, #20
 8009074:	b12b      	cbz	r3, 8009082 <_dtoa_r+0x902>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	3301      	adds	r3, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	f108 0801 	add.w	r8, r8, #1
 8009080:	2301      	movs	r3, #1
 8009082:	9306      	str	r3, [sp, #24]
 8009084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009086:	2b00      	cmp	r3, #0
 8009088:	f47f af74 	bne.w	8008f74 <_dtoa_r+0x7f4>
 800908c:	2001      	movs	r0, #1
 800908e:	e779      	b.n	8008f84 <_dtoa_r+0x804>
 8009090:	2300      	movs	r3, #0
 8009092:	e7f6      	b.n	8009082 <_dtoa_r+0x902>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	e7f4      	b.n	8009082 <_dtoa_r+0x902>
 8009098:	d085      	beq.n	8008fa6 <_dtoa_r+0x826>
 800909a:	4618      	mov	r0, r3
 800909c:	301c      	adds	r0, #28
 800909e:	e77d      	b.n	8008f9c <_dtoa_r+0x81c>
 80090a0:	40240000 	.word	0x40240000
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	dc38      	bgt.n	800911c <_dtoa_r+0x99c>
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	dd35      	ble.n	800911c <_dtoa_r+0x99c>
 80090b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090b4:	f1b9 0f00 	cmp.w	r9, #0
 80090b8:	d10d      	bne.n	80090d6 <_dtoa_r+0x956>
 80090ba:	4631      	mov	r1, r6
 80090bc:	464b      	mov	r3, r9
 80090be:	2205      	movs	r2, #5
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fbe9 	bl	8009898 <__multadd>
 80090c6:	4601      	mov	r1, r0
 80090c8:	4606      	mov	r6, r0
 80090ca:	4658      	mov	r0, fp
 80090cc:	f000 fe00 	bl	8009cd0 <__mcmp>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f73f adbd 	bgt.w	8008c50 <_dtoa_r+0x4d0>
 80090d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d8:	9d00      	ldr	r5, [sp, #0]
 80090da:	ea6f 0a03 	mvn.w	sl, r3
 80090de:	f04f 0800 	mov.w	r8, #0
 80090e2:	4631      	mov	r1, r6
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fbb5 	bl	8009854 <_Bfree>
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	f43f aeb4 	beq.w	8008e58 <_dtoa_r+0x6d8>
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	d005      	beq.n	8009102 <_dtoa_r+0x982>
 80090f6:	45b8      	cmp	r8, r7
 80090f8:	d003      	beq.n	8009102 <_dtoa_r+0x982>
 80090fa:	4641      	mov	r1, r8
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 fba9 	bl	8009854 <_Bfree>
 8009102:	4639      	mov	r1, r7
 8009104:	4620      	mov	r0, r4
 8009106:	f000 fba5 	bl	8009854 <_Bfree>
 800910a:	e6a5      	b.n	8008e58 <_dtoa_r+0x6d8>
 800910c:	2600      	movs	r6, #0
 800910e:	4637      	mov	r7, r6
 8009110:	e7e1      	b.n	80090d6 <_dtoa_r+0x956>
 8009112:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009118:	4637      	mov	r7, r6
 800911a:	e599      	b.n	8008c50 <_dtoa_r+0x4d0>
 800911c:	9b08      	ldr	r3, [sp, #32]
 800911e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80fd 	beq.w	8009322 <_dtoa_r+0xba2>
 8009128:	2d00      	cmp	r5, #0
 800912a:	dd05      	ble.n	8009138 <_dtoa_r+0x9b8>
 800912c:	4639      	mov	r1, r7
 800912e:	462a      	mov	r2, r5
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fd61 	bl	8009bf8 <__lshift>
 8009136:	4607      	mov	r7, r0
 8009138:	9b06      	ldr	r3, [sp, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d05c      	beq.n	80091f8 <_dtoa_r+0xa78>
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	4620      	mov	r0, r4
 8009142:	f000 fb47 	bl	80097d4 <_Balloc>
 8009146:	4605      	mov	r5, r0
 8009148:	b928      	cbnz	r0, 8009156 <_dtoa_r+0x9d6>
 800914a:	4b80      	ldr	r3, [pc, #512]	; (800934c <_dtoa_r+0xbcc>)
 800914c:	4602      	mov	r2, r0
 800914e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009152:	f7ff bb2e 	b.w	80087b2 <_dtoa_r+0x32>
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	3202      	adds	r2, #2
 800915a:	0092      	lsls	r2, r2, #2
 800915c:	f107 010c 	add.w	r1, r7, #12
 8009160:	300c      	adds	r0, #12
 8009162:	f000 fb1d 	bl	80097a0 <memcpy>
 8009166:	2201      	movs	r2, #1
 8009168:	4629      	mov	r1, r5
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fd44 	bl	8009bf8 <__lshift>
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	444b      	add	r3, r9
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	9b02      	ldr	r3, [sp, #8]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	46b8      	mov	r8, r7
 8009184:	9306      	str	r3, [sp, #24]
 8009186:	4607      	mov	r7, r0
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	4631      	mov	r1, r6
 800918c:	3b01      	subs	r3, #1
 800918e:	4658      	mov	r0, fp
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	f7ff fa69 	bl	8008668 <quorem>
 8009196:	4603      	mov	r3, r0
 8009198:	3330      	adds	r3, #48	; 0x30
 800919a:	9004      	str	r0, [sp, #16]
 800919c:	4641      	mov	r1, r8
 800919e:	4658      	mov	r0, fp
 80091a0:	9308      	str	r3, [sp, #32]
 80091a2:	f000 fd95 	bl	8009cd0 <__mcmp>
 80091a6:	463a      	mov	r2, r7
 80091a8:	4681      	mov	r9, r0
 80091aa:	4631      	mov	r1, r6
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 fdab 	bl	8009d08 <__mdiff>
 80091b2:	68c2      	ldr	r2, [r0, #12]
 80091b4:	9b08      	ldr	r3, [sp, #32]
 80091b6:	4605      	mov	r5, r0
 80091b8:	bb02      	cbnz	r2, 80091fc <_dtoa_r+0xa7c>
 80091ba:	4601      	mov	r1, r0
 80091bc:	4658      	mov	r0, fp
 80091be:	f000 fd87 	bl	8009cd0 <__mcmp>
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	4602      	mov	r2, r0
 80091c6:	4629      	mov	r1, r5
 80091c8:	4620      	mov	r0, r4
 80091ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80091ce:	f000 fb41 	bl	8009854 <_Bfree>
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d6:	9d01      	ldr	r5, [sp, #4]
 80091d8:	ea43 0102 	orr.w	r1, r3, r2
 80091dc:	9b06      	ldr	r3, [sp, #24]
 80091de:	430b      	orrs	r3, r1
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	d10d      	bne.n	8009200 <_dtoa_r+0xa80>
 80091e4:	2b39      	cmp	r3, #57	; 0x39
 80091e6:	d029      	beq.n	800923c <_dtoa_r+0xabc>
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	dd01      	ble.n	80091f2 <_dtoa_r+0xa72>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	3331      	adds	r3, #49	; 0x31
 80091f2:	9a02      	ldr	r2, [sp, #8]
 80091f4:	7013      	strb	r3, [r2, #0]
 80091f6:	e774      	b.n	80090e2 <_dtoa_r+0x962>
 80091f8:	4638      	mov	r0, r7
 80091fa:	e7b9      	b.n	8009170 <_dtoa_r+0x9f0>
 80091fc:	2201      	movs	r2, #1
 80091fe:	e7e2      	b.n	80091c6 <_dtoa_r+0xa46>
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	db06      	blt.n	8009214 <_dtoa_r+0xa94>
 8009206:	9905      	ldr	r1, [sp, #20]
 8009208:	ea41 0909 	orr.w	r9, r1, r9
 800920c:	9906      	ldr	r1, [sp, #24]
 800920e:	ea59 0101 	orrs.w	r1, r9, r1
 8009212:	d120      	bne.n	8009256 <_dtoa_r+0xad6>
 8009214:	2a00      	cmp	r2, #0
 8009216:	ddec      	ble.n	80091f2 <_dtoa_r+0xa72>
 8009218:	4659      	mov	r1, fp
 800921a:	2201      	movs	r2, #1
 800921c:	4620      	mov	r0, r4
 800921e:	9301      	str	r3, [sp, #4]
 8009220:	f000 fcea 	bl	8009bf8 <__lshift>
 8009224:	4631      	mov	r1, r6
 8009226:	4683      	mov	fp, r0
 8009228:	f000 fd52 	bl	8009cd0 <__mcmp>
 800922c:	2800      	cmp	r0, #0
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	dc02      	bgt.n	8009238 <_dtoa_r+0xab8>
 8009232:	d1de      	bne.n	80091f2 <_dtoa_r+0xa72>
 8009234:	07da      	lsls	r2, r3, #31
 8009236:	d5dc      	bpl.n	80091f2 <_dtoa_r+0xa72>
 8009238:	2b39      	cmp	r3, #57	; 0x39
 800923a:	d1d8      	bne.n	80091ee <_dtoa_r+0xa6e>
 800923c:	9a02      	ldr	r2, [sp, #8]
 800923e:	2339      	movs	r3, #57	; 0x39
 8009240:	7013      	strb	r3, [r2, #0]
 8009242:	462b      	mov	r3, r5
 8009244:	461d      	mov	r5, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800924c:	2a39      	cmp	r2, #57	; 0x39
 800924e:	d050      	beq.n	80092f2 <_dtoa_r+0xb72>
 8009250:	3201      	adds	r2, #1
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e745      	b.n	80090e2 <_dtoa_r+0x962>
 8009256:	2a00      	cmp	r2, #0
 8009258:	dd03      	ble.n	8009262 <_dtoa_r+0xae2>
 800925a:	2b39      	cmp	r3, #57	; 0x39
 800925c:	d0ee      	beq.n	800923c <_dtoa_r+0xabc>
 800925e:	3301      	adds	r3, #1
 8009260:	e7c7      	b.n	80091f2 <_dtoa_r+0xa72>
 8009262:	9a01      	ldr	r2, [sp, #4]
 8009264:	9907      	ldr	r1, [sp, #28]
 8009266:	f802 3c01 	strb.w	r3, [r2, #-1]
 800926a:	428a      	cmp	r2, r1
 800926c:	d02a      	beq.n	80092c4 <_dtoa_r+0xb44>
 800926e:	4659      	mov	r1, fp
 8009270:	2300      	movs	r3, #0
 8009272:	220a      	movs	r2, #10
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fb0f 	bl	8009898 <__multadd>
 800927a:	45b8      	cmp	r8, r7
 800927c:	4683      	mov	fp, r0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	f04f 020a 	mov.w	r2, #10
 8009286:	4641      	mov	r1, r8
 8009288:	4620      	mov	r0, r4
 800928a:	d107      	bne.n	800929c <_dtoa_r+0xb1c>
 800928c:	f000 fb04 	bl	8009898 <__multadd>
 8009290:	4680      	mov	r8, r0
 8009292:	4607      	mov	r7, r0
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	3301      	adds	r3, #1
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	e775      	b.n	8009188 <_dtoa_r+0xa08>
 800929c:	f000 fafc 	bl	8009898 <__multadd>
 80092a0:	4639      	mov	r1, r7
 80092a2:	4680      	mov	r8, r0
 80092a4:	2300      	movs	r3, #0
 80092a6:	220a      	movs	r2, #10
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 faf5 	bl	8009898 <__multadd>
 80092ae:	4607      	mov	r7, r0
 80092b0:	e7f0      	b.n	8009294 <_dtoa_r+0xb14>
 80092b2:	f1b9 0f00 	cmp.w	r9, #0
 80092b6:	9a00      	ldr	r2, [sp, #0]
 80092b8:	bfcc      	ite	gt
 80092ba:	464d      	movgt	r5, r9
 80092bc:	2501      	movle	r5, #1
 80092be:	4415      	add	r5, r2
 80092c0:	f04f 0800 	mov.w	r8, #0
 80092c4:	4659      	mov	r1, fp
 80092c6:	2201      	movs	r2, #1
 80092c8:	4620      	mov	r0, r4
 80092ca:	9301      	str	r3, [sp, #4]
 80092cc:	f000 fc94 	bl	8009bf8 <__lshift>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4683      	mov	fp, r0
 80092d4:	f000 fcfc 	bl	8009cd0 <__mcmp>
 80092d8:	2800      	cmp	r0, #0
 80092da:	dcb2      	bgt.n	8009242 <_dtoa_r+0xac2>
 80092dc:	d102      	bne.n	80092e4 <_dtoa_r+0xb64>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	07db      	lsls	r3, r3, #31
 80092e2:	d4ae      	bmi.n	8009242 <_dtoa_r+0xac2>
 80092e4:	462b      	mov	r3, r5
 80092e6:	461d      	mov	r5, r3
 80092e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ec:	2a30      	cmp	r2, #48	; 0x30
 80092ee:	d0fa      	beq.n	80092e6 <_dtoa_r+0xb66>
 80092f0:	e6f7      	b.n	80090e2 <_dtoa_r+0x962>
 80092f2:	9a00      	ldr	r2, [sp, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d1a5      	bne.n	8009244 <_dtoa_r+0xac4>
 80092f8:	f10a 0a01 	add.w	sl, sl, #1
 80092fc:	2331      	movs	r3, #49	; 0x31
 80092fe:	e779      	b.n	80091f4 <_dtoa_r+0xa74>
 8009300:	4b13      	ldr	r3, [pc, #76]	; (8009350 <_dtoa_r+0xbd0>)
 8009302:	f7ff baaf 	b.w	8008864 <_dtoa_r+0xe4>
 8009306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009308:	2b00      	cmp	r3, #0
 800930a:	f47f aa86 	bne.w	800881a <_dtoa_r+0x9a>
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <_dtoa_r+0xbd4>)
 8009310:	f7ff baa8 	b.w	8008864 <_dtoa_r+0xe4>
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	dc03      	bgt.n	8009322 <_dtoa_r+0xba2>
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	2b02      	cmp	r3, #2
 800931e:	f73f aec9 	bgt.w	80090b4 <_dtoa_r+0x934>
 8009322:	9d00      	ldr	r5, [sp, #0]
 8009324:	4631      	mov	r1, r6
 8009326:	4658      	mov	r0, fp
 8009328:	f7ff f99e 	bl	8008668 <quorem>
 800932c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009330:	f805 3b01 	strb.w	r3, [r5], #1
 8009334:	9a00      	ldr	r2, [sp, #0]
 8009336:	1aaa      	subs	r2, r5, r2
 8009338:	4591      	cmp	r9, r2
 800933a:	ddba      	ble.n	80092b2 <_dtoa_r+0xb32>
 800933c:	4659      	mov	r1, fp
 800933e:	2300      	movs	r3, #0
 8009340:	220a      	movs	r2, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f000 faa8 	bl	8009898 <__multadd>
 8009348:	4683      	mov	fp, r0
 800934a:	e7eb      	b.n	8009324 <_dtoa_r+0xba4>
 800934c:	0800ab07 	.word	0x0800ab07
 8009350:	0800aa60 	.word	0x0800aa60
 8009354:	0800aa84 	.word	0x0800aa84

08009358 <__sflush_r>:
 8009358:	898a      	ldrh	r2, [r1, #12]
 800935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	4605      	mov	r5, r0
 8009360:	0710      	lsls	r0, r2, #28
 8009362:	460c      	mov	r4, r1
 8009364:	d458      	bmi.n	8009418 <__sflush_r+0xc0>
 8009366:	684b      	ldr	r3, [r1, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc05      	bgt.n	8009378 <__sflush_r+0x20>
 800936c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	dc02      	bgt.n	8009378 <__sflush_r+0x20>
 8009372:	2000      	movs	r0, #0
 8009374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800937a:	2e00      	cmp	r6, #0
 800937c:	d0f9      	beq.n	8009372 <__sflush_r+0x1a>
 800937e:	2300      	movs	r3, #0
 8009380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009384:	682f      	ldr	r7, [r5, #0]
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	d032      	beq.n	80093f0 <__sflush_r+0x98>
 800938a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	075a      	lsls	r2, r3, #29
 8009390:	d505      	bpl.n	800939e <__sflush_r+0x46>
 8009392:	6863      	ldr	r3, [r4, #4]
 8009394:	1ac0      	subs	r0, r0, r3
 8009396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009398:	b10b      	cbz	r3, 800939e <__sflush_r+0x46>
 800939a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800939c:	1ac0      	subs	r0, r0, r3
 800939e:	2300      	movs	r3, #0
 80093a0:	4602      	mov	r2, r0
 80093a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093a4:	6a21      	ldr	r1, [r4, #32]
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b0      	blx	r6
 80093aa:	1c43      	adds	r3, r0, #1
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	d106      	bne.n	80093be <__sflush_r+0x66>
 80093b0:	6829      	ldr	r1, [r5, #0]
 80093b2:	291d      	cmp	r1, #29
 80093b4:	d82c      	bhi.n	8009410 <__sflush_r+0xb8>
 80093b6:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <__sflush_r+0x108>)
 80093b8:	40ca      	lsrs	r2, r1
 80093ba:	07d6      	lsls	r6, r2, #31
 80093bc:	d528      	bpl.n	8009410 <__sflush_r+0xb8>
 80093be:	2200      	movs	r2, #0
 80093c0:	6062      	str	r2, [r4, #4]
 80093c2:	04d9      	lsls	r1, r3, #19
 80093c4:	6922      	ldr	r2, [r4, #16]
 80093c6:	6022      	str	r2, [r4, #0]
 80093c8:	d504      	bpl.n	80093d4 <__sflush_r+0x7c>
 80093ca:	1c42      	adds	r2, r0, #1
 80093cc:	d101      	bne.n	80093d2 <__sflush_r+0x7a>
 80093ce:	682b      	ldr	r3, [r5, #0]
 80093d0:	b903      	cbnz	r3, 80093d4 <__sflush_r+0x7c>
 80093d2:	6560      	str	r0, [r4, #84]	; 0x54
 80093d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d6:	602f      	str	r7, [r5, #0]
 80093d8:	2900      	cmp	r1, #0
 80093da:	d0ca      	beq.n	8009372 <__sflush_r+0x1a>
 80093dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093e0:	4299      	cmp	r1, r3
 80093e2:	d002      	beq.n	80093ea <__sflush_r+0x92>
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7fe fa91 	bl	800790c <_free_r>
 80093ea:	2000      	movs	r0, #0
 80093ec:	6360      	str	r0, [r4, #52]	; 0x34
 80093ee:	e7c1      	b.n	8009374 <__sflush_r+0x1c>
 80093f0:	6a21      	ldr	r1, [r4, #32]
 80093f2:	2301      	movs	r3, #1
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b0      	blx	r6
 80093f8:	1c41      	adds	r1, r0, #1
 80093fa:	d1c7      	bne.n	800938c <__sflush_r+0x34>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0c4      	beq.n	800938c <__sflush_r+0x34>
 8009402:	2b1d      	cmp	r3, #29
 8009404:	d001      	beq.n	800940a <__sflush_r+0xb2>
 8009406:	2b16      	cmp	r3, #22
 8009408:	d101      	bne.n	800940e <__sflush_r+0xb6>
 800940a:	602f      	str	r7, [r5, #0]
 800940c:	e7b1      	b.n	8009372 <__sflush_r+0x1a>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009414:	81a3      	strh	r3, [r4, #12]
 8009416:	e7ad      	b.n	8009374 <__sflush_r+0x1c>
 8009418:	690f      	ldr	r7, [r1, #16]
 800941a:	2f00      	cmp	r7, #0
 800941c:	d0a9      	beq.n	8009372 <__sflush_r+0x1a>
 800941e:	0793      	lsls	r3, r2, #30
 8009420:	680e      	ldr	r6, [r1, #0]
 8009422:	bf08      	it	eq
 8009424:	694b      	ldreq	r3, [r1, #20]
 8009426:	600f      	str	r7, [r1, #0]
 8009428:	bf18      	it	ne
 800942a:	2300      	movne	r3, #0
 800942c:	eba6 0807 	sub.w	r8, r6, r7
 8009430:	608b      	str	r3, [r1, #8]
 8009432:	f1b8 0f00 	cmp.w	r8, #0
 8009436:	dd9c      	ble.n	8009372 <__sflush_r+0x1a>
 8009438:	6a21      	ldr	r1, [r4, #32]
 800943a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800943c:	4643      	mov	r3, r8
 800943e:	463a      	mov	r2, r7
 8009440:	4628      	mov	r0, r5
 8009442:	47b0      	blx	r6
 8009444:	2800      	cmp	r0, #0
 8009446:	dc06      	bgt.n	8009456 <__sflush_r+0xfe>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	f04f 30ff 	mov.w	r0, #4294967295
 8009454:	e78e      	b.n	8009374 <__sflush_r+0x1c>
 8009456:	4407      	add	r7, r0
 8009458:	eba8 0800 	sub.w	r8, r8, r0
 800945c:	e7e9      	b.n	8009432 <__sflush_r+0xda>
 800945e:	bf00      	nop
 8009460:	20400001 	.word	0x20400001

08009464 <_fflush_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	690b      	ldr	r3, [r1, #16]
 8009468:	4605      	mov	r5, r0
 800946a:	460c      	mov	r4, r1
 800946c:	b913      	cbnz	r3, 8009474 <_fflush_r+0x10>
 800946e:	2500      	movs	r5, #0
 8009470:	4628      	mov	r0, r5
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	b118      	cbz	r0, 800947e <_fflush_r+0x1a>
 8009476:	6983      	ldr	r3, [r0, #24]
 8009478:	b90b      	cbnz	r3, 800947e <_fflush_r+0x1a>
 800947a:	f000 f887 	bl	800958c <__sinit>
 800947e:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <_fflush_r+0x6c>)
 8009480:	429c      	cmp	r4, r3
 8009482:	d11b      	bne.n	80094bc <_fflush_r+0x58>
 8009484:	686c      	ldr	r4, [r5, #4]
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0ef      	beq.n	800946e <_fflush_r+0xa>
 800948e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009490:	07d0      	lsls	r0, r2, #31
 8009492:	d404      	bmi.n	800949e <_fflush_r+0x3a>
 8009494:	0599      	lsls	r1, r3, #22
 8009496:	d402      	bmi.n	800949e <_fflush_r+0x3a>
 8009498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800949a:	f000 f91a 	bl	80096d2 <__retarget_lock_acquire_recursive>
 800949e:	4628      	mov	r0, r5
 80094a0:	4621      	mov	r1, r4
 80094a2:	f7ff ff59 	bl	8009358 <__sflush_r>
 80094a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094a8:	07da      	lsls	r2, r3, #31
 80094aa:	4605      	mov	r5, r0
 80094ac:	d4e0      	bmi.n	8009470 <_fflush_r+0xc>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	059b      	lsls	r3, r3, #22
 80094b2:	d4dd      	bmi.n	8009470 <_fflush_r+0xc>
 80094b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094b6:	f000 f90d 	bl	80096d4 <__retarget_lock_release_recursive>
 80094ba:	e7d9      	b.n	8009470 <_fflush_r+0xc>
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <_fflush_r+0x70>)
 80094be:	429c      	cmp	r4, r3
 80094c0:	d101      	bne.n	80094c6 <_fflush_r+0x62>
 80094c2:	68ac      	ldr	r4, [r5, #8]
 80094c4:	e7df      	b.n	8009486 <_fflush_r+0x22>
 80094c6:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <_fflush_r+0x74>)
 80094c8:	429c      	cmp	r4, r3
 80094ca:	bf08      	it	eq
 80094cc:	68ec      	ldreq	r4, [r5, #12]
 80094ce:	e7da      	b.n	8009486 <_fflush_r+0x22>
 80094d0:	0800ab38 	.word	0x0800ab38
 80094d4:	0800ab58 	.word	0x0800ab58
 80094d8:	0800ab18 	.word	0x0800ab18

080094dc <std>:
 80094dc:	2300      	movs	r3, #0
 80094de:	b510      	push	{r4, lr}
 80094e0:	4604      	mov	r4, r0
 80094e2:	e9c0 3300 	strd	r3, r3, [r0]
 80094e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ea:	6083      	str	r3, [r0, #8]
 80094ec:	8181      	strh	r1, [r0, #12]
 80094ee:	6643      	str	r3, [r0, #100]	; 0x64
 80094f0:	81c2      	strh	r2, [r0, #14]
 80094f2:	6183      	str	r3, [r0, #24]
 80094f4:	4619      	mov	r1, r3
 80094f6:	2208      	movs	r2, #8
 80094f8:	305c      	adds	r0, #92	; 0x5c
 80094fa:	f7fe f9ef 	bl	80078dc <memset>
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <std+0x38>)
 8009500:	6263      	str	r3, [r4, #36]	; 0x24
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <std+0x3c>)
 8009504:	62a3      	str	r3, [r4, #40]	; 0x28
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <std+0x40>)
 8009508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <std+0x44>)
 800950c:	6224      	str	r4, [r4, #32]
 800950e:	6323      	str	r3, [r4, #48]	; 0x30
 8009510:	bd10      	pop	{r4, pc}
 8009512:	bf00      	nop
 8009514:	0800a489 	.word	0x0800a489
 8009518:	0800a4ab 	.word	0x0800a4ab
 800951c:	0800a4e3 	.word	0x0800a4e3
 8009520:	0800a507 	.word	0x0800a507

08009524 <_cleanup_r>:
 8009524:	4901      	ldr	r1, [pc, #4]	; (800952c <_cleanup_r+0x8>)
 8009526:	f000 b8af 	b.w	8009688 <_fwalk_reent>
 800952a:	bf00      	nop
 800952c:	08009465 	.word	0x08009465

08009530 <__sfmoreglue>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	1e4a      	subs	r2, r1, #1
 8009534:	2568      	movs	r5, #104	; 0x68
 8009536:	4355      	muls	r5, r2
 8009538:	460e      	mov	r6, r1
 800953a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800953e:	f7fe fa35 	bl	80079ac <_malloc_r>
 8009542:	4604      	mov	r4, r0
 8009544:	b140      	cbz	r0, 8009558 <__sfmoreglue+0x28>
 8009546:	2100      	movs	r1, #0
 8009548:	e9c0 1600 	strd	r1, r6, [r0]
 800954c:	300c      	adds	r0, #12
 800954e:	60a0      	str	r0, [r4, #8]
 8009550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009554:	f7fe f9c2 	bl	80078dc <memset>
 8009558:	4620      	mov	r0, r4
 800955a:	bd70      	pop	{r4, r5, r6, pc}

0800955c <__sfp_lock_acquire>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__sfp_lock_acquire+0x8>)
 800955e:	f000 b8b8 	b.w	80096d2 <__retarget_lock_acquire_recursive>
 8009562:	bf00      	nop
 8009564:	2000073c 	.word	0x2000073c

08009568 <__sfp_lock_release>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__sfp_lock_release+0x8>)
 800956a:	f000 b8b3 	b.w	80096d4 <__retarget_lock_release_recursive>
 800956e:	bf00      	nop
 8009570:	2000073c 	.word	0x2000073c

08009574 <__sinit_lock_acquire>:
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <__sinit_lock_acquire+0x8>)
 8009576:	f000 b8ac 	b.w	80096d2 <__retarget_lock_acquire_recursive>
 800957a:	bf00      	nop
 800957c:	20000737 	.word	0x20000737

08009580 <__sinit_lock_release>:
 8009580:	4801      	ldr	r0, [pc, #4]	; (8009588 <__sinit_lock_release+0x8>)
 8009582:	f000 b8a7 	b.w	80096d4 <__retarget_lock_release_recursive>
 8009586:	bf00      	nop
 8009588:	20000737 	.word	0x20000737

0800958c <__sinit>:
 800958c:	b510      	push	{r4, lr}
 800958e:	4604      	mov	r4, r0
 8009590:	f7ff fff0 	bl	8009574 <__sinit_lock_acquire>
 8009594:	69a3      	ldr	r3, [r4, #24]
 8009596:	b11b      	cbz	r3, 80095a0 <__sinit+0x14>
 8009598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800959c:	f7ff bff0 	b.w	8009580 <__sinit_lock_release>
 80095a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095a4:	6523      	str	r3, [r4, #80]	; 0x50
 80095a6:	4b13      	ldr	r3, [pc, #76]	; (80095f4 <__sinit+0x68>)
 80095a8:	4a13      	ldr	r2, [pc, #76]	; (80095f8 <__sinit+0x6c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	bf04      	itt	eq
 80095b2:	2301      	moveq	r3, #1
 80095b4:	61a3      	streq	r3, [r4, #24]
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 f820 	bl	80095fc <__sfp>
 80095bc:	6060      	str	r0, [r4, #4]
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 f81c 	bl	80095fc <__sfp>
 80095c4:	60a0      	str	r0, [r4, #8]
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 f818 	bl	80095fc <__sfp>
 80095cc:	2200      	movs	r2, #0
 80095ce:	60e0      	str	r0, [r4, #12]
 80095d0:	2104      	movs	r1, #4
 80095d2:	6860      	ldr	r0, [r4, #4]
 80095d4:	f7ff ff82 	bl	80094dc <std>
 80095d8:	68a0      	ldr	r0, [r4, #8]
 80095da:	2201      	movs	r2, #1
 80095dc:	2109      	movs	r1, #9
 80095de:	f7ff ff7d 	bl	80094dc <std>
 80095e2:	68e0      	ldr	r0, [r4, #12]
 80095e4:	2202      	movs	r2, #2
 80095e6:	2112      	movs	r1, #18
 80095e8:	f7ff ff78 	bl	80094dc <std>
 80095ec:	2301      	movs	r3, #1
 80095ee:	61a3      	str	r3, [r4, #24]
 80095f0:	e7d2      	b.n	8009598 <__sinit+0xc>
 80095f2:	bf00      	nop
 80095f4:	0800aa4c 	.word	0x0800aa4c
 80095f8:	08009525 	.word	0x08009525

080095fc <__sfp>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	4607      	mov	r7, r0
 8009600:	f7ff ffac 	bl	800955c <__sfp_lock_acquire>
 8009604:	4b1e      	ldr	r3, [pc, #120]	; (8009680 <__sfp+0x84>)
 8009606:	681e      	ldr	r6, [r3, #0]
 8009608:	69b3      	ldr	r3, [r6, #24]
 800960a:	b913      	cbnz	r3, 8009612 <__sfp+0x16>
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff ffbd 	bl	800958c <__sinit>
 8009612:	3648      	adds	r6, #72	; 0x48
 8009614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009618:	3b01      	subs	r3, #1
 800961a:	d503      	bpl.n	8009624 <__sfp+0x28>
 800961c:	6833      	ldr	r3, [r6, #0]
 800961e:	b30b      	cbz	r3, 8009664 <__sfp+0x68>
 8009620:	6836      	ldr	r6, [r6, #0]
 8009622:	e7f7      	b.n	8009614 <__sfp+0x18>
 8009624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009628:	b9d5      	cbnz	r5, 8009660 <__sfp+0x64>
 800962a:	4b16      	ldr	r3, [pc, #88]	; (8009684 <__sfp+0x88>)
 800962c:	60e3      	str	r3, [r4, #12]
 800962e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009632:	6665      	str	r5, [r4, #100]	; 0x64
 8009634:	f000 f84c 	bl	80096d0 <__retarget_lock_init_recursive>
 8009638:	f7ff ff96 	bl	8009568 <__sfp_lock_release>
 800963c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009640:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009644:	6025      	str	r5, [r4, #0]
 8009646:	61a5      	str	r5, [r4, #24]
 8009648:	2208      	movs	r2, #8
 800964a:	4629      	mov	r1, r5
 800964c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009650:	f7fe f944 	bl	80078dc <memset>
 8009654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800965c:	4620      	mov	r0, r4
 800965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009660:	3468      	adds	r4, #104	; 0x68
 8009662:	e7d9      	b.n	8009618 <__sfp+0x1c>
 8009664:	2104      	movs	r1, #4
 8009666:	4638      	mov	r0, r7
 8009668:	f7ff ff62 	bl	8009530 <__sfmoreglue>
 800966c:	4604      	mov	r4, r0
 800966e:	6030      	str	r0, [r6, #0]
 8009670:	2800      	cmp	r0, #0
 8009672:	d1d5      	bne.n	8009620 <__sfp+0x24>
 8009674:	f7ff ff78 	bl	8009568 <__sfp_lock_release>
 8009678:	230c      	movs	r3, #12
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	e7ee      	b.n	800965c <__sfp+0x60>
 800967e:	bf00      	nop
 8009680:	0800aa4c 	.word	0x0800aa4c
 8009684:	ffff0001 	.word	0xffff0001

08009688 <_fwalk_reent>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	4606      	mov	r6, r0
 800968e:	4688      	mov	r8, r1
 8009690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009694:	2700      	movs	r7, #0
 8009696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800969a:	f1b9 0901 	subs.w	r9, r9, #1
 800969e:	d505      	bpl.n	80096ac <_fwalk_reent+0x24>
 80096a0:	6824      	ldr	r4, [r4, #0]
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	d1f7      	bne.n	8009696 <_fwalk_reent+0xe>
 80096a6:	4638      	mov	r0, r7
 80096a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ac:	89ab      	ldrh	r3, [r5, #12]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d907      	bls.n	80096c2 <_fwalk_reent+0x3a>
 80096b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096b6:	3301      	adds	r3, #1
 80096b8:	d003      	beq.n	80096c2 <_fwalk_reent+0x3a>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	47c0      	blx	r8
 80096c0:	4307      	orrs	r7, r0
 80096c2:	3568      	adds	r5, #104	; 0x68
 80096c4:	e7e9      	b.n	800969a <_fwalk_reent+0x12>
	...

080096c8 <_localeconv_r>:
 80096c8:	4800      	ldr	r0, [pc, #0]	; (80096cc <_localeconv_r+0x4>)
 80096ca:	4770      	bx	lr
 80096cc:	2000044c 	.word	0x2000044c

080096d0 <__retarget_lock_init_recursive>:
 80096d0:	4770      	bx	lr

080096d2 <__retarget_lock_acquire_recursive>:
 80096d2:	4770      	bx	lr

080096d4 <__retarget_lock_release_recursive>:
 80096d4:	4770      	bx	lr

080096d6 <__swhatbuf_r>:
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	460e      	mov	r6, r1
 80096da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096de:	2900      	cmp	r1, #0
 80096e0:	b096      	sub	sp, #88	; 0x58
 80096e2:	4614      	mov	r4, r2
 80096e4:	461d      	mov	r5, r3
 80096e6:	da07      	bge.n	80096f8 <__swhatbuf_r+0x22>
 80096e8:	2300      	movs	r3, #0
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	89b3      	ldrh	r3, [r6, #12]
 80096ee:	061a      	lsls	r2, r3, #24
 80096f0:	d410      	bmi.n	8009714 <__swhatbuf_r+0x3e>
 80096f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096f6:	e00e      	b.n	8009716 <__swhatbuf_r+0x40>
 80096f8:	466a      	mov	r2, sp
 80096fa:	f000 ff5b 	bl	800a5b4 <_fstat_r>
 80096fe:	2800      	cmp	r0, #0
 8009700:	dbf2      	blt.n	80096e8 <__swhatbuf_r+0x12>
 8009702:	9a01      	ldr	r2, [sp, #4]
 8009704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800970c:	425a      	negs	r2, r3
 800970e:	415a      	adcs	r2, r3
 8009710:	602a      	str	r2, [r5, #0]
 8009712:	e7ee      	b.n	80096f2 <__swhatbuf_r+0x1c>
 8009714:	2340      	movs	r3, #64	; 0x40
 8009716:	2000      	movs	r0, #0
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	b016      	add	sp, #88	; 0x58
 800971c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009720 <__smakebuf_r>:
 8009720:	898b      	ldrh	r3, [r1, #12]
 8009722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009724:	079d      	lsls	r5, r3, #30
 8009726:	4606      	mov	r6, r0
 8009728:	460c      	mov	r4, r1
 800972a:	d507      	bpl.n	800973c <__smakebuf_r+0x1c>
 800972c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	2301      	movs	r3, #1
 8009736:	6163      	str	r3, [r4, #20]
 8009738:	b002      	add	sp, #8
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	ab01      	add	r3, sp, #4
 800973e:	466a      	mov	r2, sp
 8009740:	f7ff ffc9 	bl	80096d6 <__swhatbuf_r>
 8009744:	9900      	ldr	r1, [sp, #0]
 8009746:	4605      	mov	r5, r0
 8009748:	4630      	mov	r0, r6
 800974a:	f7fe f92f 	bl	80079ac <_malloc_r>
 800974e:	b948      	cbnz	r0, 8009764 <__smakebuf_r+0x44>
 8009750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009754:	059a      	lsls	r2, r3, #22
 8009756:	d4ef      	bmi.n	8009738 <__smakebuf_r+0x18>
 8009758:	f023 0303 	bic.w	r3, r3, #3
 800975c:	f043 0302 	orr.w	r3, r3, #2
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	e7e3      	b.n	800972c <__smakebuf_r+0xc>
 8009764:	4b0d      	ldr	r3, [pc, #52]	; (800979c <__smakebuf_r+0x7c>)
 8009766:	62b3      	str	r3, [r6, #40]	; 0x28
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	6020      	str	r0, [r4, #0]
 800976c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	9b00      	ldr	r3, [sp, #0]
 8009774:	6163      	str	r3, [r4, #20]
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	6120      	str	r0, [r4, #16]
 800977a:	b15b      	cbz	r3, 8009794 <__smakebuf_r+0x74>
 800977c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009780:	4630      	mov	r0, r6
 8009782:	f000 ff29 	bl	800a5d8 <_isatty_r>
 8009786:	b128      	cbz	r0, 8009794 <__smakebuf_r+0x74>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	f023 0303 	bic.w	r3, r3, #3
 800978e:	f043 0301 	orr.w	r3, r3, #1
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	89a0      	ldrh	r0, [r4, #12]
 8009796:	4305      	orrs	r5, r0
 8009798:	81a5      	strh	r5, [r4, #12]
 800979a:	e7cd      	b.n	8009738 <__smakebuf_r+0x18>
 800979c:	08009525 	.word	0x08009525

080097a0 <memcpy>:
 80097a0:	440a      	add	r2, r1
 80097a2:	4291      	cmp	r1, r2
 80097a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a8:	d100      	bne.n	80097ac <memcpy+0xc>
 80097aa:	4770      	bx	lr
 80097ac:	b510      	push	{r4, lr}
 80097ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b6:	4291      	cmp	r1, r2
 80097b8:	d1f9      	bne.n	80097ae <memcpy+0xe>
 80097ba:	bd10      	pop	{r4, pc}

080097bc <__malloc_lock>:
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <__malloc_lock+0x8>)
 80097be:	f7ff bf88 	b.w	80096d2 <__retarget_lock_acquire_recursive>
 80097c2:	bf00      	nop
 80097c4:	20000738 	.word	0x20000738

080097c8 <__malloc_unlock>:
 80097c8:	4801      	ldr	r0, [pc, #4]	; (80097d0 <__malloc_unlock+0x8>)
 80097ca:	f7ff bf83 	b.w	80096d4 <__retarget_lock_release_recursive>
 80097ce:	bf00      	nop
 80097d0:	20000738 	.word	0x20000738

080097d4 <_Balloc>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	b976      	cbnz	r6, 80097fc <_Balloc+0x28>
 80097de:	2010      	movs	r0, #16
 80097e0:	f7fe f874 	bl	80078cc <malloc>
 80097e4:	4602      	mov	r2, r0
 80097e6:	6260      	str	r0, [r4, #36]	; 0x24
 80097e8:	b920      	cbnz	r0, 80097f4 <_Balloc+0x20>
 80097ea:	4b18      	ldr	r3, [pc, #96]	; (800984c <_Balloc+0x78>)
 80097ec:	4818      	ldr	r0, [pc, #96]	; (8009850 <_Balloc+0x7c>)
 80097ee:	2166      	movs	r1, #102	; 0x66
 80097f0:	f000 fea0 	bl	800a534 <__assert_func>
 80097f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f8:	6006      	str	r6, [r0, #0]
 80097fa:	60c6      	str	r6, [r0, #12]
 80097fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097fe:	68f3      	ldr	r3, [r6, #12]
 8009800:	b183      	cbz	r3, 8009824 <_Balloc+0x50>
 8009802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800980a:	b9b8      	cbnz	r0, 800983c <_Balloc+0x68>
 800980c:	2101      	movs	r1, #1
 800980e:	fa01 f605 	lsl.w	r6, r1, r5
 8009812:	1d72      	adds	r2, r6, #5
 8009814:	0092      	lsls	r2, r2, #2
 8009816:	4620      	mov	r0, r4
 8009818:	f7fe f868 	bl	80078ec <_calloc_r>
 800981c:	b160      	cbz	r0, 8009838 <_Balloc+0x64>
 800981e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009822:	e00e      	b.n	8009842 <_Balloc+0x6e>
 8009824:	2221      	movs	r2, #33	; 0x21
 8009826:	2104      	movs	r1, #4
 8009828:	4620      	mov	r0, r4
 800982a:	f7fe f85f 	bl	80078ec <_calloc_r>
 800982e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009830:	60f0      	str	r0, [r6, #12]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e4      	bne.n	8009802 <_Balloc+0x2e>
 8009838:	2000      	movs	r0, #0
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	6802      	ldr	r2, [r0, #0]
 800983e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009842:	2300      	movs	r3, #0
 8009844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009848:	e7f7      	b.n	800983a <_Balloc+0x66>
 800984a:	bf00      	nop
 800984c:	0800aa91 	.word	0x0800aa91
 8009850:	0800ab78 	.word	0x0800ab78

08009854 <_Bfree>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009858:	4605      	mov	r5, r0
 800985a:	460c      	mov	r4, r1
 800985c:	b976      	cbnz	r6, 800987c <_Bfree+0x28>
 800985e:	2010      	movs	r0, #16
 8009860:	f7fe f834 	bl	80078cc <malloc>
 8009864:	4602      	mov	r2, r0
 8009866:	6268      	str	r0, [r5, #36]	; 0x24
 8009868:	b920      	cbnz	r0, 8009874 <_Bfree+0x20>
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <_Bfree+0x3c>)
 800986c:	4809      	ldr	r0, [pc, #36]	; (8009894 <_Bfree+0x40>)
 800986e:	218a      	movs	r1, #138	; 0x8a
 8009870:	f000 fe60 	bl	800a534 <__assert_func>
 8009874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009878:	6006      	str	r6, [r0, #0]
 800987a:	60c6      	str	r6, [r0, #12]
 800987c:	b13c      	cbz	r4, 800988e <_Bfree+0x3a>
 800987e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009880:	6862      	ldr	r2, [r4, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009888:	6021      	str	r1, [r4, #0]
 800988a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	0800aa91 	.word	0x0800aa91
 8009894:	0800ab78 	.word	0x0800ab78

08009898 <__multadd>:
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	690e      	ldr	r6, [r1, #16]
 800989e:	4607      	mov	r7, r0
 80098a0:	4698      	mov	r8, r3
 80098a2:	460c      	mov	r4, r1
 80098a4:	f101 0014 	add.w	r0, r1, #20
 80098a8:	2300      	movs	r3, #0
 80098aa:	6805      	ldr	r5, [r0, #0]
 80098ac:	b2a9      	uxth	r1, r5
 80098ae:	fb02 8101 	mla	r1, r2, r1, r8
 80098b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80098b6:	0c2d      	lsrs	r5, r5, #16
 80098b8:	fb02 c505 	mla	r5, r2, r5, ip
 80098bc:	b289      	uxth	r1, r1
 80098be:	3301      	adds	r3, #1
 80098c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80098c4:	429e      	cmp	r6, r3
 80098c6:	f840 1b04 	str.w	r1, [r0], #4
 80098ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80098ce:	dcec      	bgt.n	80098aa <__multadd+0x12>
 80098d0:	f1b8 0f00 	cmp.w	r8, #0
 80098d4:	d022      	beq.n	800991c <__multadd+0x84>
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	42b3      	cmp	r3, r6
 80098da:	dc19      	bgt.n	8009910 <__multadd+0x78>
 80098dc:	6861      	ldr	r1, [r4, #4]
 80098de:	4638      	mov	r0, r7
 80098e0:	3101      	adds	r1, #1
 80098e2:	f7ff ff77 	bl	80097d4 <_Balloc>
 80098e6:	4605      	mov	r5, r0
 80098e8:	b928      	cbnz	r0, 80098f6 <__multadd+0x5e>
 80098ea:	4602      	mov	r2, r0
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <__multadd+0x8c>)
 80098ee:	480e      	ldr	r0, [pc, #56]	; (8009928 <__multadd+0x90>)
 80098f0:	21b5      	movs	r1, #181	; 0xb5
 80098f2:	f000 fe1f 	bl	800a534 <__assert_func>
 80098f6:	6922      	ldr	r2, [r4, #16]
 80098f8:	3202      	adds	r2, #2
 80098fa:	f104 010c 	add.w	r1, r4, #12
 80098fe:	0092      	lsls	r2, r2, #2
 8009900:	300c      	adds	r0, #12
 8009902:	f7ff ff4d 	bl	80097a0 <memcpy>
 8009906:	4621      	mov	r1, r4
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff ffa3 	bl	8009854 <_Bfree>
 800990e:	462c      	mov	r4, r5
 8009910:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009914:	3601      	adds	r6, #1
 8009916:	f8c3 8014 	str.w	r8, [r3, #20]
 800991a:	6126      	str	r6, [r4, #16]
 800991c:	4620      	mov	r0, r4
 800991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009922:	bf00      	nop
 8009924:	0800ab07 	.word	0x0800ab07
 8009928:	0800ab78 	.word	0x0800ab78

0800992c <__hi0bits>:
 800992c:	0c03      	lsrs	r3, r0, #16
 800992e:	041b      	lsls	r3, r3, #16
 8009930:	b9d3      	cbnz	r3, 8009968 <__hi0bits+0x3c>
 8009932:	0400      	lsls	r0, r0, #16
 8009934:	2310      	movs	r3, #16
 8009936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800993a:	bf04      	itt	eq
 800993c:	0200      	lsleq	r0, r0, #8
 800993e:	3308      	addeq	r3, #8
 8009940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009944:	bf04      	itt	eq
 8009946:	0100      	lsleq	r0, r0, #4
 8009948:	3304      	addeq	r3, #4
 800994a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800994e:	bf04      	itt	eq
 8009950:	0080      	lsleq	r0, r0, #2
 8009952:	3302      	addeq	r3, #2
 8009954:	2800      	cmp	r0, #0
 8009956:	db05      	blt.n	8009964 <__hi0bits+0x38>
 8009958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800995c:	f103 0301 	add.w	r3, r3, #1
 8009960:	bf08      	it	eq
 8009962:	2320      	moveq	r3, #32
 8009964:	4618      	mov	r0, r3
 8009966:	4770      	bx	lr
 8009968:	2300      	movs	r3, #0
 800996a:	e7e4      	b.n	8009936 <__hi0bits+0xa>

0800996c <__lo0bits>:
 800996c:	6803      	ldr	r3, [r0, #0]
 800996e:	f013 0207 	ands.w	r2, r3, #7
 8009972:	4601      	mov	r1, r0
 8009974:	d00b      	beq.n	800998e <__lo0bits+0x22>
 8009976:	07da      	lsls	r2, r3, #31
 8009978:	d424      	bmi.n	80099c4 <__lo0bits+0x58>
 800997a:	0798      	lsls	r0, r3, #30
 800997c:	bf49      	itett	mi
 800997e:	085b      	lsrmi	r3, r3, #1
 8009980:	089b      	lsrpl	r3, r3, #2
 8009982:	2001      	movmi	r0, #1
 8009984:	600b      	strmi	r3, [r1, #0]
 8009986:	bf5c      	itt	pl
 8009988:	600b      	strpl	r3, [r1, #0]
 800998a:	2002      	movpl	r0, #2
 800998c:	4770      	bx	lr
 800998e:	b298      	uxth	r0, r3
 8009990:	b9b0      	cbnz	r0, 80099c0 <__lo0bits+0x54>
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	2010      	movs	r0, #16
 8009996:	f013 0fff 	tst.w	r3, #255	; 0xff
 800999a:	bf04      	itt	eq
 800999c:	0a1b      	lsreq	r3, r3, #8
 800999e:	3008      	addeq	r0, #8
 80099a0:	071a      	lsls	r2, r3, #28
 80099a2:	bf04      	itt	eq
 80099a4:	091b      	lsreq	r3, r3, #4
 80099a6:	3004      	addeq	r0, #4
 80099a8:	079a      	lsls	r2, r3, #30
 80099aa:	bf04      	itt	eq
 80099ac:	089b      	lsreq	r3, r3, #2
 80099ae:	3002      	addeq	r0, #2
 80099b0:	07da      	lsls	r2, r3, #31
 80099b2:	d403      	bmi.n	80099bc <__lo0bits+0x50>
 80099b4:	085b      	lsrs	r3, r3, #1
 80099b6:	f100 0001 	add.w	r0, r0, #1
 80099ba:	d005      	beq.n	80099c8 <__lo0bits+0x5c>
 80099bc:	600b      	str	r3, [r1, #0]
 80099be:	4770      	bx	lr
 80099c0:	4610      	mov	r0, r2
 80099c2:	e7e8      	b.n	8009996 <__lo0bits+0x2a>
 80099c4:	2000      	movs	r0, #0
 80099c6:	4770      	bx	lr
 80099c8:	2020      	movs	r0, #32
 80099ca:	4770      	bx	lr

080099cc <__i2b>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	460c      	mov	r4, r1
 80099d0:	2101      	movs	r1, #1
 80099d2:	f7ff feff 	bl	80097d4 <_Balloc>
 80099d6:	4602      	mov	r2, r0
 80099d8:	b928      	cbnz	r0, 80099e6 <__i2b+0x1a>
 80099da:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <__i2b+0x24>)
 80099dc:	4805      	ldr	r0, [pc, #20]	; (80099f4 <__i2b+0x28>)
 80099de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099e2:	f000 fda7 	bl	800a534 <__assert_func>
 80099e6:	2301      	movs	r3, #1
 80099e8:	6144      	str	r4, [r0, #20]
 80099ea:	6103      	str	r3, [r0, #16]
 80099ec:	bd10      	pop	{r4, pc}
 80099ee:	bf00      	nop
 80099f0:	0800ab07 	.word	0x0800ab07
 80099f4:	0800ab78 	.word	0x0800ab78

080099f8 <__multiply>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	4614      	mov	r4, r2
 80099fe:	690a      	ldr	r2, [r1, #16]
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	bfb8      	it	lt
 8009a06:	460b      	movlt	r3, r1
 8009a08:	460d      	mov	r5, r1
 8009a0a:	bfbc      	itt	lt
 8009a0c:	4625      	movlt	r5, r4
 8009a0e:	461c      	movlt	r4, r3
 8009a10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a18:	68ab      	ldr	r3, [r5, #8]
 8009a1a:	6869      	ldr	r1, [r5, #4]
 8009a1c:	eb0a 0709 	add.w	r7, sl, r9
 8009a20:	42bb      	cmp	r3, r7
 8009a22:	b085      	sub	sp, #20
 8009a24:	bfb8      	it	lt
 8009a26:	3101      	addlt	r1, #1
 8009a28:	f7ff fed4 	bl	80097d4 <_Balloc>
 8009a2c:	b930      	cbnz	r0, 8009a3c <__multiply+0x44>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4b42      	ldr	r3, [pc, #264]	; (8009b3c <__multiply+0x144>)
 8009a32:	4843      	ldr	r0, [pc, #268]	; (8009b40 <__multiply+0x148>)
 8009a34:	f240 115d 	movw	r1, #349	; 0x15d
 8009a38:	f000 fd7c 	bl	800a534 <__assert_func>
 8009a3c:	f100 0614 	add.w	r6, r0, #20
 8009a40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a44:	4633      	mov	r3, r6
 8009a46:	2200      	movs	r2, #0
 8009a48:	4543      	cmp	r3, r8
 8009a4a:	d31e      	bcc.n	8009a8a <__multiply+0x92>
 8009a4c:	f105 0c14 	add.w	ip, r5, #20
 8009a50:	f104 0314 	add.w	r3, r4, #20
 8009a54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a5c:	9202      	str	r2, [sp, #8]
 8009a5e:	ebac 0205 	sub.w	r2, ip, r5
 8009a62:	3a15      	subs	r2, #21
 8009a64:	f022 0203 	bic.w	r2, r2, #3
 8009a68:	3204      	adds	r2, #4
 8009a6a:	f105 0115 	add.w	r1, r5, #21
 8009a6e:	458c      	cmp	ip, r1
 8009a70:	bf38      	it	cc
 8009a72:	2204      	movcc	r2, #4
 8009a74:	9201      	str	r2, [sp, #4]
 8009a76:	9a02      	ldr	r2, [sp, #8]
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d808      	bhi.n	8009a90 <__multiply+0x98>
 8009a7e:	2f00      	cmp	r7, #0
 8009a80:	dc55      	bgt.n	8009b2e <__multiply+0x136>
 8009a82:	6107      	str	r7, [r0, #16]
 8009a84:	b005      	add	sp, #20
 8009a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8a:	f843 2b04 	str.w	r2, [r3], #4
 8009a8e:	e7db      	b.n	8009a48 <__multiply+0x50>
 8009a90:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a94:	f1ba 0f00 	cmp.w	sl, #0
 8009a98:	d020      	beq.n	8009adc <__multiply+0xe4>
 8009a9a:	f105 0e14 	add.w	lr, r5, #20
 8009a9e:	46b1      	mov	r9, r6
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009aa6:	f8d9 b000 	ldr.w	fp, [r9]
 8009aaa:	b2a1      	uxth	r1, r4
 8009aac:	fa1f fb8b 	uxth.w	fp, fp
 8009ab0:	fb0a b101 	mla	r1, sl, r1, fp
 8009ab4:	4411      	add	r1, r2
 8009ab6:	f8d9 2000 	ldr.w	r2, [r9]
 8009aba:	0c24      	lsrs	r4, r4, #16
 8009abc:	0c12      	lsrs	r2, r2, #16
 8009abe:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ac2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ac6:	b289      	uxth	r1, r1
 8009ac8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009acc:	45f4      	cmp	ip, lr
 8009ace:	f849 1b04 	str.w	r1, [r9], #4
 8009ad2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ad6:	d8e4      	bhi.n	8009aa2 <__multiply+0xaa>
 8009ad8:	9901      	ldr	r1, [sp, #4]
 8009ada:	5072      	str	r2, [r6, r1]
 8009adc:	9a03      	ldr	r2, [sp, #12]
 8009ade:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	f1b9 0f00 	cmp.w	r9, #0
 8009ae8:	d01f      	beq.n	8009b2a <__multiply+0x132>
 8009aea:	6834      	ldr	r4, [r6, #0]
 8009aec:	f105 0114 	add.w	r1, r5, #20
 8009af0:	46b6      	mov	lr, r6
 8009af2:	f04f 0a00 	mov.w	sl, #0
 8009af6:	880a      	ldrh	r2, [r1, #0]
 8009af8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009afc:	fb09 b202 	mla	r2, r9, r2, fp
 8009b00:	4492      	add	sl, r2
 8009b02:	b2a4      	uxth	r4, r4
 8009b04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b08:	f84e 4b04 	str.w	r4, [lr], #4
 8009b0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b10:	f8be 2000 	ldrh.w	r2, [lr]
 8009b14:	0c24      	lsrs	r4, r4, #16
 8009b16:	fb09 2404 	mla	r4, r9, r4, r2
 8009b1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b1e:	458c      	cmp	ip, r1
 8009b20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b24:	d8e7      	bhi.n	8009af6 <__multiply+0xfe>
 8009b26:	9a01      	ldr	r2, [sp, #4]
 8009b28:	50b4      	str	r4, [r6, r2]
 8009b2a:	3604      	adds	r6, #4
 8009b2c:	e7a3      	b.n	8009a76 <__multiply+0x7e>
 8009b2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1a5      	bne.n	8009a82 <__multiply+0x8a>
 8009b36:	3f01      	subs	r7, #1
 8009b38:	e7a1      	b.n	8009a7e <__multiply+0x86>
 8009b3a:	bf00      	nop
 8009b3c:	0800ab07 	.word	0x0800ab07
 8009b40:	0800ab78 	.word	0x0800ab78

08009b44 <__pow5mult>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	4615      	mov	r5, r2
 8009b4a:	f012 0203 	ands.w	r2, r2, #3
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460f      	mov	r7, r1
 8009b52:	d007      	beq.n	8009b64 <__pow5mult+0x20>
 8009b54:	4c25      	ldr	r4, [pc, #148]	; (8009bec <__pow5mult+0xa8>)
 8009b56:	3a01      	subs	r2, #1
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b5e:	f7ff fe9b 	bl	8009898 <__multadd>
 8009b62:	4607      	mov	r7, r0
 8009b64:	10ad      	asrs	r5, r5, #2
 8009b66:	d03d      	beq.n	8009be4 <__pow5mult+0xa0>
 8009b68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b6a:	b97c      	cbnz	r4, 8009b8c <__pow5mult+0x48>
 8009b6c:	2010      	movs	r0, #16
 8009b6e:	f7fd fead 	bl	80078cc <malloc>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6270      	str	r0, [r6, #36]	; 0x24
 8009b76:	b928      	cbnz	r0, 8009b84 <__pow5mult+0x40>
 8009b78:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <__pow5mult+0xac>)
 8009b7a:	481e      	ldr	r0, [pc, #120]	; (8009bf4 <__pow5mult+0xb0>)
 8009b7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b80:	f000 fcd8 	bl	800a534 <__assert_func>
 8009b84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b88:	6004      	str	r4, [r0, #0]
 8009b8a:	60c4      	str	r4, [r0, #12]
 8009b8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b94:	b94c      	cbnz	r4, 8009baa <__pow5mult+0x66>
 8009b96:	f240 2171 	movw	r1, #625	; 0x271
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ff16 	bl	80099cc <__i2b>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	6003      	str	r3, [r0, #0]
 8009baa:	f04f 0900 	mov.w	r9, #0
 8009bae:	07eb      	lsls	r3, r5, #31
 8009bb0:	d50a      	bpl.n	8009bc8 <__pow5mult+0x84>
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f7ff ff1e 	bl	80099f8 <__multiply>
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff fe47 	bl	8009854 <_Bfree>
 8009bc6:	4647      	mov	r7, r8
 8009bc8:	106d      	asrs	r5, r5, #1
 8009bca:	d00b      	beq.n	8009be4 <__pow5mult+0xa0>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	b938      	cbnz	r0, 8009be0 <__pow5mult+0x9c>
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f7ff ff0f 	bl	80099f8 <__multiply>
 8009bda:	6020      	str	r0, [r4, #0]
 8009bdc:	f8c0 9000 	str.w	r9, [r0]
 8009be0:	4604      	mov	r4, r0
 8009be2:	e7e4      	b.n	8009bae <__pow5mult+0x6a>
 8009be4:	4638      	mov	r0, r7
 8009be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bea:	bf00      	nop
 8009bec:	0800acc8 	.word	0x0800acc8
 8009bf0:	0800aa91 	.word	0x0800aa91
 8009bf4:	0800ab78 	.word	0x0800ab78

08009bf8 <__lshift>:
 8009bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	6849      	ldr	r1, [r1, #4]
 8009c00:	6923      	ldr	r3, [r4, #16]
 8009c02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	4607      	mov	r7, r0
 8009c0a:	4691      	mov	r9, r2
 8009c0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c10:	f108 0601 	add.w	r6, r8, #1
 8009c14:	42b3      	cmp	r3, r6
 8009c16:	db0b      	blt.n	8009c30 <__lshift+0x38>
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff fddb 	bl	80097d4 <_Balloc>
 8009c1e:	4605      	mov	r5, r0
 8009c20:	b948      	cbnz	r0, 8009c36 <__lshift+0x3e>
 8009c22:	4602      	mov	r2, r0
 8009c24:	4b28      	ldr	r3, [pc, #160]	; (8009cc8 <__lshift+0xd0>)
 8009c26:	4829      	ldr	r0, [pc, #164]	; (8009ccc <__lshift+0xd4>)
 8009c28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c2c:	f000 fc82 	bl	800a534 <__assert_func>
 8009c30:	3101      	adds	r1, #1
 8009c32:	005b      	lsls	r3, r3, #1
 8009c34:	e7ee      	b.n	8009c14 <__lshift+0x1c>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f100 0114 	add.w	r1, r0, #20
 8009c3c:	f100 0210 	add.w	r2, r0, #16
 8009c40:	4618      	mov	r0, r3
 8009c42:	4553      	cmp	r3, sl
 8009c44:	db33      	blt.n	8009cae <__lshift+0xb6>
 8009c46:	6920      	ldr	r0, [r4, #16]
 8009c48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c4c:	f104 0314 	add.w	r3, r4, #20
 8009c50:	f019 091f 	ands.w	r9, r9, #31
 8009c54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c5c:	d02b      	beq.n	8009cb6 <__lshift+0xbe>
 8009c5e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c62:	468a      	mov	sl, r1
 8009c64:	2200      	movs	r2, #0
 8009c66:	6818      	ldr	r0, [r3, #0]
 8009c68:	fa00 f009 	lsl.w	r0, r0, r9
 8009c6c:	4302      	orrs	r2, r0
 8009c6e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c76:	459c      	cmp	ip, r3
 8009c78:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c7c:	d8f3      	bhi.n	8009c66 <__lshift+0x6e>
 8009c7e:	ebac 0304 	sub.w	r3, ip, r4
 8009c82:	3b15      	subs	r3, #21
 8009c84:	f023 0303 	bic.w	r3, r3, #3
 8009c88:	3304      	adds	r3, #4
 8009c8a:	f104 0015 	add.w	r0, r4, #21
 8009c8e:	4584      	cmp	ip, r0
 8009c90:	bf38      	it	cc
 8009c92:	2304      	movcc	r3, #4
 8009c94:	50ca      	str	r2, [r1, r3]
 8009c96:	b10a      	cbz	r2, 8009c9c <__lshift+0xa4>
 8009c98:	f108 0602 	add.w	r6, r8, #2
 8009c9c:	3e01      	subs	r6, #1
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	612e      	str	r6, [r5, #16]
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	f7ff fdd6 	bl	8009854 <_Bfree>
 8009ca8:	4628      	mov	r0, r5
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	e7c5      	b.n	8009c42 <__lshift+0x4a>
 8009cb6:	3904      	subs	r1, #4
 8009cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cc0:	459c      	cmp	ip, r3
 8009cc2:	d8f9      	bhi.n	8009cb8 <__lshift+0xc0>
 8009cc4:	e7ea      	b.n	8009c9c <__lshift+0xa4>
 8009cc6:	bf00      	nop
 8009cc8:	0800ab07 	.word	0x0800ab07
 8009ccc:	0800ab78 	.word	0x0800ab78

08009cd0 <__mcmp>:
 8009cd0:	b530      	push	{r4, r5, lr}
 8009cd2:	6902      	ldr	r2, [r0, #16]
 8009cd4:	690c      	ldr	r4, [r1, #16]
 8009cd6:	1b12      	subs	r2, r2, r4
 8009cd8:	d10e      	bne.n	8009cf8 <__mcmp+0x28>
 8009cda:	f100 0314 	add.w	r3, r0, #20
 8009cde:	3114      	adds	r1, #20
 8009ce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009cec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009cf0:	42a5      	cmp	r5, r4
 8009cf2:	d003      	beq.n	8009cfc <__mcmp+0x2c>
 8009cf4:	d305      	bcc.n	8009d02 <__mcmp+0x32>
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	bd30      	pop	{r4, r5, pc}
 8009cfc:	4283      	cmp	r3, r0
 8009cfe:	d3f3      	bcc.n	8009ce8 <__mcmp+0x18>
 8009d00:	e7fa      	b.n	8009cf8 <__mcmp+0x28>
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295
 8009d06:	e7f7      	b.n	8009cf8 <__mcmp+0x28>

08009d08 <__mdiff>:
 8009d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	4606      	mov	r6, r0
 8009d10:	4611      	mov	r1, r2
 8009d12:	4620      	mov	r0, r4
 8009d14:	4617      	mov	r7, r2
 8009d16:	f7ff ffdb 	bl	8009cd0 <__mcmp>
 8009d1a:	1e05      	subs	r5, r0, #0
 8009d1c:	d110      	bne.n	8009d40 <__mdiff+0x38>
 8009d1e:	4629      	mov	r1, r5
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff fd57 	bl	80097d4 <_Balloc>
 8009d26:	b930      	cbnz	r0, 8009d36 <__mdiff+0x2e>
 8009d28:	4b39      	ldr	r3, [pc, #228]	; (8009e10 <__mdiff+0x108>)
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	f240 2132 	movw	r1, #562	; 0x232
 8009d30:	4838      	ldr	r0, [pc, #224]	; (8009e14 <__mdiff+0x10c>)
 8009d32:	f000 fbff 	bl	800a534 <__assert_func>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d40:	bfa4      	itt	ge
 8009d42:	463b      	movge	r3, r7
 8009d44:	4627      	movge	r7, r4
 8009d46:	4630      	mov	r0, r6
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	bfa6      	itte	ge
 8009d4c:	461c      	movge	r4, r3
 8009d4e:	2500      	movge	r5, #0
 8009d50:	2501      	movlt	r5, #1
 8009d52:	f7ff fd3f 	bl	80097d4 <_Balloc>
 8009d56:	b920      	cbnz	r0, 8009d62 <__mdiff+0x5a>
 8009d58:	4b2d      	ldr	r3, [pc, #180]	; (8009e10 <__mdiff+0x108>)
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d60:	e7e6      	b.n	8009d30 <__mdiff+0x28>
 8009d62:	693e      	ldr	r6, [r7, #16]
 8009d64:	60c5      	str	r5, [r0, #12]
 8009d66:	6925      	ldr	r5, [r4, #16]
 8009d68:	f107 0114 	add.w	r1, r7, #20
 8009d6c:	f104 0914 	add.w	r9, r4, #20
 8009d70:	f100 0e14 	add.w	lr, r0, #20
 8009d74:	f107 0210 	add.w	r2, r7, #16
 8009d78:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d7c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d80:	46f2      	mov	sl, lr
 8009d82:	2700      	movs	r7, #0
 8009d84:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d8c:	fa1f f883 	uxth.w	r8, r3
 8009d90:	fa17 f78b 	uxtah	r7, r7, fp
 8009d94:	0c1b      	lsrs	r3, r3, #16
 8009d96:	eba7 0808 	sub.w	r8, r7, r8
 8009d9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009da2:	fa1f f888 	uxth.w	r8, r8
 8009da6:	141f      	asrs	r7, r3, #16
 8009da8:	454d      	cmp	r5, r9
 8009daa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dae:	f84a 3b04 	str.w	r3, [sl], #4
 8009db2:	d8e7      	bhi.n	8009d84 <__mdiff+0x7c>
 8009db4:	1b2b      	subs	r3, r5, r4
 8009db6:	3b15      	subs	r3, #21
 8009db8:	f023 0303 	bic.w	r3, r3, #3
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	3415      	adds	r4, #21
 8009dc0:	42a5      	cmp	r5, r4
 8009dc2:	bf38      	it	cc
 8009dc4:	2304      	movcc	r3, #4
 8009dc6:	4419      	add	r1, r3
 8009dc8:	4473      	add	r3, lr
 8009dca:	469e      	mov	lr, r3
 8009dcc:	460d      	mov	r5, r1
 8009dce:	4565      	cmp	r5, ip
 8009dd0:	d30e      	bcc.n	8009df0 <__mdiff+0xe8>
 8009dd2:	f10c 0203 	add.w	r2, ip, #3
 8009dd6:	1a52      	subs	r2, r2, r1
 8009dd8:	f022 0203 	bic.w	r2, r2, #3
 8009ddc:	3903      	subs	r1, #3
 8009dde:	458c      	cmp	ip, r1
 8009de0:	bf38      	it	cc
 8009de2:	2200      	movcc	r2, #0
 8009de4:	441a      	add	r2, r3
 8009de6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009dea:	b17b      	cbz	r3, 8009e0c <__mdiff+0x104>
 8009dec:	6106      	str	r6, [r0, #16]
 8009dee:	e7a5      	b.n	8009d3c <__mdiff+0x34>
 8009df0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009df4:	fa17 f488 	uxtah	r4, r7, r8
 8009df8:	1422      	asrs	r2, r4, #16
 8009dfa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009dfe:	b2a4      	uxth	r4, r4
 8009e00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e04:	f84e 4b04 	str.w	r4, [lr], #4
 8009e08:	1417      	asrs	r7, r2, #16
 8009e0a:	e7e0      	b.n	8009dce <__mdiff+0xc6>
 8009e0c:	3e01      	subs	r6, #1
 8009e0e:	e7ea      	b.n	8009de6 <__mdiff+0xde>
 8009e10:	0800ab07 	.word	0x0800ab07
 8009e14:	0800ab78 	.word	0x0800ab78

08009e18 <__d2b>:
 8009e18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	2101      	movs	r1, #1
 8009e20:	ec57 6b10 	vmov	r6, r7, d0
 8009e24:	4690      	mov	r8, r2
 8009e26:	f7ff fcd5 	bl	80097d4 <_Balloc>
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	b930      	cbnz	r0, 8009e3c <__d2b+0x24>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <__d2b+0xb0>)
 8009e32:	4826      	ldr	r0, [pc, #152]	; (8009ecc <__d2b+0xb4>)
 8009e34:	f240 310a 	movw	r1, #778	; 0x30a
 8009e38:	f000 fb7c 	bl	800a534 <__assert_func>
 8009e3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e44:	bb35      	cbnz	r5, 8009e94 <__d2b+0x7c>
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	d028      	beq.n	8009e9e <__d2b+0x86>
 8009e4c:	4668      	mov	r0, sp
 8009e4e:	9600      	str	r6, [sp, #0]
 8009e50:	f7ff fd8c 	bl	800996c <__lo0bits>
 8009e54:	9900      	ldr	r1, [sp, #0]
 8009e56:	b300      	cbz	r0, 8009e9a <__d2b+0x82>
 8009e58:	9a01      	ldr	r2, [sp, #4]
 8009e5a:	f1c0 0320 	rsb	r3, r0, #32
 8009e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e62:	430b      	orrs	r3, r1
 8009e64:	40c2      	lsrs	r2, r0
 8009e66:	6163      	str	r3, [r4, #20]
 8009e68:	9201      	str	r2, [sp, #4]
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	61a3      	str	r3, [r4, #24]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bf14      	ite	ne
 8009e72:	2202      	movne	r2, #2
 8009e74:	2201      	moveq	r2, #1
 8009e76:	6122      	str	r2, [r4, #16]
 8009e78:	b1d5      	cbz	r5, 8009eb0 <__d2b+0x98>
 8009e7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e7e:	4405      	add	r5, r0
 8009e80:	f8c9 5000 	str.w	r5, [r9]
 8009e84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e88:	f8c8 0000 	str.w	r0, [r8]
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	b003      	add	sp, #12
 8009e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e98:	e7d5      	b.n	8009e46 <__d2b+0x2e>
 8009e9a:	6161      	str	r1, [r4, #20]
 8009e9c:	e7e5      	b.n	8009e6a <__d2b+0x52>
 8009e9e:	a801      	add	r0, sp, #4
 8009ea0:	f7ff fd64 	bl	800996c <__lo0bits>
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	6163      	str	r3, [r4, #20]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	6122      	str	r2, [r4, #16]
 8009eac:	3020      	adds	r0, #32
 8009eae:	e7e3      	b.n	8009e78 <__d2b+0x60>
 8009eb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009eb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009eb8:	f8c9 0000 	str.w	r0, [r9]
 8009ebc:	6918      	ldr	r0, [r3, #16]
 8009ebe:	f7ff fd35 	bl	800992c <__hi0bits>
 8009ec2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ec6:	e7df      	b.n	8009e88 <__d2b+0x70>
 8009ec8:	0800ab07 	.word	0x0800ab07
 8009ecc:	0800ab78 	.word	0x0800ab78

08009ed0 <_realloc_r>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	460e      	mov	r6, r1
 8009ed8:	b921      	cbnz	r1, 8009ee4 <_realloc_r+0x14>
 8009eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ede:	4611      	mov	r1, r2
 8009ee0:	f7fd bd64 	b.w	80079ac <_malloc_r>
 8009ee4:	b922      	cbnz	r2, 8009ef0 <_realloc_r+0x20>
 8009ee6:	f7fd fd11 	bl	800790c <_free_r>
 8009eea:	4625      	mov	r5, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef0:	f000 fbc0 	bl	800a674 <_malloc_usable_size_r>
 8009ef4:	42a0      	cmp	r0, r4
 8009ef6:	d20f      	bcs.n	8009f18 <_realloc_r+0x48>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4638      	mov	r0, r7
 8009efc:	f7fd fd56 	bl	80079ac <_malloc_r>
 8009f00:	4605      	mov	r5, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0f2      	beq.n	8009eec <_realloc_r+0x1c>
 8009f06:	4631      	mov	r1, r6
 8009f08:	4622      	mov	r2, r4
 8009f0a:	f7ff fc49 	bl	80097a0 <memcpy>
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7fd fcfb 	bl	800790c <_free_r>
 8009f16:	e7e9      	b.n	8009eec <_realloc_r+0x1c>
 8009f18:	4635      	mov	r5, r6
 8009f1a:	e7e7      	b.n	8009eec <_realloc_r+0x1c>

08009f1c <__ssputs_r>:
 8009f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	688e      	ldr	r6, [r1, #8]
 8009f22:	429e      	cmp	r6, r3
 8009f24:	4682      	mov	sl, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4690      	mov	r8, r2
 8009f2a:	461f      	mov	r7, r3
 8009f2c:	d838      	bhi.n	8009fa0 <__ssputs_r+0x84>
 8009f2e:	898a      	ldrh	r2, [r1, #12]
 8009f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f34:	d032      	beq.n	8009f9c <__ssputs_r+0x80>
 8009f36:	6825      	ldr	r5, [r4, #0]
 8009f38:	6909      	ldr	r1, [r1, #16]
 8009f3a:	eba5 0901 	sub.w	r9, r5, r1
 8009f3e:	6965      	ldr	r5, [r4, #20]
 8009f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f48:	3301      	adds	r3, #1
 8009f4a:	444b      	add	r3, r9
 8009f4c:	106d      	asrs	r5, r5, #1
 8009f4e:	429d      	cmp	r5, r3
 8009f50:	bf38      	it	cc
 8009f52:	461d      	movcc	r5, r3
 8009f54:	0553      	lsls	r3, r2, #21
 8009f56:	d531      	bpl.n	8009fbc <__ssputs_r+0xa0>
 8009f58:	4629      	mov	r1, r5
 8009f5a:	f7fd fd27 	bl	80079ac <_malloc_r>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	b950      	cbnz	r0, 8009f78 <__ssputs_r+0x5c>
 8009f62:	230c      	movs	r3, #12
 8009f64:	f8ca 3000 	str.w	r3, [sl]
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f78:	6921      	ldr	r1, [r4, #16]
 8009f7a:	464a      	mov	r2, r9
 8009f7c:	f7ff fc10 	bl	80097a0 <memcpy>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	6126      	str	r6, [r4, #16]
 8009f8e:	6165      	str	r5, [r4, #20]
 8009f90:	444e      	add	r6, r9
 8009f92:	eba5 0509 	sub.w	r5, r5, r9
 8009f96:	6026      	str	r6, [r4, #0]
 8009f98:	60a5      	str	r5, [r4, #8]
 8009f9a:	463e      	mov	r6, r7
 8009f9c:	42be      	cmp	r6, r7
 8009f9e:	d900      	bls.n	8009fa2 <__ssputs_r+0x86>
 8009fa0:	463e      	mov	r6, r7
 8009fa2:	4632      	mov	r2, r6
 8009fa4:	6820      	ldr	r0, [r4, #0]
 8009fa6:	4641      	mov	r1, r8
 8009fa8:	f000 fb4a 	bl	800a640 <memmove>
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	1b9b      	subs	r3, r3, r6
 8009fb2:	4432      	add	r2, r6
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	6022      	str	r2, [r4, #0]
 8009fb8:	2000      	movs	r0, #0
 8009fba:	e7db      	b.n	8009f74 <__ssputs_r+0x58>
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	f7ff ff87 	bl	8009ed0 <_realloc_r>
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d1e1      	bne.n	8009f8c <__ssputs_r+0x70>
 8009fc8:	6921      	ldr	r1, [r4, #16]
 8009fca:	4650      	mov	r0, sl
 8009fcc:	f7fd fc9e 	bl	800790c <_free_r>
 8009fd0:	e7c7      	b.n	8009f62 <__ssputs_r+0x46>
	...

08009fd4 <_svfiprintf_r>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	4698      	mov	r8, r3
 8009fda:	898b      	ldrh	r3, [r1, #12]
 8009fdc:	061b      	lsls	r3, r3, #24
 8009fde:	b09d      	sub	sp, #116	; 0x74
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	d50e      	bpl.n	800a006 <_svfiprintf_r+0x32>
 8009fe8:	690b      	ldr	r3, [r1, #16]
 8009fea:	b963      	cbnz	r3, 800a006 <_svfiprintf_r+0x32>
 8009fec:	2140      	movs	r1, #64	; 0x40
 8009fee:	f7fd fcdd 	bl	80079ac <_malloc_r>
 8009ff2:	6028      	str	r0, [r5, #0]
 8009ff4:	6128      	str	r0, [r5, #16]
 8009ff6:	b920      	cbnz	r0, 800a002 <_svfiprintf_r+0x2e>
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	e0d1      	b.n	800a1a6 <_svfiprintf_r+0x1d2>
 800a002:	2340      	movs	r3, #64	; 0x40
 800a004:	616b      	str	r3, [r5, #20]
 800a006:	2300      	movs	r3, #0
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	2320      	movs	r3, #32
 800a00c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a010:	f8cd 800c 	str.w	r8, [sp, #12]
 800a014:	2330      	movs	r3, #48	; 0x30
 800a016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1c0 <_svfiprintf_r+0x1ec>
 800a01a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a01e:	f04f 0901 	mov.w	r9, #1
 800a022:	4623      	mov	r3, r4
 800a024:	469a      	mov	sl, r3
 800a026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a02a:	b10a      	cbz	r2, 800a030 <_svfiprintf_r+0x5c>
 800a02c:	2a25      	cmp	r2, #37	; 0x25
 800a02e:	d1f9      	bne.n	800a024 <_svfiprintf_r+0x50>
 800a030:	ebba 0b04 	subs.w	fp, sl, r4
 800a034:	d00b      	beq.n	800a04e <_svfiprintf_r+0x7a>
 800a036:	465b      	mov	r3, fp
 800a038:	4622      	mov	r2, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	4638      	mov	r0, r7
 800a03e:	f7ff ff6d 	bl	8009f1c <__ssputs_r>
 800a042:	3001      	adds	r0, #1
 800a044:	f000 80aa 	beq.w	800a19c <_svfiprintf_r+0x1c8>
 800a048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a04a:	445a      	add	r2, fp
 800a04c:	9209      	str	r2, [sp, #36]	; 0x24
 800a04e:	f89a 3000 	ldrb.w	r3, [sl]
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 80a2 	beq.w	800a19c <_svfiprintf_r+0x1c8>
 800a058:	2300      	movs	r3, #0
 800a05a:	f04f 32ff 	mov.w	r2, #4294967295
 800a05e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a062:	f10a 0a01 	add.w	sl, sl, #1
 800a066:	9304      	str	r3, [sp, #16]
 800a068:	9307      	str	r3, [sp, #28]
 800a06a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a06e:	931a      	str	r3, [sp, #104]	; 0x68
 800a070:	4654      	mov	r4, sl
 800a072:	2205      	movs	r2, #5
 800a074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a078:	4851      	ldr	r0, [pc, #324]	; (800a1c0 <_svfiprintf_r+0x1ec>)
 800a07a:	f7f6 f8b9 	bl	80001f0 <memchr>
 800a07e:	9a04      	ldr	r2, [sp, #16]
 800a080:	b9d8      	cbnz	r0, 800a0ba <_svfiprintf_r+0xe6>
 800a082:	06d0      	lsls	r0, r2, #27
 800a084:	bf44      	itt	mi
 800a086:	2320      	movmi	r3, #32
 800a088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a08c:	0711      	lsls	r1, r2, #28
 800a08e:	bf44      	itt	mi
 800a090:	232b      	movmi	r3, #43	; 0x2b
 800a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a096:	f89a 3000 	ldrb.w	r3, [sl]
 800a09a:	2b2a      	cmp	r3, #42	; 0x2a
 800a09c:	d015      	beq.n	800a0ca <_svfiprintf_r+0xf6>
 800a09e:	9a07      	ldr	r2, [sp, #28]
 800a0a0:	4654      	mov	r4, sl
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f04f 0c0a 	mov.w	ip, #10
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ae:	3b30      	subs	r3, #48	; 0x30
 800a0b0:	2b09      	cmp	r3, #9
 800a0b2:	d94e      	bls.n	800a152 <_svfiprintf_r+0x17e>
 800a0b4:	b1b0      	cbz	r0, 800a0e4 <_svfiprintf_r+0x110>
 800a0b6:	9207      	str	r2, [sp, #28]
 800a0b8:	e014      	b.n	800a0e4 <_svfiprintf_r+0x110>
 800a0ba:	eba0 0308 	sub.w	r3, r0, r8
 800a0be:	fa09 f303 	lsl.w	r3, r9, r3
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	46a2      	mov	sl, r4
 800a0c8:	e7d2      	b.n	800a070 <_svfiprintf_r+0x9c>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	1d19      	adds	r1, r3, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	9103      	str	r1, [sp, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bfbb      	ittet	lt
 800a0d6:	425b      	neglt	r3, r3
 800a0d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0dc:	9307      	strge	r3, [sp, #28]
 800a0de:	9307      	strlt	r3, [sp, #28]
 800a0e0:	bfb8      	it	lt
 800a0e2:	9204      	strlt	r2, [sp, #16]
 800a0e4:	7823      	ldrb	r3, [r4, #0]
 800a0e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e8:	d10c      	bne.n	800a104 <_svfiprintf_r+0x130>
 800a0ea:	7863      	ldrb	r3, [r4, #1]
 800a0ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ee:	d135      	bne.n	800a15c <_svfiprintf_r+0x188>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	1d1a      	adds	r2, r3, #4
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	9203      	str	r2, [sp, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfb8      	it	lt
 800a0fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a100:	3402      	adds	r4, #2
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1d0 <_svfiprintf_r+0x1fc>
 800a108:	7821      	ldrb	r1, [r4, #0]
 800a10a:	2203      	movs	r2, #3
 800a10c:	4650      	mov	r0, sl
 800a10e:	f7f6 f86f 	bl	80001f0 <memchr>
 800a112:	b140      	cbz	r0, 800a126 <_svfiprintf_r+0x152>
 800a114:	2340      	movs	r3, #64	; 0x40
 800a116:	eba0 000a 	sub.w	r0, r0, sl
 800a11a:	fa03 f000 	lsl.w	r0, r3, r0
 800a11e:	9b04      	ldr	r3, [sp, #16]
 800a120:	4303      	orrs	r3, r0
 800a122:	3401      	adds	r4, #1
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12a:	4826      	ldr	r0, [pc, #152]	; (800a1c4 <_svfiprintf_r+0x1f0>)
 800a12c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a130:	2206      	movs	r2, #6
 800a132:	f7f6 f85d 	bl	80001f0 <memchr>
 800a136:	2800      	cmp	r0, #0
 800a138:	d038      	beq.n	800a1ac <_svfiprintf_r+0x1d8>
 800a13a:	4b23      	ldr	r3, [pc, #140]	; (800a1c8 <_svfiprintf_r+0x1f4>)
 800a13c:	bb1b      	cbnz	r3, 800a186 <_svfiprintf_r+0x1b2>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	3307      	adds	r3, #7
 800a142:	f023 0307 	bic.w	r3, r3, #7
 800a146:	3308      	adds	r3, #8
 800a148:	9303      	str	r3, [sp, #12]
 800a14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14c:	4433      	add	r3, r6
 800a14e:	9309      	str	r3, [sp, #36]	; 0x24
 800a150:	e767      	b.n	800a022 <_svfiprintf_r+0x4e>
 800a152:	fb0c 3202 	mla	r2, ip, r2, r3
 800a156:	460c      	mov	r4, r1
 800a158:	2001      	movs	r0, #1
 800a15a:	e7a5      	b.n	800a0a8 <_svfiprintf_r+0xd4>
 800a15c:	2300      	movs	r3, #0
 800a15e:	3401      	adds	r4, #1
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	4619      	mov	r1, r3
 800a164:	f04f 0c0a 	mov.w	ip, #10
 800a168:	4620      	mov	r0, r4
 800a16a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a16e:	3a30      	subs	r2, #48	; 0x30
 800a170:	2a09      	cmp	r2, #9
 800a172:	d903      	bls.n	800a17c <_svfiprintf_r+0x1a8>
 800a174:	2b00      	cmp	r3, #0
 800a176:	d0c5      	beq.n	800a104 <_svfiprintf_r+0x130>
 800a178:	9105      	str	r1, [sp, #20]
 800a17a:	e7c3      	b.n	800a104 <_svfiprintf_r+0x130>
 800a17c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a180:	4604      	mov	r4, r0
 800a182:	2301      	movs	r3, #1
 800a184:	e7f0      	b.n	800a168 <_svfiprintf_r+0x194>
 800a186:	ab03      	add	r3, sp, #12
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	462a      	mov	r2, r5
 800a18c:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <_svfiprintf_r+0x1f8>)
 800a18e:	a904      	add	r1, sp, #16
 800a190:	4638      	mov	r0, r7
 800a192:	f7fd fd05 	bl	8007ba0 <_printf_float>
 800a196:	1c42      	adds	r2, r0, #1
 800a198:	4606      	mov	r6, r0
 800a19a:	d1d6      	bne.n	800a14a <_svfiprintf_r+0x176>
 800a19c:	89ab      	ldrh	r3, [r5, #12]
 800a19e:	065b      	lsls	r3, r3, #25
 800a1a0:	f53f af2c 	bmi.w	8009ffc <_svfiprintf_r+0x28>
 800a1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1a6:	b01d      	add	sp, #116	; 0x74
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <_svfiprintf_r+0x1f8>)
 800a1b4:	a904      	add	r1, sp, #16
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f7fd ff96 	bl	80080e8 <_printf_i>
 800a1bc:	e7eb      	b.n	800a196 <_svfiprintf_r+0x1c2>
 800a1be:	bf00      	nop
 800a1c0:	0800acd4 	.word	0x0800acd4
 800a1c4:	0800acde 	.word	0x0800acde
 800a1c8:	08007ba1 	.word	0x08007ba1
 800a1cc:	08009f1d 	.word	0x08009f1d
 800a1d0:	0800acda 	.word	0x0800acda

0800a1d4 <__sfputc_r>:
 800a1d4:	6893      	ldr	r3, [r2, #8]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	b410      	push	{r4}
 800a1dc:	6093      	str	r3, [r2, #8]
 800a1de:	da08      	bge.n	800a1f2 <__sfputc_r+0x1e>
 800a1e0:	6994      	ldr	r4, [r2, #24]
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	db01      	blt.n	800a1ea <__sfputc_r+0x16>
 800a1e6:	290a      	cmp	r1, #10
 800a1e8:	d103      	bne.n	800a1f2 <__sfputc_r+0x1e>
 800a1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ee:	f7fe b97b 	b.w	80084e8 <__swbuf_r>
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	1c58      	adds	r0, r3, #1
 800a1f6:	6010      	str	r0, [r2, #0]
 800a1f8:	7019      	strb	r1, [r3, #0]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <__sfputs_r>:
 800a202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a204:	4606      	mov	r6, r0
 800a206:	460f      	mov	r7, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	18d5      	adds	r5, r2, r3
 800a20c:	42ac      	cmp	r4, r5
 800a20e:	d101      	bne.n	800a214 <__sfputs_r+0x12>
 800a210:	2000      	movs	r0, #0
 800a212:	e007      	b.n	800a224 <__sfputs_r+0x22>
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	463a      	mov	r2, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffda 	bl	800a1d4 <__sfputc_r>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d1f3      	bne.n	800a20c <__sfputs_r+0xa>
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a228 <_vfiprintf_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460d      	mov	r5, r1
 800a22e:	b09d      	sub	sp, #116	; 0x74
 800a230:	4614      	mov	r4, r2
 800a232:	4698      	mov	r8, r3
 800a234:	4606      	mov	r6, r0
 800a236:	b118      	cbz	r0, 800a240 <_vfiprintf_r+0x18>
 800a238:	6983      	ldr	r3, [r0, #24]
 800a23a:	b90b      	cbnz	r3, 800a240 <_vfiprintf_r+0x18>
 800a23c:	f7ff f9a6 	bl	800958c <__sinit>
 800a240:	4b89      	ldr	r3, [pc, #548]	; (800a468 <_vfiprintf_r+0x240>)
 800a242:	429d      	cmp	r5, r3
 800a244:	d11b      	bne.n	800a27e <_vfiprintf_r+0x56>
 800a246:	6875      	ldr	r5, [r6, #4]
 800a248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24a:	07d9      	lsls	r1, r3, #31
 800a24c:	d405      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	059a      	lsls	r2, r3, #22
 800a252:	d402      	bmi.n	800a25a <_vfiprintf_r+0x32>
 800a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a256:	f7ff fa3c 	bl	80096d2 <__retarget_lock_acquire_recursive>
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	071b      	lsls	r3, r3, #28
 800a25e:	d501      	bpl.n	800a264 <_vfiprintf_r+0x3c>
 800a260:	692b      	ldr	r3, [r5, #16]
 800a262:	b9eb      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x78>
 800a264:	4629      	mov	r1, r5
 800a266:	4630      	mov	r0, r6
 800a268:	f7fe f990 	bl	800858c <__swsetup_r>
 800a26c:	b1c0      	cbz	r0, 800a2a0 <_vfiprintf_r+0x78>
 800a26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a270:	07dc      	lsls	r4, r3, #31
 800a272:	d50e      	bpl.n	800a292 <_vfiprintf_r+0x6a>
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	b01d      	add	sp, #116	; 0x74
 800a27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a27e:	4b7b      	ldr	r3, [pc, #492]	; (800a46c <_vfiprintf_r+0x244>)
 800a280:	429d      	cmp	r5, r3
 800a282:	d101      	bne.n	800a288 <_vfiprintf_r+0x60>
 800a284:	68b5      	ldr	r5, [r6, #8]
 800a286:	e7df      	b.n	800a248 <_vfiprintf_r+0x20>
 800a288:	4b79      	ldr	r3, [pc, #484]	; (800a470 <_vfiprintf_r+0x248>)
 800a28a:	429d      	cmp	r5, r3
 800a28c:	bf08      	it	eq
 800a28e:	68f5      	ldreq	r5, [r6, #12]
 800a290:	e7da      	b.n	800a248 <_vfiprintf_r+0x20>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d4ed      	bmi.n	800a274 <_vfiprintf_r+0x4c>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f7ff fa1b 	bl	80096d4 <__retarget_lock_release_recursive>
 800a29e:	e7e9      	b.n	800a274 <_vfiprintf_r+0x4c>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ae:	2330      	movs	r3, #48	; 0x30
 800a2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a474 <_vfiprintf_r+0x24c>
 800a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b8:	f04f 0901 	mov.w	r9, #1
 800a2bc:	4623      	mov	r3, r4
 800a2be:	469a      	mov	sl, r3
 800a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c4:	b10a      	cbz	r2, 800a2ca <_vfiprintf_r+0xa2>
 800a2c6:	2a25      	cmp	r2, #37	; 0x25
 800a2c8:	d1f9      	bne.n	800a2be <_vfiprintf_r+0x96>
 800a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ce:	d00b      	beq.n	800a2e8 <_vfiprintf_r+0xc0>
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff93 	bl	800a202 <__sfputs_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f000 80aa 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	445a      	add	r2, fp
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a2 	beq.w	800a436 <_vfiprintf_r+0x20e>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a308:	931a      	str	r3, [sp, #104]	; 0x68
 800a30a:	4654      	mov	r4, sl
 800a30c:	2205      	movs	r2, #5
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4858      	ldr	r0, [pc, #352]	; (800a474 <_vfiprintf_r+0x24c>)
 800a314:	f7f5 ff6c 	bl	80001f0 <memchr>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	b9d8      	cbnz	r0, 800a354 <_vfiprintf_r+0x12c>
 800a31c:	06d1      	lsls	r1, r2, #27
 800a31e:	bf44      	itt	mi
 800a320:	2320      	movmi	r3, #32
 800a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a326:	0713      	lsls	r3, r2, #28
 800a328:	bf44      	itt	mi
 800a32a:	232b      	movmi	r3, #43	; 0x2b
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d015      	beq.n	800a364 <_vfiprintf_r+0x13c>
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	4654      	mov	r4, sl
 800a33c:	2000      	movs	r0, #0
 800a33e:	f04f 0c0a 	mov.w	ip, #10
 800a342:	4621      	mov	r1, r4
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94e      	bls.n	800a3ec <_vfiprintf_r+0x1c4>
 800a34e:	b1b0      	cbz	r0, 800a37e <_vfiprintf_r+0x156>
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	e014      	b.n	800a37e <_vfiprintf_r+0x156>
 800a354:	eba0 0308 	sub.w	r3, r0, r8
 800a358:	fa09 f303 	lsl.w	r3, r9, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	46a2      	mov	sl, r4
 800a362:	e7d2      	b.n	800a30a <_vfiprintf_r+0xe2>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d19      	adds	r1, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9103      	str	r1, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfbb      	ittet	lt
 800a370:	425b      	neglt	r3, r3
 800a372:	f042 0202 	orrlt.w	r2, r2, #2
 800a376:	9307      	strge	r3, [sp, #28]
 800a378:	9307      	strlt	r3, [sp, #28]
 800a37a:	bfb8      	it	lt
 800a37c:	9204      	strlt	r2, [sp, #16]
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	2b2e      	cmp	r3, #46	; 0x2e
 800a382:	d10c      	bne.n	800a39e <_vfiprintf_r+0x176>
 800a384:	7863      	ldrb	r3, [r4, #1]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d135      	bne.n	800a3f6 <_vfiprintf_r+0x1ce>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9203      	str	r2, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	f04f 33ff 	movlt.w	r3, #4294967295
 800a39a:	3402      	adds	r4, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a484 <_vfiprintf_r+0x25c>
 800a3a2:	7821      	ldrb	r1, [r4, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7f5 ff22 	bl	80001f0 <memchr>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_vfiprintf_r+0x198>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	eba0 000a 	sub.w	r0, r0, sl
 800a3b4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	4303      	orrs	r3, r0
 800a3bc:	3401      	adds	r4, #1
 800a3be:	9304      	str	r3, [sp, #16]
 800a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c4:	482c      	ldr	r0, [pc, #176]	; (800a478 <_vfiprintf_r+0x250>)
 800a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	f7f5 ff10 	bl	80001f0 <memchr>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d03f      	beq.n	800a454 <_vfiprintf_r+0x22c>
 800a3d4:	4b29      	ldr	r3, [pc, #164]	; (800a47c <_vfiprintf_r+0x254>)
 800a3d6:	bb1b      	cbnz	r3, 800a420 <_vfiprintf_r+0x1f8>
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	3307      	adds	r3, #7
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	9303      	str	r3, [sp, #12]
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	443b      	add	r3, r7
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	e767      	b.n	800a2bc <_vfiprintf_r+0x94>
 800a3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	2001      	movs	r0, #1
 800a3f4:	e7a5      	b.n	800a342 <_vfiprintf_r+0x11a>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	3401      	adds	r4, #1
 800a3fa:	9305      	str	r3, [sp, #20]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f04f 0c0a 	mov.w	ip, #10
 800a402:	4620      	mov	r0, r4
 800a404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a408:	3a30      	subs	r2, #48	; 0x30
 800a40a:	2a09      	cmp	r2, #9
 800a40c:	d903      	bls.n	800a416 <_vfiprintf_r+0x1ee>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0c5      	beq.n	800a39e <_vfiprintf_r+0x176>
 800a412:	9105      	str	r1, [sp, #20]
 800a414:	e7c3      	b.n	800a39e <_vfiprintf_r+0x176>
 800a416:	fb0c 2101 	mla	r1, ip, r1, r2
 800a41a:	4604      	mov	r4, r0
 800a41c:	2301      	movs	r3, #1
 800a41e:	e7f0      	b.n	800a402 <_vfiprintf_r+0x1da>
 800a420:	ab03      	add	r3, sp, #12
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	462a      	mov	r2, r5
 800a426:	4b16      	ldr	r3, [pc, #88]	; (800a480 <_vfiprintf_r+0x258>)
 800a428:	a904      	add	r1, sp, #16
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7fd fbb8 	bl	8007ba0 <_printf_float>
 800a430:	4607      	mov	r7, r0
 800a432:	1c78      	adds	r0, r7, #1
 800a434:	d1d6      	bne.n	800a3e4 <_vfiprintf_r+0x1bc>
 800a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a438:	07d9      	lsls	r1, r3, #31
 800a43a:	d405      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a43c:	89ab      	ldrh	r3, [r5, #12]
 800a43e:	059a      	lsls	r2, r3, #22
 800a440:	d402      	bmi.n	800a448 <_vfiprintf_r+0x220>
 800a442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a444:	f7ff f946 	bl	80096d4 <__retarget_lock_release_recursive>
 800a448:	89ab      	ldrh	r3, [r5, #12]
 800a44a:	065b      	lsls	r3, r3, #25
 800a44c:	f53f af12 	bmi.w	800a274 <_vfiprintf_r+0x4c>
 800a450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a452:	e711      	b.n	800a278 <_vfiprintf_r+0x50>
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	462a      	mov	r2, r5
 800a45a:	4b09      	ldr	r3, [pc, #36]	; (800a480 <_vfiprintf_r+0x258>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	4630      	mov	r0, r6
 800a460:	f7fd fe42 	bl	80080e8 <_printf_i>
 800a464:	e7e4      	b.n	800a430 <_vfiprintf_r+0x208>
 800a466:	bf00      	nop
 800a468:	0800ab38 	.word	0x0800ab38
 800a46c:	0800ab58 	.word	0x0800ab58
 800a470:	0800ab18 	.word	0x0800ab18
 800a474:	0800acd4 	.word	0x0800acd4
 800a478:	0800acde 	.word	0x0800acde
 800a47c:	08007ba1 	.word	0x08007ba1
 800a480:	0800a203 	.word	0x0800a203
 800a484:	0800acda 	.word	0x0800acda

0800a488 <__sread>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	460c      	mov	r4, r1
 800a48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a490:	f000 f8f8 	bl	800a684 <_read_r>
 800a494:	2800      	cmp	r0, #0
 800a496:	bfab      	itete	ge
 800a498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a49a:	89a3      	ldrhlt	r3, [r4, #12]
 800a49c:	181b      	addge	r3, r3, r0
 800a49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4a2:	bfac      	ite	ge
 800a4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4a6:	81a3      	strhlt	r3, [r4, #12]
 800a4a8:	bd10      	pop	{r4, pc}

0800a4aa <__swrite>:
 800a4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	461f      	mov	r7, r3
 800a4b0:	898b      	ldrh	r3, [r1, #12]
 800a4b2:	05db      	lsls	r3, r3, #23
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	4616      	mov	r6, r2
 800a4ba:	d505      	bpl.n	800a4c8 <__swrite+0x1e>
 800a4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f000 f898 	bl	800a5f8 <_lseek_r>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	4628      	mov	r0, r5
 800a4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	f000 b817 	b.w	800a510 <_write_r>

0800a4e2 <__sseek>:
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ea:	f000 f885 	bl	800a5f8 <_lseek_r>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	bf15      	itete	ne
 800a4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4fe:	81a3      	strheq	r3, [r4, #12]
 800a500:	bf18      	it	ne
 800a502:	81a3      	strhne	r3, [r4, #12]
 800a504:	bd10      	pop	{r4, pc}

0800a506 <__sclose>:
 800a506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50a:	f000 b831 	b.w	800a570 <_close_r>
	...

0800a510 <_write_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d07      	ldr	r5, [pc, #28]	; (800a530 <_write_r+0x20>)
 800a514:	4604      	mov	r4, r0
 800a516:	4608      	mov	r0, r1
 800a518:	4611      	mov	r1, r2
 800a51a:	2200      	movs	r2, #0
 800a51c:	602a      	str	r2, [r5, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	f7f6 fcc6 	bl	8000eb0 <_write>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_write_r+0x1e>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_write_r+0x1e>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20000740 	.word	0x20000740

0800a534 <__assert_func>:
 800a534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a536:	4614      	mov	r4, r2
 800a538:	461a      	mov	r2, r3
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <__assert_func+0x2c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4605      	mov	r5, r0
 800a540:	68d8      	ldr	r0, [r3, #12]
 800a542:	b14c      	cbz	r4, 800a558 <__assert_func+0x24>
 800a544:	4b07      	ldr	r3, [pc, #28]	; (800a564 <__assert_func+0x30>)
 800a546:	9100      	str	r1, [sp, #0]
 800a548:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a54c:	4906      	ldr	r1, [pc, #24]	; (800a568 <__assert_func+0x34>)
 800a54e:	462b      	mov	r3, r5
 800a550:	f000 f81e 	bl	800a590 <fiprintf>
 800a554:	f000 f8b5 	bl	800a6c2 <abort>
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <__assert_func+0x38>)
 800a55a:	461c      	mov	r4, r3
 800a55c:	e7f3      	b.n	800a546 <__assert_func+0x12>
 800a55e:	bf00      	nop
 800a560:	200002f8 	.word	0x200002f8
 800a564:	0800ace5 	.word	0x0800ace5
 800a568:	0800acf2 	.word	0x0800acf2
 800a56c:	0800ad20 	.word	0x0800ad20

0800a570 <_close_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d06      	ldr	r5, [pc, #24]	; (800a58c <_close_r+0x1c>)
 800a574:	2300      	movs	r3, #0
 800a576:	4604      	mov	r4, r0
 800a578:	4608      	mov	r0, r1
 800a57a:	602b      	str	r3, [r5, #0]
 800a57c:	f7f7 fa9f 	bl	8001abe <_close>
 800a580:	1c43      	adds	r3, r0, #1
 800a582:	d102      	bne.n	800a58a <_close_r+0x1a>
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	b103      	cbz	r3, 800a58a <_close_r+0x1a>
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	bd38      	pop	{r3, r4, r5, pc}
 800a58c:	20000740 	.word	0x20000740

0800a590 <fiprintf>:
 800a590:	b40e      	push	{r1, r2, r3}
 800a592:	b503      	push	{r0, r1, lr}
 800a594:	4601      	mov	r1, r0
 800a596:	ab03      	add	r3, sp, #12
 800a598:	4805      	ldr	r0, [pc, #20]	; (800a5b0 <fiprintf+0x20>)
 800a59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a59e:	6800      	ldr	r0, [r0, #0]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	f7ff fe41 	bl	800a228 <_vfiprintf_r>
 800a5a6:	b002      	add	sp, #8
 800a5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ac:	b003      	add	sp, #12
 800a5ae:	4770      	bx	lr
 800a5b0:	200002f8 	.word	0x200002f8

0800a5b4 <_fstat_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	; (800a5d4 <_fstat_r+0x20>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	f7f7 fa88 	bl	8001ad6 <_fstat>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	d102      	bne.n	800a5d0 <_fstat_r+0x1c>
 800a5ca:	682b      	ldr	r3, [r5, #0]
 800a5cc:	b103      	cbz	r3, 800a5d0 <_fstat_r+0x1c>
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	bd38      	pop	{r3, r4, r5, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000740 	.word	0x20000740

0800a5d8 <_isatty_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	; (800a5f4 <_isatty_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f7 fa87 	bl	8001af6 <_isatty>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_isatty_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_isatty_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20000740 	.word	0x20000740

0800a5f8 <_lseek_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	; (800a618 <_lseek_r+0x20>)
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	4608      	mov	r0, r1
 800a600:	4611      	mov	r1, r2
 800a602:	2200      	movs	r2, #0
 800a604:	602a      	str	r2, [r5, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	f7f7 fa80 	bl	8001b0c <_lseek>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_lseek_r+0x1e>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_lseek_r+0x1e>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	20000740 	.word	0x20000740

0800a61c <__ascii_mbtowc>:
 800a61c:	b082      	sub	sp, #8
 800a61e:	b901      	cbnz	r1, 800a622 <__ascii_mbtowc+0x6>
 800a620:	a901      	add	r1, sp, #4
 800a622:	b142      	cbz	r2, 800a636 <__ascii_mbtowc+0x1a>
 800a624:	b14b      	cbz	r3, 800a63a <__ascii_mbtowc+0x1e>
 800a626:	7813      	ldrb	r3, [r2, #0]
 800a628:	600b      	str	r3, [r1, #0]
 800a62a:	7812      	ldrb	r2, [r2, #0]
 800a62c:	1e10      	subs	r0, r2, #0
 800a62e:	bf18      	it	ne
 800a630:	2001      	movne	r0, #1
 800a632:	b002      	add	sp, #8
 800a634:	4770      	bx	lr
 800a636:	4610      	mov	r0, r2
 800a638:	e7fb      	b.n	800a632 <__ascii_mbtowc+0x16>
 800a63a:	f06f 0001 	mvn.w	r0, #1
 800a63e:	e7f8      	b.n	800a632 <__ascii_mbtowc+0x16>

0800a640 <memmove>:
 800a640:	4288      	cmp	r0, r1
 800a642:	b510      	push	{r4, lr}
 800a644:	eb01 0402 	add.w	r4, r1, r2
 800a648:	d902      	bls.n	800a650 <memmove+0x10>
 800a64a:	4284      	cmp	r4, r0
 800a64c:	4623      	mov	r3, r4
 800a64e:	d807      	bhi.n	800a660 <memmove+0x20>
 800a650:	1e43      	subs	r3, r0, #1
 800a652:	42a1      	cmp	r1, r4
 800a654:	d008      	beq.n	800a668 <memmove+0x28>
 800a656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a65a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a65e:	e7f8      	b.n	800a652 <memmove+0x12>
 800a660:	4402      	add	r2, r0
 800a662:	4601      	mov	r1, r0
 800a664:	428a      	cmp	r2, r1
 800a666:	d100      	bne.n	800a66a <memmove+0x2a>
 800a668:	bd10      	pop	{r4, pc}
 800a66a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a66e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a672:	e7f7      	b.n	800a664 <memmove+0x24>

0800a674 <_malloc_usable_size_r>:
 800a674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a678:	1f18      	subs	r0, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	bfbc      	itt	lt
 800a67e:	580b      	ldrlt	r3, [r1, r0]
 800a680:	18c0      	addlt	r0, r0, r3
 800a682:	4770      	bx	lr

0800a684 <_read_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	; (800a6a4 <_read_r+0x20>)
 800a688:	4604      	mov	r4, r0
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	602a      	str	r2, [r5, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	f7f7 f9f6 	bl	8001a84 <_read>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_read_r+0x1e>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_read_r+0x1e>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20000740 	.word	0x20000740

0800a6a8 <__ascii_wctomb>:
 800a6a8:	b149      	cbz	r1, 800a6be <__ascii_wctomb+0x16>
 800a6aa:	2aff      	cmp	r2, #255	; 0xff
 800a6ac:	bf85      	ittet	hi
 800a6ae:	238a      	movhi	r3, #138	; 0x8a
 800a6b0:	6003      	strhi	r3, [r0, #0]
 800a6b2:	700a      	strbls	r2, [r1, #0]
 800a6b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6b8:	bf98      	it	ls
 800a6ba:	2001      	movls	r0, #1
 800a6bc:	4770      	bx	lr
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4770      	bx	lr

0800a6c2 <abort>:
 800a6c2:	b508      	push	{r3, lr}
 800a6c4:	2006      	movs	r0, #6
 800a6c6:	f000 f82b 	bl	800a720 <raise>
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	f7f7 f9d0 	bl	8001a70 <_exit>

0800a6d0 <_raise_r>:
 800a6d0:	291f      	cmp	r1, #31
 800a6d2:	b538      	push	{r3, r4, r5, lr}
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	d904      	bls.n	800a6e4 <_raise_r+0x14>
 800a6da:	2316      	movs	r3, #22
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6e6:	b112      	cbz	r2, 800a6ee <_raise_r+0x1e>
 800a6e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6ec:	b94b      	cbnz	r3, 800a702 <_raise_r+0x32>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 f830 	bl	800a754 <_getpid_r>
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6fe:	f000 b817 	b.w	800a730 <_kill_r>
 800a702:	2b01      	cmp	r3, #1
 800a704:	d00a      	beq.n	800a71c <_raise_r+0x4c>
 800a706:	1c59      	adds	r1, r3, #1
 800a708:	d103      	bne.n	800a712 <_raise_r+0x42>
 800a70a:	2316      	movs	r3, #22
 800a70c:	6003      	str	r3, [r0, #0]
 800a70e:	2001      	movs	r0, #1
 800a710:	e7e7      	b.n	800a6e2 <_raise_r+0x12>
 800a712:	2400      	movs	r4, #0
 800a714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a718:	4628      	mov	r0, r5
 800a71a:	4798      	blx	r3
 800a71c:	2000      	movs	r0, #0
 800a71e:	e7e0      	b.n	800a6e2 <_raise_r+0x12>

0800a720 <raise>:
 800a720:	4b02      	ldr	r3, [pc, #8]	; (800a72c <raise+0xc>)
 800a722:	4601      	mov	r1, r0
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	f7ff bfd3 	b.w	800a6d0 <_raise_r>
 800a72a:	bf00      	nop
 800a72c:	200002f8 	.word	0x200002f8

0800a730 <_kill_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d07      	ldr	r5, [pc, #28]	; (800a750 <_kill_r+0x20>)
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	4611      	mov	r1, r2
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	f7f7 f987 	bl	8001a50 <_kill>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d102      	bne.n	800a74c <_kill_r+0x1c>
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	b103      	cbz	r3, 800a74c <_kill_r+0x1c>
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	bf00      	nop
 800a750:	20000740 	.word	0x20000740

0800a754 <_getpid_r>:
 800a754:	f7f7 b974 	b.w	8001a40 <_getpid>

0800a758 <_init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

0800a764 <_fini>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr
