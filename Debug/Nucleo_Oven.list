
Nucleo_Oven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08009f58  08009f58  00019f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a574  0800a574  00020498  2**0
                  CONTENTS
  4 .ARM          00000008  0800a574  0800a574  0001a574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a57c  0800a57c  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  0800a584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000498  0800aa1c  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  0800aa1c  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013abd  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bab  00000000  00000000  00033f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00036b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00037b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e37  00000000  00000000  00038ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c44  00000000  00000000  000518e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926a0  00000000  00000000  0006552b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7bcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  000f7c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000498 	.word	0x20000498
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f40 	.word	0x08009f40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000049c 	.word	0x2000049c
 80001dc:	08009f40 	.word	0x08009f40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10) == HAL_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	230a      	movs	r3, #10
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <_write+0x30>)
 8000ed2:	f003 fc76 	bl	80047c2 <HAL_UART_Transmit>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <_write+0x24>
		return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	e001      	b.n	8000ee4 <_write+0x28>
	return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000680 	.word	0x20000680

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fe92 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f85a 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f000 faa4 	bl	8001448 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000f00:	f000 f8be 	bl	8001080 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000f04:	f000 f8f2 	bl	80010ec <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000f08:	f000 fa74 	bl	80013f4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f0c:	f000 fa48 	bl	80013a0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f10:	f000 f9a6 	bl	8001260 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f14:	f000 f922 	bl	800115c <MX_TIM3_Init>
  MX_TIM9_Init();
 8000f18:	f000 fa08 	bl	800132c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <main+0x98>)
 8000f20:	f002 fcdc 	bl	80038dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000f24:	2104      	movs	r1, #4
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <main+0x98>)
 8000f28:	f002 fcd8 	bl	80038dc <HAL_TIM_PWM_Start>

  /* Make temperature sensor object */
  tempBottom = Custom_Tempsensor(&hspi3, TEMPSENSOR_DOWN_CS_Port, TEMPSENSOR_DOWN_CS_Pin, 300);
 8000f2c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f34:	4915      	ldr	r1, [pc, #84]	; (8000f8c <main+0x9c>)
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <main+0xa0>)
 8000f38:	f005 fade 	bl	80064f8 <Custom_Tempsensor>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <main+0xa4>)
 8000f40:	6013      	str	r3, [r2, #0]
  tempTop = Custom_Tempsensor(&hspi3, TEMPSENSOR_UP_CS_Port, TEMPSENSOR_UP_CS_Pin, 300);
 8000f42:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	4910      	ldr	r1, [pc, #64]	; (8000f8c <main+0x9c>)
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <main+0xa0>)
 8000f4e:	f005 fad3 	bl	80064f8 <Custom_Tempsensor>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <main+0xa8>)
 8000f56:	6013      	str	r3, [r2, #0]

  /* Initialize heater struct */
  heaterTop = Custom_HeaterControl(&htim3, TIM_CHANNEL_3);	// HU
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4810      	ldr	r0, [pc, #64]	; (8000f9c <main+0xac>)
 8000f5c:	f005 f900 	bl	8006160 <Custom_HeaterControl>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <main+0xb0>)
 8000f64:	6013      	str	r3, [r2, #0]
  heaterBottom = Custom_HeaterControl(&htim3, TIM_CHANNEL_2);	// HD
 8000f66:	2104      	movs	r1, #4
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <main+0xac>)
 8000f6a:	f005 f8f9 	bl	8006160 <Custom_HeaterControl>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <main+0xb4>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* Start HeaterControl interrupt */
  HAL_TIM_Base_Start_IT(&htim9);
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <main+0xb8>)
 8000f76:	f002 fbff 	bl	8003778 <HAL_TIM_Base_Start_IT>
  printf("Hello!\r\n");
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <main+0xbc>)
 8000f7c:	f006 fe4c 	bl	8007c18 <puts>
  Menu();
 8000f80:	f005 fcf8 	bl	8006974 <Menu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <main+0x94>
 8000f86:	bf00      	nop
 8000f88:	200005ac 	.word	0x200005ac
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	2000050c 	.word	0x2000050c
 8000f94:	200006c8 	.word	0x200006c8
 8000f98:	200006c4 	.word	0x200006c4
 8000f9c:	20000564 	.word	0x20000564
 8000fa0:	200006cc 	.word	0x200006cc
 8000fa4:	200006d0 	.word	0x200006d0
 8000fa8:	200005f4 	.word	0x200005f4
 8000fac:	08009f58 	.word	0x08009f58

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	; 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 f83c 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a26      	ldr	r2, [pc, #152]	; (8001078 <SystemClock_Config+0xc8>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <SystemClock_Config+0xc8>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a20      	ldr	r2, [pc, #128]	; (800107c <SystemClock_Config+0xcc>)
 8000ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <SystemClock_Config+0xcc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001020:	2308      	movs	r3, #8
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f94f 	bl	80022d8 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001040:	f000 fac4 	bl	80015cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2103      	movs	r1, #3
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fbb1 	bl	80027c8 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800106c:	f000 faae 	bl	80015cc <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	; 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_SPI2_Init+0x64>)
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <MX_SPI2_Init+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_SPI2_Init+0x64>)
 800108c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001090:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_SPI2_Init+0x64>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_SPI2_Init+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010a0:	2202      	movs	r2, #2
 80010a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010cc:	220a      	movs	r2, #10
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_SPI2_Init+0x64>)
 80010d2:	f001 fd59 	bl	8002b88 <HAL_SPI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010dc:	f000 fa76 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200004b4 	.word	0x200004b4
 80010e8:	40003800 	.word	0x40003800

080010ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_SPI3_Init+0x68>)
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <MX_SPI3_Init+0x6c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_SPI3_Init+0x68>)
 80010f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_SPI3_Init+0x68>)
 8001100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001104:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_SPI3_Init+0x68>)
 8001108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_SPI3_Init+0x68>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_SPI3_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_SPI3_Init+0x68>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_SPI3_Init+0x68>)
 8001124:	2238      	movs	r2, #56	; 0x38
 8001126:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_SPI3_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_SPI3_Init+0x68>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_SPI3_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_SPI3_Init+0x68>)
 800113c:	220a      	movs	r2, #10
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_SPI3_Init+0x68>)
 8001142:	f001 fd21 	bl	8002b88 <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800114c:	f000 fa3e 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000050c 	.word	0x2000050c
 8001158:	40003c00 	.word	0x40003c00

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_TIM3_Init+0xfc>)
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <MX_TIM3_Init+0x100>)
 8001190:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <MX_TIM3_Init+0xfc>)
 8001194:	f242 720f 	movw	r2, #9999	; 0x270f
 8001198:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <MX_TIM3_Init+0xfc>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b4:	4828      	ldr	r0, [pc, #160]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011b6:	f002 fa8f 	bl	80036d8 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011c0:	f000 fa04 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011d2:	f002 fe61 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011dc:	f000 f9f6 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011e0:	481d      	ldr	r0, [pc, #116]	; (8001258 <MX_TIM3_Init+0xfc>)
 80011e2:	f002 fb2b 	bl	800383c <HAL_TIM_PWM_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011ec:	f000 f9ee 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4619      	mov	r1, r3
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <MX_TIM3_Init+0xfc>)
 8001200:	f003 fa10 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800120a:	f000 f9df 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800120e:	2370      	movs	r3, #112	; 0x70
 8001210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2204      	movs	r2, #4
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_TIM3_Init+0xfc>)
 8001226:	f002 fd75 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001230:	f000 f9cc 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2208      	movs	r2, #8
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM3_Init+0xfc>)
 800123c:	f002 fd6a 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001246:	f000 f9c1 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM3_Init+0xfc>)
 800124c:	f000 faea 	bl	8001824 <HAL_TIM_MspPostInit>

}
 8001250:	bf00      	nop
 8001252:	3738      	adds	r7, #56	; 0x38
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000564 	.word	0x20000564
 800125c:	40000400 	.word	0x40000400

08001260 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_TIM4_Init+0xc4>)
 8001284:	4a28      	ldr	r2, [pc, #160]	; (8001328 <MX_TIM4_Init+0xc8>)
 8001286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8001288:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_TIM4_Init+0xc4>)
 800128a:	f242 720f 	movw	r2, #9999	; 0x270f
 800128e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_TIM4_Init+0xc4>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_TIM4_Init+0xc4>)
 8001298:	f242 720f 	movw	r2, #9999	; 0x270f
 800129c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_TIM4_Init+0xc4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_TIM4_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <MX_TIM4_Init+0xc4>)
 80012ac:	f002 fac6 	bl	800383c <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80012b6:	f000 f989 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	4619      	mov	r1, r3
 80012c8:	4816      	ldr	r0, [pc, #88]	; (8001324 <MX_TIM4_Init+0xc4>)
 80012ca:	f003 f9ab 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80012d4:	f000 f97a 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM4_Init+0xc4>)
 80012f0:	f002 fd10 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80012fa:	f000 f967 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2204      	movs	r2, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM4_Init+0xc4>)
 8001306:	f002 fd05 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001310:	f000 f95c 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM4_Init+0xc4>)
 8001316:	f000 fa85 	bl	8001824 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200005ac 	.word	0x200005ac
 8001328:	40000800 	.word	0x40000800

0800132c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_TIM9_Init+0x6c>)
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <MX_TIM9_Init+0x70>)
 8001342:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_TIM9_Init+0x6c>)
 8001346:	f242 720f 	movw	r2, #9999	; 0x270f
 800134a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_TIM9_Init+0x6c>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_TIM9_Init+0x6c>)
 8001354:	f242 720f 	movw	r2, #9999	; 0x270f
 8001358:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_TIM9_Init+0x6c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_TIM9_Init+0x6c>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <MX_TIM9_Init+0x6c>)
 8001368:	f002 f9b6 	bl	80036d8 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001372:	f000 f92b 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_TIM9_Init+0x6c>)
 8001382:	f002 fd89 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800138c:	f000 f91e 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200005f4 	.word	0x200005f4
 800139c:	40014000 	.word	0x40014000

080013a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART1_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART1_UART_Init+0x4c>)
 80013d8:	f003 f9a6 	bl	8004728 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f8f3 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000063c 	.word	0x2000063c
 80013f0:	40011000 	.word	0x40011000

080013f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART2_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800142c:	f003 f97c 	bl	8004728 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f000 f8c9 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000680 	.word	0x20000680
 8001444:	40004400 	.word	0x40004400

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b56      	ldr	r3, [pc, #344]	; (80015bc <MX_GPIO_Init+0x174>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a55      	ldr	r2, [pc, #340]	; (80015bc <MX_GPIO_Init+0x174>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <MX_GPIO_Init+0x174>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <MX_GPIO_Init+0x174>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a4e      	ldr	r2, [pc, #312]	; (80015bc <MX_GPIO_Init+0x174>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <MX_GPIO_Init+0x174>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <MX_GPIO_Init+0x174>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a47      	ldr	r2, [pc, #284]	; (80015bc <MX_GPIO_Init+0x174>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b45      	ldr	r3, [pc, #276]	; (80015bc <MX_GPIO_Init+0x174>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <MX_GPIO_Init+0x174>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a40      	ldr	r2, [pc, #256]	; (80015bc <MX_GPIO_Init+0x174>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <MX_GPIO_Init+0x174>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2112      	movs	r1, #18
 80014d2:	483b      	ldr	r0, [pc, #236]	; (80015c0 <MX_GPIO_Init+0x178>)
 80014d4:	f000 fee6 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2104      	movs	r1, #4
 80014dc:	4839      	ldr	r0, [pc, #228]	; (80015c4 <MX_GPIO_Init+0x17c>)
 80014de:	f000 fee1 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEMP_ADD_Pin|TEMP_ADU_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80014e8:	4836      	ldr	r0, [pc, #216]	; (80015c4 <MX_GPIO_Init+0x17c>)
 80014ea:	f000 fedb 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	4834      	ldr	r0, [pc, #208]	; (80015c8 <MX_GPIO_Init+0x180>)
 80014f6:	f000 fed5 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor2_Pin|Motor1_Pin|LAMP_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8001500:	482f      	ldr	r0, [pc, #188]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001502:	f000 fecf 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_DC_Pin;
 8001506:	2312      	movs	r3, #18
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4828      	ldr	r0, [pc, #160]	; (80015c0 <MX_GPIO_Init+0x178>)
 800151e:	f000 fd25 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8001522:	2304      	movs	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4822      	ldr	r0, [pc, #136]	; (80015c4 <MX_GPIO_Init+0x17c>)
 800153a:	f000 fd17 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP_ADD_Pin TEMP_ADU_Pin */
  GPIO_InitStruct.Pin = TEMP_ADD_Pin|TEMP_ADU_Pin;
 800153e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	481b      	ldr	r0, [pc, #108]	; (80015c4 <MX_GPIO_Init+0x17c>)
 8001558:	f000 fd08 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCFAN_Pin */
  GPIO_InitStruct.Pin = DCFAN_Pin;
 800155c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001562:	2311      	movs	r3, #17
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCFAN_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4814      	ldr	r0, [pc, #80]	; (80015c8 <MX_GPIO_Init+0x180>)
 8001576:	f000 fcf9 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor2_Pin Motor1_Pin LAMP_Pin */
  GPIO_InitStruct.Pin = Motor2_Pin|Motor1_Pin|LAMP_Pin;
 800157a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001580:	2311      	movs	r3, #17
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <MX_GPIO_Init+0x178>)
 8001594:	f000 fcea 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001598:	f44f 734e 	mov.w	r3, #824	; 0x338
 800159c:	617b      	str	r3, [r7, #20]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_GPIO_Init+0x17c>)
 80015ae:	f000 fcdd 	bl	8001f6c <HAL_GPIO_Init>

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_MspInit+0x4c>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_MspInit+0x4c>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_MspInit+0x4c>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_MspInit+0x4c>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_SPI_MspInit+0x128>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12d      	bne.n	80016a6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a40      	ldr	r2, [pc, #256]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	4b3a      	ldr	r3, [pc, #232]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a39      	ldr	r2, [pc, #228]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = OLED_SCK_Pin|OLED_MOSI_Pin;
 8001682:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001694:	2305      	movs	r3, #5
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	482e      	ldr	r0, [pc, #184]	; (8001758 <HAL_SPI_MspInit+0x130>)
 80016a0:	f000 fc64 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016a4:	e050      	b.n	8001748 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_SPI_MspInit+0x134>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d14b      	bne.n	8001748 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a26      	ldr	r2, [pc, #152]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4a18      	ldr	r2, [pc, #96]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6313      	str	r3, [r2, #48]	; 0x30
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_SPI_MspInit+0x12c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_SCK_Pin;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001716:	2307      	movs	r3, #7
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SCK_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <HAL_SPI_MspInit+0x130>)
 8001722:	f000 fc23 	bl	8001f6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP_SO_Pin;
 8001726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001738:	2306      	movs	r3, #6
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_SO_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <HAL_SPI_MspInit+0x138>)
 8001744:	f000 fc12 	bl	8001f6c <HAL_GPIO_Init>
}
 8001748:	bf00      	nop
 800174a:	3730      	adds	r7, #48	; 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40003800 	.word	0x40003800
 8001754:	40023800 	.word	0x40023800
 8001758:	40020400 	.word	0x40020400
 800175c:	40003c00 	.word	0x40003c00
 8001760:	40020800 	.word	0x40020800

08001764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_TIM_Base_MspInit+0x70>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d10e      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001792:	e01a      	b.n	80017ca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_TIM_Base_MspInit+0x78>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d115      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_TIM_Base_MspInit+0x74>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2018      	movs	r0, #24
 80017c0:	f000 fb9d 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017c4:	2018      	movs	r0, #24
 80017c6:	f000 fbb6 	bl	8001f36 <HAL_NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40014000 	.word	0x40014000

080017e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0b      	ldr	r2, [pc, #44]	; (800181c <HAL_TIM_PWM_MspInit+0x3c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10d      	bne.n	800180e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_TIM_PWM_MspInit+0x40>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_TIM_PWM_MspInit+0x40>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <HAL_TIM_PWM_MspInit+0x40>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40000800 	.word	0x40000800
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <HAL_TIM_MspPostInit+0xb0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11f      	bne.n	8001886 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_TIM_MspPostInit+0xb4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <HAL_TIM_MspPostInit+0xb4>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_TIM_MspPostInit+0xb4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = HD_Pin|HU_Pin;
 8001862:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001868:	2312      	movs	r3, #18
 800186a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001874:	2302      	movs	r3, #2
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <HAL_TIM_MspPostInit+0xb8>)
 8001880:	f000 fb74 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001884:	e022      	b.n	80018cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <HAL_TIM_MspPostInit+0xbc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d11d      	bne.n	80018cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_TIM_MspPostInit+0xb4>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_TIM_MspPostInit+0xb4>)
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_TIM_MspPostInit+0xb4>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LEDR_Pin|LEDB_Pin;
 80018ac:	23c0      	movs	r3, #192	; 0xc0
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018bc:	2302      	movs	r3, #2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <HAL_TIM_MspPostInit+0xc0>)
 80018c8:	f000 fb50 	bl	8001f6c <HAL_GPIO_Init>
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40000800 	.word	0x40000800
 80018e4:	40020400 	.word	0x40020400

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <HAL_UART_MspInit+0xe8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12d      	bne.n	8001966 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a29      	ldr	r2, [pc, #164]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001942:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001954:	2307      	movs	r3, #7
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	481e      	ldr	r0, [pc, #120]	; (80019d8 <HAL_UART_MspInit+0xf0>)
 8001960:	f000 fb04 	bl	8001f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001964:	e030      	b.n	80019c8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_UART_MspInit+0xf4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d12b      	bne.n	80019c8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_UART_MspInit+0xec>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_UART_MspInit+0xec>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a8:	230c      	movs	r3, #12
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b8:	2307      	movs	r3, #7
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_UART_MspInit+0xf0>)
 80019c4:	f000 fad2 	bl	8001f6c <HAL_GPIO_Init>
}
 80019c8:	bf00      	nop
 80019ca:	3730      	adds	r7, #48	; 0x30
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40004400 	.word	0x40004400

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Systick_Sensor_IRQ();
 8001a2c:	f004 fd3e 	bl	80064ac <Systick_Sensor_IRQ>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f946 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
  HeaterControl_TIM9_IRQ();
 8001a3c:	f004 fb60 	bl	8006100 <HeaterControl_TIM9_IRQ>
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001a42:	f002 f85f 	bl	8003b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200005f4 	.word	0x200005f4

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_kill>:

int _kill(int pid, int sig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a6a:	f005 fab5 	bl	8006fd8 <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2216      	movs	r2, #22
 8001a72:	601a      	str	r2, [r3, #0]
	return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe7 	bl	8001a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_isatty>:

int _isatty(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f005 fa36 	bl	8006fd8 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20020000 	.word	0x20020000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	200006d4 	.word	0x200006d4
 8001ba0:	20000710 	.word	0x20000710

08001ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bcc:	480d      	ldr	r0, [pc, #52]	; (8001c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bce:	490e      	ldr	r1, [pc, #56]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001be4:	4c0b      	ldr	r4, [pc, #44]	; (8001c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bf2:	f7ff ffd7 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f005 f9f5 	bl	8006fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff f979 	bl	8000ef0 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000498 	.word	0x20000498
  ldr r2, =_sidata
 8001c0c:	0800a584 	.word	0x0800a584
  ldr r2, =_sbss
 8001c10:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 8001c14:	2000070c 	.word	0x2000070c

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 f94f 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff fcc2 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f967 	bl	8001f52 <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f92f 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	200006d8 	.word	0x200006d8

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	200006d8 	.word	0x200006d8

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <__NVIC_EnableIRQ+0x38>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff8e 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff3e 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff8e 	bl	8001e3c <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5d 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff31 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e159      	b.n	800223c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8148 	bne.w	8002236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80a2 	beq.w	8002236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a56      	ldr	r2, [pc, #344]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_GPIO_Init+0x2e8>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210e:	4a52      	ldr	r2, [pc, #328]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <HAL_GPIO_Init+0x2f0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d019      	beq.n	800216e <HAL_GPIO_Init+0x202>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a48      	ldr	r2, [pc, #288]	; (8002260 <HAL_GPIO_Init+0x2f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_GPIO_Init+0x1fe>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a47      	ldr	r2, [pc, #284]	; (8002264 <HAL_GPIO_Init+0x2f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00d      	beq.n	8002166 <HAL_GPIO_Init+0x1fa>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a46      	ldr	r2, [pc, #280]	; (8002268 <HAL_GPIO_Init+0x2fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <HAL_GPIO_Init+0x1f6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a45      	ldr	r2, [pc, #276]	; (800226c <HAL_GPIO_Init+0x300>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d101      	bne.n	800215e <HAL_GPIO_Init+0x1f2>
 800215a:	2304      	movs	r3, #4
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800215e:	2307      	movs	r3, #7
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x204>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x204>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x2ec>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218e:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x304>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_GPIO_Init+0x304>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002230:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_GPIO_Init+0x304>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f aea2 	bls.w	8001f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40013c00 	.word	0x40013c00

08002274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e001      	b.n	8002296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c0:	e003      	b.n	80022ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	041a      	lsls	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e267      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d075      	beq.n	80023e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d00c      	beq.n	800231c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4b85      	ldr	r3, [pc, #532]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	2b08      	cmp	r3, #8
 800230c:	d112      	bne.n	8002334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4b82      	ldr	r3, [pc, #520]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800231a:	d10b      	bne.n	8002334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05b      	beq.n	80023e0 <HAL_RCC_OscConfig+0x108>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d157      	bne.n	80023e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e242      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x74>
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xb0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b70      	ldr	r3, [pc, #448]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6f      	ldr	r2, [pc, #444]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6c      	ldr	r2, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xb0>
 8002370:	4b69      	ldr	r3, [pc, #420]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a68      	ldr	r2, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a65      	ldr	r2, [pc, #404]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fcaa 	bl	8001ce8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fca6 	bl	8001ce8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e207      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b5b      	ldr	r3, [pc, #364]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xc0>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff fc96 	bl	8001ce8 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff fc92 	bl	8001ce8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1f3      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0xe8>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x152>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1c7      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_RCC_OscConfig+0x244>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7ff fc4b 	bl	8001ce8 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff fc47 	bl	8001ce8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1a8      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4925      	ldr	r1, [pc, #148]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x244>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fc2a 	bl	8001ce8 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff fc26 	bl	8001ce8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e187      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d036      	beq.n	8002530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCC_OscConfig+0x248>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7ff fc0a 	bl	8001ce8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d8:	f7ff fc06 	bl	8001ce8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e167      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_OscConfig+0x240>)
 80024ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x200>
 80024f6:	e01b      	b.n	8002530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_OscConfig+0x248>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fbf3 	bl	8001ce8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e00e      	b.n	8002524 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002506:	f7ff fbef 	bl	8001ce8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d907      	bls.n	8002524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e150      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
 8002518:	40023800 	.word	0x40023800
 800251c:	42470000 	.word	0x42470000
 8002520:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ea      	bne.n	8002506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8097 	beq.w	800266c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b81      	ldr	r3, [pc, #516]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b7d      	ldr	r3, [pc, #500]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a7c      	ldr	r2, [pc, #496]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_RCC_OscConfig+0x474>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d118      	bne.n	80025ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b74      	ldr	r3, [pc, #464]	; (800274c <HAL_RCC_OscConfig+0x474>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a73      	ldr	r2, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x474>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7ff fbaf 	bl	8001ce8 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7ff fbab 	bl	8001ce8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e10c      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x474>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2ea>
 80025b4:	4b64      	ldr	r3, [pc, #400]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a63      	ldr	r2, [pc, #396]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	e01c      	b.n	80025fc <HAL_RCC_OscConfig+0x324>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x30c>
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a5e      	ldr	r2, [pc, #376]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0x324>
 80025e4:	4b58      	ldr	r3, [pc, #352]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a57      	ldr	r2, [pc, #348]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a54      	ldr	r2, [pc, #336]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 0304 	bic.w	r3, r3, #4
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d015      	beq.n	8002630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7ff fb70 	bl	8001ce8 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7ff fb6c 	bl	8001ce8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0cb      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002622:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ee      	beq.n	800260c <HAL_RCC_OscConfig+0x334>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7ff fb5a 	bl	8001ce8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7ff fb56 	bl	8001ce8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0b5      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264e:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ee      	bne.n	8002638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a38      	ldr	r2, [pc, #224]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a1 	beq.w	80027b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002676:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b08      	cmp	r3, #8
 8002680:	d05c      	beq.n	800273c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d141      	bne.n	800270e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCC_OscConfig+0x478>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fb2a 	bl	8001ce8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff fb26 	bl	8001ce8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e087      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	019b      	lsls	r3, r3, #6
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	3b01      	subs	r3, #1
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	491b      	ldr	r1, [pc, #108]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x478>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7ff faff 	bl	8001ce8 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff fafb 	bl	8001ce8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e05c      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x416>
 800270c:	e054      	b.n	80027b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_RCC_OscConfig+0x478>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fae8 	bl	8001ce8 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff fae4 	bl	8001ce8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e045      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCC_OscConfig+0x470>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x444>
 800273a:	e03d      	b.n	80027b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e038      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000
 8002750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x4ec>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d028      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d121      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d11a      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278c:	4293      	cmp	r3, r2
 800278e:	d111      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	3b01      	subs	r3, #1
 800279e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cc      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d90c      	bls.n	8002804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b65      	ldr	r3, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800283e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d044      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d119      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e067      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4934      	ldr	r1, [pc, #208]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff fa16 	bl	8001ce8 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff fa12 	bl	8001ce8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d20c      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f976 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023c00 	.word	0x40023c00
 8002984:	40023800 	.word	0x40023800
 8002988:	0800a180 	.word	0x0800a180
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002998:	b090      	sub	sp, #64	; 0x40
 800299a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
 80029a0:	2300      	movs	r3, #0
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a4:	2300      	movs	r3, #0
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d00d      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x40>
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	f200 80a1 	bhi.w	8002b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x34>
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x3a>
 80029c6:	e09b      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80029cc:	e09b      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029d2:	e098      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d4:	4b4f      	ldr	r3, [pc, #316]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029de:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	2200      	movs	r2, #0
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	627a      	str	r2, [r7, #36]	; 0x24
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029fc:	2100      	movs	r1, #0
 80029fe:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a00:	fb03 f201 	mul.w	r2, r3, r1
 8002a04:	2300      	movs	r3, #0
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a43      	ldr	r2, [pc, #268]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a14:	460a      	mov	r2, r1
 8002a16:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	4413      	add	r3, r2
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	2200      	movs	r2, #0
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	61fa      	str	r2, [r7, #28]
 8002a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a2e:	f7fe f8c3 	bl	8000bb8 <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4613      	mov	r3, r2
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3a:	e053      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	2200      	movs	r2, #0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	617a      	str	r2, [r7, #20]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a4e:	f04f 0b00 	mov.w	fp, #0
 8002a52:	4652      	mov	r2, sl
 8002a54:	465b      	mov	r3, fp
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a64:	0150      	lsls	r0, r2, #5
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a86:	ebb2 0408 	subs.w	r4, r2, r8
 8002a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	00eb      	lsls	r3, r5, #3
 8002a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9c:	00e2      	lsls	r2, r4, #3
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	eb14 030a 	adds.w	r3, r4, sl
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	eb45 030b 	adc.w	r3, r5, fp
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aba:	4629      	mov	r1, r5
 8002abc:	028b      	lsls	r3, r1, #10
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	028a      	lsls	r2, r1, #10
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	60fa      	str	r2, [r7, #12]
 8002ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad8:	f7fe f86e 	bl	8000bb8 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	3301      	adds	r3, #1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002afe:	e002      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3740      	adds	r7, #64	; 0x40
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	00f42400 	.word	0x00f42400
 8002b1c:	017d7840 	.word	0x017d7840

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000000 	.word	0x20000000

08002b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b3c:	f7ff fff0 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0a9b      	lsrs	r3, r3, #10
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4903      	ldr	r1, [pc, #12]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	0800a190 	.word	0x0800a190

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b64:	f7ff ffdc 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0b5b      	lsrs	r3, r3, #13
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	0800a190 	.word	0x0800a190

08002b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07b      	b.n	8002c92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002baa:	d009      	beq.n	8002bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
 8002bb2:	e005      	b.n	8002bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fd24 	bl	8001628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0104 	and.w	r1, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0210 	and.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b088      	sub	sp, #32
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_SPI_Transmit+0x22>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e126      	b.n	8002f0a <HAL_SPI_Transmit+0x270>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cc4:	f7ff f810 	bl	8001ce8 <HAL_GetTick>
 8002cc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cde:	e10b      	b.n	8002ef8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Transmit+0x52>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf0:	e102      	b.n	8002ef8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d38:	d10f      	bne.n	8002d5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d007      	beq.n	8002d78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d80:	d14b      	bne.n	8002e1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_SPI_Transmit+0xf6>
 8002d8a:	8afb      	ldrh	r3, [r7, #22]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d13e      	bne.n	8002e0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002db4:	e02b      	b.n	8002e0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d112      	bne.n	8002dea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	1c9a      	adds	r2, r3, #2
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de8:	e011      	b.n	8002e0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dea:	f7fe ff7d 	bl	8001ce8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d803      	bhi.n	8002e02 <HAL_SPI_Transmit+0x168>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d102      	bne.n	8002e08 <HAL_SPI_Transmit+0x16e>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e0c:	e074      	b.n	8002ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1ce      	bne.n	8002db6 <HAL_SPI_Transmit+0x11c>
 8002e18:	e04c      	b.n	8002eb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_SPI_Transmit+0x18e>
 8002e22:	8afb      	ldrh	r3, [r7, #22]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d140      	bne.n	8002eaa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	7812      	ldrb	r2, [r2, #0]
 8002e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e4e:	e02c      	b.n	8002eaa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d113      	bne.n	8002e86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e84:	e011      	b.n	8002eaa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e86:	f7fe ff2f 	bl	8001ce8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d803      	bhi.n	8002e9e <HAL_SPI_Transmit+0x204>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d102      	bne.n	8002ea4 <HAL_SPI_Transmit+0x20a>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea8:	e026      	b.n	8002ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1cd      	bne.n	8002e50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fbcb 	bl	8003654 <SPI_EndRxTxTransaction>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e000      	b.n	8002ef8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b088      	sub	sp, #32
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2e:	d112      	bne.n	8002f56 <HAL_SPI_Receive+0x44>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10e      	bne.n	8002f56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f8f1 	bl	8003134 <HAL_SPI_TransmitReceive>
 8002f52:	4603      	mov	r3, r0
 8002f54:	e0ea      	b.n	800312c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_SPI_Receive+0x52>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e0e3      	b.n	800312c <HAL_SPI_Receive+0x21a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6c:	f7fe febc 	bl	8001ce8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f82:	e0ca      	b.n	800311a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Receive+0x7e>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f94:	e0c1      	b.n	800311a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fdc:	d10f      	bne.n	8002ffe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d007      	beq.n	800301c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d162      	bne.n	80030ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003024:	e02e      	b.n	8003084 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d115      	bne.n	8003060 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f103 020c 	add.w	r2, r3, #12
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800305e:	e011      	b.n	8003084 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003060:	f7fe fe42 	bl	8001ce8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d803      	bhi.n	8003078 <HAL_SPI_Receive+0x166>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d102      	bne.n	800307e <HAL_SPI_Receive+0x16c>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003082:	e04a      	b.n	800311a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1cb      	bne.n	8003026 <HAL_SPI_Receive+0x114>
 800308e:	e031      	b.n	80030f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d113      	bne.n	80030c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	b292      	uxth	r2, r2
 80030aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	1c9a      	adds	r2, r3, #2
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030c4:	e011      	b.n	80030ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c6:	f7fe fe0f 	bl	8001ce8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d803      	bhi.n	80030de <HAL_SPI_Receive+0x1cc>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d102      	bne.n	80030e4 <HAL_SPI_Receive+0x1d2>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030e8:	e017      	b.n	800311a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1cd      	bne.n	8003090 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fa45 	bl	8003588 <SPI_EndRxTransaction>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
 8003116:	e000      	b.n	800311a <HAL_SPI_Receive+0x208>
  }

error :
 8003118:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_SPI_TransmitReceive+0x26>
 8003156:	2302      	movs	r3, #2
 8003158:	e18a      	b.n	8003470 <HAL_SPI_TransmitReceive+0x33c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003162:	f7fe fdc1 	bl	8001ce8 <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800317c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003180:	2b01      	cmp	r3, #1
 8003182:	d00f      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x70>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800318a:	d107      	bne.n	800319c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <HAL_SPI_TransmitReceive+0x68>
 8003194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003198:	2b04      	cmp	r3, #4
 800319a:	d003      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031a2:	e15b      	b.n	800345c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x82>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x82>
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031bc:	e14e      	b.n	800345c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2205      	movs	r2, #5
 80031ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	887a      	ldrh	r2, [r7, #2]
 80031fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d007      	beq.n	8003226 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322e:	d178      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_TransmitReceive+0x10a>
 8003238:	8b7b      	ldrh	r3, [r7, #26]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d166      	bne.n	800330c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	1c9a      	adds	r2, r3, #2
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003262:	e053      	b.n	800330c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d11b      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x176>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x176>
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d113      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	881a      	ldrh	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x1b8>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	b292      	uxth	r2, r2
 80032ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032ec:	f7fe fcfc 	bl	8001ce8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d807      	bhi.n	800330c <HAL_SPI_TransmitReceive+0x1d8>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d003      	beq.n	800330c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800330a:	e0a7      	b.n	800345c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1a6      	bne.n	8003264 <HAL_SPI_TransmitReceive+0x130>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1a1      	bne.n	8003264 <HAL_SPI_TransmitReceive+0x130>
 8003320:	e07c      	b.n	800341c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x1fc>
 800332a:	8b7b      	ldrh	r3, [r7, #26]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d16b      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003356:	e057      	b.n	8003408 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d11c      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x26c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x26c>
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d114      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	7812      	ldrb	r2, [r2, #0]
 8003382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d119      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x2ae>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d014      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033de:	2301      	movs	r3, #1
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033e2:	f7fe fc81 	bl	8001ce8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d803      	bhi.n	80033fa <HAL_SPI_TransmitReceive+0x2c6>
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d102      	bne.n	8003400 <HAL_SPI_TransmitReceive+0x2cc>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003406:	e029      	b.n	800345c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1a2      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x224>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d19d      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f917 	bl	8003654 <SPI_EndRxTxTransaction>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d006      	beq.n	800343a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003438:	e010      	b.n	800345c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10b      	bne.n	800345a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	e000      	b.n	800345c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800345a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800346c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003470:	4618      	mov	r0, r3
 8003472:	3730      	adds	r7, #48	; 0x30
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003488:	f7fe fc2e 	bl	8001ce8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4413      	add	r3, r2
 8003496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003498:	f7fe fc26 	bl	8001ce8 <HAL_GetTick>
 800349c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	015b      	lsls	r3, r3, #5
 80034a4:	0d1b      	lsrs	r3, r3, #20
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ae:	e054      	b.n	800355a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d050      	beq.n	800355a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b8:	f7fe fc16 	bl	8001ce8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d902      	bls.n	80034ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d13d      	bne.n	800354a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e6:	d111      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x94>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	d004      	beq.n	80034fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d107      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003514:	d10f      	bne.n	8003536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e017      	b.n	800357a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3b01      	subs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	429a      	cmp	r2, r3
 8003576:	d19b      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359c:	d111      	bne.n	80035c2 <SPI_EndRxTransaction+0x3a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a6:	d004      	beq.n	80035b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b0:	d107      	bne.n	80035c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ca:	d12a      	bne.n	8003622 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d4:	d012      	beq.n	80035fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2200      	movs	r2, #0
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff49 	bl	8003478 <SPI_WaitFlagStateUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02d      	beq.n	8003648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e026      	b.n	800364a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2200      	movs	r2, #0
 8003604:	2101      	movs	r1, #1
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f7ff ff36 	bl	8003478 <SPI_WaitFlagStateUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01a      	beq.n	8003648 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e013      	b.n	800364a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	2101      	movs	r1, #1
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff ff23 	bl	8003478 <SPI_WaitFlagStateUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e000      	b.n	800364a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <SPI_EndRxTxTransaction+0x7c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <SPI_EndRxTxTransaction+0x80>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0d5b      	lsrs	r3, r3, #21
 800366c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367e:	d112      	bne.n	80036a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2200      	movs	r2, #0
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff fef4 	bl	8003478 <SPI_WaitFlagStateUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00f      	b.n	80036c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d0f2      	beq.n	80036a6 <SPI_EndRxTxTransaction+0x52>
 80036c0:	e000      	b.n	80036c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80036c2:	bf00      	nop
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000
 80036d4:	165e9f81 	.word	0x165e9f81

080036d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e041      	b.n	800376e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe f830 	bl	8001764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f000 fcb8 	bl	800408c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d001      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e044      	b.n	800381a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_TIM_Base_Start_IT+0xb0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x6c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d013      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x6c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_TIM_Base_Start_IT+0xb4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x6c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a19      	ldr	r2, [pc, #100]	; (8003830 <HAL_TIM_Base_Start_IT+0xb8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x6c>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_TIM_Base_Start_IT+0xbc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x6c>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_TIM_Base_Start_IT+0xc0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d010      	beq.n	8003818 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003806:	e007      	b.n	8003818 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40014000 	.word	0x40014000

0800383c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e041      	b.n	80038d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd ffbc 	bl	80017e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f000 fc06 	bl	800408c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_TIM_PWM_Start+0x24>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e022      	b.n	8003946 <HAL_TIM_PWM_Start+0x6a>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d109      	bne.n	800391a <HAL_TIM_PWM_Start+0x3e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	e015      	b.n	8003946 <HAL_TIM_PWM_Start+0x6a>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d109      	bne.n	8003934 <HAL_TIM_PWM_Start+0x58>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e008      	b.n	8003946 <HAL_TIM_PWM_Start+0x6a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e068      	b.n	8003a20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <HAL_TIM_PWM_Start+0x82>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	e013      	b.n	8003986 <HAL_TIM_PWM_Start+0xaa>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d104      	bne.n	800396e <HAL_TIM_PWM_Start+0x92>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800396c:	e00b      	b.n	8003986 <HAL_TIM_PWM_Start+0xaa>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d104      	bne.n	800397e <HAL_TIM_PWM_Start+0xa2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800397c:	e003      	b.n	8003986 <HAL_TIM_PWM_Start+0xaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fe22 	bl	80045d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <HAL_TIM_PWM_Start+0x14c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d107      	bne.n	80039ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_TIM_PWM_Start+0x14c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_TIM_PWM_Start+0x10e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d013      	beq.n	80039ea <HAL_TIM_PWM_Start+0x10e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_TIM_PWM_Start+0x150>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_TIM_PWM_Start+0x10e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_TIM_PWM_Start+0x154>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_TIM_PWM_Start+0x10e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a16      	ldr	r2, [pc, #88]	; (8003a34 <HAL_TIM_PWM_Start+0x158>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_TIM_PWM_Start+0x10e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <HAL_TIM_PWM_Start+0x15c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d111      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d010      	beq.n	8003a1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	e007      	b.n	8003a1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40014000 	.word	0x40014000

08003a3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fdc2 	bl	80045d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_TIM_PWM_Stop+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d117      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x52>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	f240 4344 	movw	r3, #1092	; 0x444
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_PWM_Stop+0x52>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10f      	bne.n	8003abe <HAL_TIM_PWM_Stop+0x82>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_PWM_Stop+0x82>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Stop+0x92>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	e013      	b.n	8003af6 <HAL_TIM_PWM_Stop+0xba>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Stop+0xa2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	e00b      	b.n	8003af6 <HAL_TIM_PWM_Stop+0xba>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Stop+0xb2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aec:	e003      	b.n	8003af6 <HAL_TIM_PWM_Stop+0xba>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40010000 	.word	0x40010000

08003b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa81 	bl	800404e <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fa73 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa84 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0204 	mvn.w	r2, #4
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa57 	bl	800404e <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa49 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa5a 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0208 	mvn.w	r2, #8
 8003bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa2d 	bl	800404e <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa1f 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fa30 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0210 	mvn.w	r2, #16
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2208      	movs	r2, #8
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa03 	bl	800404e <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9f5 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fa06 	bl	8004062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0201 	mvn.w	r2, #1
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9cf 	bl	8004026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b80      	cmp	r3, #128	; 0x80
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd30 	bl	8004714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9cb 	bl	8004076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0220 	mvn.w	r2, #32
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fcfa 	bl	8004700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0ae      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	f200 809f 	bhi.w	8003e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003e81 	.word	0x08003e81
 8003d50:	08003e81 	.word	0x08003e81
 8003d54:	08003e81 	.word	0x08003e81
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003e81 	.word	0x08003e81
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003e81 	.word	0x08003e81
 8003d68:	08003dff 	.word	0x08003dff
 8003d6c:	08003e81 	.word	0x08003e81
 8003d70:	08003e81 	.word	0x08003e81
 8003d74:	08003e81 	.word	0x08003e81
 8003d78:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa02 	bl	800418c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e064      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fa48 	bl	8004258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
      break;
 8003dfc:	e043      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fa93 	bl	8004330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      break;
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fadd 	bl	8004404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	61da      	str	r2, [r3, #28]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0b4      	b.n	800401e <HAL_TIM_ConfigClockSource+0x186>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eec:	d03e      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xd4>
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef2:	f200 8087 	bhi.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	f000 8086 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x172>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d87f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d01a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xa6>
 8003f08:	2b70      	cmp	r3, #112	; 0x70
 8003f0a:	d87b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b60      	cmp	r3, #96	; 0x60
 8003f0e:	d050      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f10:	2b60      	cmp	r3, #96	; 0x60
 8003f12:	d877      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b50      	cmp	r3, #80	; 0x50
 8003f16:	d03c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0xfa>
 8003f18:	2b50      	cmp	r3, #80	; 0x50
 8003f1a:	d873      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d058      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d86f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d064      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b30      	cmp	r3, #48	; 0x30
 8003f2a:	d86b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d060      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d867      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d05a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	e062      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f000 fb23 	bl	8004598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
      break;
 8003f6a:	e04f      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f000 fb0c 	bl	8004598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8e:	609a      	str	r2, [r3, #8]
      break;
 8003f90:	e03c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fa80 	bl	80044a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2150      	movs	r1, #80	; 0x50
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fad9 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e02c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 fa9f 	bl	8004502 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2160      	movs	r1, #96	; 0x60
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fac9 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e01c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f000 fa60 	bl	80044a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	; 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fab9 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003ff0:	e00c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 fab0 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8004002:	e003      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e000      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800400a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a34      	ldr	r2, [pc, #208]	; (8004170 <TIM_Base_SetConfig+0xe4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <TIM_Base_SetConfig+0x38>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040aa:	d00b      	beq.n	80040c4 <TIM_Base_SetConfig+0x38>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a31      	ldr	r2, [pc, #196]	; (8004174 <TIM_Base_SetConfig+0xe8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_Base_SetConfig+0x38>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a30      	ldr	r2, [pc, #192]	; (8004178 <TIM_Base_SetConfig+0xec>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0x38>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a2f      	ldr	r2, [pc, #188]	; (800417c <TIM_Base_SetConfig+0xf0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a25      	ldr	r2, [pc, #148]	; (8004170 <TIM_Base_SetConfig+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01b      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d017      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a22      	ldr	r2, [pc, #136]	; (8004174 <TIM_Base_SetConfig+0xe8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <TIM_Base_SetConfig+0xec>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00f      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a20      	ldr	r2, [pc, #128]	; (800417c <TIM_Base_SetConfig+0xf0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <TIM_Base_SetConfig+0xf4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <TIM_Base_SetConfig+0xf8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x8a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <TIM_Base_SetConfig+0xfc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d108      	bne.n	8004128 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a08      	ldr	r2, [pc, #32]	; (8004170 <TIM_Base_SetConfig+0xe4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d103      	bne.n	800415c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	615a      	str	r2, [r3, #20]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40000c00 	.word	0x40000c00
 8004180:	40014000 	.word	0x40014000
 8004184:	40014400 	.word	0x40014400
 8004188:	40014800 	.word	0x40014800

0800418c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0302 	bic.w	r3, r3, #2
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <TIM_OC1_SetConfig+0xc8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10c      	bne.n	8004202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0308 	bic.w	r3, r3, #8
 80041ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <TIM_OC1_SetConfig+0xc8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d111      	bne.n	800422e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40010000 	.word	0x40010000

08004258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0320 	bic.w	r3, r3, #32
 80042a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	; (800432c <TIM_OC2_SetConfig+0xd4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10d      	bne.n	80042d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a15      	ldr	r2, [pc, #84]	; (800432c <TIM_OC2_SetConfig+0xd4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d113      	bne.n	8004304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000

08004330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <TIM_OC3_SetConfig+0xd0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10d      	bne.n	80043aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a14      	ldr	r2, [pc, #80]	; (8004400 <TIM_OC3_SetConfig+0xd0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d113      	bne.n	80043da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	031b      	lsls	r3, r3, #12
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <TIM_OC4_SetConfig+0x9c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d109      	bne.n	8004478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000

080044a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0210 	bic.w	r2, r3, #16
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800452c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800453e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	f043 0307 	orr.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e050      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d013      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10c      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40014000 	.word	0x40014000

08004700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e03f      	b.n	80047ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd f8ca 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2224      	movs	r2, #36	; 0x24
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f929 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d17c      	bne.n	80048dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x2c>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e075      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Transmit+0x3e>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e06e      	b.n	80048de <HAL_UART_Transmit+0x11c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004816:	f7fd fa67 	bl	8001ce8 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d108      	bne.n	8004844 <HAL_UART_Transmit+0x82>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e003      	b.n	800484c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004854:	e02a      	b.n	80048ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f840 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e036      	b.n	80048de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e007      	b.n	800489e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1cf      	bne.n	8004856 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	; 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f810 	bl	80048e6 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	e000      	b.n	80048de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
  }
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b090      	sub	sp, #64	; 0x40
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f6:	e050      	b.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d04c      	beq.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <UART_WaitOnFlagUntilTimeout+0x30>
 8004906:	f7fd f9ef 	bl	8001ce8 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004912:	429a      	cmp	r2, r3
 8004914:	d241      	bcs.n	800499a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004936:	637a      	str	r2, [r7, #52]	; 0x34
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	613b      	str	r3, [r7, #16]
   return(result);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496a:	623a      	str	r2, [r7, #32]
 800496c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	61bb      	str	r3, [r7, #24]
   return(result);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e00f      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	bf0c      	ite	eq
 80049aa:	2301      	moveq	r3, #1
 80049ac:	2300      	movne	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d09f      	beq.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3740      	adds	r7, #64	; 0x40
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	; 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7fe f87c 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7fe f863 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	; 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b08:	f7fc f856 	bl	8000bb8 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9e:	f7fc f80b 	bl	8000bb8 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	; 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c5a:	f7fb ffad 	bl	8000bb8 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e105      	b.n	8004e9a <UART_SetConfig+0x4d6>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d1c:	f7fb ff4c 	bl	8000bb8 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dba:	f7fb fefd 	bl	8000bb8 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	2164      	movs	r1, #100	; 0x64
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	3332      	adds	r3, #50	; 0x32
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de2:	441c      	add	r4, r3
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	673b      	str	r3, [r7, #112]	; 0x70
 8004dec:	677a      	str	r2, [r7, #116]	; 0x74
 8004dee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004df2:	4642      	mov	r2, r8
 8004df4:	464b      	mov	r3, r9
 8004df6:	1891      	adds	r1, r2, r2
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	415b      	adcs	r3, r3
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e02:	4641      	mov	r1, r8
 8004e04:	1851      	adds	r1, r2, r1
 8004e06:	6039      	str	r1, [r7, #0]
 8004e08:	4649      	mov	r1, r9
 8004e0a:	414b      	adcs	r3, r1
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	00cb      	lsls	r3, r1, #3
 8004e1e:	4651      	mov	r1, sl
 8004e20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e24:	4651      	mov	r1, sl
 8004e26:	00ca      	lsls	r2, r1, #3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4642      	mov	r2, r8
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e34:	464b      	mov	r3, r9
 8004e36:	460a      	mov	r2, r1
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	663b      	str	r3, [r7, #96]	; 0x60
 8004e48:	667a      	str	r2, [r7, #100]	; 0x64
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e56:	4649      	mov	r1, r9
 8004e58:	008b      	lsls	r3, r1, #2
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e60:	4641      	mov	r1, r8
 8004e62:	008a      	lsls	r2, r1, #2
 8004e64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e68:	f7fb fea6 	bl	8000bb8 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e72:	fba3 1302 	umull	r1, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2164      	movs	r1, #100	; 0x64
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	3332      	adds	r3, #50	; 0x32
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4422      	add	r2, r4
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	bf00      	nop
 8004e9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <OLED_CS_Set>:
		0x7C, 0x7C, 0x7C, 0x7C, 0x7C, //Full Square(/Q)
		0x7C, 0x44, 0x44, 0x44, 0x7C, //Empty Square(/q)
		0x38, 0x7C, 0x7C, 0x7C, 0x38, //Full Circle(/*)
};

static void inline OLED_CS_Set(uint8_t state){
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, state);
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2104      	movs	r1, #4
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <OLED_CS_Set+0x20>)
 8004ebe:	f7fd f9f1 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40020400 	.word	0x40020400

08004ed0 <OLED_DC_Set>:

static void inline OLED_DC_Set(uint8_t state){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, state);
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	461a      	mov	r2, r3
 8004ede:	2110      	movs	r1, #16
 8004ee0:	4803      	ldr	r0, [pc, #12]	; (8004ef0 <OLED_DC_Set+0x20>)
 8004ee2:	f7fd f9df 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40020000 	.word	0x40020000

08004ef4 <OLED_RS_Set>:

static void inline OLED_RS_Set(uint8_t state){
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(OLED_RS_GPIO_Port, OLED_RS_Pin, state);
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	461a      	mov	r2, r3
 8004f02:	2102      	movs	r1, #2
 8004f04:	4803      	ldr	r0, [pc, #12]	; (8004f14 <OLED_RS_Set+0x20>)
 8004f06:	f7fd f9cd 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40020000 	.word	0x40020000

08004f18 <OLED_Send>:

static void inline OLED_Send(uint8_t data){
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f22:	b672      	cpsid	i
}
 8004f24:	bf00      	nop
	__disable_irq();//인터럽트를 중단하여 데이터 전송을 원활하게 한다.
	OLED_CS_Set(0);//OLED에 데이터를 전송하기 위해 CS를 Low신호로 만들어야 한다.
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7ff ffc0 	bl	8004eac <OLED_CS_Set>
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);
 8004f2c:	1df9      	adds	r1, r7, #7
 8004f2e:	2301      	movs	r3, #1
 8004f30:	2201      	movs	r2, #1
 8004f32:	4806      	ldr	r0, [pc, #24]	; (8004f4c <OLED_Send+0x34>)
 8004f34:	f7fd feb1 	bl	8002c9a <HAL_SPI_Transmit>
	OLED_CS_Set(1);//데이터 전송이 끝나면 CS를 High로 만들어 신호가 들어와도 무시하도록 해야 한다.
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7ff ffb7 	bl	8004eac <OLED_CS_Set>
  __ASM volatile ("cpsie i" : : : "memory");
 8004f3e:	b662      	cpsie	i
}
 8004f40:	bf00      	nop
	__enable_irq();
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200004b4 	.word	0x200004b4

08004f50 <OLED_WriteCommand>:

static void inline OLED_WriteCommand(uint8_t data){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(0);
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	f7ff ffb8 	bl	8004ed0 <OLED_DC_Set>
	OLED_Send(data);
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff ffd8 	bl	8004f18 <OLED_Send>
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <OLED_WriteData>:

static void inline OLED_WriteData(uint8_t data){
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
	OLED_DC_Set(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7ff ffa8 	bl	8004ed0 <OLED_DC_Set>
	OLED_Send(data);
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff ffc8 	bl	8004f18 <OLED_Send>
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <OLED_Clear>:

void OLED_Clear(){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
	OLED_row = 1;
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <OLED_Clear+0x50>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <OLED_Clear+0x54>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
	OLED_charColor = 0xFFFFFF;
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <OLED_Clear+0x58>)
 8004fa4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004fa8:	601a      	str	r2, [r3, #0]
	OLED_charPoint = 2;
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <OLED_Clear+0x5c>)
 8004fac:	2202      	movs	r2, #2
 8004fae:	701a      	strb	r2, [r3, #0]
	OLED_AddrWindow(0, 0, 96, 64);
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	2260      	movs	r2, #96	; 0x60
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f000 f8a1 	bl	80050fe <OLED_AddrWindow>
	for(int i=0; i<12288; i++){
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e005      	b.n	8004fce <OLED_Clear+0x3e>
		OLED_WriteData(0);
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7ff ffd4 	bl	8004f70 <OLED_WriteData>
	for(int i=0; i<12288; i++){
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fd4:	dbf5      	blt.n	8004fc2 <OLED_Clear+0x32>
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000009 	.word	0x20000009
 8004fe4:	2000000a 	.word	0x2000000a
 8004fe8:	2000000c 	.word	0x2000000c
 8004fec:	20000010 	.word	0x20000010

08004ff0 <OLED_Begin>:

void OLED_Begin(){
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
	//15ms 이상 대기
	HAL_Delay(100);
 8004ff4:	2064      	movs	r0, #100	; 0x64
 8004ff6:	f7fc fe83 	bl	8001d00 <HAL_Delay>

	//초기 작업(리셋)
	OLED_CS_Set(1);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7ff ff56 	bl	8004eac <OLED_CS_Set>
	OLED_RS_Set(0);
 8005000:	2000      	movs	r0, #0
 8005002:	f7ff ff77 	bl	8004ef4 <OLED_RS_Set>
	HAL_Delay(3);
 8005006:	2003      	movs	r0, #3
 8005008:	f7fc fe7a 	bl	8001d00 <HAL_Delay>
	OLED_RS_Set(1);
 800500c:	2001      	movs	r0, #1
 800500e:	f7ff ff71 	bl	8004ef4 <OLED_RS_Set>

	//기본 설정 명령어
	OLED_WriteCommand(0xAE);
 8005012:	20ae      	movs	r0, #174	; 0xae
 8005014:	f7ff ff9c 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xA0);
 8005018:	20a0      	movs	r0, #160	; 0xa0
 800501a:	f7ff ff99 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x72);
 800501e:	2072      	movs	r0, #114	; 0x72
 8005020:	f7ff ff96 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xA1);
 8005024:	20a1      	movs	r0, #161	; 0xa1
 8005026:	f7ff ff93 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 800502a:	2000      	movs	r0, #0
 800502c:	f7ff ff90 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xA2);
 8005030:	20a2      	movs	r0, #162	; 0xa2
 8005032:	f7ff ff8d 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8005036:	2000      	movs	r0, #0
 8005038:	f7ff ff8a 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4);
 800503c:	20a4      	movs	r0, #164	; 0xa4
 800503e:	f7ff ff87 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xA8);
 8005042:	20a8      	movs	r0, #168	; 0xa8
 8005044:	f7ff ff84 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8005048:	203f      	movs	r0, #63	; 0x3f
 800504a:	f7ff ff81 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xAD);
 800504e:	20ad      	movs	r0, #173	; 0xad
 8005050:	f7ff ff7e 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x8E);
 8005054:	208e      	movs	r0, #142	; 0x8e
 8005056:	f7ff ff7b 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xB0);
 800505a:	20b0      	movs	r0, #176	; 0xb0
 800505c:	f7ff ff78 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x0B);
 8005060:	200b      	movs	r0, #11
 8005062:	f7ff ff75 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xB1);
 8005066:	20b1      	movs	r0, #177	; 0xb1
 8005068:	f7ff ff72 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x31);
 800506c:	2031      	movs	r0, #49	; 0x31
 800506e:	f7ff ff6f 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xB3);
 8005072:	20b3      	movs	r0, #179	; 0xb3
 8005074:	f7ff ff6c 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xF0);
 8005078:	20f0      	movs	r0, #240	; 0xf0
 800507a:	f7ff ff69 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x8A);
 800507e:	208a      	movs	r0, #138	; 0x8a
 8005080:	f7ff ff66 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f7ff ff63 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x8B);
 800508a:	208b      	movs	r0, #139	; 0x8b
 800508c:	f7ff ff60 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x78);
 8005090:	2078      	movs	r0, #120	; 0x78
 8005092:	f7ff ff5d 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x8C);
 8005096:	208c      	movs	r0, #140	; 0x8c
 8005098:	f7ff ff5a 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x64);
 800509c:	2064      	movs	r0, #100	; 0x64
 800509e:	f7ff ff57 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xBB);
 80050a2:	20bb      	movs	r0, #187	; 0xbb
 80050a4:	f7ff ff54 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x3A);
 80050a8:	203a      	movs	r0, #58	; 0x3a
 80050aa:	f7ff ff51 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0xBE);
 80050ae:	20be      	movs	r0, #190	; 0xbe
 80050b0:	f7ff ff4e 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x3E);
 80050b4:	203e      	movs	r0, #62	; 0x3e
 80050b6:	f7ff ff4b 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x87);
 80050ba:	2087      	movs	r0, #135	; 0x87
 80050bc:	f7ff ff48 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x06);
 80050c0:	2006      	movs	r0, #6
 80050c2:	f7ff ff45 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x81);
 80050c6:	2081      	movs	r0, #129	; 0x81
 80050c8:	f7ff ff42 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x91);
 80050cc:	2091      	movs	r0, #145	; 0x91
 80050ce:	f7ff ff3f 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x82);
 80050d2:	2082      	movs	r0, #130	; 0x82
 80050d4:	f7ff ff3c 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x50);
 80050d8:	2050      	movs	r0, #80	; 0x50
 80050da:	f7ff ff39 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x83);
 80050de:	2083      	movs	r0, #131	; 0x83
 80050e0:	f7ff ff36 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x7D);
 80050e4:	207d      	movs	r0, #125	; 0x7d
 80050e6:	f7ff ff33 	bl	8004f50 <OLED_WriteCommand>

	OLED_Clear();
 80050ea:	f7ff ff51 	bl	8004f90 <OLED_Clear>
	OLED_WriteCommand(0xAF);
 80050ee:	20af      	movs	r0, #175	; 0xaf
 80050f0:	f7ff ff2e 	bl	8004f50 <OLED_WriteCommand>
	HAL_Delay(100);
 80050f4:	2064      	movs	r0, #100	; 0x64
 80050f6:	f7fc fe03 	bl	8001d00 <HAL_Delay>

}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}

080050fe <OLED_AddrWindow>:

void OLED_AddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
 80050fe:	b590      	push	{r4, r7, lr}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	4604      	mov	r4, r0
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	461a      	mov	r2, r3
 800510c:	4623      	mov	r3, r4
 800510e:	71fb      	strb	r3, [r7, #7]
 8005110:	4603      	mov	r3, r0
 8005112:	71bb      	strb	r3, [r7, #6]
 8005114:	460b      	mov	r3, r1
 8005116:	717b      	strb	r3, [r7, #5]
 8005118:	4613      	mov	r3, r2
 800511a:	713b      	strb	r3, [r7, #4]
	uint8_t x1 = x;
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	73fb      	strb	r3, [r7, #15]
	uint8_t y1 = y;
 8005120:	79bb      	ldrb	r3, [r7, #6]
 8005122:	73bb      	strb	r3, [r7, #14]
	if(x1 > 95){
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b5f      	cmp	r3, #95	; 0x5f
 8005128:	d901      	bls.n	800512e <OLED_AddrWindow+0x30>
		x1 = 95;
 800512a:	235f      	movs	r3, #95	; 0x5f
 800512c:	73fb      	strb	r3, [r7, #15]
	}
	if(y1 > 63){
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	2b3f      	cmp	r3, #63	; 0x3f
 8005132:	d901      	bls.n	8005138 <OLED_AddrWindow+0x3a>
		y1 = 63;
 8005134:	233f      	movs	r3, #63	; 0x3f
 8005136:	73bb      	strb	r3, [r7, #14]
	}

	uint8_t x2 = x + w - 1;
 8005138:	79fa      	ldrb	r2, [r7, #7]
 800513a:	797b      	ldrb	r3, [r7, #5]
 800513c:	4413      	add	r3, r2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	737b      	strb	r3, [r7, #13]
	uint8_t y2 = y + h - 1;
 8005144:	79ba      	ldrb	r2, [r7, #6]
 8005146:	793b      	ldrb	r3, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	b2db      	uxtb	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	733b      	strb	r3, [r7, #12]
	if(x2>95)
 8005150:	7b7b      	ldrb	r3, [r7, #13]
 8005152:	2b5f      	cmp	r3, #95	; 0x5f
 8005154:	d901      	bls.n	800515a <OLED_AddrWindow+0x5c>
		x2 = 95;
 8005156:	235f      	movs	r3, #95	; 0x5f
 8005158:	737b      	strb	r3, [r7, #13]
	if(y2>63)
 800515a:	7b3b      	ldrb	r3, [r7, #12]
 800515c:	2b3f      	cmp	r3, #63	; 0x3f
 800515e:	d901      	bls.n	8005164 <OLED_AddrWindow+0x66>
		y2 = 63;
 8005160:	233f      	movs	r3, #63	; 0x3f
 8005162:	733b      	strb	r3, [r7, #12]

	if(x1>x2){
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	7b7b      	ldrb	r3, [r7, #13]
 8005168:	429a      	cmp	r2, r3
 800516a:	d905      	bls.n	8005178 <OLED_AddrWindow+0x7a>
		uint8_t temp = x2;
 800516c:	7b7b      	ldrb	r3, [r7, #13]
 800516e:	72fb      	strb	r3, [r7, #11]
		x2=x1;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	737b      	strb	r3, [r7, #13]
		x1=temp;
 8005174:	7afb      	ldrb	r3, [r7, #11]
 8005176:	73fb      	strb	r3, [r7, #15]
	}
	if(y1>y2){
 8005178:	7bba      	ldrb	r2, [r7, #14]
 800517a:	7b3b      	ldrb	r3, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d905      	bls.n	800518c <OLED_AddrWindow+0x8e>
		uint8_t temp = y2;
 8005180:	7b3b      	ldrb	r3, [r7, #12]
 8005182:	72bb      	strb	r3, [r7, #10]
		y2=y1;
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	733b      	strb	r3, [r7, #12]
		y1=temp;
 8005188:	7abb      	ldrb	r3, [r7, #10]
 800518a:	73bb      	strb	r3, [r7, #14]
	}

	OLED_WriteCommand(0x15);
 800518c:	2015      	movs	r0, #21
 800518e:	f7ff fedf 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(x1);
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff fedb 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(x2);
 800519a:	7b7b      	ldrb	r3, [r7, #13]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fed7 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(0x75);
 80051a2:	2075      	movs	r0, #117	; 0x75
 80051a4:	f7ff fed4 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(y1);
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fed0 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(y2);
 80051b0:	7b3b      	ldrb	r3, [r7, #12]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fecc 	bl	8004f50 <OLED_WriteCommand>
}
 80051b8:	bf00      	nop
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <OLED_Rectangle>:



void OLED_Rectangle(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int32_t color){
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	461a      	mov	r2, r3
 80051ce:	4623      	mov	r3, r4
 80051d0:	71fb      	strb	r3, [r7, #7]
 80051d2:	4603      	mov	r3, r0
 80051d4:	71bb      	strb	r3, [r7, #6]
 80051d6:	460b      	mov	r3, r1
 80051d8:	717b      	strb	r3, [r7, #5]
 80051da:	4613      	mov	r3, r2
 80051dc:	713b      	strb	r3, [r7, #4]
	OLED_AddrWindow(x, y, w, h);
 80051de:	793b      	ldrb	r3, [r7, #4]
 80051e0:	797a      	ldrb	r2, [r7, #5]
 80051e2:	79b9      	ldrb	r1, [r7, #6]
 80051e4:	79f8      	ldrb	r0, [r7, #7]
 80051e6:	f7ff ff8a 	bl	80050fe <OLED_AddrWindow>
	uint32_t red = (color >> 19) & 0x1F;
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	14db      	asrs	r3, r3, #19
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	61bb      	str	r3, [r7, #24]
	uint32_t gre = (color >> 10) & 0x3F;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	129b      	asrs	r3, r3, #10
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	617b      	str	r3, [r7, #20]
	uint32_t blu = (color >> 3) & 0x1F;
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	10db      	asrs	r3, r3, #3
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	613b      	str	r3, [r7, #16]
	uint32_t data = (red << 11) | (gre << 5) | blu;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	02da      	lsls	r2, r3, #11
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	015b      	lsls	r3, r3, #5
 8005210:	4313      	orrs	r3, r2
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
	uint16_t size = (uint32_t)w * (uint32_t)h;
 8005218:	797b      	ldrb	r3, [r7, #5]
 800521a:	b29a      	uxth	r2, r3
 800521c:	793b      	ldrb	r3, [r7, #4]
 800521e:	b29b      	uxth	r3, r3
 8005220:	fb12 f303 	smulbb	r3, r2, r3
 8005224:	817b      	strh	r3, [r7, #10]
	for(uint16_t i=0; i<size; i++){
 8005226:	2300      	movs	r3, #0
 8005228:	83fb      	strh	r3, [r7, #30]
 800522a:	e00d      	b.n	8005248 <OLED_Rectangle+0x88>
		OLED_WriteData(data >> 8);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fe9c 	bl	8004f70 <OLED_WriteData>
		OLED_WriteData(data & 0xFF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fe97 	bl	8004f70 <OLED_WriteData>
	for(uint16_t i=0; i<size; i++){
 8005242:	8bfb      	ldrh	r3, [r7, #30]
 8005244:	3301      	adds	r3, #1
 8005246:	83fb      	strh	r3, [r7, #30]
 8005248:	8bfa      	ldrh	r2, [r7, #30]
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	429a      	cmp	r2, r3
 800524e:	d3ed      	bcc.n	800522c <OLED_Rectangle+0x6c>
	}
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3724      	adds	r7, #36	; 0x24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd90      	pop	{r4, r7, pc}

0800525a <OLED_Dot>:


void OLED_Dot(uint8_t x,uint8_t y,uint8_t size, uint32_t color){
 800525a:	b590      	push	{r4, r7, lr}
 800525c:	b085      	sub	sp, #20
 800525e:	af02      	add	r7, sp, #8
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4603      	mov	r3, r0
 8005264:	71fb      	strb	r3, [r7, #7]
 8005266:	460b      	mov	r3, r1
 8005268:	71bb      	strb	r3, [r7, #6]
 800526a:	4613      	mov	r3, r2
 800526c:	717b      	strb	r3, [r7, #5]
	OLED_Rectangle(x, y, size, size, color);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	797c      	ldrb	r4, [r7, #5]
 8005272:	797a      	ldrb	r2, [r7, #5]
 8005274:	79b9      	ldrb	r1, [r7, #6]
 8005276:	79f8      	ldrb	r0, [r7, #7]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4623      	mov	r3, r4
 800527c:	f7ff ffa0 	bl	80051c0 <OLED_Rectangle>
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	bd90      	pop	{r4, r7, pc}

08005288 <OLED_WriteChar>:


void OLED_WriteChar(int16_t ch){
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	80fb      	strh	r3, [r7, #6]
	if(ch <= -1 && ch >= -3){
 8005292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005296:	2b00      	cmp	r3, #0
 8005298:	da09      	bge.n	80052ae <OLED_WriteChar+0x26>
 800529a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800529e:	f113 0f03 	cmn.w	r3, #3
 80052a2:	db04      	blt.n	80052ae <OLED_WriteChar+0x26>
		ch = 131 + ch;
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	3383      	adds	r3, #131	; 0x83
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	80fb      	strh	r3, [r7, #6]
 80052ac:	e009      	b.n	80052c2 <OLED_WriteChar+0x3a>
	}
	else if(ch < 32 || ch >= 128){
 80052ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b2:	2b1f      	cmp	r3, #31
 80052b4:	dd03      	ble.n	80052be <OLED_WriteChar+0x36>
 80052b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ba:	2b7f      	cmp	r3, #127	; 0x7f
 80052bc:	dd01      	ble.n	80052c2 <OLED_WriteChar+0x3a>
		ch = 63;
 80052be:	233f      	movs	r3, #63	; 0x3f
 80052c0:	80fb      	strh	r3, [r7, #6]
	}

	ch -= 32;
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	3b20      	subs	r3, #32
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i=0; i<5; i++){
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
 80052ce:	e03d      	b.n	800534c <OLED_WriteChar+0xc4>
		uint8_t byte = characters[ch * 5 + i];
 80052d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	4413      	add	r3, r2
 80052de:	4a25      	ldr	r2, [pc, #148]	; (8005374 <OLED_WriteChar+0xec>)
 80052e0:	5cd3      	ldrb	r3, [r2, r3]
 80052e2:	737b      	strb	r3, [r7, #13]
		for(uint8_t j=0; j<8; j++){
 80052e4:	2300      	movs	r3, #0
 80052e6:	73bb      	strb	r3, [r7, #14]
 80052e8:	e02a      	b.n	8005340 <OLED_WriteChar+0xb8>
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <OLED_WriteChar+0xf0>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	fb12 f303 	smulbb	r3, r2, r3
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <OLED_WriteChar+0xf4>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	4413      	add	r3, r2
 80052fc:	b2d8      	uxtb	r0, r3
 80052fe:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <OLED_WriteChar+0xf0>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	7bba      	ldrb	r2, [r7, #14]
 8005304:	fb12 f303 	smulbb	r3, r2, r3
 8005308:	b2da      	uxtb	r2, r3
 800530a:	4b1d      	ldr	r3, [pc, #116]	; (8005380 <OLED_WriteChar+0xf8>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	4413      	add	r3, r2
 8005310:	b2d9      	uxtb	r1, r3
 8005312:	4b19      	ldr	r3, [pc, #100]	; (8005378 <OLED_WriteChar+0xf0>)
 8005314:	781c      	ldrb	r4, [r3, #0]
					((byte>>(7-j))&0x01) ? OLED_charColor : OLED_bgColor);
 8005316:	7b7a      	ldrb	r2, [r7, #13]
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	f1c3 0307 	rsb	r3, r3, #7
 800531e:	fa42 f303 	asr.w	r3, r2, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
			OLED_Dot(OLED_col + i * OLED_charPoint, OLED_row + j * OLED_charPoint, OLED_charPoint, \
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <OLED_WriteChar+0xa8>
 800532a:	4b16      	ldr	r3, [pc, #88]	; (8005384 <OLED_WriteChar+0xfc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	e001      	b.n	8005334 <OLED_WriteChar+0xac>
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <OLED_WriteChar+0x100>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4622      	mov	r2, r4
 8005336:	f7ff ff90 	bl	800525a <OLED_Dot>
		for(uint8_t j=0; j<8; j++){
 800533a:	7bbb      	ldrb	r3, [r7, #14]
 800533c:	3301      	adds	r3, #1
 800533e:	73bb      	strb	r3, [r7, #14]
 8005340:	7bbb      	ldrb	r3, [r7, #14]
 8005342:	2b07      	cmp	r3, #7
 8005344:	d9d1      	bls.n	80052ea <OLED_WriteChar+0x62>
	for(uint8_t i=0; i<5; i++){
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	3301      	adds	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d9be      	bls.n	80052d0 <OLED_WriteChar+0x48>
		}
	}
	OLED_col += 6 * OLED_charPoint;
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <OLED_WriteChar+0xf0>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	0052      	lsls	r2, r2, #1
 800535a:	4413      	add	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <OLED_WriteChar+0xf4>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4413      	add	r3, r2
 8005366:	b2da      	uxtb	r2, r3
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <OLED_WriteChar+0xf4>)
 800536a:	701a      	strb	r2, [r3, #0]

}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	20000014 	.word	0x20000014
 8005378:	20000010 	.word	0x20000010
 800537c:	2000000a 	.word	0x2000000a
 8005380:	20000009 	.word	0x20000009
 8005384:	2000000c 	.word	0x2000000c
 8005388:	200006dc 	.word	0x200006dc

0800538c <str2hex>:


static int str2hex(char * str){
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	int result = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 8005398:	2300      	movs	r3, #0
 800539a:	60bb      	str	r3, [r7, #8]
 800539c:	e049      	b.n	8005432 <str2hex+0xa6>
		if(str[i] >= '0' && str[i] <= '9'){
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b2f      	cmp	r3, #47	; 0x2f
 80053a8:	d911      	bls.n	80053ce <str2hex+0x42>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b39      	cmp	r3, #57	; 0x39
 80053b4:	d80b      	bhi.n	80053ce <str2hex+0x42>
			result <<= 4;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
			result |= str[i] - '0';
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	3b30      	subs	r3, #48	; 0x30
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e02e      	b.n	800542c <str2hex+0xa0>
		}
		else if(str[i] >= 'A' && str[i] <= 'F'){
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d911      	bls.n	80053fe <str2hex+0x72>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	4413      	add	r3, r2
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b46      	cmp	r3, #70	; 0x46
 80053e4:	d80b      	bhi.n	80053fe <str2hex+0x72>
			result <<= 4;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'A' + 10;
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	3b37      	subs	r3, #55	; 0x37
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e016      	b.n	800542c <str2hex+0xa0>
		}
		else if(str[i] >= 'a' && str[i] <= 'f'){
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b60      	cmp	r3, #96	; 0x60
 8005408:	d910      	bls.n	800542c <str2hex+0xa0>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b66      	cmp	r3, #102	; 0x66
 8005414:	d80a      	bhi.n	800542c <str2hex+0xa0>
			result <<= 4;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
			result |= str[i] - 'a' + 10;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	3b57      	subs	r3, #87	; 0x57
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
	for(int i=0; str[i]; i++){
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3301      	adds	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4413      	add	r3, r2
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1af      	bne.n	800539e <str2hex+0x12>
		}
	}
	return result;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <OLED_Printf>:

#define OLED
void OLED_Printf(const char * format, ...){
 800544c:	b40f      	push	{r0, r1, r2, r3}
 800544e:	b580      	push	{r7, lr}
 8005450:	b0c4      	sub	sp, #272	; 0x110
 8005452:	af00      	add	r7, sp, #0
	/*
	 * buffer를 많이 할당받거나 static으로 선언하면 좋겠지만, 보통 프로세스당 4GB의 메모리를 가지는 일반 컴퓨터와 다르게
	 * STM32F411의 경우 전체 메모리 공간이 오직 128kB의 저장용량만 가지므로 메모리 공간을 아껴 써야 한다.
	 */
	char buffer[256] = { 0 };
 8005454:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	22fc      	movs	r2, #252	; 0xfc
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fde8 	bl	800703c <memset>

	// 가변 인자를 받아서 buffer에 쓴다.
	va_list args;
	va_start(args, format);
 800546c:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8005470:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005478:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, format, args);
 800547a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005482:	f107 000c 	add.w	r0, r7, #12
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800548c:	f002 fc06 	bl	8007c9c <vsiprintf>
//#ifdef OLED
//	oled_row = 0;
//	oled_col = 0;
//#endif
	// 줄바꿈 기호인 /0, /1을 만나면 커서 위치를 설정해주는 부분.
	for (char *c = buffer; *c; c++) {
 8005490:	f107 030c 	add.w	r3, r7, #12
 8005494:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005498:	e2f0      	b.n	8005a7c <OLED_Printf+0x630>
		if (*c == '/' && (*(c + 1) >= '0' && *(c + 1) <= '6')) {//작은글씨 최대 7줄 / 큰글씨 최대 3줄
 800549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b2f      	cmp	r3, #47	; 0x2f
 80054a2:	d13c      	bne.n	800551e <OLED_Printf+0xd2>
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a8:	3301      	adds	r3, #1
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b2f      	cmp	r3, #47	; 0x2f
 80054ae:	d936      	bls.n	800551e <OLED_Printf+0xd2>
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b4:	3301      	adds	r3, #1
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b36      	cmp	r3, #54	; 0x36
 80054ba:	d830      	bhi.n	800551e <OLED_Printf+0xd2>
			OLED_row = 1 + 9 * OLED_charPoint * (*(c + 1) - '0');
 80054bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c0:	3301      	adds	r3, #1
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	3b30      	subs	r3, #48	; 0x30
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	4ba7      	ldr	r3, [pc, #668]	; (8005768 <OLED_Printf+0x31c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	fb12 f303 	smulbb	r3, r2, r3
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	00d2      	lsls	r2, r2, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4ba3      	ldr	r3, [pc, #652]	; (800576c <OLED_Printf+0x320>)
 80054e0:	701a      	strb	r2, [r3, #0]
			if(OLED_row > 60 || (OLED_row >= 54 && OLED_charPoint == 2)){
 80054e2:	4ba2      	ldr	r3, [pc, #648]	; (800576c <OLED_Printf+0x320>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b3c      	cmp	r3, #60	; 0x3c
 80054e8:	d807      	bhi.n	80054fa <OLED_Printf+0xae>
 80054ea:	4ba0      	ldr	r3, [pc, #640]	; (800576c <OLED_Printf+0x320>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b35      	cmp	r3, #53	; 0x35
 80054f0:	d90c      	bls.n	800550c <OLED_Printf+0xc0>
 80054f2:	4b9d      	ldr	r3, [pc, #628]	; (8005768 <OLED_Printf+0x31c>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d108      	bne.n	800550c <OLED_Printf+0xc0>
				OLED_row = 18 * OLED_charPoint;
 80054fa:	4b9b      	ldr	r3, [pc, #620]	; (8005768 <OLED_Printf+0x31c>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	00d2      	lsls	r2, r2, #3
 8005502:	4413      	add	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b2da      	uxtb	r2, r3
 8005508:	4b98      	ldr	r3, [pc, #608]	; (800576c <OLED_Printf+0x320>)
 800550a:	701a      	strb	r2, [r3, #0]
			}
			OLED_col = 1;
 800550c:	4b98      	ldr	r3, [pc, #608]	; (8005770 <OLED_Printf+0x324>)
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005516:	3301      	adds	r3, #1
 8005518:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800551c:	e2a9      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == '#'){
 800551e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b2f      	cmp	r3, #47	; 0x2f
 8005526:	d128      	bne.n	800557a <OLED_Printf+0x12e>
 8005528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800552c:	3301      	adds	r3, #1
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b23      	cmp	r3, #35	; 0x23
 8005532:	d122      	bne.n	800557a <OLED_Printf+0x12e>
			char str[7] = {0,0,0,0,0,0,0};
 8005534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005538:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800553c:	4a8d      	ldr	r2, [pc, #564]	; (8005774 <OLED_Printf+0x328>)
 800553e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005542:	6018      	str	r0, [r3, #0]
 8005544:	3304      	adds	r3, #4
 8005546:	8019      	strh	r1, [r3, #0]
 8005548:	3302      	adds	r3, #2
 800554a:	0c0a      	lsrs	r2, r1, #16
 800554c:	701a      	strb	r2, [r3, #0]
			strncpy(str, c+2, 6);
 800554e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005552:	1c99      	adds	r1, r3, #2
 8005554:	463b      	mov	r3, r7
 8005556:	2206      	movs	r2, #6
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fb75 	bl	8007c48 <strncpy>
			OLED_charColor = str2hex(str);
 800555e:	463b      	mov	r3, r7
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff ff13 	bl	800538c <str2hex>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	4b83      	ldr	r3, [pc, #524]	; (8005778 <OLED_Printf+0x32c>)
 800556c:	601a      	str	r2, [r3, #0]
			c += 7;
 800556e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005572:	3307      	adds	r3, #7
 8005574:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005578:	e27b      	b.n	8005a72 <OLED_Printf+0x626>
			continue;
		}
		else if (*c == '/' && *(c + 1) == 'S'){
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b2f      	cmp	r3, #47	; 0x2f
 8005582:	d10e      	bne.n	80055a2 <OLED_Printf+0x156>
 8005584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005588:	3301      	adds	r3, #1
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b53      	cmp	r3, #83	; 0x53
 800558e:	d108      	bne.n	80055a2 <OLED_Printf+0x156>
			//Size Big
			OLED_charPoint = 2;
 8005590:	4b75      	ldr	r3, [pc, #468]	; (8005768 <OLED_Printf+0x31c>)
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
			c += 1;
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	3301      	adds	r3, #1
 800559c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80055a0:	e267      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 's'){
 80055a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b2f      	cmp	r3, #47	; 0x2f
 80055aa:	d10e      	bne.n	80055ca <OLED_Printf+0x17e>
 80055ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b0:	3301      	adds	r3, #1
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b73      	cmp	r3, #115	; 0x73
 80055b6:	d108      	bne.n	80055ca <OLED_Printf+0x17e>
			//Size Big
			OLED_charPoint = 1;
 80055b8:	4b6b      	ldr	r3, [pc, #428]	; (8005768 <OLED_Printf+0x31c>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]
			c += 1;
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c2:	3301      	adds	r3, #1
 80055c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80055c8:	e253      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'r'){//RGBCMY는 오직 2색 이상 OLED만 지원(예외로 노랑색 라인이 있는 파랑 OLED는 조금 다르게 취급)
 80055ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b2f      	cmp	r3, #47	; 0x2f
 80055d2:	d10f      	bne.n	80055f4 <OLED_Printf+0x1a8>
 80055d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d8:	3301      	adds	r3, #1
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b72      	cmp	r3, #114	; 0x72
 80055de:	d109      	bne.n	80055f4 <OLED_Printf+0x1a8>
			OLED_charColor = 0xFF0000;
 80055e0:	4b65      	ldr	r3, [pc, #404]	; (8005778 <OLED_Printf+0x32c>)
 80055e2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80055e6:	601a      	str	r2, [r3, #0]
			c += 1;
 80055e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80055f2:	e23e      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'g'){
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b2f      	cmp	r3, #47	; 0x2f
 80055fc:	d10f      	bne.n	800561e <OLED_Printf+0x1d2>
 80055fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005602:	3301      	adds	r3, #1
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b67      	cmp	r3, #103	; 0x67
 8005608:	d109      	bne.n	800561e <OLED_Printf+0x1d2>
			OLED_charColor = 0x00FF00;
 800560a:	4b5b      	ldr	r3, [pc, #364]	; (8005778 <OLED_Printf+0x32c>)
 800560c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005610:	601a      	str	r2, [r3, #0]
			c += 1;
 8005612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005616:	3301      	adds	r3, #1
 8005618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800561c:	e229      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'b'){
 800561e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b2f      	cmp	r3, #47	; 0x2f
 8005626:	d10e      	bne.n	8005646 <OLED_Printf+0x1fa>
 8005628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562c:	3301      	adds	r3, #1
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b62      	cmp	r3, #98	; 0x62
 8005632:	d108      	bne.n	8005646 <OLED_Printf+0x1fa>
			OLED_charColor = 0x0000FF;
 8005634:	4b50      	ldr	r3, [pc, #320]	; (8005778 <OLED_Printf+0x32c>)
 8005636:	22ff      	movs	r2, #255	; 0xff
 8005638:	601a      	str	r2, [r3, #0]
			c += 1;
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	3301      	adds	r3, #1
 8005640:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005644:	e215      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'y'){
 8005646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b2f      	cmp	r3, #47	; 0x2f
 800564e:	d10e      	bne.n	800566e <OLED_Printf+0x222>
 8005650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005654:	3301      	adds	r3, #1
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b79      	cmp	r3, #121	; 0x79
 800565a:	d108      	bne.n	800566e <OLED_Printf+0x222>
			OLED_charColor = 0xFFFF00;
 800565c:	4b46      	ldr	r3, [pc, #280]	; (8005778 <OLED_Printf+0x32c>)
 800565e:	4a47      	ldr	r2, [pc, #284]	; (800577c <OLED_Printf+0x330>)
 8005660:	601a      	str	r2, [r3, #0]
			c += 1;
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005666:	3301      	adds	r3, #1
 8005668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800566c:	e201      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'c'){
 800566e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b2f      	cmp	r3, #47	; 0x2f
 8005676:	d10f      	bne.n	8005698 <OLED_Printf+0x24c>
 8005678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567c:	3301      	adds	r3, #1
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b63      	cmp	r3, #99	; 0x63
 8005682:	d109      	bne.n	8005698 <OLED_Printf+0x24c>
			OLED_charColor = 0x00FFFF;
 8005684:	4b3c      	ldr	r3, [pc, #240]	; (8005778 <OLED_Printf+0x32c>)
 8005686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800568a:	601a      	str	r2, [r3, #0]
			c += 1;
 800568c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005690:	3301      	adds	r3, #1
 8005692:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005696:	e1ec      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'm'){
 8005698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b2f      	cmp	r3, #47	; 0x2f
 80056a0:	d10f      	bne.n	80056c2 <OLED_Printf+0x276>
 80056a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a6:	3301      	adds	r3, #1
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b6d      	cmp	r3, #109	; 0x6d
 80056ac:	d109      	bne.n	80056c2 <OLED_Printf+0x276>
			OLED_charColor = 0xFF00FF;
 80056ae:	4b32      	ldr	r3, [pc, #200]	; (8005778 <OLED_Printf+0x32c>)
 80056b0:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80056b4:	601a      	str	r2, [r3, #0]
			c += 1;
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ba:	3301      	adds	r3, #1
 80056bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80056c0:	e1d7      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'w'){//White는 단색 OLED에서는 켜짐을 의미
 80056c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b2f      	cmp	r3, #47	; 0x2f
 80056ca:	d10f      	bne.n	80056ec <OLED_Printf+0x2a0>
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d0:	3301      	adds	r3, #1
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b77      	cmp	r3, #119	; 0x77
 80056d6:	d109      	bne.n	80056ec <OLED_Printf+0x2a0>
			OLED_charColor = 0xFFFFFF;
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <OLED_Printf+0x32c>)
 80056da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80056de:	601a      	str	r2, [r3, #0]
			c += 1;
 80056e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e4:	3301      	adds	r3, #1
 80056e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80056ea:	e1c2      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'k'){//key color는 단색 OLED에서도 지원
 80056ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b2f      	cmp	r3, #47	; 0x2f
 80056f4:	d10f      	bne.n	8005716 <OLED_Printf+0x2ca>
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	3301      	adds	r3, #1
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b6b      	cmp	r3, #107	; 0x6b
 8005700:	d109      	bne.n	8005716 <OLED_Printf+0x2ca>
			OLED_charColor = 0xFFFFFF;
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <OLED_Printf+0x32c>)
 8005704:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005708:	601a      	str	r2, [r3, #0]
			c += 1;
 800570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570e:	3301      	adds	r3, #1
 8005710:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005714:	e1ad      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'R'){
 8005716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b2f      	cmp	r3, #47	; 0x2f
 800571e:	d10e      	bne.n	800573e <OLED_Printf+0x2f2>
 8005720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005724:	3301      	adds	r3, #1
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b52      	cmp	r3, #82	; 0x52
 800572a:	d108      	bne.n	800573e <OLED_Printf+0x2f2>
			OLED_charColor = 0xFF7777;
 800572c:	4b12      	ldr	r3, [pc, #72]	; (8005778 <OLED_Printf+0x32c>)
 800572e:	4a14      	ldr	r2, [pc, #80]	; (8005780 <OLED_Printf+0x334>)
 8005730:	601a      	str	r2, [r3, #0]
			c += 1;
 8005732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005736:	3301      	adds	r3, #1
 8005738:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800573c:	e199      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'G'){
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b2f      	cmp	r3, #47	; 0x2f
 8005746:	d11f      	bne.n	8005788 <OLED_Printf+0x33c>
 8005748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574c:	3301      	adds	r3, #1
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b47      	cmp	r3, #71	; 0x47
 8005752:	d119      	bne.n	8005788 <OLED_Printf+0x33c>
			OLED_charColor = 0x77FF77;
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <OLED_Printf+0x32c>)
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <OLED_Printf+0x338>)
 8005758:	601a      	str	r2, [r3, #0]
			c += 1;
 800575a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575e:	3301      	adds	r3, #1
 8005760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005764:	e185      	b.n	8005a72 <OLED_Printf+0x626>
 8005766:	bf00      	nop
 8005768:	20000010 	.word	0x20000010
 800576c:	20000009 	.word	0x20000009
 8005770:	2000000a 	.word	0x2000000a
 8005774:	08009f60 	.word	0x08009f60
 8005778:	2000000c 	.word	0x2000000c
 800577c:	00ffff00 	.word	0x00ffff00
 8005780:	00ff7777 	.word	0x00ff7777
 8005784:	0077ff77 	.word	0x0077ff77
		}
		else if (*c == '/' && *(c + 1) == 'B'){
 8005788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b2f      	cmp	r3, #47	; 0x2f
 8005790:	d10e      	bne.n	80057b0 <OLED_Printf+0x364>
 8005792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005796:	3301      	adds	r3, #1
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b42      	cmp	r3, #66	; 0x42
 800579c:	d108      	bne.n	80057b0 <OLED_Printf+0x364>
			OLED_charColor = 0x7777FF;
 800579e:	4ba9      	ldr	r3, [pc, #676]	; (8005a44 <OLED_Printf+0x5f8>)
 80057a0:	4aa9      	ldr	r2, [pc, #676]	; (8005a48 <OLED_Printf+0x5fc>)
 80057a2:	601a      	str	r2, [r3, #0]
			c += 1;
 80057a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a8:	3301      	adds	r3, #1
 80057aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80057ae:	e160      	b.n	8005a72 <OLED_Printf+0x626>
		}

		//Additional Color : 비표준 색상입니다.
		else if (*c == '/' && *(c + 1) == 'o'){
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b2f      	cmp	r3, #47	; 0x2f
 80057b8:	d10e      	bne.n	80057d8 <OLED_Printf+0x38c>
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057be:	3301      	adds	r3, #1
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b6f      	cmp	r3, #111	; 0x6f
 80057c4:	d108      	bne.n	80057d8 <OLED_Printf+0x38c>
			OLED_charColor = 0xFF7700;
 80057c6:	4b9f      	ldr	r3, [pc, #636]	; (8005a44 <OLED_Printf+0x5f8>)
 80057c8:	4aa0      	ldr	r2, [pc, #640]	; (8005a4c <OLED_Printf+0x600>)
 80057ca:	601a      	str	r2, [r3, #0]
			c += 1;
 80057cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d0:	3301      	adds	r3, #1
 80057d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80057d6:	e14c      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'l'){
 80057d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b2f      	cmp	r3, #47	; 0x2f
 80057e0:	d10e      	bne.n	8005800 <OLED_Printf+0x3b4>
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e6:	3301      	adds	r3, #1
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b6c      	cmp	r3, #108	; 0x6c
 80057ec:	d108      	bne.n	8005800 <OLED_Printf+0x3b4>
			OLED_charColor = 0x77FF00;
 80057ee:	4b95      	ldr	r3, [pc, #596]	; (8005a44 <OLED_Printf+0x5f8>)
 80057f0:	4a97      	ldr	r2, [pc, #604]	; (8005a50 <OLED_Printf+0x604>)
 80057f2:	601a      	str	r2, [r3, #0]
			c += 1;
 80057f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f8:	3301      	adds	r3, #1
 80057fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80057fe:	e138      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 't'){
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b2f      	cmp	r3, #47	; 0x2f
 8005808:	d10f      	bne.n	800582a <OLED_Printf+0x3de>
 800580a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800580e:	3301      	adds	r3, #1
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b74      	cmp	r3, #116	; 0x74
 8005814:	d109      	bne.n	800582a <OLED_Printf+0x3de>
			OLED_charColor = 0x00FF77;
 8005816:	4b8b      	ldr	r3, [pc, #556]	; (8005a44 <OLED_Printf+0x5f8>)
 8005818:	f64f 7277 	movw	r2, #65399	; 0xff77
 800581c:	601a      	str	r2, [r3, #0]
			c += 1;
 800581e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005822:	3301      	adds	r3, #1
 8005824:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005828:	e123      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'e'){
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b2f      	cmp	r3, #47	; 0x2f
 8005832:	d10f      	bne.n	8005854 <OLED_Printf+0x408>
 8005834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005838:	3301      	adds	r3, #1
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b65      	cmp	r3, #101	; 0x65
 800583e:	d109      	bne.n	8005854 <OLED_Printf+0x408>
			OLED_charColor = 0x0077FF;
 8005840:	4b80      	ldr	r3, [pc, #512]	; (8005a44 <OLED_Printf+0x5f8>)
 8005842:	f247 72ff 	movw	r2, #30719	; 0x77ff
 8005846:	601a      	str	r2, [r3, #0]
			c += 1;
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584c:	3301      	adds	r3, #1
 800584e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 8005852:	e10e      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'p'){
 8005854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b2f      	cmp	r3, #47	; 0x2f
 800585c:	d10e      	bne.n	800587c <OLED_Printf+0x430>
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005862:	3301      	adds	r3, #1
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b70      	cmp	r3, #112	; 0x70
 8005868:	d108      	bne.n	800587c <OLED_Printf+0x430>
			OLED_charColor = 0x7700FF;
 800586a:	4b76      	ldr	r3, [pc, #472]	; (8005a44 <OLED_Printf+0x5f8>)
 800586c:	4a79      	ldr	r2, [pc, #484]	; (8005a54 <OLED_Printf+0x608>)
 800586e:	601a      	str	r2, [r3, #0]
			c += 1;
 8005870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005874:	3301      	adds	r3, #1
 8005876:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 800587a:	e0fa      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'M'){
 800587c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b2f      	cmp	r3, #47	; 0x2f
 8005884:	d10e      	bne.n	80058a4 <OLED_Printf+0x458>
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	3301      	adds	r3, #1
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b4d      	cmp	r3, #77	; 0x4d
 8005890:	d108      	bne.n	80058a4 <OLED_Printf+0x458>
			OLED_charColor = 0xFF0077;
 8005892:	4b6c      	ldr	r3, [pc, #432]	; (8005a44 <OLED_Printf+0x5f8>)
 8005894:	4a70      	ldr	r2, [pc, #448]	; (8005a58 <OLED_Printf+0x60c>)
 8005896:	601a      	str	r2, [r3, #0]
			c += 1;
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589c:	3301      	adds	r3, #1
 800589e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80058a2:	e0e6      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'A'){
 80058a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b2f      	cmp	r3, #47	; 0x2f
 80058ac:	d10e      	bne.n	80058cc <OLED_Printf+0x480>
 80058ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b2:	3301      	adds	r3, #1
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b41      	cmp	r3, #65	; 0x41
 80058b8:	d108      	bne.n	80058cc <OLED_Printf+0x480>
			OLED_charColor = 0x888888;
 80058ba:	4b62      	ldr	r3, [pc, #392]	; (8005a44 <OLED_Printf+0x5f8>)
 80058bc:	4a67      	ldr	r2, [pc, #412]	; (8005a5c <OLED_Printf+0x610>)
 80058be:	601a      	str	r2, [r3, #0]
			c += 1;
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	3301      	adds	r3, #1
 80058c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80058ca:	e0d2      	b.n	8005a72 <OLED_Printf+0x626>
		}
		else if (*c == '/' && *(c + 1) == 'a'){
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b2f      	cmp	r3, #47	; 0x2f
 80058d4:	d10e      	bne.n	80058f4 <OLED_Printf+0x4a8>
 80058d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058da:	3301      	adds	r3, #1
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b61      	cmp	r3, #97	; 0x61
 80058e0:	d108      	bne.n	80058f4 <OLED_Printf+0x4a8>
			OLED_charColor = 0x444444;
 80058e2:	4b58      	ldr	r3, [pc, #352]	; (8005a44 <OLED_Printf+0x5f8>)
 80058e4:	4a5e      	ldr	r2, [pc, #376]	; (8005a60 <OLED_Printf+0x614>)
 80058e6:	601a      	str	r2, [r3, #0]
			c += 1;
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ec:	3301      	adds	r3, #1
 80058ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			continue;
 80058f2:	e0be      	b.n	8005a72 <OLED_Printf+0x626>
		}

		else if (*c == '/' && *(c + 1) == '/'){
 80058f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b2f      	cmp	r3, #47	; 0x2f
 80058fc:	d10a      	bne.n	8005914 <OLED_Printf+0x4c8>
 80058fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005902:	3301      	adds	r3, #1
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b2f      	cmp	r3, #47	; 0x2f
 8005908:	d104      	bne.n	8005914 <OLED_Printf+0x4c8>
			c += 1;
 800590a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590e:	3301      	adds	r3, #1
 8005910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		}

		// \n, \r 등은 깨져서 출력되므로 무시한다.
		if (*c == '\r') continue;
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b0d      	cmp	r3, #13
 800591c:	f000 80a8 	beq.w	8005a70 <OLED_Printf+0x624>
		if (*c == '\n') {
 8005920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b0a      	cmp	r3, #10
 8005928:	d10f      	bne.n	800594a <OLED_Printf+0x4fe>
			OLED_row += 9 * OLED_charPoint;
 800592a:	4b4e      	ldr	r3, [pc, #312]	; (8005a64 <OLED_Printf+0x618>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	00d2      	lsls	r2, r2, #3
 8005932:	4413      	add	r3, r2
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4b4c      	ldr	r3, [pc, #304]	; (8005a68 <OLED_Printf+0x61c>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	4413      	add	r3, r2
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <OLED_Printf+0x61c>)
 8005940:	701a      	strb	r2, [r3, #0]
			OLED_col = 1;
 8005942:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <OLED_Printf+0x620>)
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]
			continue;
 8005948:	e093      	b.n	8005a72 <OLED_Printf+0x626>
		}
		if (*c == '\t') {
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b09      	cmp	r3, #9
 8005952:	d130      	bne.n	80059b6 <OLED_Printf+0x56a>
			if(OLED_col < 25 && OLED_charPoint == 1){
 8005954:	4b45      	ldr	r3, [pc, #276]	; (8005a6c <OLED_Printf+0x620>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b18      	cmp	r3, #24
 800595a:	d807      	bhi.n	800596c <OLED_Printf+0x520>
 800595c:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <OLED_Printf+0x618>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d103      	bne.n	800596c <OLED_Printf+0x520>
				OLED_col = 25;
 8005964:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <OLED_Printf+0x620>)
 8005966:	2219      	movs	r2, #25
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e023      	b.n	80059b4 <OLED_Printf+0x568>
			}
			else if(OLED_col < 49){
 800596c:	4b3f      	ldr	r3, [pc, #252]	; (8005a6c <OLED_Printf+0x620>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d803      	bhi.n	800597c <OLED_Printf+0x530>
				OLED_col = 49;
 8005974:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <OLED_Printf+0x620>)
 8005976:	2231      	movs	r2, #49	; 0x31
 8005978:	701a      	strb	r2, [r3, #0]
			}
			else{
				OLED_col = 1;
				OLED_row += 9 * OLED_charPoint;
			}
			continue;
 800597a:	e07a      	b.n	8005a72 <OLED_Printf+0x626>
			else if(OLED_col < 73 && OLED_charPoint == 1){
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <OLED_Printf+0x620>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b48      	cmp	r3, #72	; 0x48
 8005982:	d807      	bhi.n	8005994 <OLED_Printf+0x548>
 8005984:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <OLED_Printf+0x618>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d103      	bne.n	8005994 <OLED_Printf+0x548>
				OLED_col = 75;
 800598c:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <OLED_Printf+0x620>)
 800598e:	224b      	movs	r2, #75	; 0x4b
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e00f      	b.n	80059b4 <OLED_Printf+0x568>
				OLED_col = 1;
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <OLED_Printf+0x620>)
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
				OLED_row += 9 * OLED_charPoint;
 800599a:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <OLED_Printf+0x618>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	00d2      	lsls	r2, r2, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <OLED_Printf+0x61c>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <OLED_Printf+0x61c>)
 80059b0:	701a      	strb	r2, [r3, #0]
			continue;
 80059b2:	e05e      	b.n	8005a72 <OLED_Printf+0x626>
 80059b4:	e05d      	b.n	8005a72 <OLED_Printf+0x626>
		}
		if (*c == '/' && *(c+1) == '*'){
 80059b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b2f      	cmp	r3, #47	; 0x2f
 80059be:	d10f      	bne.n	80059e0 <OLED_Printf+0x594>
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c4:	3301      	adds	r3, #1
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ca:	d109      	bne.n	80059e0 <OLED_Printf+0x594>
			c += 1;
 80059cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d0:	3301      	adds	r3, #1
 80059d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-1);
 80059d6:	f04f 30ff 	mov.w	r0, #4294967295
 80059da:	f7ff fc55 	bl	8005288 <OLED_WriteChar>
			continue;
 80059de:	e048      	b.n	8005a72 <OLED_Printf+0x626>
		}
		if (*c == '/' && *(c+1) == 'q'){
 80059e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b2f      	cmp	r3, #47	; 0x2f
 80059e8:	d10f      	bne.n	8005a0a <OLED_Printf+0x5be>
 80059ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ee:	3301      	adds	r3, #1
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b71      	cmp	r3, #113	; 0x71
 80059f4:	d109      	bne.n	8005a0a <OLED_Printf+0x5be>
			c += 1;
 80059f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fa:	3301      	adds	r3, #1
 80059fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-2);
 8005a00:	f06f 0001 	mvn.w	r0, #1
 8005a04:	f7ff fc40 	bl	8005288 <OLED_WriteChar>
			continue;
 8005a08:	e033      	b.n	8005a72 <OLED_Printf+0x626>
		}
		if (*c == '/' && *(c+1) == 'Q'){
 8005a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b2f      	cmp	r3, #47	; 0x2f
 8005a12:	d10f      	bne.n	8005a34 <OLED_Printf+0x5e8>
 8005a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a18:	3301      	adds	r3, #1
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b51      	cmp	r3, #81	; 0x51
 8005a1e:	d109      	bne.n	8005a34 <OLED_Printf+0x5e8>
			c += 1;
 8005a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a24:	3301      	adds	r3, #1
 8005a26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			OLED_WriteChar(-3);
 8005a2a:	f06f 0002 	mvn.w	r0, #2
 8005a2e:	f7ff fc2b 	bl	8005288 <OLED_WriteChar>
			continue;
 8005a32:	e01e      	b.n	8005a72 <OLED_Printf+0x626>
		}
		OLED_WriteChar(*c);
 8005a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fc23 	bl	8005288 <OLED_WriteChar>
 8005a42:	e016      	b.n	8005a72 <OLED_Printf+0x626>
 8005a44:	2000000c 	.word	0x2000000c
 8005a48:	007777ff 	.word	0x007777ff
 8005a4c:	00ff7700 	.word	0x00ff7700
 8005a50:	0077ff00 	.word	0x0077ff00
 8005a54:	007700ff 	.word	0x007700ff
 8005a58:	00ff0077 	.word	0x00ff0077
 8005a5c:	00888888 	.word	0x00888888
 8005a60:	00444444 	.word	0x00444444
 8005a64:	20000010 	.word	0x20000010
 8005a68:	20000009 	.word	0x20000009
 8005a6c:	2000000a 	.word	0x2000000a
		if (*c == '\r') continue;
 8005a70:	bf00      	nop
	for (char *c = buffer; *c; c++) {
 8005a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a76:	3301      	adds	r3, #1
 8005a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f47f ad09 	bne.w	800549a <OLED_Printf+0x4e>
	}
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a96:	b004      	add	sp, #16
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <OLED_Line>:

void OLED_Line(uint8_t xi, uint8_t yi, uint8_t xe, uint8_t ye, int32_t color){
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4623      	mov	r3, r4
 8005aac:	71fb      	strb	r3, [r7, #7]
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71bb      	strb	r3, [r7, #6]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	717b      	strb	r3, [r7, #5]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	713b      	strb	r3, [r7, #4]
	uint8_t red = (color >> 16) & 0xF8;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	141b      	asrs	r3, r3, #16
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	73fb      	strb	r3, [r7, #15]
	uint8_t gre = (color >> 8) & 0xFC;
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	121b      	asrs	r3, r3, #8
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	73bb      	strb	r3, [r7, #14]
	uint8_t blu = color & 0xF8;
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	737b      	strb	r3, [r7, #13]

	//선을 그리기 위해서는 0x21 신호가 필요합니다.
	OLED_WriteCommand(0x21);
 8005adc:	2021      	movs	r0, #33	; 0x21
 8005ade:	f7ff fa37 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(xi);
 8005ae2:	79fb      	ldrb	r3, [r7, #7]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fa33 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(yi);
 8005aea:	79bb      	ldrb	r3, [r7, #6]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fa2f 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(xe);
 8005af2:	797b      	ldrb	r3, [r7, #5]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fa2b 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(ye);
 8005afa:	793b      	ldrb	r3, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fa27 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(red>>2);
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fa21 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(gre>>2);
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	089b      	lsrs	r3, r3, #2
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fa1b 	bl	8004f50 <OLED_WriteCommand>
	OLED_WriteCommand(blu>>2);
 8005b1a:	7b7b      	ldrb	r3, [r7, #13]
 8005b1c:	089b      	lsrs	r3, r3, #2
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fa15 	bl	8004f50 <OLED_WriteCommand>
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd90      	pop	{r4, r7, pc}
	...

08005b30 <OLED_MenuUI>:

void OLED_MenuUI(char * title, uint32_t titleBgColor, uint32_t titleTextColor, Menu_t * menu, uint32_t count, uint32_t textColor){
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
	OLED_Rectangle(0, 0, 96, 9, titleBgColor);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2309      	movs	r3, #9
 8005b44:	2260      	movs	r2, #96	; 0x60
 8005b46:	2100      	movs	r1, #0
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f7ff fb39 	bl	80051c0 <OLED_Rectangle>
	OLED_row = 1;
 8005b4e:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <OLED_MenuUI+0x84>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
	OLED_col = 1;
 8005b54:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <OLED_MenuUI+0x88>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	701a      	strb	r2, [r3, #0]
	OLED_charColor = titleTextColor;
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <OLED_MenuUI+0x8c>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6013      	str	r3, [r2, #0]
	OLED_bgColor = titleBgColor;
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <OLED_MenuUI+0x90>)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6013      	str	r3, [r2, #0]
	OLED_Printf("/s%s\n", title);
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	4816      	ldr	r0, [pc, #88]	; (8005bc4 <OLED_MenuUI+0x94>)
 8005b6a:	f7ff fc6f 	bl	800544c <OLED_Printf>
	OLED_charColor = textColor;
 8005b6e:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <OLED_MenuUI+0x8c>)
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	6013      	str	r3, [r2, #0]
	OLED_bgColor = 0;
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <OLED_MenuUI+0x90>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < count; i++){
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75fb      	strb	r3, [r7, #23]
 8005b7e:	e00f      	b.n	8005ba0 <OLED_MenuUI+0x70>
		OLED_Printf("/s%s\n", menu[i].message);
 8005b80:	7dfa      	ldrb	r2, [r7, #23]
 8005b82:	4613      	mov	r3, r2
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4413      	add	r3, r2
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4619      	mov	r1, r3
 8005b94:	480b      	ldr	r0, [pc, #44]	; (8005bc4 <OLED_MenuUI+0x94>)
 8005b96:	f7ff fc59 	bl	800544c <OLED_Printf>
	for(uint8_t i = 0; i < count; i++){
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d8eb      	bhi.n	8005b80 <OLED_MenuUI+0x50>
	}
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000009 	.word	0x20000009
 8005bb8:	2000000a 	.word	0x2000000a
 8005bbc:	2000000c 	.word	0x2000000c
 8005bc0:	200006dc 	.word	0x200006dc
 8005bc4:	08009f68 	.word	0x08009f68

08005bc8 <OLED_Cursor>:

void OLED_Cursor(uint8_t n, uint32_t color){
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	4603      	mov	r3, r0
 8005bd0:	6039      	str	r1, [r7, #0]
 8005bd2:	71fb      	strb	r3, [r7, #7]
	//Line Erase
	for(uint8_t i = 9; i < 64; i+=9){
 8005bd4:	2309      	movs	r3, #9
 8005bd6:	73fb      	strb	r3, [r7, #15]
 8005bd8:	e00a      	b.n	8005bf0 <OLED_Cursor+0x28>
		OLED_Line(0, i, 95, i, 0);
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	7bf9      	ldrb	r1, [r7, #15]
 8005bde:	2200      	movs	r2, #0
 8005be0:	9200      	str	r2, [sp, #0]
 8005be2:	225f      	movs	r2, #95	; 0x5f
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7ff ff59 	bl	8005a9c <OLED_Line>
	for(uint8_t i = 9; i < 64; i+=9){
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	3309      	adds	r3, #9
 8005bee:	73fb      	strb	r3, [r7, #15]
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8005bf4:	d9f1      	bls.n	8005bda <OLED_Cursor+0x12>
	}
	OLED_Line(0, 9, 0, 63, 0);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	233f      	movs	r3, #63	; 0x3f
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2109      	movs	r1, #9
 8005c00:	2000      	movs	r0, #0
 8005c02:	f7ff ff4b 	bl	8005a9c <OLED_Line>
	OLED_Line(95, 9, 95, 63, 0);
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	233f      	movs	r3, #63	; 0x3f
 8005c0c:	225f      	movs	r2, #95	; 0x5f
 8005c0e:	2109      	movs	r1, #9
 8005c10:	205f      	movs	r0, #95	; 0x5f
 8005c12:	f7ff ff43 	bl	8005a9c <OLED_Line>

	//Line Drawing
	OLED_Line(0, 9 + 9 * n, 95, 9 + 9 * n, color);
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	00d2      	lsls	r2, r2, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	b2d9      	uxtb	r1, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	00d2      	lsls	r2, r2, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	225f      	movs	r2, #95	; 0x5f
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7ff ff2e 	bl	8005a9c <OLED_Line>
	OLED_Line(0, 18 + 9 * n, 95, 18 + 9 * n, color);
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	461a      	mov	r2, r3
 8005c44:	00d2      	lsls	r2, r2, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	3312      	adds	r3, #18
 8005c4c:	b2d9      	uxtb	r1, r3
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	461a      	mov	r2, r3
 8005c52:	00d2      	lsls	r2, r2, #3
 8005c54:	4413      	add	r3, r2
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	3312      	adds	r3, #18
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	225f      	movs	r2, #95	; 0x5f
 8005c64:	2000      	movs	r0, #0
 8005c66:	f7ff ff19 	bl	8005a9c <OLED_Line>
	OLED_Line(0, 9 + 9 * n, 0, 18 + 9 * n, color);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	00d2      	lsls	r2, r2, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	b2d9      	uxtb	r1, r3
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	00d2      	lsls	r2, r2, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	3312      	adds	r3, #18
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f7ff ff04 	bl	8005a9c <OLED_Line>
	OLED_Line(95, 9 + 9 * n, 95, 18 + 9 * n, color);
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	3301      	adds	r3, #1
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	00d2      	lsls	r2, r2, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	b2d9      	uxtb	r1, r3
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	00d2      	lsls	r2, r2, #3
 8005ca8:	4413      	add	r3, r2
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	3312      	adds	r3, #18
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	225f      	movs	r2, #95	; 0x5f
 8005cb8:	205f      	movs	r0, #95	; 0x5f
 8005cba:	f7ff feef 	bl	8005a9c <OLED_Line>
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <Switch_LED>:
#define LONG_FLAG 0x20

#define LINE_TRACER_SWITCH
extern TIM_HandleTypeDef htim4;

void Switch_LED(uint16_t red, uint16_t blue){
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	80fb      	strh	r3, [r7, #6]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	80bb      	strh	r3, [r7, #4]
	htim4.Instance -> CCR1 = red;
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <Switch_LED+0x2c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance -> CCR2 = blue;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <Switch_LED+0x2c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	88ba      	ldrh	r2, [r7, #4]
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	200005ac 	.word	0x200005ac

08005cf8 <Switch_Read>:

uint16_t Switch_Read(){
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	static uint16_t Switch_sum = 0;
	static uint16_t Switch_input = 0;
	static uint32_t Switch_time = 0;
	static uint32_t Switch_lowTime = 0;
#ifdef LINE_TRACER_SWITCH
	uint8_t sw1 = !HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 8005cfe:	2108      	movs	r1, #8
 8005d00:	4893      	ldr	r0, [pc, #588]	; (8005f50 <Switch_Read+0x258>)
 8005d02:	f7fc fab7 	bl	8002274 <HAL_GPIO_ReadPin>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	71fb      	strb	r3, [r7, #7]
	uint8_t sw2 = !HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8005d14:	2110      	movs	r1, #16
 8005d16:	488e      	ldr	r0, [pc, #568]	; (8005f50 <Switch_Read+0x258>)
 8005d18:	f7fc faac 	bl	8002274 <HAL_GPIO_ReadPin>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	71bb      	strb	r3, [r7, #6]
	uint8_t sw3 = !HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 8005d2a:	2120      	movs	r1, #32
 8005d2c:	4888      	ldr	r0, [pc, #544]	; (8005f50 <Switch_Read+0x258>)
 8005d2e:	f7fc faa1 	bl	8002274 <HAL_GPIO_ReadPin>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2301      	moveq	r3, #1
 8005d3a:	2300      	movne	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	717b      	strb	r3, [r7, #5]
	uint8_t sw4 = !HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin);
 8005d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d44:	4882      	ldr	r0, [pc, #520]	; (8005f50 <Switch_Read+0x258>)
 8005d46:	f7fc fa95 	bl	8002274 <HAL_GPIO_ReadPin>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf0c      	ite	eq
 8005d50:	2301      	moveq	r3, #1
 8005d52:	2300      	movne	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	713b      	strb	r3, [r7, #4]
	uint8_t sw5 = !HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin);
 8005d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d5c:	487c      	ldr	r0, [pc, #496]	; (8005f50 <Switch_Read+0x258>)
 8005d5e:	f7fc fa89 	bl	8002274 <HAL_GPIO_ReadPin>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	70fb      	strb	r3, [r7, #3]
	Switch_input = sw1 | (sw2 << 1) | (sw3 << 2) | (sw4 << 3) | (sw5 << 4);
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	b21a      	sxth	r2, r3
 8005d74:	79bb      	ldrb	r3, [r7, #6]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	b21b      	sxth	r3, r3
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	b21a      	sxth	r2, r3
 8005d7e:	797b      	ldrb	r3, [r7, #5]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b21a      	sxth	r2, r3
 8005d88:	793b      	ldrb	r3, [r7, #4]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	b21b      	sxth	r3, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b21a      	sxth	r2, r3
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	b21b      	sxth	r3, r3
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	b21b      	sxth	r3, r3
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <Switch_Read+0x25c>)
 8005da0:	801a      	strh	r2, [r3, #0]
#endif
	switch(Switch_state){
 8005da2:	4b6d      	ldr	r3, [pc, #436]	; (8005f58 <Switch_Read+0x260>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	f200 80cd 	bhi.w	8005f46 <Switch_Read+0x24e>
 8005dac:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <Switch_Read+0xbc>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005df9 	.word	0x08005df9
 8005dbc:	08005e3d 	.word	0x08005e3d
 8005dc0:	08005e85 	.word	0x08005e85
 8005dc4:	08005ebd 	.word	0x08005ebd
 8005dc8:	08005efd 	.word	0x08005efd
	case SWITCH_STATE_IDLE:
		if(Switch_input){
 8005dcc:	4b61      	ldr	r3, [pc, #388]	; (8005f54 <Switch_Read+0x25c>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80af 	beq.w	8005f34 <Switch_Read+0x23c>
			Switch_time = HAL_GetTick();
 8005dd6:	f7fb ff87 	bl	8001ce8 <HAL_GetTick>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4a5f      	ldr	r2, [pc, #380]	; (8005f5c <Switch_Read+0x264>)
 8005dde:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_DOWN;
 8005de0:	4b5d      	ldr	r3, [pc, #372]	; (8005f58 <Switch_Read+0x260>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	701a      	strb	r2, [r3, #0]
			Switch_sum |= Switch_input;
 8005de6:	4b5e      	ldr	r3, [pc, #376]	; (8005f60 <Switch_Read+0x268>)
 8005de8:	881a      	ldrh	r2, [r3, #0]
 8005dea:	4b5a      	ldr	r3, [pc, #360]	; (8005f54 <Switch_Read+0x25c>)
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	4b5b      	ldr	r3, [pc, #364]	; (8005f60 <Switch_Read+0x268>)
 8005df4:	801a      	strh	r2, [r3, #0]
		}
		break;
 8005df6:	e09d      	b.n	8005f34 <Switch_Read+0x23c>
	case SWITCH_STATE_PRE_DOWN:
		if(Switch_input){
 8005df8:	4b56      	ldr	r3, [pc, #344]	; (8005f54 <Switch_Read+0x25c>)
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d016      	beq.n	8005e2e <Switch_Read+0x136>
			if(HAL_GetTick() - Switch_time > 80){
 8005e00:	f7fb ff72 	bl	8001ce8 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	4b55      	ldr	r3, [pc, #340]	; (8005f5c <Switch_Read+0x264>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b50      	cmp	r3, #80	; 0x50
 8005e0e:	d905      	bls.n	8005e1c <Switch_Read+0x124>
				Switch_state = SWITCH_STATE_DOWN;
 8005e10:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <Switch_Read+0x260>)
 8005e12:	2202      	movs	r2, #2
 8005e14:	701a      	strb	r2, [r3, #0]
				return Switch_sum;
 8005e16:	4b52      	ldr	r3, [pc, #328]	; (8005f60 <Switch_Read+0x268>)
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	e095      	b.n	8005f48 <Switch_Read+0x250>
			}
			Switch_sum |= Switch_input;
 8005e1c:	4b50      	ldr	r3, [pc, #320]	; (8005f60 <Switch_Read+0x268>)
 8005e1e:	881a      	ldrh	r2, [r3, #0]
 8005e20:	4b4c      	ldr	r3, [pc, #304]	; (8005f54 <Switch_Read+0x25c>)
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	4b4d      	ldr	r3, [pc, #308]	; (8005f60 <Switch_Read+0x268>)
 8005e2a:	801a      	strh	r2, [r3, #0]
		}
		else{
			Switch_state = SWITCH_STATE_IDLE;
			Switch_sum = 0;
		}
		break;
 8005e2c:	e08b      	b.n	8005f46 <Switch_Read+0x24e>
			Switch_state = SWITCH_STATE_IDLE;
 8005e2e:	4b4a      	ldr	r3, [pc, #296]	; (8005f58 <Switch_Read+0x260>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
			Switch_sum = 0;
 8005e34:	4b4a      	ldr	r3, [pc, #296]	; (8005f60 <Switch_Read+0x268>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	801a      	strh	r2, [r3, #0]
		break;
 8005e3a:	e084      	b.n	8005f46 <Switch_Read+0x24e>
	case SWITCH_STATE_DOWN:
		if(!Switch_input){
 8005e3c:	4b45      	ldr	r3, [pc, #276]	; (8005f54 <Switch_Read+0x25c>)
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <Switch_Read+0x15e>
			Switch_lowTime = HAL_GetTick();
 8005e44:	f7fb ff50 	bl	8001ce8 <HAL_GetTick>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <Switch_Read+0x26c>)
 8005e4c:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE;
 8005e4e:	4b42      	ldr	r3, [pc, #264]	; (8005f58 <Switch_Read+0x260>)
 8005e50:	2203      	movs	r2, #3
 8005e52:	701a      	strb	r2, [r3, #0]
		else if(HAL_GetTick() - Switch_time > 400){
			Switch_time = HAL_GetTick();
			Switch_state = SWITCH_STATE_LONG;
			return Switch_sum | LONG_FLAG;
		}
		break;
 8005e54:	e070      	b.n	8005f38 <Switch_Read+0x240>
		else if(HAL_GetTick() - Switch_time > 400){
 8005e56:	f7fb ff47 	bl	8001ce8 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <Switch_Read+0x264>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005e66:	d967      	bls.n	8005f38 <Switch_Read+0x240>
			Switch_time = HAL_GetTick();
 8005e68:	f7fb ff3e 	bl	8001ce8 <HAL_GetTick>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	4a3b      	ldr	r2, [pc, #236]	; (8005f5c <Switch_Read+0x264>)
 8005e70:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_LONG;
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <Switch_Read+0x260>)
 8005e74:	2204      	movs	r2, #4
 8005e76:	701a      	strb	r2, [r3, #0]
			return Switch_sum | LONG_FLAG;
 8005e78:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <Switch_Read+0x268>)
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	e061      	b.n	8005f48 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE:
		if(!Switch_input){
 8005e84:	4b33      	ldr	r3, [pc, #204]	; (8005f54 <Switch_Read+0x25c>)
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d113      	bne.n	8005eb4 <Switch_Read+0x1bc>
			if(HAL_GetTick() - Switch_lowTime > 80){
 8005e8c:	f7fb ff2c 	bl	8001ce8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <Switch_Read+0x26c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b50      	cmp	r3, #80	; 0x50
 8005e9a:	d94f      	bls.n	8005f3c <Switch_Read+0x244>
				Switch_time = HAL_GetTick();
 8005e9c:	f7fb ff24 	bl	8001ce8 <HAL_GetTick>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4a2e      	ldr	r2, [pc, #184]	; (8005f5c <Switch_Read+0x264>)
 8005ea4:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 8005ea6:	4b2c      	ldr	r3, [pc, #176]	; (8005f58 <Switch_Read+0x260>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 8005eac:	4b2c      	ldr	r3, [pc, #176]	; (8005f60 <Switch_Read+0x268>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_DOWN;
		}
		break;
 8005eb2:	e043      	b.n	8005f3c <Switch_Read+0x244>
			Switch_state = SWITCH_STATE_DOWN;
 8005eb4:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <Switch_Read+0x260>)
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	701a      	strb	r2, [r3, #0]
		break;
 8005eba:	e03f      	b.n	8005f3c <Switch_Read+0x244>
	case SWITCH_STATE_LONG:
		if(!Switch_input){
 8005ebc:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <Switch_Read+0x25c>)
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d108      	bne.n	8005ed6 <Switch_Read+0x1de>
			Switch_lowTime = HAL_GetTick();
 8005ec4:	f7fb ff10 	bl	8001ce8 <HAL_GetTick>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <Switch_Read+0x26c>)
 8005ecc:	6013      	str	r3, [r2, #0]
			Switch_state = SWITCH_STATE_PRE_IDLE_LONG;
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <Switch_Read+0x260>)
 8005ed0:	2205      	movs	r2, #5
 8005ed2:	701a      	strb	r2, [r3, #0]
		}
		else if(HAL_GetTick() - Switch_time > 100){
			Switch_time = HAL_GetTick();
			return Switch_sum | LONG_FLAG;
		}
		break;
 8005ed4:	e034      	b.n	8005f40 <Switch_Read+0x248>
		else if(HAL_GetTick() - Switch_time > 100){
 8005ed6:	f7fb ff07 	bl	8001ce8 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <Switch_Read+0x264>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d92c      	bls.n	8005f40 <Switch_Read+0x248>
			Switch_time = HAL_GetTick();
 8005ee6:	f7fb feff 	bl	8001ce8 <HAL_GetTick>
 8005eea:	4603      	mov	r3, r0
 8005eec:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <Switch_Read+0x264>)
 8005eee:	6013      	str	r3, [r2, #0]
			return Switch_sum | LONG_FLAG;
 8005ef0:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <Switch_Read+0x268>)
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	e025      	b.n	8005f48 <Switch_Read+0x250>
	case SWITCH_STATE_PRE_IDLE_LONG:
		if(!Switch_input){
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <Switch_Read+0x25c>)
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d113      	bne.n	8005f2c <Switch_Read+0x234>
			if(HAL_GetTick() - Switch_lowTime > 80){
 8005f04:	f7fb fef0 	bl	8001ce8 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <Switch_Read+0x26c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b50      	cmp	r3, #80	; 0x50
 8005f12:	d917      	bls.n	8005f44 <Switch_Read+0x24c>
				Switch_time = HAL_GetTick();
 8005f14:	f7fb fee8 	bl	8001ce8 <HAL_GetTick>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4a10      	ldr	r2, [pc, #64]	; (8005f5c <Switch_Read+0x264>)
 8005f1c:	6013      	str	r3, [r2, #0]
				Switch_state = SWITCH_STATE_IDLE;
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <Switch_Read+0x260>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
				Switch_sum = 0;
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <Switch_Read+0x268>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	801a      	strh	r2, [r3, #0]
			}
		}
		else{
			Switch_state = SWITCH_STATE_LONG;
		}
		break;
 8005f2a:	e00b      	b.n	8005f44 <Switch_Read+0x24c>
			Switch_state = SWITCH_STATE_LONG;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <Switch_Read+0x260>)
 8005f2e:	2204      	movs	r2, #4
 8005f30:	701a      	strb	r2, [r3, #0]
		break;
 8005f32:	e007      	b.n	8005f44 <Switch_Read+0x24c>
		break;
 8005f34:	bf00      	nop
 8005f36:	e006      	b.n	8005f46 <Switch_Read+0x24e>
		break;
 8005f38:	bf00      	nop
 8005f3a:	e004      	b.n	8005f46 <Switch_Read+0x24e>
		break;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <Switch_Read+0x24e>
		break;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <Switch_Read+0x24e>
		break;
 8005f44:	bf00      	nop
	}
	return 0;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	40020400 	.word	0x40020400
 8005f54:	200006e0 	.word	0x200006e0
 8005f58:	200006e2 	.word	0x200006e2
 8005f5c:	200006e4 	.word	0x200006e4
 8005f60:	200006e8 	.word	0x200006e8
 8005f64:	200006ec 	.word	0x200006ec

08005f68 <Control_PID>:
		1.f,		// kd
		10.f,		// filterConst
		5.f			// antiWindUpConst
};

float Control_PID(float sensorADCRead, heater_t *heaterobj, PIDConst PIDMode){
 8005f68:	b084      	sub	sp, #16
 8005f6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6e:	b08c      	sub	sp, #48	; 0x30
 8005f70:	af06      	add	r7, sp, #24
 8005f72:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f76:	6038      	str	r0, [r7, #0]
 8005f78:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005f7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	float duty;
	heaterobj->prev = heaterobj->current;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	619a      	str	r2, [r3, #24]
	heaterobj->current = sensorADCRead;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	615a      	str	r2, [r3, #20]

	// Proportional term
	float temperatureError = heaterobj->target - heaterobj->current;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	ed93 7a04 	vldr	s14, [r3, #16]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9e:	edc7 7a04 	vstr	s15, [r7, #16]

	// Derivative term
	float temperatureDifferential = (heaterobj->current - heaterobj->prev) / PERIOD;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	ed93 7a05 	vldr	s14, [r3, #20]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fb2:	edc7 7a03 	vstr	s15, [r7, #12]

	// Integral term
	heaterobj->errorSum += temperatureError * PERIOD;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	ed93 7a07 	vldr	s14, [r3, #28]
 8005fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	edc3 7a07 	vstr	s15, [r3, #28]

	// Low Pass Filtering
	float temperatureDifferentialFilt = PIDMode.filterConst / (1 + PIDMode.filterConst / temperatureDifferential);
 8005fca:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8005fce:	ed97 6a12 	vldr	s12, [r7, #72]	; 0x48
 8005fd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8005fd6:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8005fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe6:	edc7 7a02 	vstr	s15, [r7, #8]

	// anti wind-up
	if (heaterobj->errorSum > PIDMode.antiWindUpConst) heaterobj->errorSum = PIDMode.antiWindUpConst;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	ed93 7a07 	vldr	s14, [r3, #28]
 8005ff0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffc:	dd03      	ble.n	8006006 <Control_PID+0x9e>
 8005ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	61da      	str	r2, [r3, #28]
 8006004:	e012      	b.n	800602c <Control_PID+0xc4>
	else if (heaterobj->errorSum < -PIDMode.antiWindUpConst) heaterobj->errorSum = -PIDMode.antiWindUpConst;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	ed93 7a07 	vldr	s14, [r3, #28]
 800600c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006010:	eef1 7a67 	vneg.f32	s15, s15
 8006014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	d506      	bpl.n	800602c <Control_PID+0xc4>
 800601e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006022:	eef1 7a67 	vneg.f32	s15, s15
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	edc3 7a07 	vstr	s15, [r3, #28]

	// PID control
	duty = (temperatureError * PIDMode.kp + temperatureDifferentialFilt * PIDMode.kd + heaterobj->errorSum * PIDMode.ki)/100;
 800602c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006030:	edd7 7a04 	vldr	s15, [r7, #16]
 8006034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006038:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800603c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	edd3 6a07 	vldr	s13, [r3, #28]
 800604e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800605a:	eddf 6a25 	vldr	s13, [pc, #148]	; 80060f0 <Control_PID+0x188>
 800605e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006062:	edc7 7a05 	vstr	s15, [r7, #20]

	// output limit
	if (duty < 0.01f) duty = 0.f;
 8006066:	edd7 7a05 	vldr	s15, [r7, #20]
 800606a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80060f4 <Control_PID+0x18c>
 800606e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006076:	d502      	bpl.n	800607e <Control_PID+0x116>
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
	if (duty > 0.99f) duty = 1.f;
 800607e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006082:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80060f8 <Control_PID+0x190>
 8006086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608e:	dd02      	ble.n	8006096 <Control_PID+0x12e>
 8006090:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006094:	617b      	str	r3, [r7, #20]
	printf("Te: %f, Td: %f, ES: %f, duty: %f\r\n", temperatureError, temperatureDifferential, heaterobj->errorSum, duty);
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7fa fa5e 	bl	8000558 <__aeabi_f2d>
 800609c:	4682      	mov	sl, r0
 800609e:	468b      	mov	fp, r1
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7fa fa59 	bl	8000558 <__aeabi_f2d>
 80060a6:	4604      	mov	r4, r0
 80060a8:	460d      	mov	r5, r1
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa fa52 	bl	8000558 <__aeabi_f2d>
 80060b4:	4680      	mov	r8, r0
 80060b6:	4689      	mov	r9, r1
 80060b8:	6978      	ldr	r0, [r7, #20]
 80060ba:	f7fa fa4d 	bl	8000558 <__aeabi_f2d>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80060ca:	e9cd 4500 	strd	r4, r5, [sp]
 80060ce:	4652      	mov	r2, sl
 80060d0:	465b      	mov	r3, fp
 80060d2:	480a      	ldr	r0, [pc, #40]	; (80060fc <Control_PID+0x194>)
 80060d4:	f001 fd1a 	bl	8007b0c <iprintf>
	return duty;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	ee07 3a90 	vmov	s15, r3
}
 80060de:	eeb0 0a67 	vmov.f32	s0, s15
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ea:	b004      	add	sp, #16
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	42c80000 	.word	0x42c80000
 80060f4:	3c23d70a 	.word	0x3c23d70a
 80060f8:	3f7d70a4 	.word	0x3f7d70a4
 80060fc:	08009f70 	.word	0x08009f70

08006100 <HeaterControl_TIM9_IRQ>:
static void Heater_Start(heater_t *heaterobj);
static void Heater_Stop(heater_t *heaterobj);
static void Heater_Set(heater_t *heaterobj);
static void Heater_Controller(tempsensor_t *tempsensor, heater_t *heaterobj);

void HeaterControl_TIM9_IRQ(){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
	Heater_Controller(tempTop, heaterTop);
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <HeaterControl_TIM9_IRQ+0x50>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <HeaterControl_TIM9_IRQ+0x54>)
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	4611      	mov	r1, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f8d4 	bl	80062bc <Heater_Controller>
	Heater_Controller(tempBottom, heaterBottom);
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <HeaterControl_TIM9_IRQ+0x58>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a10      	ldr	r2, [pc, #64]	; (800615c <HeaterControl_TIM9_IRQ+0x5c>)
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	4611      	mov	r1, r2
 800611e:	4618      	mov	r0, r3
 8006120:	f000 f8cc 	bl	80062bc <Heater_Controller>
	if(heaterTop->state)
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HeaterControl_TIM9_IRQ+0x54>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <HeaterControl_TIM9_IRQ+0x38>
		Heater_Set(heaterTop);
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <HeaterControl_TIM9_IRQ+0x54>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f87e 	bl	8006234 <Heater_Set>
	if(heaterBottom->state)
 8006138:	4b08      	ldr	r3, [pc, #32]	; (800615c <HeaterControl_TIM9_IRQ+0x5c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <HeaterControl_TIM9_IRQ+0x4c>
		Heater_Set(heaterBottom);
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <HeaterControl_TIM9_IRQ+0x5c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f874 	bl	8006234 <Heater_Set>
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}
 8006150:	200006c4 	.word	0x200006c4
 8006154:	200006cc 	.word	0x200006cc
 8006158:	200006c8 	.word	0x200006c8
 800615c:	200006d0 	.word	0x200006d0

08006160 <Custom_HeaterControl>:

heater_t *Custom_HeaterControl(TIM_HandleTypeDef *htim, uint32_t Channel){
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	//
	heater_t *heaterobj = (heater_t*) calloc(1, sizeof(heater_t));
 800616a:	212c      	movs	r1, #44	; 0x2c
 800616c:	2001      	movs	r0, #1
 800616e:	f000 ff2b 	bl	8006fc8 <calloc>
 8006172:	4603      	mov	r3, r0
 8006174:	60fb      	str	r3, [r7, #12]

	// Setting methods
	heaterobj->channel = Channel;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	605a      	str	r2, [r3, #4]
	heaterobj->current = .0f;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	615a      	str	r2, [r3, #20]
	heaterobj->duty = .0f;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	60da      	str	r2, [r3, #12]
	heaterobj->errorSum = .0f;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	61da      	str	r2, [r3, #28]
	heaterobj->htim = htim;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
	heaterobj->onFlag = false;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2020 	strb.w	r2, [r3, #32]
	heaterobj->prev = .0f;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	619a      	str	r2, [r3, #24]
	heaterobj->state = OFF;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	609a      	str	r2, [r3, #8]
	heaterobj->target = .0f;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	611a      	str	r2, [r3, #16]

	// Setting fields
	heaterobj->start = Heater_Start;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a05      	ldr	r2, [pc, #20]	; (80061d0 <Custom_HeaterControl+0x70>)
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
	heaterobj->stop = Heater_Stop;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <Custom_HeaterControl+0x74>)
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28

	return heaterobj;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	080061d9 	.word	0x080061d9
 80061d4:	08006201 	.word	0x08006201

080061d8 <Heater_Start>:

static void Heater_Start(heater_t *heaterobj){
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = true;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2020 	strb.w	r2, [r3, #32]
	HAL_TIM_PWM_Start(heaterobj->htim, heaterobj->channel);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f7fd fb72 	bl	80038dc <HAL_TIM_PWM_Start>
}
 80061f8:	bf00      	nop
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <Heater_Stop>:

static void Heater_Stop(heater_t *heaterobj){
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	heaterobj->onFlag = false;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2020 	strb.w	r2, [r3, #32]
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 8006210:	e007      	b.n	8006222 <Heater_Stop+0x22>
	HAL_TIM_PWM_Stop(heaterobj->htim, heaterobj->channel);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fd fc0d 	bl	8003a3c <HAL_TIM_PWM_Stop>
	while (heaterobj->state != OFF)	// Heater_Controller가 OFF 상태인지 확인
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f3      	bne.n	8006212 <Heater_Stop+0x12>
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <Heater_Set>:

static void Heater_Set(heater_t *heaterobj){
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	// Duty ratio to duty cycle conversion
	uint32_t dutycycle = heaterobj->duty * (__HAL_TIM_GET_AUTORELOAD(heaterobj->htim)+1) - 1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	3301      	adds	r3, #1
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800625c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006264:	ee17 3a90 	vmov	r3, s15
 8006268:	60fb      	str	r3, [r7, #12]
	// Set duty rate of PWM
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d105      	bne.n	800627e <Heater_Set+0x4a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800627c:	e018      	b.n	80062b0 <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b04      	cmp	r3, #4
 8006284:	d105      	bne.n	8006292 <Heater_Set+0x5e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006290:	e00e      	b.n	80062b0 <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b08      	cmp	r3, #8
 8006298:	d105      	bne.n	80062a6 <Heater_Set+0x72>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80062a4:	e004      	b.n	80062b0 <Heater_Set+0x7c>
	__HAL_TIM_SET_COMPARE(heaterobj->htim, heaterobj->channel, dutycycle);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <Heater_Controller>:

static void Heater_Controller(tempsensor_t *tempsensorobj, heater_t *heaterobj){
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b087      	sub	sp, #28
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
	float sensorADCRead = tempsensorobj->read(tempsensorobj);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	ed87 0a03 	vstr	s0, [r7, #12]
	if (sensorADCRead == NAN)
		return;

	switch (heaterobj->state){
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	f200 80d5 	bhi.w	8006486 <Heater_Controller+0x1ca>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <Heater_Controller+0x28>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080062f9 	.word	0x080062f9
 80062e8:	08006335 	.word	0x08006335
 80062ec:	0800637d 	.word	0x0800637d
 80062f0:	08006487 	.word	0x08006487
 80062f4:	08006403 	.word	0x08006403
		case OFF:
			heaterobj->duty = 0.f;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	60da      	str	r2, [r3, #12]
			heaterobj->errorSum = 0.f;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	61da      	str	r2, [r3, #28]
			heaterobj->prev = 0.f;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	619a      	str	r2, [r3, #24]
			heaterobj->current = 0.f;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	615a      	str	r2, [r3, #20]
			if (heaterobj->onFlag) {
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80b9 	beq.w	8006496 <Heater_Controller+0x1da>
				heaterobj->start(heaterobj);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	6838      	ldr	r0, [r7, #0]
 800632a:	4798      	blx	r3
				heaterobj->state = PREHEATING;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	609a      	str	r2, [r3, #8]
			}
			break;
 8006332:	e0b0      	b.n	8006496 <Heater_Controller+0x1da>

		case PREHEATING:
			heaterobj->duty = 1.f;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800633a:	60da      	str	r2, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006342:	f083 0301 	eor.w	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <Heater_Controller+0x98>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	609a      	str	r2, [r3, #8]
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
			break;
 8006352:	e0a1      	b.n	8006498 <Heater_Controller+0x1dc>
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	ed93 7a05 	vldr	s14, [r3, #20]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006360:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006364:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006370:	dc00      	bgt.n	8006374 <Heater_Controller+0xb8>
			break;
 8006372:	e091      	b.n	8006498 <Heater_Controller+0x1dc>
			else if (heaterobj->current > heaterobj->target - 5.f) heaterobj->state = TRANSIENT;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2202      	movs	r2, #2
 8006378:	609a      	str	r2, [r3, #8]
			break;
 800637a:	e08d      	b.n	8006498 <Heater_Controller+0x1dc>

		case TRANSIENT:
			heaterobj->duty = Control_PID(sensorADCRead, heaterobj, PIDTransient);
 800637c:	4b48      	ldr	r3, [pc, #288]	; (80064a0 <Heater_Controller+0x1e4>)
 800637e:	466c      	mov	r4, sp
 8006380:	f103 020c 	add.w	r2, r3, #12
 8006384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006388:	e884 0003 	stmia.w	r4, {r0, r1}
 800638c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800638e:	6838      	ldr	r0, [r7, #0]
 8006390:	ed97 0a03 	vldr	s0, [r7, #12]
 8006394:	f7ff fde8 	bl	8005f68 <Control_PID>
 8006398:	eef0 7a40 	vmov.f32	s15, s0
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063a8:	f083 0301 	eor.w	r3, r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <Heater_Controller+0xfe>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2200      	movs	r2, #0
 80063b6:	609a      	str	r2, [r3, #8]
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
			break;
 80063b8:	e06e      	b.n	8006498 <Heater_Controller+0x1dc>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80063c6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80064a4 <Heater_Controller+0x1e8>
 80063ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d6:	dc00      	bgt.n	80063da <Heater_Controller+0x11e>
			break;
 80063d8:	e05e      	b.n	8006498 <Heater_Controller+0x1dc>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80063e6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80064a4 <Heater_Controller+0x1e8>
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f6:	d400      	bmi.n	80063fa <Heater_Controller+0x13e>
			break;
 80063f8:	e04e      	b.n	8006498 <Heater_Controller+0x1dc>
			else if ((heaterobj->current > heaterobj->prev - DEVIATION) && (heaterobj->current < heaterobj->prev + DEVIATION)) heaterobj->state = STEADY;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2204      	movs	r2, #4
 80063fe:	609a      	str	r2, [r3, #8]
			break;
 8006400:	e04a      	b.n	8006498 <Heater_Controller+0x1dc>

		case STEADY:
			heaterobj->duty = Control_PID(sensorADCRead, heaterobj, PIDSteady);
 8006402:	4b29      	ldr	r3, [pc, #164]	; (80064a8 <Heater_Controller+0x1ec>)
 8006404:	466c      	mov	r4, sp
 8006406:	f103 020c 	add.w	r2, r3, #12
 800640a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800640e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006414:	6838      	ldr	r0, [r7, #0]
 8006416:	ed97 0a03 	vldr	s0, [r7, #12]
 800641a:	f7ff fda5 	bl	8005f68 <Control_PID>
 800641e:	eef0 7a40 	vmov.f32	s15, s0
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	edc3 7a03 	vstr	s15, [r3, #12]
			if (!heaterobj->onFlag) heaterobj->state = OFF;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800642e:	f083 0301 	eor.w	r3, r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <Heater_Controller+0x184>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	609a      	str	r2, [r3, #8]
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
			break;
 800643e:	e02b      	b.n	8006498 <Heater_Controller+0x1dc>
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	ed93 7a05 	vldr	s14, [r3, #20]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	edd3 7a06 	vldr	s15, [r3, #24]
 800644c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80064a4 <Heater_Controller+0x1e8>
 8006450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	d90f      	bls.n	800647e <Heater_Controller+0x1c2>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	ed93 7a05 	vldr	s14, [r3, #20]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	edd3 7a06 	vldr	s15, [r3, #24]
 800646a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80064a4 <Heater_Controller+0x1e8>
 800646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800647a:	da00      	bge.n	800647e <Heater_Controller+0x1c2>
			break;
 800647c:	e00c      	b.n	8006498 <Heater_Controller+0x1dc>
			else if ((heaterobj->current <= heaterobj->prev - DEVIATION) || (heaterobj->current >= heaterobj->prev + DEVIATION)) heaterobj->state = TRANSIENT;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2202      	movs	r2, #2
 8006482:	609a      	str	r2, [r3, #8]
			break;
 8006484:	e008      	b.n	8006498 <Heater_Controller+0x1dc>

		default:
			heaterobj->onFlag = 0;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2020 	strb.w	r2, [r3, #32]
			heaterobj->state = OFF;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2200      	movs	r2, #0
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	e000      	b.n	8006498 <Heater_Controller+0x1dc>
			break;
 8006496:	bf00      	nop
	}
}
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bd90      	pop	{r4, r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000204 	.word	0x20000204
 80064a4:	3e4ccccd 	.word	0x3e4ccccd
 80064a8:	20000218 	.word	0x20000218

080064ac <Systick_Sensor_IRQ>:
/* Functions */

// 카운트 값을 1씩 줄이기 위한 인터럽트 핸들러.
// HAL_InitTick 함수에서 Systick 인터럽트가 1ms마다 실행되도록 설정되므로,
// 핸들러의 실행주기도 1ms이다.
void Systick_Sensor_IRQ() {
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
	// 카운트가 0이 아니면, waitcount의 값을 1 감소시킨다.
	// 현재 카운트 node를 읽으면, next node가 없을 때까지 다음으로 넘어가 읽기를 반복한다.
	if (waitcount_node_storage.size > 0) {
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <Systick_Sensor_IRQ+0x48>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d015      	beq.n	80064e6 <Systick_Sensor_IRQ+0x3a>
		waitcount_node *cur_node = waitcount_node_storage.frontPtr;
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <Systick_Sensor_IRQ+0x48>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 80064c0:	e00e      	b.n	80064e0 <Systick_Sensor_IRQ+0x34>
			cur_node->data -= (cur_node->data == 0) ? 0 : 1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2201      	movne	r2, #1
 80064d0:	2200      	moveq	r2, #0
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	1a9a      	subs	r2, r3, r2
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	601a      	str	r2, [r3, #0]
			cur_node = cur_node->next;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	607b      	str	r3, [r7, #4]
		while (cur_node != NULL) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ed      	bne.n	80064c2 <Systick_Sensor_IRQ+0x16>
		}
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	200006f0 	.word	0x200006f0

080064f8 <Custom_Tempsensor>:

tempsensor_t* Custom_Tempsensor(SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t interval) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	80fb      	strh	r3, [r7, #6]
	// Setting methods
	tempsensor_t *sensorobj = (tempsensor_t*) calloc(1, sizeof(tempsensor_t));
 8006508:	212c      	movs	r1, #44	; 0x2c
 800650a:	2001      	movs	r0, #1
 800650c:	f000 fd5c 	bl	8006fc8 <calloc>
 8006510:	4603      	mov	r3, r0
 8006512:	617b      	str	r3, [r7, #20]

	sensorobj->read = read;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <Custom_Tempsensor+0x8c>)
 8006518:	619a      	str	r2, [r3, #24]
	sensorobj->is_readable = is_readable;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <Custom_Tempsensor+0x90>)
 800651e:	61da      	str	r2, [r3, #28]
	sensorobj->set_interval = set_interval;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	4a1a      	ldr	r2, [pc, #104]	; (800658c <Custom_Tempsensor+0x94>)
 8006524:	621a      	str	r2, [r3, #32]
	sensorobj->get_interval = get_interval;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4a19      	ldr	r2, [pc, #100]	; (8006590 <Custom_Tempsensor+0x98>)
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
	sensorobj->read_waitcount = read_waitcount;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4a19      	ldr	r2, [pc, #100]	; (8006594 <Custom_Tempsensor+0x9c>)
 8006530:	629a      	str	r2, [r3, #40]	; 0x28


	// Setting fields
	sensorobj->hspi = hspi;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]
	sensorobj->__sensor_interval = interval;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	60da      	str	r2, [r3, #12]

	// Setting CS pin
	sensorobj->csPin = GPIO_Pin;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	829a      	strh	r2, [r3, #20]
	sensorobj->csPort = GPIOx;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	605a      	str	r2, [r3, #4]

	// Pulling up CS pin
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	6858      	ldr	r0, [r3, #4]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	8a9b      	ldrh	r3, [r3, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	4619      	mov	r1, r3
 8006556:	f7fb fea5 	bl	80022a4 <HAL_GPIO_WritePin>

	// setting waitCount object
	waitcount_node *waitCntNode = (waitcount_node*) calloc(1, sizeof(waitcount_node));
 800655a:	2108      	movs	r1, #8
 800655c:	2001      	movs	r0, #1
 800655e:	f000 fd33 	bl	8006fc8 <calloc>
 8006562:	4603      	mov	r3, r0
 8006564:	613b      	str	r3, [r7, #16]
	sensorobj->waitCount = &(waitCntNode->data);
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	609a      	str	r2, [r3, #8]
	*(sensorobj->waitCount) = 10;	// for initialize&interrupt working test
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	220a      	movs	r2, #10
 8006572:	601a      	str	r2, [r3, #0]
	Add_GlobalWaitCountNode(waitCntNode);
 8006574:	6938      	ldr	r0, [r7, #16]
 8006576:	f000 f80f 	bl	8006598 <Add_GlobalWaitCountNode>

	return sensorobj;
 800657a:	697b      	ldr	r3, [r7, #20]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	08006669 	.word	0x08006669
 8006588:	080066b7 	.word	0x080066b7
 800658c:	080066db 	.word	0x080066db
 8006590:	080066f7 	.word	0x080066f7
 8006594:	0800670f 	.word	0x0800670f

08006598 <Add_GlobalWaitCountNode>:

void Add_GlobalWaitCountNode(waitcount_node *waitCntNode) {
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	if (waitCntNode != NULL) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <Add_GlobalWaitCountNode+0x36>

		if (waitcount_node_storage.size == 0) {
 80065a6:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <Add_GlobalWaitCountNode+0x44>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <Add_GlobalWaitCountNode+0x1e>
			waitcount_node_storage.frontPtr = waitCntNode;
 80065ae:	4a0b      	ldr	r2, [pc, #44]	; (80065dc <Add_GlobalWaitCountNode+0x44>)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	e003      	b.n	80065be <Add_GlobalWaitCountNode+0x26>
		} else {
			waitcount_node_storage.backPtr->next = waitCntNode;
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <Add_GlobalWaitCountNode+0x44>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	605a      	str	r2, [r3, #4]

		}
		waitcount_node_storage.backPtr = waitCntNode;
 80065be:	4a07      	ldr	r2, [pc, #28]	; (80065dc <Add_GlobalWaitCountNode+0x44>)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6053      	str	r3, [r2, #4]
		waitcount_node_storage.size++;
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <Add_GlobalWaitCountNode+0x44>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a04      	ldr	r2, [pc, #16]	; (80065dc <Add_GlobalWaitCountNode+0x44>)
 80065cc:	6093      	str	r3, [r2, #8]
	}
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	200006f0 	.word	0x200006f0

080065e0 <__sensor_read>:

/* Methods */
__weak float __sensor_read(tempsensor_t *sensorobj) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	uint8_t pData[2];
	float temp = 0;
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]

	// 16비트 데이터를 MSB부터 차례대로 받는다.
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_RESET);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6858      	ldr	r0, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8a9b      	ldrh	r3, [r3, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	4619      	mov	r1, r3
 80065fa:	f7fb fe53 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(sensorobj->hspi, pData, 1, 50);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	f107 0108 	add.w	r1, r7, #8
 8006606:	2332      	movs	r3, #50	; 0x32
 8006608:	2201      	movs	r2, #1
 800660a:	f7fc fc82 	bl	8002f12 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(sensorobj->csPort, sensorobj->csPin, GPIO_PIN_SET);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6858      	ldr	r0, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8a9b      	ldrh	r3, [r3, #20]
 8006616:	2201      	movs	r2, #1
 8006618:	4619      	mov	r1, r3
 800661a:	f7fb fe43 	bl	80022a4 <HAL_GPIO_WritePin>

	if (((pData[0]|(pData[1]<<8))>>2)& 0x0001)
 800661e:	7a3b      	ldrb	r3, [r7, #8]
 8006620:	461a      	mov	r2, r3
 8006622:	7a7b      	ldrb	r3, [r7, #9]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	4313      	orrs	r3, r2
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <__sensor_read+0x56>
	   return NAN;
 8006630:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8006664 <__sensor_read+0x84>
 8006634:	e011      	b.n	800665a <__sensor_read+0x7a>
	temp = ((((pData[0]|pData[1]<<8)))>>3);
 8006636:	7a3b      	ldrb	r3, [r7, #8]
 8006638:	461a      	mov	r2, r3
 800663a:	7a7b      	ldrb	r3, [r7, #9]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	4313      	orrs	r3, r2
 8006640:	10db      	asrs	r3, r3, #3
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800664a:	edc7 7a03 	vstr	s15, [r7, #12]

	return temp * 0.25f;
 800664e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006652:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8006656:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800665a:	eeb0 0a67 	vmov.f32	s0, s15
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	7fc00000 	.word	0x7fc00000

08006668 <read>:
float read(tempsensor_t *sensorobj) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	float data = .0f;
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
	if (sensorobj->is_readable(sensorobj)) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <read+0x38>
		data = __sensor_read(sensorobj);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ffab 	bl	80065e0 <__sensor_read>
 800668a:	ed87 0a03 	vstr	s0, [r7, #12]
		*(sensorobj->waitCount) = sensorobj->__sensor_interval;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68d2      	ldr	r2, [r2, #12]
 8006696:	601a      	str	r2, [r3, #0]
		sensorobj->lastTemp = data;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	611a      	str	r2, [r3, #16]
 800669e:	e002      	b.n	80066a6 <read+0x3e>
	} else {
		data = sensorobj->lastTemp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	ee07 3a90 	vmov	s15, r3
}
 80066ac:	eeb0 0a67 	vmov.f32	s0, s15
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <is_readable>:
bool is_readable(tempsensor_t *sensorobj) {
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	return !(sensorobj->read_waitcount(sensorobj));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <set_interval>:

void set_interval(tempsensor_t *sensorobj, uint32_t interval) {
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
	sensorobj->__sensor_interval = interval;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	60da      	str	r2, [r3, #12]
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <get_interval>:
uint32_t get_interval(tempsensor_t *sensorobj) {
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
	return sensorobj->__sensor_interval;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <read_waitcount>:
uint32_t read_waitcount(tempsensor_t *sensorobj) {
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
	return *(sensorobj->waitCount);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	681b      	ldr	r3, [r3, #0]
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <testTemp>:

extern heater_t *heaterTop;
extern heater_t *heaterBottom;


void testTemp(){
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
	SwitchLED(COLOR_BLACK);
 800672e:	2100      	movs	r1, #0
 8006730:	2000      	movs	r0, #0
 8006732:	f7ff fac9 	bl	8005cc8 <Switch_LED>
	for(;;){
		uint16_t sw = Switch_Read();
 8006736:	f7ff fadf 	bl	8005cf8 <Switch_Read>
 800673a:	4603      	mov	r3, r0
 800673c:	81fb      	strh	r3, [r7, #14]
		if(sw) break;
 800673e:	89fb      	ldrh	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d136      	bne.n	80067b2 <testTemp+0x8a>
		if (tempTop->is_readable(tempTop) && tempBottom->is_readable(tempBottom)) {
 8006744:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <testTemp+0x94>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	4a1c      	ldr	r2, [pc, #112]	; (80067bc <testTemp+0x94>)
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	4610      	mov	r0, r2
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ee      	beq.n	8006736 <testTemp+0xe>
 8006758:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <testTemp+0x98>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <testTemp+0x98>)
 8006760:	6812      	ldr	r2, [r2, #0]
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0e4      	beq.n	8006736 <testTemp+0xe>
			float temp1 = tempTop->read(tempTop);
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <testTemp+0x94>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <testTemp+0x94>)
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	4610      	mov	r0, r2
 8006778:	4798      	blx	r3
 800677a:	ed87 0a02 	vstr	s0, [r7, #8]
			float temp2 = tempBottom->read(tempBottom);
 800677e:	4b10      	ldr	r3, [pc, #64]	; (80067c0 <testTemp+0x98>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	4a0e      	ldr	r2, [pc, #56]	; (80067c0 <testTemp+0x98>)
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	ed87 0a01 	vstr	s0, [r7, #4]
			OLED_Printf("/s/0/rtempU: /y%f\r\n", temp1);
 8006790:	68b8      	ldr	r0, [r7, #8]
 8006792:	f7f9 fee1 	bl	8000558 <__aeabi_f2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	480a      	ldr	r0, [pc, #40]	; (80067c4 <testTemp+0x9c>)
 800679c:	f7fe fe56 	bl	800544c <OLED_Printf>
			OLED_Printf("/s/1/rtempD: /y%f\r\n", temp2);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7f9 fed9 	bl	8000558 <__aeabi_f2d>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4807      	ldr	r0, [pc, #28]	; (80067c8 <testTemp+0xa0>)
 80067ac:	f7fe fe4e 	bl	800544c <OLED_Printf>
	for(;;){
 80067b0:	e7c1      	b.n	8006736 <testTemp+0xe>
		if(sw) break;
 80067b2:	bf00      	nop
//			printf("temp: %f\r\n", temp1->read(temp1));
		}
	}
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	200006c4 	.word	0x200006c4
 80067c0:	200006c8 	.word	0x200006c8
 80067c4:	08009f94 	.word	0x08009f94
 80067c8:	08009fa8 	.word	0x08009fa8

080067cc <testHeat>:

// FLAG_TEMPSENSOR_DEBUG가 설정되어 있어야 온도를 직접 제어할 수 있다.
void testHeat(){
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
	SwitchLED(COLOR_SKY);
 80067d2:	21a0      	movs	r1, #160	; 0xa0
 80067d4:	2035      	movs	r0, #53	; 0x35
 80067d6:	f7ff fa77 	bl	8005cc8 <Switch_LED>
	uint16_t idx = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	80fb      	strh	r3, [r7, #6]
	heaterTop->start(heaterTop);
 80067de:	4b41      	ldr	r3, [pc, #260]	; (80068e4 <testHeat+0x118>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	4a3f      	ldr	r2, [pc, #252]	; (80068e4 <testHeat+0x118>)
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
	for(;;){
		uint16_t sw = Switch_Read();
 80067ec:	f7ff fa84 	bl	8005cf8 <Switch_Read>
 80067f0:	4603      	mov	r3, r0
 80067f2:	80bb      	strh	r3, [r7, #4]

		if(sw==SW_LEFT_LONG) break;
 80067f4:	88bb      	ldrh	r3, [r7, #4]
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d068      	beq.n	80068cc <testHeat+0x100>
		else if (sw==SW_LEFT) idx = 0;
 80067fa:	88bb      	ldrh	r3, [r7, #4]
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d102      	bne.n	8006806 <testHeat+0x3a>
 8006800:	2300      	movs	r3, #0
 8006802:	80fb      	strh	r3, [r7, #6]
 8006804:	e030      	b.n	8006868 <testHeat+0x9c>
		else if (sw==SW_RIGHT) idx = 1;
 8006806:	88bb      	ldrh	r3, [r7, #4]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d102      	bne.n	8006812 <testHeat+0x46>
 800680c:	2301      	movs	r3, #1
 800680e:	80fb      	strh	r3, [r7, #6]
 8006810:	e02a      	b.n	8006868 <testHeat+0x9c>
		else if (sw==SW_TOP || sw==SW_TOP_LONG) {
 8006812:	88bb      	ldrh	r3, [r7, #4]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d002      	beq.n	800681e <testHeat+0x52>
 8006818:	88bb      	ldrh	r3, [r7, #4]
 800681a:	2b22      	cmp	r3, #34	; 0x22
 800681c:	d10f      	bne.n	800683e <testHeat+0x72>
			if (idx)
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d021      	beq.n	8006868 <testHeat+0x9c>
				heaterTop->target += 1.0f;
 8006824:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <testHeat+0x118>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	edd3 7a04 	vldr	s15, [r3, #16]
 800682c:	4b2d      	ldr	r3, [pc, #180]	; (80068e4 <testHeat+0x118>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006838:	edc3 7a04 	vstr	s15, [r3, #16]
			if (idx)
 800683c:	e014      	b.n	8006868 <testHeat+0x9c>
#ifdef FLAG_TEMPSENSOR_DEBUG
			else
				tempTop->lastTemp += 10.0f;
#endif
		}
		else if (sw==SW_BOTTOM || sw==SW_BOTTOM_LONG) {
 800683e:	88bb      	ldrh	r3, [r7, #4]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d002      	beq.n	800684a <testHeat+0x7e>
 8006844:	88bb      	ldrh	r3, [r7, #4]
 8006846:	2b28      	cmp	r3, #40	; 0x28
 8006848:	d10e      	bne.n	8006868 <testHeat+0x9c>
			if (idx)
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <testHeat+0x9c>
				heaterTop->target -= 1.0f;
 8006850:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <testHeat+0x118>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	edd3 7a04 	vldr	s15, [r3, #16]
 8006858:	4b22      	ldr	r3, [pc, #136]	; (80068e4 <testHeat+0x118>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006864:	edc3 7a04 	vstr	s15, [r3, #16]
#ifdef FLAG_TEMPSENSOR_DEBUG
			else
				tempTop->lastTemp -= 10.0f;
#endif
		}
		float temp = tempTop->read(tempTop);
 8006868:	4b1f      	ldr	r3, [pc, #124]	; (80068e8 <testHeat+0x11c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <testHeat+0x11c>)
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	4610      	mov	r0, r2
 8006874:	4798      	blx	r3
 8006876:	ed87 0a00 	vstr	s0, [r7]
		OLED_Printf("/s/0/rSelect: /p%s\r\n", (idx)?"target":"temp  ");
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <testHeat+0xb8>
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <testHeat+0x120>)
 8006882:	e000      	b.n	8006886 <testHeat+0xba>
 8006884:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <testHeat+0x124>)
 8006886:	4619      	mov	r1, r3
 8006888:	481a      	ldr	r0, [pc, #104]	; (80068f4 <testHeat+0x128>)
 800688a:	f7fe fddf 	bl	800544c <OLED_Printf>
		OLED_Printf("/s/1/rtempU: /y%f\r\n", temp);
 800688e:	6838      	ldr	r0, [r7, #0]
 8006890:	f7f9 fe62 	bl	8000558 <__aeabi_f2d>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4817      	ldr	r0, [pc, #92]	; (80068f8 <testHeat+0x12c>)
 800689a:	f7fe fdd7 	bl	800544c <OLED_Printf>
		OLED_Printf("/s/2/rtargetU: /y%f\r\n", heaterTop->target);
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <testHeat+0x118>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7f9 fe57 	bl	8000558 <__aeabi_f2d>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4813      	ldr	r0, [pc, #76]	; (80068fc <testHeat+0x130>)
 80068b0:	f7fe fdcc 	bl	800544c <OLED_Printf>
		OLED_Printf("/s/3/rdutyU: /y%f\r\n", heaterTop->duty);
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <testHeat+0x118>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7f9 fe4c 	bl	8000558 <__aeabi_f2d>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	480e      	ldr	r0, [pc, #56]	; (8006900 <testHeat+0x134>)
 80068c6:	f7fe fdc1 	bl	800544c <OLED_Printf>
	for(;;){
 80068ca:	e78f      	b.n	80067ec <testHeat+0x20>
		if(sw==SW_LEFT_LONG) break;
 80068cc:	bf00      	nop
	}
	heaterTop->stop(heaterTop);
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <testHeat+0x118>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d4:	4a03      	ldr	r2, [pc, #12]	; (80068e4 <testHeat+0x118>)
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	4610      	mov	r0, r2
 80068da:	4798      	blx	r3
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	200006cc 	.word	0x200006cc
 80068e8:	200006c4 	.word	0x200006c4
 80068ec:	08009fbc 	.word	0x08009fbc
 80068f0:	08009fc4 	.word	0x08009fc4
 80068f4:	08009fcc 	.word	0x08009fcc
 80068f8:	08009fe4 	.word	0x08009fe4
 80068fc:	08009ff8 	.word	0x08009ff8
 8006900:	0800a010 	.word	0x0800a010

08006904 <profile>:



void profile(){}
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
 8006908:	bf00      	nop
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <Menu_Setup>:

};

const uint8_t menuCnt = sizeof(menuList) / sizeof(Menu_t);

void Menu_Setup(){
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af02      	add	r7, sp, #8
	OLED_Begin();
 800691a:	f7fe fb69 	bl	8004ff0 <OLED_Begin>
	OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt > 6 ? 6 : menuCnt, 0xFFFF00);
 800691e:	2307      	movs	r3, #7
 8006920:	2b06      	cmp	r3, #6
 8006922:	bf28      	it	cs
 8006924:	2306      	movcs	r3, #6
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <Menu_Setup+0x50>)
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	9200      	str	r2, [sp, #0]
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <Menu_Setup+0x54>)
 8006932:	2200      	movs	r2, #0
 8006934:	490d      	ldr	r1, [pc, #52]	; (800696c <Menu_Setup+0x58>)
 8006936:	480e      	ldr	r0, [pc, #56]	; (8006970 <Menu_Setup+0x5c>)
 8006938:	f7ff f8fa 	bl	8005b30 <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 800693c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006940:	2000      	movs	r0, #0
 8006942:	f7ff f941 	bl	8005bc8 <OLED_Cursor>
	SwitchLED(menuList[0].color);
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <Menu_Setup+0x54>)
 8006948:	891b      	ldrh	r3, [r3, #8]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b29b      	uxth	r3, r3
 800694e:	4a06      	ldr	r2, [pc, #24]	; (8006968 <Menu_Setup+0x54>)
 8006950:	8912      	ldrh	r2, [r2, #8]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	b292      	uxth	r2, r2
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff f9b5 	bl	8005cc8 <Switch_LED>
}
 800695e:	bf00      	nop
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	00ffff00 	.word	0x00ffff00
 8006968:	2000022c 	.word	0x2000022c
 800696c:	00ff8800 	.word	0x00ff8800
 8006970:	0800a064 	.word	0x0800a064

08006974 <Menu>:

void Menu(){
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af02      	add	r7, sp, #8
	Menu_Setup();
 800697a:	f7ff ffcb 	bl	8006914 <Menu_Setup>
	uint8_t idx = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	71fb      	strb	r3, [r7, #7]
	for(;;){
		uint16_t sw = Switch_Read();
 8006982:	f7ff f9b9 	bl	8005cf8 <Switch_Read>
 8006986:	4603      	mov	r3, r0
 8006988:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 800698a:	88bb      	ldrh	r3, [r7, #4]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d002      	beq.n	8006996 <Menu+0x22>
 8006990:	88bb      	ldrh	r3, [r7, #4]
 8006992:	2b22      	cmp	r3, #34	; 0x22
 8006994:	d177      	bne.n	8006a86 <Menu+0x112>
			idx+=menuCnt - 1;
 8006996:	2207      	movs	r2, #7
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	4413      	add	r3, r2
 800699c:	b2db      	uxtb	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 80069a2:	2207      	movs	r2, #7
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80069aa:	fb01 f202 	mul.w	r2, r1, r2
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && (idx % 6 == 5 || idx == menuCnt - 1)){
 80069b2:	2307      	movs	r3, #7
 80069b4:	2b06      	cmp	r3, #6
 80069b6:	d93c      	bls.n	8006a32 <Menu+0xbe>
 80069b8:	79fa      	ldrb	r2, [r7, #7]
 80069ba:	4b89      	ldr	r3, [pc, #548]	; (8006be0 <Menu+0x26c>)
 80069bc:	fba3 1302 	umull	r1, r3, r3, r2
 80069c0:	0899      	lsrs	r1, r3, #2
 80069c2:	460b      	mov	r3, r1
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	440b      	add	r3, r1
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d004      	beq.n	80069dc <Menu+0x68>
 80069d2:	79fa      	ldrb	r2, [r7, #7]
 80069d4:	2307      	movs	r3, #7
 80069d6:	3b01      	subs	r3, #1
 80069d8:	429a      	cmp	r2, r3
 80069da:	d12a      	bne.n	8006a32 <Menu+0xbe>
				OLED_Clear();
 80069dc:	f7fe fad8 	bl	8004f90 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + (idx / 6) * 6, menuCnt - (idx / 6) * 6 > 6 ? 6 : menuCnt - (idx / 6) * 6, 0xFFFF00);
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	4a7f      	ldr	r2, [pc, #508]	; (8006be0 <Menu+0x26c>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	461a      	mov	r2, r3
 80069f8:	4b7a      	ldr	r3, [pc, #488]	; (8006be4 <Menu+0x270>)
 80069fa:	18d1      	adds	r1, r2, r3
 80069fc:	2307      	movs	r3, #7
 80069fe:	4618      	mov	r0, r3
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	4a77      	ldr	r2, [pc, #476]	; (8006be0 <Menu+0x26c>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	089b      	lsrs	r3, r3, #2
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4613      	mov	r3, r2
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	4403      	add	r3, r0
 8006a18:	2b06      	cmp	r3, #6
 8006a1a:	bfa8      	it	ge
 8006a1c:	2306      	movge	r3, #6
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4b71      	ldr	r3, [pc, #452]	; (8006be8 <Menu+0x274>)
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	9200      	str	r2, [sp, #0]
 8006a26:	460b      	mov	r3, r1
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4970      	ldr	r1, [pc, #448]	; (8006bec <Menu+0x278>)
 8006a2c:	4870      	ldr	r0, [pc, #448]	; (8006bf0 <Menu+0x27c>)
 8006a2e:	f7ff f87f 	bl	8005b30 <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 8006a32:	79fa      	ldrb	r2, [r7, #7]
 8006a34:	4b6a      	ldr	r3, [pc, #424]	; (8006be0 <Menu+0x26c>)
 8006a36:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3a:	0899      	lsrs	r1, r3, #2
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	440b      	add	r3, r1
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff f8bb 	bl	8005bc8 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8006a52:	79fa      	ldrb	r2, [r7, #7]
 8006a54:	4963      	ldr	r1, [pc, #396]	; (8006be4 <Menu+0x270>)
 8006a56:	4613      	mov	r3, r2
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	3308      	adds	r3, #8
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	b298      	uxth	r0, r3
 8006a68:	79fa      	ldrb	r2, [r7, #7]
 8006a6a:	495e      	ldr	r1, [pc, #376]	; (8006be4 <Menu+0x270>)
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	440b      	add	r3, r1
 8006a76:	3308      	adds	r3, #8
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4619      	mov	r1, r3
 8006a80:	f7ff f922 	bl	8005cc8 <Switch_LED>
 8006a84:	e0aa      	b.n	8006bdc <Menu+0x268>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8006a86:	88bb      	ldrh	r3, [r7, #4]
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d002      	beq.n	8006a92 <Menu+0x11e>
 8006a8c:	88bb      	ldrh	r3, [r7, #4]
 8006a8e:	2b28      	cmp	r3, #40	; 0x28
 8006a90:	d15f      	bne.n	8006b52 <Menu+0x1de>
			idx+=1;
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	3301      	adds	r3, #1
 8006a96:	71fb      	strb	r3, [r7, #7]
			idx %= menuCnt;
 8006a98:	2207      	movs	r2, #7
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa0:	fb01 f202 	mul.w	r2, r1, r2
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
			if(menuCnt > 6 && idx % 6 == 0){
 8006aa8:	2307      	movs	r3, #7
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	d927      	bls.n	8006afe <Menu+0x18a>
 8006aae:	79fa      	ldrb	r2, [r7, #7]
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <Menu+0x26c>)
 8006ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab6:	0899      	lsrs	r1, r3, #2
 8006ab8:	460b      	mov	r3, r1
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	440b      	add	r3, r1
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11a      	bne.n	8006afe <Menu+0x18a>
				OLED_Clear();
 8006ac8:	f7fe fa62 	bl	8004f90 <OLED_Clear>
				OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList + idx, menuCnt - idx > 6 ? 6 : menuCnt - idx, 0xFFFF00);
 8006acc:	79fa      	ldrb	r2, [r7, #7]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <Menu+0x270>)
 8006ada:	441a      	add	r2, r3
 8006adc:	2307      	movs	r3, #7
 8006ade:	4619      	mov	r1, r3
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	1acb      	subs	r3, r1, r3
 8006ae4:	2b06      	cmp	r3, #6
 8006ae6:	bfa8      	it	ge
 8006ae8:	2306      	movge	r3, #6
 8006aea:	4619      	mov	r1, r3
 8006aec:	4b3e      	ldr	r3, [pc, #248]	; (8006be8 <Menu+0x274>)
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	9100      	str	r1, [sp, #0]
 8006af2:	4613      	mov	r3, r2
 8006af4:	2200      	movs	r2, #0
 8006af6:	493d      	ldr	r1, [pc, #244]	; (8006bec <Menu+0x278>)
 8006af8:	483d      	ldr	r0, [pc, #244]	; (8006bf0 <Menu+0x27c>)
 8006afa:	f7ff f819 	bl	8005b30 <OLED_MenuUI>
			}
			OLED_Cursor(idx%6, 0xFF0000);
 8006afe:	79fa      	ldrb	r2, [r7, #7]
 8006b00:	4b37      	ldr	r3, [pc, #220]	; (8006be0 <Menu+0x26c>)
 8006b02:	fba3 1302 	umull	r1, r3, r3, r2
 8006b06:	0899      	lsrs	r1, r3, #2
 8006b08:	460b      	mov	r3, r1
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	440b      	add	r3, r1
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f855 	bl	8005bc8 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8006b1e:	79fa      	ldrb	r2, [r7, #7]
 8006b20:	4930      	ldr	r1, [pc, #192]	; (8006be4 <Menu+0x270>)
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	b298      	uxth	r0, r3
 8006b34:	79fa      	ldrb	r2, [r7, #7]
 8006b36:	492b      	ldr	r1, [pc, #172]	; (8006be4 <Menu+0x270>)
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	3308      	adds	r3, #8
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f7ff f8bc 	bl	8005cc8 <Switch_LED>
 8006b50:	e044      	b.n	8006bdc <Menu+0x268>
		}
		else if(sw == SW_ENTER){
 8006b52:	88bb      	ldrh	r3, [r7, #4]
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	f47f af14 	bne.w	8006982 <Menu+0xe>
			OLED_Clear();//OLED를 지웁니다.
 8006b5a:	f7fe fa19 	bl	8004f90 <OLED_Clear>
			menuList[idx].function();
 8006b5e:	79fa      	ldrb	r2, [r7, #7]
 8006b60:	4920      	ldr	r1, [pc, #128]	; (8006be4 <Menu+0x270>)
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4798      	blx	r3
			OLED_Clear();//OLED를 지웁니다.
 8006b70:	f7fe fa0e 	bl	8004f90 <OLED_Clear>
			OLED_MenuUI("STM32 OVEN", 0xFF8800, 0x000000, menuList, menuCnt, 0xFFFF00);
 8006b74:	2307      	movs	r3, #7
 8006b76:	461a      	mov	r2, r3
 8006b78:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <Menu+0x274>)
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	9200      	str	r2, [sp, #0]
 8006b7e:	4b19      	ldr	r3, [pc, #100]	; (8006be4 <Menu+0x270>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	491a      	ldr	r1, [pc, #104]	; (8006bec <Menu+0x278>)
 8006b84:	481a      	ldr	r0, [pc, #104]	; (8006bf0 <Menu+0x27c>)
 8006b86:	f7fe ffd3 	bl	8005b30 <OLED_MenuUI>
			OLED_Cursor(idx % 6, 0xFF0000);
 8006b8a:	79fa      	ldrb	r2, [r7, #7]
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <Menu+0x26c>)
 8006b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b92:	0899      	lsrs	r1, r3, #2
 8006b94:	460b      	mov	r3, r1
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	440b      	add	r3, r1
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff f80f 	bl	8005bc8 <OLED_Cursor>
			SwitchLED(menuList[idx].color);
 8006baa:	79fa      	ldrb	r2, [r7, #7]
 8006bac:	490d      	ldr	r1, [pc, #52]	; (8006be4 <Menu+0x270>)
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3308      	adds	r3, #8
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	0a1b      	lsrs	r3, r3, #8
 8006bbe:	b298      	uxth	r0, r3
 8006bc0:	79fa      	ldrb	r2, [r7, #7]
 8006bc2:	4908      	ldr	r1, [pc, #32]	; (8006be4 <Menu+0x270>)
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	3308      	adds	r3, #8
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f7ff f876 	bl	8005cc8 <Switch_LED>
	for(;;){
 8006bdc:	e6d1      	b.n	8006982 <Menu+0xe>
 8006bde:	bf00      	nop
 8006be0:	aaaaaaab 	.word	0xaaaaaaab
 8006be4:	2000022c 	.word	0x2000022c
 8006be8:	00ffff00 	.word	0x00ffff00
 8006bec:	00ff8800 	.word	0x00ff8800
 8006bf0:	0800a064 	.word	0x0800a064

08006bf4 <test>:
		{NULL, "FAN   : OFF", COLOR_RED},
};


//출력 단자가 잘 동작하는지 테스트합니다.
void test(){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af02      	add	r7, sp, #8
	uint8_t idx = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	71fb      	strb	r3, [r7, #7]
	OLED_MenuUI("TEST", 0xFF00FF, 0x000000, testList, 6, 0x6600FF);
 8006bfe:	4bbb      	ldr	r3, [pc, #748]	; (8006eec <test+0x2f8>)
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2306      	movs	r3, #6
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	4bba      	ldr	r3, [pc, #744]	; (8006ef0 <test+0x2fc>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
 8006c0e:	48b9      	ldr	r0, [pc, #740]	; (8006ef4 <test+0x300>)
 8006c10:	f7fe ff8e 	bl	8005b30 <OLED_MenuUI>
	OLED_Cursor(0, 0xFF0000);
 8006c14:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f7fe ffd5 	bl	8005bc8 <OLED_Cursor>
	SwitchLED(testList[0].color);
 8006c1e:	4bb4      	ldr	r3, [pc, #720]	; (8006ef0 <test+0x2fc>)
 8006c20:	891b      	ldrh	r3, [r3, #8]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4ab2      	ldr	r2, [pc, #712]	; (8006ef0 <test+0x2fc>)
 8006c28:	8912      	ldrh	r2, [r2, #8]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff f849 	bl	8005cc8 <Switch_LED>
	testList[0].color = COLOR_RED;
 8006c36:	4bae      	ldr	r3, [pc, #696]	; (8006ef0 <test+0x2fc>)
 8006c38:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c3c:	811a      	strh	r2, [r3, #8]
	testList[1].color = COLOR_RED;
 8006c3e:	4bac      	ldr	r3, [pc, #688]	; (8006ef0 <test+0x2fc>)
 8006c40:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c44:	829a      	strh	r2, [r3, #20]
	testList[2].color = COLOR_RED;
 8006c46:	4baa      	ldr	r3, [pc, #680]	; (8006ef0 <test+0x2fc>)
 8006c48:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c4c:	841a      	strh	r2, [r3, #32]
	testList[3].color = COLOR_RED;
 8006c4e:	4ba8      	ldr	r3, [pc, #672]	; (8006ef0 <test+0x2fc>)
 8006c50:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c54:	859a      	strh	r2, [r3, #44]	; 0x2c
	testList[4].color = COLOR_RED;
 8006c56:	4ba6      	ldr	r3, [pc, #664]	; (8006ef0 <test+0x2fc>)
 8006c58:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c5c:	871a      	strh	r2, [r3, #56]	; 0x38
	testList[5].color = COLOR_RED;
 8006c5e:	4ba4      	ldr	r3, [pc, #656]	; (8006ef0 <test+0x2fc>)
 8006c60:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	for(;;){
		uint16_t sw = Switch_Read();
 8006c68:	f7ff f846 	bl	8005cf8 <Switch_Read>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	80bb      	strh	r3, [r7, #4]
		if(sw == SW_TOP || sw == SW_TOP_LONG){
 8006c70:	88bb      	ldrh	r3, [r7, #4]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d002      	beq.n	8006c7c <test+0x88>
 8006c76:	88bb      	ldrh	r3, [r7, #4]
 8006c78:	2b22      	cmp	r3, #34	; 0x22
 8006c7a:	d12d      	bne.n	8006cd8 <test+0xe4>
			idx+=5;
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	3305      	adds	r3, #5
 8006c80:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 8006c82:	79fa      	ldrb	r2, [r7, #7]
 8006c84:	4b9c      	ldr	r3, [pc, #624]	; (8006ef8 <test+0x304>)
 8006c86:	fba3 1302 	umull	r1, r3, r3, r2
 8006c8a:	0899      	lsrs	r1, r3, #2
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	440b      	add	r3, r1
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe ff92 	bl	8005bc8 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 8006ca4:	79fa      	ldrb	r2, [r7, #7]
 8006ca6:	4992      	ldr	r1, [pc, #584]	; (8006ef0 <test+0x2fc>)
 8006ca8:	4613      	mov	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	b298      	uxth	r0, r3
 8006cba:	79fa      	ldrb	r2, [r7, #7]
 8006cbc:	498c      	ldr	r1, [pc, #560]	; (8006ef0 <test+0x2fc>)
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3308      	adds	r3, #8
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	f7fe fff9 	bl	8005cc8 <Switch_LED>
 8006cd6:	e147      	b.n	8006f68 <test+0x374>
		}
		else if(sw == SW_BOTTOM || sw == SW_BOTTOM_LONG){
 8006cd8:	88bb      	ldrh	r3, [r7, #4]
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d002      	beq.n	8006ce4 <test+0xf0>
 8006cde:	88bb      	ldrh	r3, [r7, #4]
 8006ce0:	2b28      	cmp	r3, #40	; 0x28
 8006ce2:	d12d      	bne.n	8006d40 <test+0x14c>
			idx+=1;
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	71fb      	strb	r3, [r7, #7]
			idx %= 6;
 8006cea:	79fa      	ldrb	r2, [r7, #7]
 8006cec:	4b82      	ldr	r3, [pc, #520]	; (8006ef8 <test+0x304>)
 8006cee:	fba3 1302 	umull	r1, r3, r3, r2
 8006cf2:	0899      	lsrs	r1, r3, #2
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	440b      	add	r3, r1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	71fb      	strb	r3, [r7, #7]
			OLED_Cursor(idx, 0xFF0000);
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe ff5e 	bl	8005bc8 <OLED_Cursor>
			SwitchLED(testList[idx].color);
 8006d0c:	79fa      	ldrb	r2, [r7, #7]
 8006d0e:	4978      	ldr	r1, [pc, #480]	; (8006ef0 <test+0x2fc>)
 8006d10:	4613      	mov	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	b298      	uxth	r0, r3
 8006d22:	79fa      	ldrb	r2, [r7, #7]
 8006d24:	4972      	ldr	r1, [pc, #456]	; (8006ef0 <test+0x2fc>)
 8006d26:	4613      	mov	r3, r2
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	3308      	adds	r3, #8
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f7fe ffc5 	bl	8005cc8 <Switch_LED>
 8006d3e:	e113      	b.n	8006f68 <test+0x374>
		}
		else if(sw == SW_ENTER){
 8006d40:	88bb      	ldrh	r3, [r7, #4]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	f000 8111 	beq.w	8006f6a <test+0x376>
			break;
		}
		else if(sw == SW_LEFT || sw == SW_RIGHT){
 8006d48:	88bb      	ldrh	r3, [r7, #4]
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d002      	beq.n	8006d54 <test+0x160>
 8006d4e:	88bb      	ldrh	r3, [r7, #4]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d189      	bne.n	8006c68 <test+0x74>
			if(testList[idx].color == COLOR_RED){
 8006d54:	79fa      	ldrb	r2, [r7, #7]
 8006d56:	4966      	ldr	r1, [pc, #408]	; (8006ef0 <test+0x2fc>)
 8006d58:	4613      	mov	r3, r2
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3308      	adds	r3, #8
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d6a:	d158      	bne.n	8006e1e <test+0x22a>
				testList[idx].color = COLOR_WHITE;
 8006d6c:	79fa      	ldrb	r2, [r7, #7]
 8006d6e:	4960      	ldr	r1, [pc, #384]	; (8006ef0 <test+0x2fc>)
 8006d70:	4613      	mov	r3, r2
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8006d80:	801a      	strh	r2, [r3, #0]
				switch(idx){
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	f200 80d6 	bhi.w	8006f36 <test+0x342>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <test+0x19c>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006da9 	.word	0x08006da9
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006dd1 	.word	0x08006dd1
 8006d9c:	08006de5 	.word	0x08006de5
 8006da0:	08006df9 	.word	0x08006df9
 8006da4:	08006e0b 	.word	0x08006e0b
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 0);
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dae:	4853      	ldr	r0, [pc, #332]	; (8006efc <test+0x308>)
 8006db0:	f7fb fa78 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: ON ");
 8006db4:	4852      	ldr	r0, [pc, #328]	; (8006f00 <test+0x30c>)
 8006db6:	f7fe fb49 	bl	800544c <OLED_Printf>
					break;
 8006dba:	e0bc      	b.n	8006f36 <test+0x342>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 0);
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dc2:	484e      	ldr	r0, [pc, #312]	; (8006efc <test+0x308>)
 8006dc4:	f7fb fa6e 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: ON ");
 8006dc8:	484e      	ldr	r0, [pc, #312]	; (8006f04 <test+0x310>)
 8006dca:	f7fe fb3f 	bl	800544c <OLED_Printf>
					break;
 8006dce:	e0b2      	b.n	8006f36 <test+0x342>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 0);
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dd6:	4849      	ldr	r0, [pc, #292]	; (8006efc <test+0x308>)
 8006dd8:	f7fb fa64 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : ON ");
 8006ddc:	484a      	ldr	r0, [pc, #296]	; (8006f08 <test+0x314>)
 8006dde:	f7fe fb35 	bl	800544c <OLED_Printf>
					break;
 8006de2:	e0a8      	b.n	8006f36 <test+0x342>
				case 3:
					HAL_GPIO_WritePin(HU_GPIO_Port, HU_Pin, 0);
 8006de4:	2200      	movs	r2, #0
 8006de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dea:	4848      	ldr	r0, [pc, #288]	; (8006f0c <test+0x318>)
 8006dec:	f7fb fa5a 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : ON ");
 8006df0:	4847      	ldr	r0, [pc, #284]	; (8006f10 <test+0x31c>)
 8006df2:	f7fe fb2b 	bl	800544c <OLED_Printf>
					break;
 8006df6:	e09e      	b.n	8006f36 <test+0x342>
				case 4:
					HAL_GPIO_WritePin(HD_GPIO_Port, HD_Pin, 0);
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2180      	movs	r1, #128	; 0x80
 8006dfc:	4843      	ldr	r0, [pc, #268]	; (8006f0c <test+0x318>)
 8006dfe:	f7fb fa51 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : ON ");
 8006e02:	4844      	ldr	r0, [pc, #272]	; (8006f14 <test+0x320>)
 8006e04:	f7fe fb22 	bl	800544c <OLED_Printf>
					break;
 8006e08:	e095      	b.n	8006f36 <test+0x342>
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 1);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e10:	483e      	ldr	r0, [pc, #248]	; (8006f0c <test+0x318>)
 8006e12:	f7fb fa47 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : ON ");
 8006e16:	4840      	ldr	r0, [pc, #256]	; (8006f18 <test+0x324>)
 8006e18:	f7fe fb18 	bl	800544c <OLED_Printf>
					break;
 8006e1c:	e08b      	b.n	8006f36 <test+0x342>
				}
			}
			else if(testList[idx].color == COLOR_WHITE){
 8006e1e:	79fa      	ldrb	r2, [r7, #7]
 8006e20:	4933      	ldr	r1, [pc, #204]	; (8006ef0 <test+0x2fc>)
 8006e22:	4613      	mov	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d17d      	bne.n	8006f34 <test+0x340>
				testList[idx].color = COLOR_RED;
 8006e38:	79fa      	ldrb	r2, [r7, #7]
 8006e3a:	492d      	ldr	r1, [pc, #180]	; (8006ef0 <test+0x2fc>)
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	3308      	adds	r3, #8
 8006e48:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006e4c:	801a      	strh	r2, [r3, #0]
				switch(idx){
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	d870      	bhi.n	8006f36 <test+0x342>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <test+0x268>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e75 	.word	0x08006e75
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e9d 	.word	0x08006e9d
 8006e68:	08006eb1 	.word	0x08006eb1
 8006e6c:	08006ec5 	.word	0x08006ec5
 8006e70:	08006ed7 	.word	0x08006ed7
				case 0:
					HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 8006e74:	2201      	movs	r2, #1
 8006e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e7a:	4820      	ldr	r0, [pc, #128]	; (8006efc <test+0x308>)
 8006e7c:	f7fb fa12 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/1Motor1: OFF");
 8006e80:	4826      	ldr	r0, [pc, #152]	; (8006f1c <test+0x328>)
 8006e82:	f7fe fae3 	bl	800544c <OLED_Printf>
					break;
 8006e86:	e056      	b.n	8006f36 <test+0x342>
				case 1:
					HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e8e:	481b      	ldr	r0, [pc, #108]	; (8006efc <test+0x308>)
 8006e90:	f7fb fa08 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/2Motor2: OFF");
 8006e94:	4822      	ldr	r0, [pc, #136]	; (8006f20 <test+0x32c>)
 8006e96:	f7fe fad9 	bl	800544c <OLED_Printf>
					break;
 8006e9a:	e04c      	b.n	8006f36 <test+0x342>
				case 2:
					HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ea2:	4816      	ldr	r0, [pc, #88]	; (8006efc <test+0x308>)
 8006ea4:	f7fb f9fe 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/3LAMP  : OFF");
 8006ea8:	481e      	ldr	r0, [pc, #120]	; (8006f24 <test+0x330>)
 8006eaa:	f7fe facf 	bl	800544c <OLED_Printf>
					break;
 8006eae:	e042      	b.n	8006f36 <test+0x342>
				case 3:
					HAL_GPIO_WritePin(HU_GPIO_Port, HU_Pin, 1);
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eb6:	4815      	ldr	r0, [pc, #84]	; (8006f0c <test+0x318>)
 8006eb8:	f7fb f9f4 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/4HU    : OFF");
 8006ebc:	481a      	ldr	r0, [pc, #104]	; (8006f28 <test+0x334>)
 8006ebe:	f7fe fac5 	bl	800544c <OLED_Printf>
					break;
 8006ec2:	e038      	b.n	8006f36 <test+0x342>
				case 4:
					HAL_GPIO_WritePin(HD_GPIO_Port, HD_Pin, 1);
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	2180      	movs	r1, #128	; 0x80
 8006ec8:	4810      	ldr	r0, [pc, #64]	; (8006f0c <test+0x318>)
 8006eca:	f7fb f9eb 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/5HD    : OFF");
 8006ece:	4817      	ldr	r0, [pc, #92]	; (8006f2c <test+0x338>)
 8006ed0:	f7fe fabc 	bl	800544c <OLED_Printf>
					break;
 8006ed4:	e02f      	b.n	8006f36 <test+0x342>
				case 5:
					HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006edc:	480b      	ldr	r0, [pc, #44]	; (8006f0c <test+0x318>)
 8006ede:	f7fb f9e1 	bl	80022a4 <HAL_GPIO_WritePin>
					OLED_Printf("/6FAN   : OFF");
 8006ee2:	4813      	ldr	r0, [pc, #76]	; (8006f30 <test+0x33c>)
 8006ee4:	f7fe fab2 	bl	800544c <OLED_Printf>
					break;
 8006ee8:	e025      	b.n	8006f36 <test+0x342>
 8006eea:	bf00      	nop
 8006eec:	006600ff 	.word	0x006600ff
 8006ef0:	20000280 	.word	0x20000280
 8006ef4:	0800a0b8 	.word	0x0800a0b8
 8006ef8:	aaaaaaab 	.word	0xaaaaaaab
 8006efc:	40020000 	.word	0x40020000
 8006f00:	0800a0c0 	.word	0x0800a0c0
 8006f04:	0800a0d0 	.word	0x0800a0d0
 8006f08:	0800a0e0 	.word	0x0800a0e0
 8006f0c:	40020800 	.word	0x40020800
 8006f10:	0800a0f0 	.word	0x0800a0f0
 8006f14:	0800a100 	.word	0x0800a100
 8006f18:	0800a110 	.word	0x0800a110
 8006f1c:	0800a120 	.word	0x0800a120
 8006f20:	0800a130 	.word	0x0800a130
 8006f24:	0800a140 	.word	0x0800a140
 8006f28:	0800a150 	.word	0x0800a150
 8006f2c:	0800a160 	.word	0x0800a160
 8006f30:	0800a170 	.word	0x0800a170
				}
			}
 8006f34:	bf00      	nop

			SwitchLED(testList[idx].color);
 8006f36:	79fa      	ldrb	r2, [r7, #7]
 8006f38:	4920      	ldr	r1, [pc, #128]	; (8006fbc <test+0x3c8>)
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	3308      	adds	r3, #8
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	0a1b      	lsrs	r3, r3, #8
 8006f4a:	b298      	uxth	r0, r3
 8006f4c:	79fa      	ldrb	r2, [r7, #7]
 8006f4e:	491b      	ldr	r1, [pc, #108]	; (8006fbc <test+0x3c8>)
 8006f50:	4613      	mov	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	f7fe feb0 	bl	8005cc8 <Switch_LED>
	for(;;){
 8006f68:	e67e      	b.n	8006c68 <test+0x74>
			break;
 8006f6a:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(Motor1_GPIO_Port, Motor1_Pin, 1);
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f72:	4813      	ldr	r0, [pc, #76]	; (8006fc0 <test+0x3cc>)
 8006f74:	f7fb f996 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_GPIO_Port, Motor2_Pin, 1);
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f7e:	4810      	ldr	r0, [pc, #64]	; (8006fc0 <test+0x3cc>)
 8006f80:	f7fb f990 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, 1);
 8006f84:	2201      	movs	r2, #1
 8006f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f8a:	480d      	ldr	r0, [pc, #52]	; (8006fc0 <test+0x3cc>)
 8006f8c:	f7fb f98a 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HU_GPIO_Port, HU_Pin, 1);
 8006f90:	2201      	movs	r2, #1
 8006f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f96:	480b      	ldr	r0, [pc, #44]	; (8006fc4 <test+0x3d0>)
 8006f98:	f7fb f984 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD_GPIO_Port, HD_Pin, 1);
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	2180      	movs	r1, #128	; 0x80
 8006fa0:	4808      	ldr	r0, [pc, #32]	; (8006fc4 <test+0x3d0>)
 8006fa2:	f7fb f97f 	bl	80022a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCFAN_GPIO_Port, DCFAN_Pin, 0);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fac:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <test+0x3d0>)
 8006fae:	f7fb f979 	bl	80022a4 <HAL_GPIO_WritePin>

}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000280 	.word	0x20000280
 8006fc0:	40020000 	.word	0x40020000
 8006fc4:	40020800 	.word	0x40020800

08006fc8 <calloc>:
 8006fc8:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <calloc+0xc>)
 8006fca:	460a      	mov	r2, r1
 8006fcc:	4601      	mov	r1, r0
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	f000 b83c 	b.w	800704c <_calloc_r>
 8006fd4:	200002c8 	.word	0x200002c8

08006fd8 <__errno>:
 8006fd8:	4b01      	ldr	r3, [pc, #4]	; (8006fe0 <__errno+0x8>)
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	200002c8 	.word	0x200002c8

08006fe4 <__libc_init_array>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4d0d      	ldr	r5, [pc, #52]	; (800701c <__libc_init_array+0x38>)
 8006fe8:	4c0d      	ldr	r4, [pc, #52]	; (8007020 <__libc_init_array+0x3c>)
 8006fea:	1b64      	subs	r4, r4, r5
 8006fec:	10a4      	asrs	r4, r4, #2
 8006fee:	2600      	movs	r6, #0
 8006ff0:	42a6      	cmp	r6, r4
 8006ff2:	d109      	bne.n	8007008 <__libc_init_array+0x24>
 8006ff4:	4d0b      	ldr	r5, [pc, #44]	; (8007024 <__libc_init_array+0x40>)
 8006ff6:	4c0c      	ldr	r4, [pc, #48]	; (8007028 <__libc_init_array+0x44>)
 8006ff8:	f002 ffa2 	bl	8009f40 <_init>
 8006ffc:	1b64      	subs	r4, r4, r5
 8006ffe:	10a4      	asrs	r4, r4, #2
 8007000:	2600      	movs	r6, #0
 8007002:	42a6      	cmp	r6, r4
 8007004:	d105      	bne.n	8007012 <__libc_init_array+0x2e>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	f855 3b04 	ldr.w	r3, [r5], #4
 800700c:	4798      	blx	r3
 800700e:	3601      	adds	r6, #1
 8007010:	e7ee      	b.n	8006ff0 <__libc_init_array+0xc>
 8007012:	f855 3b04 	ldr.w	r3, [r5], #4
 8007016:	4798      	blx	r3
 8007018:	3601      	adds	r6, #1
 800701a:	e7f2      	b.n	8007002 <__libc_init_array+0x1e>
 800701c:	0800a57c 	.word	0x0800a57c
 8007020:	0800a57c 	.word	0x0800a57c
 8007024:	0800a57c 	.word	0x0800a57c
 8007028:	0800a580 	.word	0x0800a580

0800702c <malloc>:
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <malloc+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f000 b88d 	b.w	8007150 <_malloc_r>
 8007036:	bf00      	nop
 8007038:	200002c8 	.word	0x200002c8

0800703c <memset>:
 800703c:	4402      	add	r2, r0
 800703e:	4603      	mov	r3, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <_calloc_r>:
 800704c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800704e:	fba1 2402 	umull	r2, r4, r1, r2
 8007052:	b94c      	cbnz	r4, 8007068 <_calloc_r+0x1c>
 8007054:	4611      	mov	r1, r2
 8007056:	9201      	str	r2, [sp, #4]
 8007058:	f000 f87a 	bl	8007150 <_malloc_r>
 800705c:	9a01      	ldr	r2, [sp, #4]
 800705e:	4605      	mov	r5, r0
 8007060:	b930      	cbnz	r0, 8007070 <_calloc_r+0x24>
 8007062:	4628      	mov	r0, r5
 8007064:	b003      	add	sp, #12
 8007066:	bd30      	pop	{r4, r5, pc}
 8007068:	220c      	movs	r2, #12
 800706a:	6002      	str	r2, [r0, #0]
 800706c:	2500      	movs	r5, #0
 800706e:	e7f8      	b.n	8007062 <_calloc_r+0x16>
 8007070:	4621      	mov	r1, r4
 8007072:	f7ff ffe3 	bl	800703c <memset>
 8007076:	e7f4      	b.n	8007062 <_calloc_r+0x16>

08007078 <_free_r>:
 8007078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800707a:	2900      	cmp	r1, #0
 800707c:	d044      	beq.n	8007108 <_free_r+0x90>
 800707e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007082:	9001      	str	r0, [sp, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f1a1 0404 	sub.w	r4, r1, #4
 800708a:	bfb8      	it	lt
 800708c:	18e4      	addlt	r4, r4, r3
 800708e:	f001 ff7b 	bl	8008f88 <__malloc_lock>
 8007092:	4a1e      	ldr	r2, [pc, #120]	; (800710c <_free_r+0x94>)
 8007094:	9801      	ldr	r0, [sp, #4]
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	b933      	cbnz	r3, 80070a8 <_free_r+0x30>
 800709a:	6063      	str	r3, [r4, #4]
 800709c:	6014      	str	r4, [r2, #0]
 800709e:	b003      	add	sp, #12
 80070a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070a4:	f001 bf76 	b.w	8008f94 <__malloc_unlock>
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d908      	bls.n	80070be <_free_r+0x46>
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	1961      	adds	r1, r4, r5
 80070b0:	428b      	cmp	r3, r1
 80070b2:	bf01      	itttt	eq
 80070b4:	6819      	ldreq	r1, [r3, #0]
 80070b6:	685b      	ldreq	r3, [r3, #4]
 80070b8:	1949      	addeq	r1, r1, r5
 80070ba:	6021      	streq	r1, [r4, #0]
 80070bc:	e7ed      	b.n	800709a <_free_r+0x22>
 80070be:	461a      	mov	r2, r3
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b10b      	cbz	r3, 80070c8 <_free_r+0x50>
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d9fa      	bls.n	80070be <_free_r+0x46>
 80070c8:	6811      	ldr	r1, [r2, #0]
 80070ca:	1855      	adds	r5, r2, r1
 80070cc:	42a5      	cmp	r5, r4
 80070ce:	d10b      	bne.n	80070e8 <_free_r+0x70>
 80070d0:	6824      	ldr	r4, [r4, #0]
 80070d2:	4421      	add	r1, r4
 80070d4:	1854      	adds	r4, r2, r1
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	6011      	str	r1, [r2, #0]
 80070da:	d1e0      	bne.n	800709e <_free_r+0x26>
 80070dc:	681c      	ldr	r4, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	6053      	str	r3, [r2, #4]
 80070e2:	4421      	add	r1, r4
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	e7da      	b.n	800709e <_free_r+0x26>
 80070e8:	d902      	bls.n	80070f0 <_free_r+0x78>
 80070ea:	230c      	movs	r3, #12
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	e7d6      	b.n	800709e <_free_r+0x26>
 80070f0:	6825      	ldr	r5, [r4, #0]
 80070f2:	1961      	adds	r1, r4, r5
 80070f4:	428b      	cmp	r3, r1
 80070f6:	bf04      	itt	eq
 80070f8:	6819      	ldreq	r1, [r3, #0]
 80070fa:	685b      	ldreq	r3, [r3, #4]
 80070fc:	6063      	str	r3, [r4, #4]
 80070fe:	bf04      	itt	eq
 8007100:	1949      	addeq	r1, r1, r5
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	6054      	str	r4, [r2, #4]
 8007106:	e7ca      	b.n	800709e <_free_r+0x26>
 8007108:	b003      	add	sp, #12
 800710a:	bd30      	pop	{r4, r5, pc}
 800710c:	200006fc 	.word	0x200006fc

08007110 <sbrk_aligned>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4e0e      	ldr	r6, [pc, #56]	; (800714c <sbrk_aligned+0x3c>)
 8007114:	460c      	mov	r4, r1
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	4605      	mov	r5, r0
 800711a:	b911      	cbnz	r1, 8007122 <sbrk_aligned+0x12>
 800711c:	f000 fd84 	bl	8007c28 <_sbrk_r>
 8007120:	6030      	str	r0, [r6, #0]
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 fd7f 	bl	8007c28 <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d00a      	beq.n	8007144 <sbrk_aligned+0x34>
 800712e:	1cc4      	adds	r4, r0, #3
 8007130:	f024 0403 	bic.w	r4, r4, #3
 8007134:	42a0      	cmp	r0, r4
 8007136:	d007      	beq.n	8007148 <sbrk_aligned+0x38>
 8007138:	1a21      	subs	r1, r4, r0
 800713a:	4628      	mov	r0, r5
 800713c:	f000 fd74 	bl	8007c28 <_sbrk_r>
 8007140:	3001      	adds	r0, #1
 8007142:	d101      	bne.n	8007148 <sbrk_aligned+0x38>
 8007144:	f04f 34ff 	mov.w	r4, #4294967295
 8007148:	4620      	mov	r0, r4
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	20000700 	.word	0x20000700

08007150 <_malloc_r>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	1ccd      	adds	r5, r1, #3
 8007156:	f025 0503 	bic.w	r5, r5, #3
 800715a:	3508      	adds	r5, #8
 800715c:	2d0c      	cmp	r5, #12
 800715e:	bf38      	it	cc
 8007160:	250c      	movcc	r5, #12
 8007162:	2d00      	cmp	r5, #0
 8007164:	4607      	mov	r7, r0
 8007166:	db01      	blt.n	800716c <_malloc_r+0x1c>
 8007168:	42a9      	cmp	r1, r5
 800716a:	d905      	bls.n	8007178 <_malloc_r+0x28>
 800716c:	230c      	movs	r3, #12
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	2600      	movs	r6, #0
 8007172:	4630      	mov	r0, r6
 8007174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007178:	4e2e      	ldr	r6, [pc, #184]	; (8007234 <_malloc_r+0xe4>)
 800717a:	f001 ff05 	bl	8008f88 <__malloc_lock>
 800717e:	6833      	ldr	r3, [r6, #0]
 8007180:	461c      	mov	r4, r3
 8007182:	bb34      	cbnz	r4, 80071d2 <_malloc_r+0x82>
 8007184:	4629      	mov	r1, r5
 8007186:	4638      	mov	r0, r7
 8007188:	f7ff ffc2 	bl	8007110 <sbrk_aligned>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	4604      	mov	r4, r0
 8007190:	d14d      	bne.n	800722e <_malloc_r+0xde>
 8007192:	6834      	ldr	r4, [r6, #0]
 8007194:	4626      	mov	r6, r4
 8007196:	2e00      	cmp	r6, #0
 8007198:	d140      	bne.n	800721c <_malloc_r+0xcc>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	4631      	mov	r1, r6
 800719e:	4638      	mov	r0, r7
 80071a0:	eb04 0803 	add.w	r8, r4, r3
 80071a4:	f000 fd40 	bl	8007c28 <_sbrk_r>
 80071a8:	4580      	cmp	r8, r0
 80071aa:	d13a      	bne.n	8007222 <_malloc_r+0xd2>
 80071ac:	6821      	ldr	r1, [r4, #0]
 80071ae:	3503      	adds	r5, #3
 80071b0:	1a6d      	subs	r5, r5, r1
 80071b2:	f025 0503 	bic.w	r5, r5, #3
 80071b6:	3508      	adds	r5, #8
 80071b8:	2d0c      	cmp	r5, #12
 80071ba:	bf38      	it	cc
 80071bc:	250c      	movcc	r5, #12
 80071be:	4629      	mov	r1, r5
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7ff ffa5 	bl	8007110 <sbrk_aligned>
 80071c6:	3001      	adds	r0, #1
 80071c8:	d02b      	beq.n	8007222 <_malloc_r+0xd2>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	442b      	add	r3, r5
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	e00e      	b.n	80071f0 <_malloc_r+0xa0>
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	1b52      	subs	r2, r2, r5
 80071d6:	d41e      	bmi.n	8007216 <_malloc_r+0xc6>
 80071d8:	2a0b      	cmp	r2, #11
 80071da:	d916      	bls.n	800720a <_malloc_r+0xba>
 80071dc:	1961      	adds	r1, r4, r5
 80071de:	42a3      	cmp	r3, r4
 80071e0:	6025      	str	r5, [r4, #0]
 80071e2:	bf18      	it	ne
 80071e4:	6059      	strne	r1, [r3, #4]
 80071e6:	6863      	ldr	r3, [r4, #4]
 80071e8:	bf08      	it	eq
 80071ea:	6031      	streq	r1, [r6, #0]
 80071ec:	5162      	str	r2, [r4, r5]
 80071ee:	604b      	str	r3, [r1, #4]
 80071f0:	4638      	mov	r0, r7
 80071f2:	f104 060b 	add.w	r6, r4, #11
 80071f6:	f001 fecd 	bl	8008f94 <__malloc_unlock>
 80071fa:	f026 0607 	bic.w	r6, r6, #7
 80071fe:	1d23      	adds	r3, r4, #4
 8007200:	1af2      	subs	r2, r6, r3
 8007202:	d0b6      	beq.n	8007172 <_malloc_r+0x22>
 8007204:	1b9b      	subs	r3, r3, r6
 8007206:	50a3      	str	r3, [r4, r2]
 8007208:	e7b3      	b.n	8007172 <_malloc_r+0x22>
 800720a:	6862      	ldr	r2, [r4, #4]
 800720c:	42a3      	cmp	r3, r4
 800720e:	bf0c      	ite	eq
 8007210:	6032      	streq	r2, [r6, #0]
 8007212:	605a      	strne	r2, [r3, #4]
 8007214:	e7ec      	b.n	80071f0 <_malloc_r+0xa0>
 8007216:	4623      	mov	r3, r4
 8007218:	6864      	ldr	r4, [r4, #4]
 800721a:	e7b2      	b.n	8007182 <_malloc_r+0x32>
 800721c:	4634      	mov	r4, r6
 800721e:	6876      	ldr	r6, [r6, #4]
 8007220:	e7b9      	b.n	8007196 <_malloc_r+0x46>
 8007222:	230c      	movs	r3, #12
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	4638      	mov	r0, r7
 8007228:	f001 feb4 	bl	8008f94 <__malloc_unlock>
 800722c:	e7a1      	b.n	8007172 <_malloc_r+0x22>
 800722e:	6025      	str	r5, [r4, #0]
 8007230:	e7de      	b.n	80071f0 <_malloc_r+0xa0>
 8007232:	bf00      	nop
 8007234:	200006fc 	.word	0x200006fc

08007238 <__cvt>:
 8007238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	ec55 4b10 	vmov	r4, r5, d0
 8007240:	2d00      	cmp	r5, #0
 8007242:	460e      	mov	r6, r1
 8007244:	4619      	mov	r1, r3
 8007246:	462b      	mov	r3, r5
 8007248:	bfbb      	ittet	lt
 800724a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800724e:	461d      	movlt	r5, r3
 8007250:	2300      	movge	r3, #0
 8007252:	232d      	movlt	r3, #45	; 0x2d
 8007254:	700b      	strb	r3, [r1, #0]
 8007256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007258:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800725c:	4691      	mov	r9, r2
 800725e:	f023 0820 	bic.w	r8, r3, #32
 8007262:	bfbc      	itt	lt
 8007264:	4622      	movlt	r2, r4
 8007266:	4614      	movlt	r4, r2
 8007268:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800726c:	d005      	beq.n	800727a <__cvt+0x42>
 800726e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007272:	d100      	bne.n	8007276 <__cvt+0x3e>
 8007274:	3601      	adds	r6, #1
 8007276:	2102      	movs	r1, #2
 8007278:	e000      	b.n	800727c <__cvt+0x44>
 800727a:	2103      	movs	r1, #3
 800727c:	ab03      	add	r3, sp, #12
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	ab02      	add	r3, sp, #8
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	ec45 4b10 	vmov	d0, r4, r5
 8007288:	4653      	mov	r3, sl
 800728a:	4632      	mov	r2, r6
 800728c:	f000 fe5c 	bl	8007f48 <_dtoa_r>
 8007290:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007294:	4607      	mov	r7, r0
 8007296:	d102      	bne.n	800729e <__cvt+0x66>
 8007298:	f019 0f01 	tst.w	r9, #1
 800729c:	d022      	beq.n	80072e4 <__cvt+0xac>
 800729e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072a2:	eb07 0906 	add.w	r9, r7, r6
 80072a6:	d110      	bne.n	80072ca <__cvt+0x92>
 80072a8:	783b      	ldrb	r3, [r7, #0]
 80072aa:	2b30      	cmp	r3, #48	; 0x30
 80072ac:	d10a      	bne.n	80072c4 <__cvt+0x8c>
 80072ae:	2200      	movs	r2, #0
 80072b0:	2300      	movs	r3, #0
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	f7f9 fc0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ba:	b918      	cbnz	r0, 80072c4 <__cvt+0x8c>
 80072bc:	f1c6 0601 	rsb	r6, r6, #1
 80072c0:	f8ca 6000 	str.w	r6, [sl]
 80072c4:	f8da 3000 	ldr.w	r3, [sl]
 80072c8:	4499      	add	r9, r3
 80072ca:	2200      	movs	r2, #0
 80072cc:	2300      	movs	r3, #0
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d6:	b108      	cbz	r0, 80072dc <__cvt+0xa4>
 80072d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80072dc:	2230      	movs	r2, #48	; 0x30
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	454b      	cmp	r3, r9
 80072e2:	d307      	bcc.n	80072f4 <__cvt+0xbc>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072e8:	1bdb      	subs	r3, r3, r7
 80072ea:	4638      	mov	r0, r7
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	b004      	add	sp, #16
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f4:	1c59      	adds	r1, r3, #1
 80072f6:	9103      	str	r1, [sp, #12]
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e7f0      	b.n	80072de <__cvt+0xa6>

080072fc <__exponent>:
 80072fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072fe:	4603      	mov	r3, r0
 8007300:	2900      	cmp	r1, #0
 8007302:	bfb8      	it	lt
 8007304:	4249      	neglt	r1, r1
 8007306:	f803 2b02 	strb.w	r2, [r3], #2
 800730a:	bfb4      	ite	lt
 800730c:	222d      	movlt	r2, #45	; 0x2d
 800730e:	222b      	movge	r2, #43	; 0x2b
 8007310:	2909      	cmp	r1, #9
 8007312:	7042      	strb	r2, [r0, #1]
 8007314:	dd2a      	ble.n	800736c <__exponent+0x70>
 8007316:	f10d 0407 	add.w	r4, sp, #7
 800731a:	46a4      	mov	ip, r4
 800731c:	270a      	movs	r7, #10
 800731e:	46a6      	mov	lr, r4
 8007320:	460a      	mov	r2, r1
 8007322:	fb91 f6f7 	sdiv	r6, r1, r7
 8007326:	fb07 1516 	mls	r5, r7, r6, r1
 800732a:	3530      	adds	r5, #48	; 0x30
 800732c:	2a63      	cmp	r2, #99	; 0x63
 800732e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007332:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007336:	4631      	mov	r1, r6
 8007338:	dcf1      	bgt.n	800731e <__exponent+0x22>
 800733a:	3130      	adds	r1, #48	; 0x30
 800733c:	f1ae 0502 	sub.w	r5, lr, #2
 8007340:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007344:	1c44      	adds	r4, r0, #1
 8007346:	4629      	mov	r1, r5
 8007348:	4561      	cmp	r1, ip
 800734a:	d30a      	bcc.n	8007362 <__exponent+0x66>
 800734c:	f10d 0209 	add.w	r2, sp, #9
 8007350:	eba2 020e 	sub.w	r2, r2, lr
 8007354:	4565      	cmp	r5, ip
 8007356:	bf88      	it	hi
 8007358:	2200      	movhi	r2, #0
 800735a:	4413      	add	r3, r2
 800735c:	1a18      	subs	r0, r3, r0
 800735e:	b003      	add	sp, #12
 8007360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007366:	f804 2f01 	strb.w	r2, [r4, #1]!
 800736a:	e7ed      	b.n	8007348 <__exponent+0x4c>
 800736c:	2330      	movs	r3, #48	; 0x30
 800736e:	3130      	adds	r1, #48	; 0x30
 8007370:	7083      	strb	r3, [r0, #2]
 8007372:	70c1      	strb	r1, [r0, #3]
 8007374:	1d03      	adds	r3, r0, #4
 8007376:	e7f1      	b.n	800735c <__exponent+0x60>

08007378 <_printf_float>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	ed2d 8b02 	vpush	{d8}
 8007380:	b08d      	sub	sp, #52	; 0x34
 8007382:	460c      	mov	r4, r1
 8007384:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007388:	4616      	mov	r6, r2
 800738a:	461f      	mov	r7, r3
 800738c:	4605      	mov	r5, r0
 800738e:	f001 fd81 	bl	8008e94 <_localeconv_r>
 8007392:	f8d0 a000 	ldr.w	sl, [r0]
 8007396:	4650      	mov	r0, sl
 8007398:	f7f8 ff22 	bl	80001e0 <strlen>
 800739c:	2300      	movs	r3, #0
 800739e:	930a      	str	r3, [sp, #40]	; 0x28
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	9305      	str	r3, [sp, #20]
 80073a4:	f8d8 3000 	ldr.w	r3, [r8]
 80073a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073ac:	3307      	adds	r3, #7
 80073ae:	f023 0307 	bic.w	r3, r3, #7
 80073b2:	f103 0208 	add.w	r2, r3, #8
 80073b6:	f8c8 2000 	str.w	r2, [r8]
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80073d0:	ee08 0a10 	vmov	s16, r0
 80073d4:	4b9f      	ldr	r3, [pc, #636]	; (8007654 <_printf_float+0x2dc>)
 80073d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073da:	f04f 32ff 	mov.w	r2, #4294967295
 80073de:	f7f9 fbad 	bl	8000b3c <__aeabi_dcmpun>
 80073e2:	bb88      	cbnz	r0, 8007448 <_printf_float+0xd0>
 80073e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073e8:	4b9a      	ldr	r3, [pc, #616]	; (8007654 <_printf_float+0x2dc>)
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295
 80073ee:	f7f9 fb87 	bl	8000b00 <__aeabi_dcmple>
 80073f2:	bb48      	cbnz	r0, 8007448 <_printf_float+0xd0>
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f7f9 fb76 	bl	8000aec <__aeabi_dcmplt>
 8007400:	b110      	cbz	r0, 8007408 <_printf_float+0x90>
 8007402:	232d      	movs	r3, #45	; 0x2d
 8007404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007408:	4b93      	ldr	r3, [pc, #588]	; (8007658 <_printf_float+0x2e0>)
 800740a:	4894      	ldr	r0, [pc, #592]	; (800765c <_printf_float+0x2e4>)
 800740c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007410:	bf94      	ite	ls
 8007412:	4698      	movls	r8, r3
 8007414:	4680      	movhi	r8, r0
 8007416:	2303      	movs	r3, #3
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	9b05      	ldr	r3, [sp, #20]
 800741c:	f023 0204 	bic.w	r2, r3, #4
 8007420:	6022      	str	r2, [r4, #0]
 8007422:	f04f 0900 	mov.w	r9, #0
 8007426:	9700      	str	r7, [sp, #0]
 8007428:	4633      	mov	r3, r6
 800742a:	aa0b      	add	r2, sp, #44	; 0x2c
 800742c:	4621      	mov	r1, r4
 800742e:	4628      	mov	r0, r5
 8007430:	f000 f9d8 	bl	80077e4 <_printf_common>
 8007434:	3001      	adds	r0, #1
 8007436:	f040 8090 	bne.w	800755a <_printf_float+0x1e2>
 800743a:	f04f 30ff 	mov.w	r0, #4294967295
 800743e:	b00d      	add	sp, #52	; 0x34
 8007440:	ecbd 8b02 	vpop	{d8}
 8007444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007448:	4642      	mov	r2, r8
 800744a:	464b      	mov	r3, r9
 800744c:	4640      	mov	r0, r8
 800744e:	4649      	mov	r1, r9
 8007450:	f7f9 fb74 	bl	8000b3c <__aeabi_dcmpun>
 8007454:	b140      	cbz	r0, 8007468 <_printf_float+0xf0>
 8007456:	464b      	mov	r3, r9
 8007458:	2b00      	cmp	r3, #0
 800745a:	bfbc      	itt	lt
 800745c:	232d      	movlt	r3, #45	; 0x2d
 800745e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007462:	487f      	ldr	r0, [pc, #508]	; (8007660 <_printf_float+0x2e8>)
 8007464:	4b7f      	ldr	r3, [pc, #508]	; (8007664 <_printf_float+0x2ec>)
 8007466:	e7d1      	b.n	800740c <_printf_float+0x94>
 8007468:	6863      	ldr	r3, [r4, #4]
 800746a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800746e:	9206      	str	r2, [sp, #24]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	d13f      	bne.n	80074f4 <_printf_float+0x17c>
 8007474:	2306      	movs	r3, #6
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	9b05      	ldr	r3, [sp, #20]
 800747a:	6861      	ldr	r1, [r4, #4]
 800747c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007480:	2300      	movs	r3, #0
 8007482:	9303      	str	r3, [sp, #12]
 8007484:	ab0a      	add	r3, sp, #40	; 0x28
 8007486:	e9cd b301 	strd	fp, r3, [sp, #4]
 800748a:	ab09      	add	r3, sp, #36	; 0x24
 800748c:	ec49 8b10 	vmov	d0, r8, r9
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007498:	4628      	mov	r0, r5
 800749a:	f7ff fecd 	bl	8007238 <__cvt>
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074a2:	2b47      	cmp	r3, #71	; 0x47
 80074a4:	4680      	mov	r8, r0
 80074a6:	d108      	bne.n	80074ba <_printf_float+0x142>
 80074a8:	1cc8      	adds	r0, r1, #3
 80074aa:	db02      	blt.n	80074b2 <_printf_float+0x13a>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	4299      	cmp	r1, r3
 80074b0:	dd41      	ble.n	8007536 <_printf_float+0x1be>
 80074b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80074b6:	fa5f fb8b 	uxtb.w	fp, fp
 80074ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074be:	d820      	bhi.n	8007502 <_printf_float+0x18a>
 80074c0:	3901      	subs	r1, #1
 80074c2:	465a      	mov	r2, fp
 80074c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074c8:	9109      	str	r1, [sp, #36]	; 0x24
 80074ca:	f7ff ff17 	bl	80072fc <__exponent>
 80074ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074d0:	1813      	adds	r3, r2, r0
 80074d2:	2a01      	cmp	r2, #1
 80074d4:	4681      	mov	r9, r0
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	dc02      	bgt.n	80074e0 <_printf_float+0x168>
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	07d2      	lsls	r2, r2, #31
 80074de:	d501      	bpl.n	80074e4 <_printf_float+0x16c>
 80074e0:	3301      	adds	r3, #1
 80074e2:	6123      	str	r3, [r4, #16]
 80074e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d09c      	beq.n	8007426 <_printf_float+0xae>
 80074ec:	232d      	movs	r3, #45	; 0x2d
 80074ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f2:	e798      	b.n	8007426 <_printf_float+0xae>
 80074f4:	9a06      	ldr	r2, [sp, #24]
 80074f6:	2a47      	cmp	r2, #71	; 0x47
 80074f8:	d1be      	bne.n	8007478 <_printf_float+0x100>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1bc      	bne.n	8007478 <_printf_float+0x100>
 80074fe:	2301      	movs	r3, #1
 8007500:	e7b9      	b.n	8007476 <_printf_float+0xfe>
 8007502:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007506:	d118      	bne.n	800753a <_printf_float+0x1c2>
 8007508:	2900      	cmp	r1, #0
 800750a:	6863      	ldr	r3, [r4, #4]
 800750c:	dd0b      	ble.n	8007526 <_printf_float+0x1ae>
 800750e:	6121      	str	r1, [r4, #16]
 8007510:	b913      	cbnz	r3, 8007518 <_printf_float+0x1a0>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	07d0      	lsls	r0, r2, #31
 8007516:	d502      	bpl.n	800751e <_printf_float+0x1a6>
 8007518:	3301      	adds	r3, #1
 800751a:	440b      	add	r3, r1
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007520:	f04f 0900 	mov.w	r9, #0
 8007524:	e7de      	b.n	80074e4 <_printf_float+0x16c>
 8007526:	b913      	cbnz	r3, 800752e <_printf_float+0x1b6>
 8007528:	6822      	ldr	r2, [r4, #0]
 800752a:	07d2      	lsls	r2, r2, #31
 800752c:	d501      	bpl.n	8007532 <_printf_float+0x1ba>
 800752e:	3302      	adds	r3, #2
 8007530:	e7f4      	b.n	800751c <_printf_float+0x1a4>
 8007532:	2301      	movs	r3, #1
 8007534:	e7f2      	b.n	800751c <_printf_float+0x1a4>
 8007536:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800753a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753c:	4299      	cmp	r1, r3
 800753e:	db05      	blt.n	800754c <_printf_float+0x1d4>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	6121      	str	r1, [r4, #16]
 8007544:	07d8      	lsls	r0, r3, #31
 8007546:	d5ea      	bpl.n	800751e <_printf_float+0x1a6>
 8007548:	1c4b      	adds	r3, r1, #1
 800754a:	e7e7      	b.n	800751c <_printf_float+0x1a4>
 800754c:	2900      	cmp	r1, #0
 800754e:	bfd4      	ite	le
 8007550:	f1c1 0202 	rsble	r2, r1, #2
 8007554:	2201      	movgt	r2, #1
 8007556:	4413      	add	r3, r2
 8007558:	e7e0      	b.n	800751c <_printf_float+0x1a4>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	055a      	lsls	r2, r3, #21
 800755e:	d407      	bmi.n	8007570 <_printf_float+0x1f8>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	4642      	mov	r2, r8
 8007564:	4631      	mov	r1, r6
 8007566:	4628      	mov	r0, r5
 8007568:	47b8      	blx	r7
 800756a:	3001      	adds	r0, #1
 800756c:	d12c      	bne.n	80075c8 <_printf_float+0x250>
 800756e:	e764      	b.n	800743a <_printf_float+0xc2>
 8007570:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007574:	f240 80e0 	bls.w	8007738 <_printf_float+0x3c0>
 8007578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	f7f9 faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007584:	2800      	cmp	r0, #0
 8007586:	d034      	beq.n	80075f2 <_printf_float+0x27a>
 8007588:	4a37      	ldr	r2, [pc, #220]	; (8007668 <_printf_float+0x2f0>)
 800758a:	2301      	movs	r3, #1
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af51 	beq.w	800743a <_printf_float+0xc2>
 8007598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800759c:	429a      	cmp	r2, r3
 800759e:	db02      	blt.n	80075a6 <_printf_float+0x22e>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	07d8      	lsls	r0, r3, #31
 80075a4:	d510      	bpl.n	80075c8 <_printf_float+0x250>
 80075a6:	ee18 3a10 	vmov	r3, s16
 80075aa:	4652      	mov	r2, sl
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af41 	beq.w	800743a <_printf_float+0xc2>
 80075b8:	f04f 0800 	mov.w	r8, #0
 80075bc:	f104 091a 	add.w	r9, r4, #26
 80075c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c2:	3b01      	subs	r3, #1
 80075c4:	4543      	cmp	r3, r8
 80075c6:	dc09      	bgt.n	80075dc <_printf_float+0x264>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	079b      	lsls	r3, r3, #30
 80075cc:	f100 8105 	bmi.w	80077da <_printf_float+0x462>
 80075d0:	68e0      	ldr	r0, [r4, #12]
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	4298      	cmp	r0, r3
 80075d6:	bfb8      	it	lt
 80075d8:	4618      	movlt	r0, r3
 80075da:	e730      	b.n	800743e <_printf_float+0xc6>
 80075dc:	2301      	movs	r3, #1
 80075de:	464a      	mov	r2, r9
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	f43f af27 	beq.w	800743a <_printf_float+0xc2>
 80075ec:	f108 0801 	add.w	r8, r8, #1
 80075f0:	e7e6      	b.n	80075c0 <_printf_float+0x248>
 80075f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dc39      	bgt.n	800766c <_printf_float+0x2f4>
 80075f8:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <_printf_float+0x2f0>)
 80075fa:	2301      	movs	r3, #1
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f af19 	beq.w	800743a <_printf_float+0xc2>
 8007608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800760c:	4313      	orrs	r3, r2
 800760e:	d102      	bne.n	8007616 <_printf_float+0x29e>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	07d9      	lsls	r1, r3, #31
 8007614:	d5d8      	bpl.n	80075c8 <_printf_float+0x250>
 8007616:	ee18 3a10 	vmov	r3, s16
 800761a:	4652      	mov	r2, sl
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f af09 	beq.w	800743a <_printf_float+0xc2>
 8007628:	f04f 0900 	mov.w	r9, #0
 800762c:	f104 0a1a 	add.w	sl, r4, #26
 8007630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007632:	425b      	negs	r3, r3
 8007634:	454b      	cmp	r3, r9
 8007636:	dc01      	bgt.n	800763c <_printf_float+0x2c4>
 8007638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763a:	e792      	b.n	8007562 <_printf_float+0x1ea>
 800763c:	2301      	movs	r3, #1
 800763e:	4652      	mov	r2, sl
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f aef7 	beq.w	800743a <_printf_float+0xc2>
 800764c:	f109 0901 	add.w	r9, r9, #1
 8007650:	e7ee      	b.n	8007630 <_printf_float+0x2b8>
 8007652:	bf00      	nop
 8007654:	7fefffff 	.word	0x7fefffff
 8007658:	0800a19c 	.word	0x0800a19c
 800765c:	0800a1a0 	.word	0x0800a1a0
 8007660:	0800a1a8 	.word	0x0800a1a8
 8007664:	0800a1a4 	.word	0x0800a1a4
 8007668:	0800a1ac 	.word	0x0800a1ac
 800766c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007670:	429a      	cmp	r2, r3
 8007672:	bfa8      	it	ge
 8007674:	461a      	movge	r2, r3
 8007676:	2a00      	cmp	r2, #0
 8007678:	4691      	mov	r9, r2
 800767a:	dc37      	bgt.n	80076ec <_printf_float+0x374>
 800767c:	f04f 0b00 	mov.w	fp, #0
 8007680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007684:	f104 021a 	add.w	r2, r4, #26
 8007688:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	eba3 0309 	sub.w	r3, r3, r9
 8007690:	455b      	cmp	r3, fp
 8007692:	dc33      	bgt.n	80076fc <_printf_float+0x384>
 8007694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007698:	429a      	cmp	r2, r3
 800769a:	db3b      	blt.n	8007714 <_printf_float+0x39c>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	07da      	lsls	r2, r3, #31
 80076a0:	d438      	bmi.n	8007714 <_printf_float+0x39c>
 80076a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076a8:	1a9a      	subs	r2, r3, r2
 80076aa:	eba3 0901 	sub.w	r9, r3, r1
 80076ae:	4591      	cmp	r9, r2
 80076b0:	bfa8      	it	ge
 80076b2:	4691      	movge	r9, r2
 80076b4:	f1b9 0f00 	cmp.w	r9, #0
 80076b8:	dc35      	bgt.n	8007726 <_printf_float+0x3ae>
 80076ba:	f04f 0800 	mov.w	r8, #0
 80076be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c2:	f104 0a1a 	add.w	sl, r4, #26
 80076c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	eba3 0309 	sub.w	r3, r3, r9
 80076d0:	4543      	cmp	r3, r8
 80076d2:	f77f af79 	ble.w	80075c8 <_printf_float+0x250>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4652      	mov	r2, sl
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f aeaa 	beq.w	800743a <_printf_float+0xc2>
 80076e6:	f108 0801 	add.w	r8, r8, #1
 80076ea:	e7ec      	b.n	80076c6 <_printf_float+0x34e>
 80076ec:	4613      	mov	r3, r2
 80076ee:	4631      	mov	r1, r6
 80076f0:	4642      	mov	r2, r8
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	d1c0      	bne.n	800767c <_printf_float+0x304>
 80076fa:	e69e      	b.n	800743a <_printf_float+0xc2>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	9205      	str	r2, [sp, #20]
 8007704:	47b8      	blx	r7
 8007706:	3001      	adds	r0, #1
 8007708:	f43f ae97 	beq.w	800743a <_printf_float+0xc2>
 800770c:	9a05      	ldr	r2, [sp, #20]
 800770e:	f10b 0b01 	add.w	fp, fp, #1
 8007712:	e7b9      	b.n	8007688 <_printf_float+0x310>
 8007714:	ee18 3a10 	vmov	r3, s16
 8007718:	4652      	mov	r2, sl
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	d1be      	bne.n	80076a2 <_printf_float+0x32a>
 8007724:	e689      	b.n	800743a <_printf_float+0xc2>
 8007726:	9a05      	ldr	r2, [sp, #20]
 8007728:	464b      	mov	r3, r9
 800772a:	4442      	add	r2, r8
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	d1c1      	bne.n	80076ba <_printf_float+0x342>
 8007736:	e680      	b.n	800743a <_printf_float+0xc2>
 8007738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773a:	2a01      	cmp	r2, #1
 800773c:	dc01      	bgt.n	8007742 <_printf_float+0x3ca>
 800773e:	07db      	lsls	r3, r3, #31
 8007740:	d538      	bpl.n	80077b4 <_printf_float+0x43c>
 8007742:	2301      	movs	r3, #1
 8007744:	4642      	mov	r2, r8
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae74 	beq.w	800743a <_printf_float+0xc2>
 8007752:	ee18 3a10 	vmov	r3, s16
 8007756:	4652      	mov	r2, sl
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f ae6b 	beq.w	800743a <_printf_float+0xc2>
 8007764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007768:	2200      	movs	r2, #0
 800776a:	2300      	movs	r3, #0
 800776c:	f7f9 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007770:	b9d8      	cbnz	r0, 80077aa <_printf_float+0x432>
 8007772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007774:	f108 0201 	add.w	r2, r8, #1
 8007778:	3b01      	subs	r3, #1
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	47b8      	blx	r7
 8007780:	3001      	adds	r0, #1
 8007782:	d10e      	bne.n	80077a2 <_printf_float+0x42a>
 8007784:	e659      	b.n	800743a <_printf_float+0xc2>
 8007786:	2301      	movs	r3, #1
 8007788:	4652      	mov	r2, sl
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	f43f ae52 	beq.w	800743a <_printf_float+0xc2>
 8007796:	f108 0801 	add.w	r8, r8, #1
 800779a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800779c:	3b01      	subs	r3, #1
 800779e:	4543      	cmp	r3, r8
 80077a0:	dcf1      	bgt.n	8007786 <_printf_float+0x40e>
 80077a2:	464b      	mov	r3, r9
 80077a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077a8:	e6dc      	b.n	8007564 <_printf_float+0x1ec>
 80077aa:	f04f 0800 	mov.w	r8, #0
 80077ae:	f104 0a1a 	add.w	sl, r4, #26
 80077b2:	e7f2      	b.n	800779a <_printf_float+0x422>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4642      	mov	r2, r8
 80077b8:	e7df      	b.n	800777a <_printf_float+0x402>
 80077ba:	2301      	movs	r3, #1
 80077bc:	464a      	mov	r2, r9
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	f43f ae38 	beq.w	800743a <_printf_float+0xc2>
 80077ca:	f108 0801 	add.w	r8, r8, #1
 80077ce:	68e3      	ldr	r3, [r4, #12]
 80077d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077d2:	1a5b      	subs	r3, r3, r1
 80077d4:	4543      	cmp	r3, r8
 80077d6:	dcf0      	bgt.n	80077ba <_printf_float+0x442>
 80077d8:	e6fa      	b.n	80075d0 <_printf_float+0x258>
 80077da:	f04f 0800 	mov.w	r8, #0
 80077de:	f104 0919 	add.w	r9, r4, #25
 80077e2:	e7f4      	b.n	80077ce <_printf_float+0x456>

080077e4 <_printf_common>:
 80077e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	4616      	mov	r6, r2
 80077ea:	4699      	mov	r9, r3
 80077ec:	688a      	ldr	r2, [r1, #8]
 80077ee:	690b      	ldr	r3, [r1, #16]
 80077f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bfb8      	it	lt
 80077f8:	4613      	movlt	r3, r2
 80077fa:	6033      	str	r3, [r6, #0]
 80077fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007800:	4607      	mov	r7, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b10a      	cbz	r2, 800780a <_printf_common+0x26>
 8007806:	3301      	adds	r3, #1
 8007808:	6033      	str	r3, [r6, #0]
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	0699      	lsls	r1, r3, #26
 800780e:	bf42      	ittt	mi
 8007810:	6833      	ldrmi	r3, [r6, #0]
 8007812:	3302      	addmi	r3, #2
 8007814:	6033      	strmi	r3, [r6, #0]
 8007816:	6825      	ldr	r5, [r4, #0]
 8007818:	f015 0506 	ands.w	r5, r5, #6
 800781c:	d106      	bne.n	800782c <_printf_common+0x48>
 800781e:	f104 0a19 	add.w	sl, r4, #25
 8007822:	68e3      	ldr	r3, [r4, #12]
 8007824:	6832      	ldr	r2, [r6, #0]
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	42ab      	cmp	r3, r5
 800782a:	dc26      	bgt.n	800787a <_printf_common+0x96>
 800782c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007830:	1e13      	subs	r3, r2, #0
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	bf18      	it	ne
 8007836:	2301      	movne	r3, #1
 8007838:	0692      	lsls	r2, r2, #26
 800783a:	d42b      	bmi.n	8007894 <_printf_common+0xb0>
 800783c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007840:	4649      	mov	r1, r9
 8007842:	4638      	mov	r0, r7
 8007844:	47c0      	blx	r8
 8007846:	3001      	adds	r0, #1
 8007848:	d01e      	beq.n	8007888 <_printf_common+0xa4>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	68e5      	ldr	r5, [r4, #12]
 800784e:	6832      	ldr	r2, [r6, #0]
 8007850:	f003 0306 	and.w	r3, r3, #6
 8007854:	2b04      	cmp	r3, #4
 8007856:	bf08      	it	eq
 8007858:	1aad      	subeq	r5, r5, r2
 800785a:	68a3      	ldr	r3, [r4, #8]
 800785c:	6922      	ldr	r2, [r4, #16]
 800785e:	bf0c      	ite	eq
 8007860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007864:	2500      	movne	r5, #0
 8007866:	4293      	cmp	r3, r2
 8007868:	bfc4      	itt	gt
 800786a:	1a9b      	subgt	r3, r3, r2
 800786c:	18ed      	addgt	r5, r5, r3
 800786e:	2600      	movs	r6, #0
 8007870:	341a      	adds	r4, #26
 8007872:	42b5      	cmp	r5, r6
 8007874:	d11a      	bne.n	80078ac <_printf_common+0xc8>
 8007876:	2000      	movs	r0, #0
 8007878:	e008      	b.n	800788c <_printf_common+0xa8>
 800787a:	2301      	movs	r3, #1
 800787c:	4652      	mov	r2, sl
 800787e:	4649      	mov	r1, r9
 8007880:	4638      	mov	r0, r7
 8007882:	47c0      	blx	r8
 8007884:	3001      	adds	r0, #1
 8007886:	d103      	bne.n	8007890 <_printf_common+0xac>
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007890:	3501      	adds	r5, #1
 8007892:	e7c6      	b.n	8007822 <_printf_common+0x3e>
 8007894:	18e1      	adds	r1, r4, r3
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	2030      	movs	r0, #48	; 0x30
 800789a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800789e:	4422      	add	r2, r4
 80078a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078a8:	3302      	adds	r3, #2
 80078aa:	e7c7      	b.n	800783c <_printf_common+0x58>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4622      	mov	r2, r4
 80078b0:	4649      	mov	r1, r9
 80078b2:	4638      	mov	r0, r7
 80078b4:	47c0      	blx	r8
 80078b6:	3001      	adds	r0, #1
 80078b8:	d0e6      	beq.n	8007888 <_printf_common+0xa4>
 80078ba:	3601      	adds	r6, #1
 80078bc:	e7d9      	b.n	8007872 <_printf_common+0x8e>
	...

080078c0 <_printf_i>:
 80078c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	7e0f      	ldrb	r7, [r1, #24]
 80078c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078c8:	2f78      	cmp	r7, #120	; 0x78
 80078ca:	4691      	mov	r9, r2
 80078cc:	4680      	mov	r8, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	469a      	mov	sl, r3
 80078d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078d6:	d807      	bhi.n	80078e8 <_printf_i+0x28>
 80078d8:	2f62      	cmp	r7, #98	; 0x62
 80078da:	d80a      	bhi.n	80078f2 <_printf_i+0x32>
 80078dc:	2f00      	cmp	r7, #0
 80078de:	f000 80d8 	beq.w	8007a92 <_printf_i+0x1d2>
 80078e2:	2f58      	cmp	r7, #88	; 0x58
 80078e4:	f000 80a3 	beq.w	8007a2e <_printf_i+0x16e>
 80078e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078f0:	e03a      	b.n	8007968 <_printf_i+0xa8>
 80078f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078f6:	2b15      	cmp	r3, #21
 80078f8:	d8f6      	bhi.n	80078e8 <_printf_i+0x28>
 80078fa:	a101      	add	r1, pc, #4	; (adr r1, 8007900 <_printf_i+0x40>)
 80078fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007900:	08007959 	.word	0x08007959
 8007904:	0800796d 	.word	0x0800796d
 8007908:	080078e9 	.word	0x080078e9
 800790c:	080078e9 	.word	0x080078e9
 8007910:	080078e9 	.word	0x080078e9
 8007914:	080078e9 	.word	0x080078e9
 8007918:	0800796d 	.word	0x0800796d
 800791c:	080078e9 	.word	0x080078e9
 8007920:	080078e9 	.word	0x080078e9
 8007924:	080078e9 	.word	0x080078e9
 8007928:	080078e9 	.word	0x080078e9
 800792c:	08007a79 	.word	0x08007a79
 8007930:	0800799d 	.word	0x0800799d
 8007934:	08007a5b 	.word	0x08007a5b
 8007938:	080078e9 	.word	0x080078e9
 800793c:	080078e9 	.word	0x080078e9
 8007940:	08007a9b 	.word	0x08007a9b
 8007944:	080078e9 	.word	0x080078e9
 8007948:	0800799d 	.word	0x0800799d
 800794c:	080078e9 	.word	0x080078e9
 8007950:	080078e9 	.word	0x080078e9
 8007954:	08007a63 	.word	0x08007a63
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	1d1a      	adds	r2, r3, #4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	602a      	str	r2, [r5, #0]
 8007960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007968:	2301      	movs	r3, #1
 800796a:	e0a3      	b.n	8007ab4 <_printf_i+0x1f4>
 800796c:	6820      	ldr	r0, [r4, #0]
 800796e:	6829      	ldr	r1, [r5, #0]
 8007970:	0606      	lsls	r6, r0, #24
 8007972:	f101 0304 	add.w	r3, r1, #4
 8007976:	d50a      	bpl.n	800798e <_printf_i+0xce>
 8007978:	680e      	ldr	r6, [r1, #0]
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	2e00      	cmp	r6, #0
 800797e:	da03      	bge.n	8007988 <_printf_i+0xc8>
 8007980:	232d      	movs	r3, #45	; 0x2d
 8007982:	4276      	negs	r6, r6
 8007984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007988:	485e      	ldr	r0, [pc, #376]	; (8007b04 <_printf_i+0x244>)
 800798a:	230a      	movs	r3, #10
 800798c:	e019      	b.n	80079c2 <_printf_i+0x102>
 800798e:	680e      	ldr	r6, [r1, #0]
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007996:	bf18      	it	ne
 8007998:	b236      	sxthne	r6, r6
 800799a:	e7ef      	b.n	800797c <_printf_i+0xbc>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	1d19      	adds	r1, r3, #4
 80079a2:	6029      	str	r1, [r5, #0]
 80079a4:	0601      	lsls	r1, r0, #24
 80079a6:	d501      	bpl.n	80079ac <_printf_i+0xec>
 80079a8:	681e      	ldr	r6, [r3, #0]
 80079aa:	e002      	b.n	80079b2 <_printf_i+0xf2>
 80079ac:	0646      	lsls	r6, r0, #25
 80079ae:	d5fb      	bpl.n	80079a8 <_printf_i+0xe8>
 80079b0:	881e      	ldrh	r6, [r3, #0]
 80079b2:	4854      	ldr	r0, [pc, #336]	; (8007b04 <_printf_i+0x244>)
 80079b4:	2f6f      	cmp	r7, #111	; 0x6f
 80079b6:	bf0c      	ite	eq
 80079b8:	2308      	moveq	r3, #8
 80079ba:	230a      	movne	r3, #10
 80079bc:	2100      	movs	r1, #0
 80079be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079c2:	6865      	ldr	r5, [r4, #4]
 80079c4:	60a5      	str	r5, [r4, #8]
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	bfa2      	ittt	ge
 80079ca:	6821      	ldrge	r1, [r4, #0]
 80079cc:	f021 0104 	bicge.w	r1, r1, #4
 80079d0:	6021      	strge	r1, [r4, #0]
 80079d2:	b90e      	cbnz	r6, 80079d8 <_printf_i+0x118>
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	d04d      	beq.n	8007a74 <_printf_i+0x1b4>
 80079d8:	4615      	mov	r5, r2
 80079da:	fbb6 f1f3 	udiv	r1, r6, r3
 80079de:	fb03 6711 	mls	r7, r3, r1, r6
 80079e2:	5dc7      	ldrb	r7, [r0, r7]
 80079e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079e8:	4637      	mov	r7, r6
 80079ea:	42bb      	cmp	r3, r7
 80079ec:	460e      	mov	r6, r1
 80079ee:	d9f4      	bls.n	80079da <_printf_i+0x11a>
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d10b      	bne.n	8007a0c <_printf_i+0x14c>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	07de      	lsls	r6, r3, #31
 80079f8:	d508      	bpl.n	8007a0c <_printf_i+0x14c>
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	6861      	ldr	r1, [r4, #4]
 80079fe:	4299      	cmp	r1, r3
 8007a00:	bfde      	ittt	le
 8007a02:	2330      	movle	r3, #48	; 0x30
 8007a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a0c:	1b52      	subs	r2, r2, r5
 8007a0e:	6122      	str	r2, [r4, #16]
 8007a10:	f8cd a000 	str.w	sl, [sp]
 8007a14:	464b      	mov	r3, r9
 8007a16:	aa03      	add	r2, sp, #12
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	f7ff fee2 	bl	80077e4 <_printf_common>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d14c      	bne.n	8007abe <_printf_i+0x1fe>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	b004      	add	sp, #16
 8007a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2e:	4835      	ldr	r0, [pc, #212]	; (8007b04 <_printf_i+0x244>)
 8007a30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a34:	6829      	ldr	r1, [r5, #0]
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a3c:	6029      	str	r1, [r5, #0]
 8007a3e:	061d      	lsls	r5, r3, #24
 8007a40:	d514      	bpl.n	8007a6c <_printf_i+0x1ac>
 8007a42:	07df      	lsls	r7, r3, #31
 8007a44:	bf44      	itt	mi
 8007a46:	f043 0320 	orrmi.w	r3, r3, #32
 8007a4a:	6023      	strmi	r3, [r4, #0]
 8007a4c:	b91e      	cbnz	r6, 8007a56 <_printf_i+0x196>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	f023 0320 	bic.w	r3, r3, #32
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	2310      	movs	r3, #16
 8007a58:	e7b0      	b.n	80079bc <_printf_i+0xfc>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	f043 0320 	orr.w	r3, r3, #32
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	2378      	movs	r3, #120	; 0x78
 8007a64:	4828      	ldr	r0, [pc, #160]	; (8007b08 <_printf_i+0x248>)
 8007a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a6a:	e7e3      	b.n	8007a34 <_printf_i+0x174>
 8007a6c:	0659      	lsls	r1, r3, #25
 8007a6e:	bf48      	it	mi
 8007a70:	b2b6      	uxthmi	r6, r6
 8007a72:	e7e6      	b.n	8007a42 <_printf_i+0x182>
 8007a74:	4615      	mov	r5, r2
 8007a76:	e7bb      	b.n	80079f0 <_printf_i+0x130>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	6826      	ldr	r6, [r4, #0]
 8007a7c:	6961      	ldr	r1, [r4, #20]
 8007a7e:	1d18      	adds	r0, r3, #4
 8007a80:	6028      	str	r0, [r5, #0]
 8007a82:	0635      	lsls	r5, r6, #24
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	d501      	bpl.n	8007a8c <_printf_i+0x1cc>
 8007a88:	6019      	str	r1, [r3, #0]
 8007a8a:	e002      	b.n	8007a92 <_printf_i+0x1d2>
 8007a8c:	0670      	lsls	r0, r6, #25
 8007a8e:	d5fb      	bpl.n	8007a88 <_printf_i+0x1c8>
 8007a90:	8019      	strh	r1, [r3, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	4615      	mov	r5, r2
 8007a98:	e7ba      	b.n	8007a10 <_printf_i+0x150>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	1d1a      	adds	r2, r3, #4
 8007a9e:	602a      	str	r2, [r5, #0]
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	6862      	ldr	r2, [r4, #4]
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f7f8 fba2 	bl	80001f0 <memchr>
 8007aac:	b108      	cbz	r0, 8007ab2 <_printf_i+0x1f2>
 8007aae:	1b40      	subs	r0, r0, r5
 8007ab0:	6060      	str	r0, [r4, #4]
 8007ab2:	6863      	ldr	r3, [r4, #4]
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007abc:	e7a8      	b.n	8007a10 <_printf_i+0x150>
 8007abe:	6923      	ldr	r3, [r4, #16]
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	47d0      	blx	sl
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d0ab      	beq.n	8007a24 <_printf_i+0x164>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	079b      	lsls	r3, r3, #30
 8007ad0:	d413      	bmi.n	8007afa <_printf_i+0x23a>
 8007ad2:	68e0      	ldr	r0, [r4, #12]
 8007ad4:	9b03      	ldr	r3, [sp, #12]
 8007ad6:	4298      	cmp	r0, r3
 8007ad8:	bfb8      	it	lt
 8007ada:	4618      	movlt	r0, r3
 8007adc:	e7a4      	b.n	8007a28 <_printf_i+0x168>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4632      	mov	r2, r6
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	47d0      	blx	sl
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d09b      	beq.n	8007a24 <_printf_i+0x164>
 8007aec:	3501      	adds	r5, #1
 8007aee:	68e3      	ldr	r3, [r4, #12]
 8007af0:	9903      	ldr	r1, [sp, #12]
 8007af2:	1a5b      	subs	r3, r3, r1
 8007af4:	42ab      	cmp	r3, r5
 8007af6:	dcf2      	bgt.n	8007ade <_printf_i+0x21e>
 8007af8:	e7eb      	b.n	8007ad2 <_printf_i+0x212>
 8007afa:	2500      	movs	r5, #0
 8007afc:	f104 0619 	add.w	r6, r4, #25
 8007b00:	e7f5      	b.n	8007aee <_printf_i+0x22e>
 8007b02:	bf00      	nop
 8007b04:	0800a1ae 	.word	0x0800a1ae
 8007b08:	0800a1bf 	.word	0x0800a1bf

08007b0c <iprintf>:
 8007b0c:	b40f      	push	{r0, r1, r2, r3}
 8007b0e:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <iprintf+0x2c>)
 8007b10:	b513      	push	{r0, r1, r4, lr}
 8007b12:	681c      	ldr	r4, [r3, #0]
 8007b14:	b124      	cbz	r4, 8007b20 <iprintf+0x14>
 8007b16:	69a3      	ldr	r3, [r4, #24]
 8007b18:	b913      	cbnz	r3, 8007b20 <iprintf+0x14>
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f001 f91c 	bl	8008d58 <__sinit>
 8007b20:	ab05      	add	r3, sp, #20
 8007b22:	9a04      	ldr	r2, [sp, #16]
 8007b24:	68a1      	ldr	r1, [r4, #8]
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 ff71 	bl	8009a10 <_vfiprintf_r>
 8007b2e:	b002      	add	sp, #8
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	b004      	add	sp, #16
 8007b36:	4770      	bx	lr
 8007b38:	200002c8 	.word	0x200002c8

08007b3c <_puts_r>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	460e      	mov	r6, r1
 8007b40:	4605      	mov	r5, r0
 8007b42:	b118      	cbz	r0, 8007b4c <_puts_r+0x10>
 8007b44:	6983      	ldr	r3, [r0, #24]
 8007b46:	b90b      	cbnz	r3, 8007b4c <_puts_r+0x10>
 8007b48:	f001 f906 	bl	8008d58 <__sinit>
 8007b4c:	69ab      	ldr	r3, [r5, #24]
 8007b4e:	68ac      	ldr	r4, [r5, #8]
 8007b50:	b913      	cbnz	r3, 8007b58 <_puts_r+0x1c>
 8007b52:	4628      	mov	r0, r5
 8007b54:	f001 f900 	bl	8008d58 <__sinit>
 8007b58:	4b2c      	ldr	r3, [pc, #176]	; (8007c0c <_puts_r+0xd0>)
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	d120      	bne.n	8007ba0 <_puts_r+0x64>
 8007b5e:	686c      	ldr	r4, [r5, #4]
 8007b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b62:	07db      	lsls	r3, r3, #31
 8007b64:	d405      	bmi.n	8007b72 <_puts_r+0x36>
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	0598      	lsls	r0, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_puts_r+0x36>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6e:	f001 f996 	bl	8008e9e <__retarget_lock_acquire_recursive>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	0719      	lsls	r1, r3, #28
 8007b76:	d51d      	bpl.n	8007bb4 <_puts_r+0x78>
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	b1db      	cbz	r3, 8007bb4 <_puts_r+0x78>
 8007b7c:	3e01      	subs	r6, #1
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b84:	3b01      	subs	r3, #1
 8007b86:	60a3      	str	r3, [r4, #8]
 8007b88:	bb39      	cbnz	r1, 8007bda <_puts_r+0x9e>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da38      	bge.n	8007c00 <_puts_r+0xc4>
 8007b8e:	4622      	mov	r2, r4
 8007b90:	210a      	movs	r1, #10
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 f88c 	bl	8007cb0 <__swbuf_r>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d011      	beq.n	8007bc0 <_puts_r+0x84>
 8007b9c:	250a      	movs	r5, #10
 8007b9e:	e011      	b.n	8007bc4 <_puts_r+0x88>
 8007ba0:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <_puts_r+0xd4>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <_puts_r+0x6e>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7da      	b.n	8007b60 <_puts_r+0x24>
 8007baa:	4b1a      	ldr	r3, [pc, #104]	; (8007c14 <_puts_r+0xd8>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7d5      	b.n	8007b60 <_puts_r+0x24>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 f8cc 	bl	8007d54 <__swsetup_r>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d0dd      	beq.n	8007b7c <_puts_r+0x40>
 8007bc0:	f04f 35ff 	mov.w	r5, #4294967295
 8007bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bc6:	07da      	lsls	r2, r3, #31
 8007bc8:	d405      	bmi.n	8007bd6 <_puts_r+0x9a>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	059b      	lsls	r3, r3, #22
 8007bce:	d402      	bmi.n	8007bd6 <_puts_r+0x9a>
 8007bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd2:	f001 f965 	bl	8008ea0 <__retarget_lock_release_recursive>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	bd70      	pop	{r4, r5, r6, pc}
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	da04      	bge.n	8007be8 <_puts_r+0xac>
 8007bde:	69a2      	ldr	r2, [r4, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	dc06      	bgt.n	8007bf2 <_puts_r+0xb6>
 8007be4:	290a      	cmp	r1, #10
 8007be6:	d004      	beq.n	8007bf2 <_puts_r+0xb6>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	6022      	str	r2, [r4, #0]
 8007bee:	7019      	strb	r1, [r3, #0]
 8007bf0:	e7c5      	b.n	8007b7e <_puts_r+0x42>
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 f85b 	bl	8007cb0 <__swbuf_r>
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d1bf      	bne.n	8007b7e <_puts_r+0x42>
 8007bfe:	e7df      	b.n	8007bc0 <_puts_r+0x84>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	250a      	movs	r5, #10
 8007c04:	1c5a      	adds	r2, r3, #1
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	701d      	strb	r5, [r3, #0]
 8007c0a:	e7db      	b.n	8007bc4 <_puts_r+0x88>
 8007c0c:	0800a280 	.word	0x0800a280
 8007c10:	0800a2a0 	.word	0x0800a2a0
 8007c14:	0800a260 	.word	0x0800a260

08007c18 <puts>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <puts+0xc>)
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f7ff bf8d 	b.w	8007b3c <_puts_r>
 8007c22:	bf00      	nop
 8007c24:	200002c8 	.word	0x200002c8

08007c28 <_sbrk_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d06      	ldr	r5, [pc, #24]	; (8007c44 <_sbrk_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7f9 ff80 	bl	8001b38 <_sbrk>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_sbrk_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_sbrk_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20000708 	.word	0x20000708

08007c48 <strncpy>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	3901      	subs	r1, #1
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	b132      	cbz	r2, 8007c5e <strncpy+0x16>
 8007c50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c54:	f803 4b01 	strb.w	r4, [r3], #1
 8007c58:	3a01      	subs	r2, #1
 8007c5a:	2c00      	cmp	r4, #0
 8007c5c:	d1f7      	bne.n	8007c4e <strncpy+0x6>
 8007c5e:	441a      	add	r2, r3
 8007c60:	2100      	movs	r1, #0
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d100      	bne.n	8007c68 <strncpy+0x20>
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	f803 1b01 	strb.w	r1, [r3], #1
 8007c6c:	e7f9      	b.n	8007c62 <strncpy+0x1a>
	...

08007c70 <_vsiprintf_r>:
 8007c70:	b500      	push	{lr}
 8007c72:	b09b      	sub	sp, #108	; 0x6c
 8007c74:	9100      	str	r1, [sp, #0]
 8007c76:	9104      	str	r1, [sp, #16]
 8007c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c7c:	9105      	str	r1, [sp, #20]
 8007c7e:	9102      	str	r1, [sp, #8]
 8007c80:	4905      	ldr	r1, [pc, #20]	; (8007c98 <_vsiprintf_r+0x28>)
 8007c82:	9103      	str	r1, [sp, #12]
 8007c84:	4669      	mov	r1, sp
 8007c86:	f001 fd99 	bl	80097bc <_svfiprintf_r>
 8007c8a:	9b00      	ldr	r3, [sp, #0]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	b01b      	add	sp, #108	; 0x6c
 8007c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c96:	bf00      	nop
 8007c98:	ffff0208 	.word	0xffff0208

08007c9c <vsiprintf>:
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4802      	ldr	r0, [pc, #8]	; (8007cac <vsiprintf+0x10>)
 8007ca4:	6800      	ldr	r0, [r0, #0]
 8007ca6:	f7ff bfe3 	b.w	8007c70 <_vsiprintf_r>
 8007caa:	bf00      	nop
 8007cac:	200002c8 	.word	0x200002c8

08007cb0 <__swbuf_r>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	b118      	cbz	r0, 8007cc2 <__swbuf_r+0x12>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <__swbuf_r+0x12>
 8007cbe:	f001 f84b 	bl	8008d58 <__sinit>
 8007cc2:	4b21      	ldr	r3, [pc, #132]	; (8007d48 <__swbuf_r+0x98>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d12b      	bne.n	8007d20 <__swbuf_r+0x70>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	69a3      	ldr	r3, [r4, #24]
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	071a      	lsls	r2, r3, #28
 8007cd2:	d52f      	bpl.n	8007d34 <__swbuf_r+0x84>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	b36b      	cbz	r3, 8007d34 <__swbuf_r+0x84>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	b2f6      	uxtb	r6, r6
 8007ce2:	4283      	cmp	r3, r0
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	dc04      	bgt.n	8007cf2 <__swbuf_r+0x42>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 ffa0 	bl	8008c30 <_fflush_r>
 8007cf0:	bb30      	cbnz	r0, 8007d40 <__swbuf_r+0x90>
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	60a3      	str	r3, [r4, #8]
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	6022      	str	r2, [r4, #0]
 8007cfe:	701e      	strb	r6, [r3, #0]
 8007d00:	6963      	ldr	r3, [r4, #20]
 8007d02:	3001      	adds	r0, #1
 8007d04:	4283      	cmp	r3, r0
 8007d06:	d004      	beq.n	8007d12 <__swbuf_r+0x62>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	07db      	lsls	r3, r3, #31
 8007d0c:	d506      	bpl.n	8007d1c <__swbuf_r+0x6c>
 8007d0e:	2e0a      	cmp	r6, #10
 8007d10:	d104      	bne.n	8007d1c <__swbuf_r+0x6c>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 ff8b 	bl	8008c30 <_fflush_r>
 8007d1a:	b988      	cbnz	r0, 8007d40 <__swbuf_r+0x90>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <__swbuf_r+0x9c>)
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d101      	bne.n	8007d2a <__swbuf_r+0x7a>
 8007d26:	68ac      	ldr	r4, [r5, #8]
 8007d28:	e7cf      	b.n	8007cca <__swbuf_r+0x1a>
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <__swbuf_r+0xa0>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	bf08      	it	eq
 8007d30:	68ec      	ldreq	r4, [r5, #12]
 8007d32:	e7ca      	b.n	8007cca <__swbuf_r+0x1a>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f80c 	bl	8007d54 <__swsetup_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0cb      	beq.n	8007cd8 <__swbuf_r+0x28>
 8007d40:	f04f 37ff 	mov.w	r7, #4294967295
 8007d44:	e7ea      	b.n	8007d1c <__swbuf_r+0x6c>
 8007d46:	bf00      	nop
 8007d48:	0800a280 	.word	0x0800a280
 8007d4c:	0800a2a0 	.word	0x0800a2a0
 8007d50:	0800a260 	.word	0x0800a260

08007d54 <__swsetup_r>:
 8007d54:	4b32      	ldr	r3, [pc, #200]	; (8007e20 <__swsetup_r+0xcc>)
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	681d      	ldr	r5, [r3, #0]
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	b125      	cbz	r5, 8007d6a <__swsetup_r+0x16>
 8007d60:	69ab      	ldr	r3, [r5, #24]
 8007d62:	b913      	cbnz	r3, 8007d6a <__swsetup_r+0x16>
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 fff7 	bl	8008d58 <__sinit>
 8007d6a:	4b2e      	ldr	r3, [pc, #184]	; (8007e24 <__swsetup_r+0xd0>)
 8007d6c:	429c      	cmp	r4, r3
 8007d6e:	d10f      	bne.n	8007d90 <__swsetup_r+0x3c>
 8007d70:	686c      	ldr	r4, [r5, #4]
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d78:	0719      	lsls	r1, r3, #28
 8007d7a:	d42c      	bmi.n	8007dd6 <__swsetup_r+0x82>
 8007d7c:	06dd      	lsls	r5, r3, #27
 8007d7e:	d411      	bmi.n	8007da4 <__swsetup_r+0x50>
 8007d80:	2309      	movs	r3, #9
 8007d82:	6033      	str	r3, [r6, #0]
 8007d84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	e03e      	b.n	8007e0e <__swsetup_r+0xba>
 8007d90:	4b25      	ldr	r3, [pc, #148]	; (8007e28 <__swsetup_r+0xd4>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <__swsetup_r+0x46>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7eb      	b.n	8007d72 <__swsetup_r+0x1e>
 8007d9a:	4b24      	ldr	r3, [pc, #144]	; (8007e2c <__swsetup_r+0xd8>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7e6      	b.n	8007d72 <__swsetup_r+0x1e>
 8007da4:	0758      	lsls	r0, r3, #29
 8007da6:	d512      	bpl.n	8007dce <__swsetup_r+0x7a>
 8007da8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007daa:	b141      	cbz	r1, 8007dbe <__swsetup_r+0x6a>
 8007dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db0:	4299      	cmp	r1, r3
 8007db2:	d002      	beq.n	8007dba <__swsetup_r+0x66>
 8007db4:	4630      	mov	r0, r6
 8007db6:	f7ff f95f 	bl	8007078 <_free_r>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f043 0308 	orr.w	r3, r3, #8
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	b94b      	cbnz	r3, 8007dee <__swsetup_r+0x9a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de4:	d003      	beq.n	8007dee <__swsetup_r+0x9a>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4630      	mov	r0, r6
 8007dea:	f001 f87f 	bl	8008eec <__smakebuf_r>
 8007dee:	89a0      	ldrh	r0, [r4, #12]
 8007df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007df4:	f010 0301 	ands.w	r3, r0, #1
 8007df8:	d00a      	beq.n	8007e10 <__swsetup_r+0xbc>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	6963      	ldr	r3, [r4, #20]
 8007e00:	425b      	negs	r3, r3
 8007e02:	61a3      	str	r3, [r4, #24]
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	b943      	cbnz	r3, 8007e1a <__swsetup_r+0xc6>
 8007e08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e0c:	d1ba      	bne.n	8007d84 <__swsetup_r+0x30>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	0781      	lsls	r1, r0, #30
 8007e12:	bf58      	it	pl
 8007e14:	6963      	ldrpl	r3, [r4, #20]
 8007e16:	60a3      	str	r3, [r4, #8]
 8007e18:	e7f4      	b.n	8007e04 <__swsetup_r+0xb0>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e7f7      	b.n	8007e0e <__swsetup_r+0xba>
 8007e1e:	bf00      	nop
 8007e20:	200002c8 	.word	0x200002c8
 8007e24:	0800a280 	.word	0x0800a280
 8007e28:	0800a2a0 	.word	0x0800a2a0
 8007e2c:	0800a260 	.word	0x0800a260

08007e30 <quorem>:
 8007e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	6903      	ldr	r3, [r0, #16]
 8007e36:	690c      	ldr	r4, [r1, #16]
 8007e38:	42a3      	cmp	r3, r4
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	f2c0 8081 	blt.w	8007f42 <quorem+0x112>
 8007e40:	3c01      	subs	r4, #1
 8007e42:	f101 0814 	add.w	r8, r1, #20
 8007e46:	f100 0514 	add.w	r5, r0, #20
 8007e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e68:	d331      	bcc.n	8007ece <quorem+0x9e>
 8007e6a:	f04f 0e00 	mov.w	lr, #0
 8007e6e:	4640      	mov	r0, r8
 8007e70:	46ac      	mov	ip, r5
 8007e72:	46f2      	mov	sl, lr
 8007e74:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e78:	b293      	uxth	r3, r2
 8007e7a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	ebaa 0303 	sub.w	r3, sl, r3
 8007e88:	f8dc a000 	ldr.w	sl, [ip]
 8007e8c:	0c12      	lsrs	r2, r2, #16
 8007e8e:	fa13 f38a 	uxtah	r3, r3, sl
 8007e92:	fb06 e202 	mla	r2, r6, r2, lr
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	9b00      	ldr	r3, [sp, #0]
 8007e9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007eac:	4581      	cmp	r9, r0
 8007eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eb2:	f84c 3b04 	str.w	r3, [ip], #4
 8007eb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eba:	d2db      	bcs.n	8007e74 <quorem+0x44>
 8007ebc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ec0:	b92b      	cbnz	r3, 8007ece <quorem+0x9e>
 8007ec2:	9b01      	ldr	r3, [sp, #4]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	d32e      	bcc.n	8007f2a <quorem+0xfa>
 8007ecc:	613c      	str	r4, [r7, #16]
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f001 fae8 	bl	80094a4 <__mcmp>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	db24      	blt.n	8007f22 <quorem+0xf2>
 8007ed8:	3601      	adds	r6, #1
 8007eda:	4628      	mov	r0, r5
 8007edc:	f04f 0c00 	mov.w	ip, #0
 8007ee0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ee4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ee8:	b293      	uxth	r3, r2
 8007eea:	ebac 0303 	sub.w	r3, ip, r3
 8007eee:	0c12      	lsrs	r2, r2, #16
 8007ef0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ef4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f02:	45c1      	cmp	r9, r8
 8007f04:	f840 3b04 	str.w	r3, [r0], #4
 8007f08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f0c:	d2e8      	bcs.n	8007ee0 <quorem+0xb0>
 8007f0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f16:	b922      	cbnz	r2, 8007f22 <quorem+0xf2>
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	429d      	cmp	r5, r3
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	d30a      	bcc.n	8007f36 <quorem+0x106>
 8007f20:	613c      	str	r4, [r7, #16]
 8007f22:	4630      	mov	r0, r6
 8007f24:	b003      	add	sp, #12
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	3b04      	subs	r3, #4
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	d1cc      	bne.n	8007ecc <quorem+0x9c>
 8007f32:	3c01      	subs	r4, #1
 8007f34:	e7c7      	b.n	8007ec6 <quorem+0x96>
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	2a00      	cmp	r2, #0
 8007f3c:	d1f0      	bne.n	8007f20 <quorem+0xf0>
 8007f3e:	3c01      	subs	r4, #1
 8007f40:	e7eb      	b.n	8007f1a <quorem+0xea>
 8007f42:	2000      	movs	r0, #0
 8007f44:	e7ee      	b.n	8007f24 <quorem+0xf4>
	...

08007f48 <_dtoa_r>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	ed2d 8b04 	vpush	{d8-d9}
 8007f50:	ec57 6b10 	vmov	r6, r7, d0
 8007f54:	b093      	sub	sp, #76	; 0x4c
 8007f56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f5c:	9106      	str	r1, [sp, #24]
 8007f5e:	ee10 aa10 	vmov	sl, s0
 8007f62:	4604      	mov	r4, r0
 8007f64:	9209      	str	r2, [sp, #36]	; 0x24
 8007f66:	930c      	str	r3, [sp, #48]	; 0x30
 8007f68:	46bb      	mov	fp, r7
 8007f6a:	b975      	cbnz	r5, 8007f8a <_dtoa_r+0x42>
 8007f6c:	2010      	movs	r0, #16
 8007f6e:	f7ff f85d 	bl	800702c <malloc>
 8007f72:	4602      	mov	r2, r0
 8007f74:	6260      	str	r0, [r4, #36]	; 0x24
 8007f76:	b920      	cbnz	r0, 8007f82 <_dtoa_r+0x3a>
 8007f78:	4ba7      	ldr	r3, [pc, #668]	; (8008218 <_dtoa_r+0x2d0>)
 8007f7a:	21ea      	movs	r1, #234	; 0xea
 8007f7c:	48a7      	ldr	r0, [pc, #668]	; (800821c <_dtoa_r+0x2d4>)
 8007f7e:	f001 fecd 	bl	8009d1c <__assert_func>
 8007f82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f86:	6005      	str	r5, [r0, #0]
 8007f88:	60c5      	str	r5, [r0, #12]
 8007f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f8c:	6819      	ldr	r1, [r3, #0]
 8007f8e:	b151      	cbz	r1, 8007fa6 <_dtoa_r+0x5e>
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	604a      	str	r2, [r1, #4]
 8007f94:	2301      	movs	r3, #1
 8007f96:	4093      	lsls	r3, r2
 8007f98:	608b      	str	r3, [r1, #8]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f001 f840 	bl	8009020 <_Bfree>
 8007fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	1e3b      	subs	r3, r7, #0
 8007fa8:	bfaa      	itet	ge
 8007faa:	2300      	movge	r3, #0
 8007fac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007fb0:	f8c8 3000 	strge.w	r3, [r8]
 8007fb4:	4b9a      	ldr	r3, [pc, #616]	; (8008220 <_dtoa_r+0x2d8>)
 8007fb6:	bfbc      	itt	lt
 8007fb8:	2201      	movlt	r2, #1
 8007fba:	f8c8 2000 	strlt.w	r2, [r8]
 8007fbe:	ea33 030b 	bics.w	r3, r3, fp
 8007fc2:	d11b      	bne.n	8007ffc <_dtoa_r+0xb4>
 8007fc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fd0:	4333      	orrs	r3, r6
 8007fd2:	f000 8592 	beq.w	8008afa <_dtoa_r+0xbb2>
 8007fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fd8:	b963      	cbnz	r3, 8007ff4 <_dtoa_r+0xac>
 8007fda:	4b92      	ldr	r3, [pc, #584]	; (8008224 <_dtoa_r+0x2dc>)
 8007fdc:	e022      	b.n	8008024 <_dtoa_r+0xdc>
 8007fde:	4b92      	ldr	r3, [pc, #584]	; (8008228 <_dtoa_r+0x2e0>)
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	9801      	ldr	r0, [sp, #4]
 8007fea:	b013      	add	sp, #76	; 0x4c
 8007fec:	ecbd 8b04 	vpop	{d8-d9}
 8007ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff4:	4b8b      	ldr	r3, [pc, #556]	; (8008224 <_dtoa_r+0x2dc>)
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	3303      	adds	r3, #3
 8007ffa:	e7f3      	b.n	8007fe4 <_dtoa_r+0x9c>
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	4650      	mov	r0, sl
 8008002:	4659      	mov	r1, fp
 8008004:	f7f8 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008008:	ec4b ab19 	vmov	d9, sl, fp
 800800c:	4680      	mov	r8, r0
 800800e:	b158      	cbz	r0, 8008028 <_dtoa_r+0xe0>
 8008010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008012:	2301      	movs	r3, #1
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 856b 	beq.w	8008af4 <_dtoa_r+0xbac>
 800801e:	4883      	ldr	r0, [pc, #524]	; (800822c <_dtoa_r+0x2e4>)
 8008020:	6018      	str	r0, [r3, #0]
 8008022:	1e43      	subs	r3, r0, #1
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	e7df      	b.n	8007fe8 <_dtoa_r+0xa0>
 8008028:	ec4b ab10 	vmov	d0, sl, fp
 800802c:	aa10      	add	r2, sp, #64	; 0x40
 800802e:	a911      	add	r1, sp, #68	; 0x44
 8008030:	4620      	mov	r0, r4
 8008032:	f001 fadd 	bl	80095f0 <__d2b>
 8008036:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800803a:	ee08 0a10 	vmov	s16, r0
 800803e:	2d00      	cmp	r5, #0
 8008040:	f000 8084 	beq.w	800814c <_dtoa_r+0x204>
 8008044:	ee19 3a90 	vmov	r3, s19
 8008048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800804c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008050:	4656      	mov	r6, sl
 8008052:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800805a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800805e:	4b74      	ldr	r3, [pc, #464]	; (8008230 <_dtoa_r+0x2e8>)
 8008060:	2200      	movs	r2, #0
 8008062:	4630      	mov	r0, r6
 8008064:	4639      	mov	r1, r7
 8008066:	f7f8 f917 	bl	8000298 <__aeabi_dsub>
 800806a:	a365      	add	r3, pc, #404	; (adr r3, 8008200 <_dtoa_r+0x2b8>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f7f8 faca 	bl	8000608 <__aeabi_dmul>
 8008074:	a364      	add	r3, pc, #400	; (adr r3, 8008208 <_dtoa_r+0x2c0>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f7f8 f90f 	bl	800029c <__adddf3>
 800807e:	4606      	mov	r6, r0
 8008080:	4628      	mov	r0, r5
 8008082:	460f      	mov	r7, r1
 8008084:	f7f8 fa56 	bl	8000534 <__aeabi_i2d>
 8008088:	a361      	add	r3, pc, #388	; (adr r3, 8008210 <_dtoa_r+0x2c8>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 fabb 	bl	8000608 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 f8ff 	bl	800029c <__adddf3>
 800809e:	4606      	mov	r6, r0
 80080a0:	460f      	mov	r7, r1
 80080a2:	f7f8 fd61 	bl	8000b68 <__aeabi_d2iz>
 80080a6:	2200      	movs	r2, #0
 80080a8:	9000      	str	r0, [sp, #0]
 80080aa:	2300      	movs	r3, #0
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 fd1c 	bl	8000aec <__aeabi_dcmplt>
 80080b4:	b150      	cbz	r0, 80080cc <_dtoa_r+0x184>
 80080b6:	9800      	ldr	r0, [sp, #0]
 80080b8:	f7f8 fa3c 	bl	8000534 <__aeabi_i2d>
 80080bc:	4632      	mov	r2, r6
 80080be:	463b      	mov	r3, r7
 80080c0:	f7f8 fd0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80080c4:	b910      	cbnz	r0, 80080cc <_dtoa_r+0x184>
 80080c6:	9b00      	ldr	r3, [sp, #0]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	9b00      	ldr	r3, [sp, #0]
 80080ce:	2b16      	cmp	r3, #22
 80080d0:	d85a      	bhi.n	8008188 <_dtoa_r+0x240>
 80080d2:	9a00      	ldr	r2, [sp, #0]
 80080d4:	4b57      	ldr	r3, [pc, #348]	; (8008234 <_dtoa_r+0x2ec>)
 80080d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	ec51 0b19 	vmov	r0, r1, d9
 80080e2:	f7f8 fd03 	bl	8000aec <__aeabi_dcmplt>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d050      	beq.n	800818c <_dtoa_r+0x244>
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080f6:	1b5d      	subs	r5, r3, r5
 80080f8:	1e6b      	subs	r3, r5, #1
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	bf45      	ittet	mi
 80080fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008102:	9304      	strmi	r3, [sp, #16]
 8008104:	2300      	movpl	r3, #0
 8008106:	2300      	movmi	r3, #0
 8008108:	bf4c      	ite	mi
 800810a:	9305      	strmi	r3, [sp, #20]
 800810c:	9304      	strpl	r3, [sp, #16]
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	db3d      	blt.n	8008190 <_dtoa_r+0x248>
 8008114:	9b05      	ldr	r3, [sp, #20]
 8008116:	9a00      	ldr	r2, [sp, #0]
 8008118:	920a      	str	r2, [sp, #40]	; 0x28
 800811a:	4413      	add	r3, r2
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	2300      	movs	r3, #0
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	2b09      	cmp	r3, #9
 8008126:	f200 8089 	bhi.w	800823c <_dtoa_r+0x2f4>
 800812a:	2b05      	cmp	r3, #5
 800812c:	bfc4      	itt	gt
 800812e:	3b04      	subgt	r3, #4
 8008130:	9306      	strgt	r3, [sp, #24]
 8008132:	9b06      	ldr	r3, [sp, #24]
 8008134:	f1a3 0302 	sub.w	r3, r3, #2
 8008138:	bfcc      	ite	gt
 800813a:	2500      	movgt	r5, #0
 800813c:	2501      	movle	r5, #1
 800813e:	2b03      	cmp	r3, #3
 8008140:	f200 8087 	bhi.w	8008252 <_dtoa_r+0x30a>
 8008144:	e8df f003 	tbb	[pc, r3]
 8008148:	59383a2d 	.word	0x59383a2d
 800814c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008150:	441d      	add	r5, r3
 8008152:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008156:	2b20      	cmp	r3, #32
 8008158:	bfc1      	itttt	gt
 800815a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800815e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008162:	fa0b f303 	lslgt.w	r3, fp, r3
 8008166:	fa26 f000 	lsrgt.w	r0, r6, r0
 800816a:	bfda      	itte	le
 800816c:	f1c3 0320 	rsble	r3, r3, #32
 8008170:	fa06 f003 	lslle.w	r0, r6, r3
 8008174:	4318      	orrgt	r0, r3
 8008176:	f7f8 f9cd 	bl	8000514 <__aeabi_ui2d>
 800817a:	2301      	movs	r3, #1
 800817c:	4606      	mov	r6, r0
 800817e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008182:	3d01      	subs	r5, #1
 8008184:	930e      	str	r3, [sp, #56]	; 0x38
 8008186:	e76a      	b.n	800805e <_dtoa_r+0x116>
 8008188:	2301      	movs	r3, #1
 800818a:	e7b2      	b.n	80080f2 <_dtoa_r+0x1aa>
 800818c:	900b      	str	r0, [sp, #44]	; 0x2c
 800818e:	e7b1      	b.n	80080f4 <_dtoa_r+0x1ac>
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	9a00      	ldr	r2, [sp, #0]
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	4253      	negs	r3, r2
 800819a:	9307      	str	r3, [sp, #28]
 800819c:	2300      	movs	r3, #0
 800819e:	930a      	str	r3, [sp, #40]	; 0x28
 80081a0:	e7bf      	b.n	8008122 <_dtoa_r+0x1da>
 80081a2:	2300      	movs	r3, #0
 80081a4:	9308      	str	r3, [sp, #32]
 80081a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	dc55      	bgt.n	8008258 <_dtoa_r+0x310>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081b2:	461a      	mov	r2, r3
 80081b4:	9209      	str	r2, [sp, #36]	; 0x24
 80081b6:	e00c      	b.n	80081d2 <_dtoa_r+0x28a>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e7f3      	b.n	80081a4 <_dtoa_r+0x25c>
 80081bc:	2300      	movs	r3, #0
 80081be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c0:	9308      	str	r3, [sp, #32]
 80081c2:	9b00      	ldr	r3, [sp, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	3301      	adds	r3, #1
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	bfb8      	it	lt
 80081d0:	2301      	movlt	r3, #1
 80081d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081d4:	2200      	movs	r2, #0
 80081d6:	6042      	str	r2, [r0, #4]
 80081d8:	2204      	movs	r2, #4
 80081da:	f102 0614 	add.w	r6, r2, #20
 80081de:	429e      	cmp	r6, r3
 80081e0:	6841      	ldr	r1, [r0, #4]
 80081e2:	d93d      	bls.n	8008260 <_dtoa_r+0x318>
 80081e4:	4620      	mov	r0, r4
 80081e6:	f000 fedb 	bl	8008fa0 <_Balloc>
 80081ea:	9001      	str	r0, [sp, #4]
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d13b      	bne.n	8008268 <_dtoa_r+0x320>
 80081f0:	4b11      	ldr	r3, [pc, #68]	; (8008238 <_dtoa_r+0x2f0>)
 80081f2:	4602      	mov	r2, r0
 80081f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081f8:	e6c0      	b.n	8007f7c <_dtoa_r+0x34>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e7df      	b.n	80081be <_dtoa_r+0x276>
 80081fe:	bf00      	nop
 8008200:	636f4361 	.word	0x636f4361
 8008204:	3fd287a7 	.word	0x3fd287a7
 8008208:	8b60c8b3 	.word	0x8b60c8b3
 800820c:	3fc68a28 	.word	0x3fc68a28
 8008210:	509f79fb 	.word	0x509f79fb
 8008214:	3fd34413 	.word	0x3fd34413
 8008218:	0800a1dd 	.word	0x0800a1dd
 800821c:	0800a1f4 	.word	0x0800a1f4
 8008220:	7ff00000 	.word	0x7ff00000
 8008224:	0800a1d9 	.word	0x0800a1d9
 8008228:	0800a1d0 	.word	0x0800a1d0
 800822c:	0800a1ad 	.word	0x0800a1ad
 8008230:	3ff80000 	.word	0x3ff80000
 8008234:	0800a348 	.word	0x0800a348
 8008238:	0800a24f 	.word	0x0800a24f
 800823c:	2501      	movs	r5, #1
 800823e:	2300      	movs	r3, #0
 8008240:	9306      	str	r3, [sp, #24]
 8008242:	9508      	str	r5, [sp, #32]
 8008244:	f04f 33ff 	mov.w	r3, #4294967295
 8008248:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800824c:	2200      	movs	r2, #0
 800824e:	2312      	movs	r3, #18
 8008250:	e7b0      	b.n	80081b4 <_dtoa_r+0x26c>
 8008252:	2301      	movs	r3, #1
 8008254:	9308      	str	r3, [sp, #32]
 8008256:	e7f5      	b.n	8008244 <_dtoa_r+0x2fc>
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800825e:	e7b8      	b.n	80081d2 <_dtoa_r+0x28a>
 8008260:	3101      	adds	r1, #1
 8008262:	6041      	str	r1, [r0, #4]
 8008264:	0052      	lsls	r2, r2, #1
 8008266:	e7b8      	b.n	80081da <_dtoa_r+0x292>
 8008268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800826a:	9a01      	ldr	r2, [sp, #4]
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	2b0e      	cmp	r3, #14
 8008272:	f200 809d 	bhi.w	80083b0 <_dtoa_r+0x468>
 8008276:	2d00      	cmp	r5, #0
 8008278:	f000 809a 	beq.w	80083b0 <_dtoa_r+0x468>
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	dd32      	ble.n	80082e8 <_dtoa_r+0x3a0>
 8008282:	4ab7      	ldr	r2, [pc, #732]	; (8008560 <_dtoa_r+0x618>)
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800828c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008290:	9b00      	ldr	r3, [sp, #0]
 8008292:	05d8      	lsls	r0, r3, #23
 8008294:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008298:	d516      	bpl.n	80082c8 <_dtoa_r+0x380>
 800829a:	4bb2      	ldr	r3, [pc, #712]	; (8008564 <_dtoa_r+0x61c>)
 800829c:	ec51 0b19 	vmov	r0, r1, d9
 80082a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082a4:	f7f8 fada 	bl	800085c <__aeabi_ddiv>
 80082a8:	f007 070f 	and.w	r7, r7, #15
 80082ac:	4682      	mov	sl, r0
 80082ae:	468b      	mov	fp, r1
 80082b0:	2503      	movs	r5, #3
 80082b2:	4eac      	ldr	r6, [pc, #688]	; (8008564 <_dtoa_r+0x61c>)
 80082b4:	b957      	cbnz	r7, 80082cc <_dtoa_r+0x384>
 80082b6:	4642      	mov	r2, r8
 80082b8:	464b      	mov	r3, r9
 80082ba:	4650      	mov	r0, sl
 80082bc:	4659      	mov	r1, fp
 80082be:	f7f8 facd 	bl	800085c <__aeabi_ddiv>
 80082c2:	4682      	mov	sl, r0
 80082c4:	468b      	mov	fp, r1
 80082c6:	e028      	b.n	800831a <_dtoa_r+0x3d2>
 80082c8:	2502      	movs	r5, #2
 80082ca:	e7f2      	b.n	80082b2 <_dtoa_r+0x36a>
 80082cc:	07f9      	lsls	r1, r7, #31
 80082ce:	d508      	bpl.n	80082e2 <_dtoa_r+0x39a>
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082d8:	f7f8 f996 	bl	8000608 <__aeabi_dmul>
 80082dc:	3501      	adds	r5, #1
 80082de:	4680      	mov	r8, r0
 80082e0:	4689      	mov	r9, r1
 80082e2:	107f      	asrs	r7, r7, #1
 80082e4:	3608      	adds	r6, #8
 80082e6:	e7e5      	b.n	80082b4 <_dtoa_r+0x36c>
 80082e8:	f000 809b 	beq.w	8008422 <_dtoa_r+0x4da>
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	4f9d      	ldr	r7, [pc, #628]	; (8008564 <_dtoa_r+0x61c>)
 80082f0:	425e      	negs	r6, r3
 80082f2:	4b9b      	ldr	r3, [pc, #620]	; (8008560 <_dtoa_r+0x618>)
 80082f4:	f006 020f 	and.w	r2, r6, #15
 80082f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	ec51 0b19 	vmov	r0, r1, d9
 8008304:	f7f8 f980 	bl	8000608 <__aeabi_dmul>
 8008308:	1136      	asrs	r6, r6, #4
 800830a:	4682      	mov	sl, r0
 800830c:	468b      	mov	fp, r1
 800830e:	2300      	movs	r3, #0
 8008310:	2502      	movs	r5, #2
 8008312:	2e00      	cmp	r6, #0
 8008314:	d17a      	bne.n	800840c <_dtoa_r+0x4c4>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1d3      	bne.n	80082c2 <_dtoa_r+0x37a>
 800831a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8082 	beq.w	8008426 <_dtoa_r+0x4de>
 8008322:	4b91      	ldr	r3, [pc, #580]	; (8008568 <_dtoa_r+0x620>)
 8008324:	2200      	movs	r2, #0
 8008326:	4650      	mov	r0, sl
 8008328:	4659      	mov	r1, fp
 800832a:	f7f8 fbdf 	bl	8000aec <__aeabi_dcmplt>
 800832e:	2800      	cmp	r0, #0
 8008330:	d079      	beq.n	8008426 <_dtoa_r+0x4de>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d076      	beq.n	8008426 <_dtoa_r+0x4de>
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dd36      	ble.n	80083ac <_dtoa_r+0x464>
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	4650      	mov	r0, sl
 8008342:	4659      	mov	r1, fp
 8008344:	1e5f      	subs	r7, r3, #1
 8008346:	2200      	movs	r2, #0
 8008348:	4b88      	ldr	r3, [pc, #544]	; (800856c <_dtoa_r+0x624>)
 800834a:	f7f8 f95d 	bl	8000608 <__aeabi_dmul>
 800834e:	9e02      	ldr	r6, [sp, #8]
 8008350:	4682      	mov	sl, r0
 8008352:	468b      	mov	fp, r1
 8008354:	3501      	adds	r5, #1
 8008356:	4628      	mov	r0, r5
 8008358:	f7f8 f8ec 	bl	8000534 <__aeabi_i2d>
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	f7f8 f952 	bl	8000608 <__aeabi_dmul>
 8008364:	4b82      	ldr	r3, [pc, #520]	; (8008570 <_dtoa_r+0x628>)
 8008366:	2200      	movs	r2, #0
 8008368:	f7f7 ff98 	bl	800029c <__adddf3>
 800836c:	46d0      	mov	r8, sl
 800836e:	46d9      	mov	r9, fp
 8008370:	4682      	mov	sl, r0
 8008372:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008376:	2e00      	cmp	r6, #0
 8008378:	d158      	bne.n	800842c <_dtoa_r+0x4e4>
 800837a:	4b7e      	ldr	r3, [pc, #504]	; (8008574 <_dtoa_r+0x62c>)
 800837c:	2200      	movs	r2, #0
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f7 ff89 	bl	8000298 <__aeabi_dsub>
 8008386:	4652      	mov	r2, sl
 8008388:	465b      	mov	r3, fp
 800838a:	4680      	mov	r8, r0
 800838c:	4689      	mov	r9, r1
 800838e:	f7f8 fbcb 	bl	8000b28 <__aeabi_dcmpgt>
 8008392:	2800      	cmp	r0, #0
 8008394:	f040 8295 	bne.w	80088c2 <_dtoa_r+0x97a>
 8008398:	4652      	mov	r2, sl
 800839a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800839e:	4640      	mov	r0, r8
 80083a0:	4649      	mov	r1, r9
 80083a2:	f7f8 fba3 	bl	8000aec <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f040 8289 	bne.w	80088be <_dtoa_r+0x976>
 80083ac:	ec5b ab19 	vmov	sl, fp, d9
 80083b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f2c0 8148 	blt.w	8008648 <_dtoa_r+0x700>
 80083b8:	9a00      	ldr	r2, [sp, #0]
 80083ba:	2a0e      	cmp	r2, #14
 80083bc:	f300 8144 	bgt.w	8008648 <_dtoa_r+0x700>
 80083c0:	4b67      	ldr	r3, [pc, #412]	; (8008560 <_dtoa_r+0x618>)
 80083c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f280 80d5 	bge.w	800857c <_dtoa_r+0x634>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f300 80d1 	bgt.w	800857c <_dtoa_r+0x634>
 80083da:	f040 826f 	bne.w	80088bc <_dtoa_r+0x974>
 80083de:	4b65      	ldr	r3, [pc, #404]	; (8008574 <_dtoa_r+0x62c>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f8 f90f 	bl	8000608 <__aeabi_dmul>
 80083ea:	4652      	mov	r2, sl
 80083ec:	465b      	mov	r3, fp
 80083ee:	f7f8 fb91 	bl	8000b14 <__aeabi_dcmpge>
 80083f2:	9e03      	ldr	r6, [sp, #12]
 80083f4:	4637      	mov	r7, r6
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f040 8245 	bne.w	8008886 <_dtoa_r+0x93e>
 80083fc:	9d01      	ldr	r5, [sp, #4]
 80083fe:	2331      	movs	r3, #49	; 0x31
 8008400:	f805 3b01 	strb.w	r3, [r5], #1
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	3301      	adds	r3, #1
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	e240      	b.n	800888e <_dtoa_r+0x946>
 800840c:	07f2      	lsls	r2, r6, #31
 800840e:	d505      	bpl.n	800841c <_dtoa_r+0x4d4>
 8008410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008414:	f7f8 f8f8 	bl	8000608 <__aeabi_dmul>
 8008418:	3501      	adds	r5, #1
 800841a:	2301      	movs	r3, #1
 800841c:	1076      	asrs	r6, r6, #1
 800841e:	3708      	adds	r7, #8
 8008420:	e777      	b.n	8008312 <_dtoa_r+0x3ca>
 8008422:	2502      	movs	r5, #2
 8008424:	e779      	b.n	800831a <_dtoa_r+0x3d2>
 8008426:	9f00      	ldr	r7, [sp, #0]
 8008428:	9e03      	ldr	r6, [sp, #12]
 800842a:	e794      	b.n	8008356 <_dtoa_r+0x40e>
 800842c:	9901      	ldr	r1, [sp, #4]
 800842e:	4b4c      	ldr	r3, [pc, #304]	; (8008560 <_dtoa_r+0x618>)
 8008430:	4431      	add	r1, r6
 8008432:	910d      	str	r1, [sp, #52]	; 0x34
 8008434:	9908      	ldr	r1, [sp, #32]
 8008436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800843a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800843e:	2900      	cmp	r1, #0
 8008440:	d043      	beq.n	80084ca <_dtoa_r+0x582>
 8008442:	494d      	ldr	r1, [pc, #308]	; (8008578 <_dtoa_r+0x630>)
 8008444:	2000      	movs	r0, #0
 8008446:	f7f8 fa09 	bl	800085c <__aeabi_ddiv>
 800844a:	4652      	mov	r2, sl
 800844c:	465b      	mov	r3, fp
 800844e:	f7f7 ff23 	bl	8000298 <__aeabi_dsub>
 8008452:	9d01      	ldr	r5, [sp, #4]
 8008454:	4682      	mov	sl, r0
 8008456:	468b      	mov	fp, r1
 8008458:	4649      	mov	r1, r9
 800845a:	4640      	mov	r0, r8
 800845c:	f7f8 fb84 	bl	8000b68 <__aeabi_d2iz>
 8008460:	4606      	mov	r6, r0
 8008462:	f7f8 f867 	bl	8000534 <__aeabi_i2d>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4640      	mov	r0, r8
 800846c:	4649      	mov	r1, r9
 800846e:	f7f7 ff13 	bl	8000298 <__aeabi_dsub>
 8008472:	3630      	adds	r6, #48	; 0x30
 8008474:	f805 6b01 	strb.w	r6, [r5], #1
 8008478:	4652      	mov	r2, sl
 800847a:	465b      	mov	r3, fp
 800847c:	4680      	mov	r8, r0
 800847e:	4689      	mov	r9, r1
 8008480:	f7f8 fb34 	bl	8000aec <__aeabi_dcmplt>
 8008484:	2800      	cmp	r0, #0
 8008486:	d163      	bne.n	8008550 <_dtoa_r+0x608>
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	4936      	ldr	r1, [pc, #216]	; (8008568 <_dtoa_r+0x620>)
 800848e:	2000      	movs	r0, #0
 8008490:	f7f7 ff02 	bl	8000298 <__aeabi_dsub>
 8008494:	4652      	mov	r2, sl
 8008496:	465b      	mov	r3, fp
 8008498:	f7f8 fb28 	bl	8000aec <__aeabi_dcmplt>
 800849c:	2800      	cmp	r0, #0
 800849e:	f040 80b5 	bne.w	800860c <_dtoa_r+0x6c4>
 80084a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a4:	429d      	cmp	r5, r3
 80084a6:	d081      	beq.n	80083ac <_dtoa_r+0x464>
 80084a8:	4b30      	ldr	r3, [pc, #192]	; (800856c <_dtoa_r+0x624>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	4650      	mov	r0, sl
 80084ae:	4659      	mov	r1, fp
 80084b0:	f7f8 f8aa 	bl	8000608 <__aeabi_dmul>
 80084b4:	4b2d      	ldr	r3, [pc, #180]	; (800856c <_dtoa_r+0x624>)
 80084b6:	4682      	mov	sl, r0
 80084b8:	468b      	mov	fp, r1
 80084ba:	4640      	mov	r0, r8
 80084bc:	4649      	mov	r1, r9
 80084be:	2200      	movs	r2, #0
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	4680      	mov	r8, r0
 80084c6:	4689      	mov	r9, r1
 80084c8:	e7c6      	b.n	8008458 <_dtoa_r+0x510>
 80084ca:	4650      	mov	r0, sl
 80084cc:	4659      	mov	r1, fp
 80084ce:	f7f8 f89b 	bl	8000608 <__aeabi_dmul>
 80084d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084d4:	9d01      	ldr	r5, [sp, #4]
 80084d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d8:	4682      	mov	sl, r0
 80084da:	468b      	mov	fp, r1
 80084dc:	4649      	mov	r1, r9
 80084de:	4640      	mov	r0, r8
 80084e0:	f7f8 fb42 	bl	8000b68 <__aeabi_d2iz>
 80084e4:	4606      	mov	r6, r0
 80084e6:	f7f8 f825 	bl	8000534 <__aeabi_i2d>
 80084ea:	3630      	adds	r6, #48	; 0x30
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4640      	mov	r0, r8
 80084f2:	4649      	mov	r1, r9
 80084f4:	f7f7 fed0 	bl	8000298 <__aeabi_dsub>
 80084f8:	f805 6b01 	strb.w	r6, [r5], #1
 80084fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084fe:	429d      	cmp	r5, r3
 8008500:	4680      	mov	r8, r0
 8008502:	4689      	mov	r9, r1
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	d124      	bne.n	8008554 <_dtoa_r+0x60c>
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <_dtoa_r+0x630>)
 800850c:	4650      	mov	r0, sl
 800850e:	4659      	mov	r1, fp
 8008510:	f7f7 fec4 	bl	800029c <__adddf3>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	f7f8 fb04 	bl	8000b28 <__aeabi_dcmpgt>
 8008520:	2800      	cmp	r0, #0
 8008522:	d173      	bne.n	800860c <_dtoa_r+0x6c4>
 8008524:	4652      	mov	r2, sl
 8008526:	465b      	mov	r3, fp
 8008528:	4913      	ldr	r1, [pc, #76]	; (8008578 <_dtoa_r+0x630>)
 800852a:	2000      	movs	r0, #0
 800852c:	f7f7 feb4 	bl	8000298 <__aeabi_dsub>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4640      	mov	r0, r8
 8008536:	4649      	mov	r1, r9
 8008538:	f7f8 fad8 	bl	8000aec <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	f43f af35 	beq.w	80083ac <_dtoa_r+0x464>
 8008542:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008544:	1e6b      	subs	r3, r5, #1
 8008546:	930f      	str	r3, [sp, #60]	; 0x3c
 8008548:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800854c:	2b30      	cmp	r3, #48	; 0x30
 800854e:	d0f8      	beq.n	8008542 <_dtoa_r+0x5fa>
 8008550:	9700      	str	r7, [sp, #0]
 8008552:	e049      	b.n	80085e8 <_dtoa_r+0x6a0>
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <_dtoa_r+0x624>)
 8008556:	f7f8 f857 	bl	8000608 <__aeabi_dmul>
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	e7bd      	b.n	80084dc <_dtoa_r+0x594>
 8008560:	0800a348 	.word	0x0800a348
 8008564:	0800a320 	.word	0x0800a320
 8008568:	3ff00000 	.word	0x3ff00000
 800856c:	40240000 	.word	0x40240000
 8008570:	401c0000 	.word	0x401c0000
 8008574:	40140000 	.word	0x40140000
 8008578:	3fe00000 	.word	0x3fe00000
 800857c:	9d01      	ldr	r5, [sp, #4]
 800857e:	4656      	mov	r6, sl
 8008580:	465f      	mov	r7, fp
 8008582:	4642      	mov	r2, r8
 8008584:	464b      	mov	r3, r9
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f8 f967 	bl	800085c <__aeabi_ddiv>
 800858e:	f7f8 faeb 	bl	8000b68 <__aeabi_d2iz>
 8008592:	4682      	mov	sl, r0
 8008594:	f7f7 ffce 	bl	8000534 <__aeabi_i2d>
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	f7f8 f834 	bl	8000608 <__aeabi_dmul>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085ac:	f7f7 fe74 	bl	8000298 <__aeabi_dsub>
 80085b0:	f805 6b01 	strb.w	r6, [r5], #1
 80085b4:	9e01      	ldr	r6, [sp, #4]
 80085b6:	9f03      	ldr	r7, [sp, #12]
 80085b8:	1bae      	subs	r6, r5, r6
 80085ba:	42b7      	cmp	r7, r6
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	d135      	bne.n	800862e <_dtoa_r+0x6e6>
 80085c2:	f7f7 fe6b 	bl	800029c <__adddf3>
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	4606      	mov	r6, r0
 80085cc:	460f      	mov	r7, r1
 80085ce:	f7f8 faab 	bl	8000b28 <__aeabi_dcmpgt>
 80085d2:	b9d0      	cbnz	r0, 800860a <_dtoa_r+0x6c2>
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f8 fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80085e0:	b110      	cbz	r0, 80085e8 <_dtoa_r+0x6a0>
 80085e2:	f01a 0f01 	tst.w	sl, #1
 80085e6:	d110      	bne.n	800860a <_dtoa_r+0x6c2>
 80085e8:	4620      	mov	r0, r4
 80085ea:	ee18 1a10 	vmov	r1, s16
 80085ee:	f000 fd17 	bl	8009020 <_Bfree>
 80085f2:	2300      	movs	r3, #0
 80085f4:	9800      	ldr	r0, [sp, #0]
 80085f6:	702b      	strb	r3, [r5, #0]
 80085f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085fa:	3001      	adds	r0, #1
 80085fc:	6018      	str	r0, [r3, #0]
 80085fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008600:	2b00      	cmp	r3, #0
 8008602:	f43f acf1 	beq.w	8007fe8 <_dtoa_r+0xa0>
 8008606:	601d      	str	r5, [r3, #0]
 8008608:	e4ee      	b.n	8007fe8 <_dtoa_r+0xa0>
 800860a:	9f00      	ldr	r7, [sp, #0]
 800860c:	462b      	mov	r3, r5
 800860e:	461d      	mov	r5, r3
 8008610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008614:	2a39      	cmp	r2, #57	; 0x39
 8008616:	d106      	bne.n	8008626 <_dtoa_r+0x6de>
 8008618:	9a01      	ldr	r2, [sp, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d1f7      	bne.n	800860e <_dtoa_r+0x6c6>
 800861e:	9901      	ldr	r1, [sp, #4]
 8008620:	2230      	movs	r2, #48	; 0x30
 8008622:	3701      	adds	r7, #1
 8008624:	700a      	strb	r2, [r1, #0]
 8008626:	781a      	ldrb	r2, [r3, #0]
 8008628:	3201      	adds	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]
 800862c:	e790      	b.n	8008550 <_dtoa_r+0x608>
 800862e:	4ba6      	ldr	r3, [pc, #664]	; (80088c8 <_dtoa_r+0x980>)
 8008630:	2200      	movs	r2, #0
 8008632:	f7f7 ffe9 	bl	8000608 <__aeabi_dmul>
 8008636:	2200      	movs	r2, #0
 8008638:	2300      	movs	r3, #0
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	f7f8 fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008642:	2800      	cmp	r0, #0
 8008644:	d09d      	beq.n	8008582 <_dtoa_r+0x63a>
 8008646:	e7cf      	b.n	80085e8 <_dtoa_r+0x6a0>
 8008648:	9a08      	ldr	r2, [sp, #32]
 800864a:	2a00      	cmp	r2, #0
 800864c:	f000 80d7 	beq.w	80087fe <_dtoa_r+0x8b6>
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	2a01      	cmp	r2, #1
 8008654:	f300 80ba 	bgt.w	80087cc <_dtoa_r+0x884>
 8008658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800865a:	2a00      	cmp	r2, #0
 800865c:	f000 80b2 	beq.w	80087c4 <_dtoa_r+0x87c>
 8008660:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008664:	9e07      	ldr	r6, [sp, #28]
 8008666:	9d04      	ldr	r5, [sp, #16]
 8008668:	9a04      	ldr	r2, [sp, #16]
 800866a:	441a      	add	r2, r3
 800866c:	9204      	str	r2, [sp, #16]
 800866e:	9a05      	ldr	r2, [sp, #20]
 8008670:	2101      	movs	r1, #1
 8008672:	441a      	add	r2, r3
 8008674:	4620      	mov	r0, r4
 8008676:	9205      	str	r2, [sp, #20]
 8008678:	f000 fd8a 	bl	8009190 <__i2b>
 800867c:	4607      	mov	r7, r0
 800867e:	2d00      	cmp	r5, #0
 8008680:	dd0c      	ble.n	800869c <_dtoa_r+0x754>
 8008682:	9b05      	ldr	r3, [sp, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	dd09      	ble.n	800869c <_dtoa_r+0x754>
 8008688:	42ab      	cmp	r3, r5
 800868a:	9a04      	ldr	r2, [sp, #16]
 800868c:	bfa8      	it	ge
 800868e:	462b      	movge	r3, r5
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	9204      	str	r2, [sp, #16]
 8008694:	9a05      	ldr	r2, [sp, #20]
 8008696:	1aed      	subs	r5, r5, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	9305      	str	r3, [sp, #20]
 800869c:	9b07      	ldr	r3, [sp, #28]
 800869e:	b31b      	cbz	r3, 80086e8 <_dtoa_r+0x7a0>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 80af 	beq.w	8008806 <_dtoa_r+0x8be>
 80086a8:	2e00      	cmp	r6, #0
 80086aa:	dd13      	ble.n	80086d4 <_dtoa_r+0x78c>
 80086ac:	4639      	mov	r1, r7
 80086ae:	4632      	mov	r2, r6
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fe2d 	bl	8009310 <__pow5mult>
 80086b6:	ee18 2a10 	vmov	r2, s16
 80086ba:	4601      	mov	r1, r0
 80086bc:	4607      	mov	r7, r0
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 fd7c 	bl	80091bc <__multiply>
 80086c4:	ee18 1a10 	vmov	r1, s16
 80086c8:	4680      	mov	r8, r0
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 fca8 	bl	8009020 <_Bfree>
 80086d0:	ee08 8a10 	vmov	s16, r8
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	1b9a      	subs	r2, r3, r6
 80086d8:	d006      	beq.n	80086e8 <_dtoa_r+0x7a0>
 80086da:	ee18 1a10 	vmov	r1, s16
 80086de:	4620      	mov	r0, r4
 80086e0:	f000 fe16 	bl	8009310 <__pow5mult>
 80086e4:	ee08 0a10 	vmov	s16, r0
 80086e8:	2101      	movs	r1, #1
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fd50 	bl	8009190 <__i2b>
 80086f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	4606      	mov	r6, r0
 80086f6:	f340 8088 	ble.w	800880a <_dtoa_r+0x8c2>
 80086fa:	461a      	mov	r2, r3
 80086fc:	4601      	mov	r1, r0
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 fe06 	bl	8009310 <__pow5mult>
 8008704:	9b06      	ldr	r3, [sp, #24]
 8008706:	2b01      	cmp	r3, #1
 8008708:	4606      	mov	r6, r0
 800870a:	f340 8081 	ble.w	8008810 <_dtoa_r+0x8c8>
 800870e:	f04f 0800 	mov.w	r8, #0
 8008712:	6933      	ldr	r3, [r6, #16]
 8008714:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008718:	6918      	ldr	r0, [r3, #16]
 800871a:	f000 fce9 	bl	80090f0 <__hi0bits>
 800871e:	f1c0 0020 	rsb	r0, r0, #32
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	4418      	add	r0, r3
 8008726:	f010 001f 	ands.w	r0, r0, #31
 800872a:	f000 8092 	beq.w	8008852 <_dtoa_r+0x90a>
 800872e:	f1c0 0320 	rsb	r3, r0, #32
 8008732:	2b04      	cmp	r3, #4
 8008734:	f340 808a 	ble.w	800884c <_dtoa_r+0x904>
 8008738:	f1c0 001c 	rsb	r0, r0, #28
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	4403      	add	r3, r0
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	9b05      	ldr	r3, [sp, #20]
 8008744:	4403      	add	r3, r0
 8008746:	4405      	add	r5, r0
 8008748:	9305      	str	r3, [sp, #20]
 800874a:	9b04      	ldr	r3, [sp, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd07      	ble.n	8008760 <_dtoa_r+0x818>
 8008750:	ee18 1a10 	vmov	r1, s16
 8008754:	461a      	mov	r2, r3
 8008756:	4620      	mov	r0, r4
 8008758:	f000 fe34 	bl	80093c4 <__lshift>
 800875c:	ee08 0a10 	vmov	s16, r0
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	2b00      	cmp	r3, #0
 8008764:	dd05      	ble.n	8008772 <_dtoa_r+0x82a>
 8008766:	4631      	mov	r1, r6
 8008768:	461a      	mov	r2, r3
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fe2a 	bl	80093c4 <__lshift>
 8008770:	4606      	mov	r6, r0
 8008772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d06e      	beq.n	8008856 <_dtoa_r+0x90e>
 8008778:	ee18 0a10 	vmov	r0, s16
 800877c:	4631      	mov	r1, r6
 800877e:	f000 fe91 	bl	80094a4 <__mcmp>
 8008782:	2800      	cmp	r0, #0
 8008784:	da67      	bge.n	8008856 <_dtoa_r+0x90e>
 8008786:	9b00      	ldr	r3, [sp, #0]
 8008788:	3b01      	subs	r3, #1
 800878a:	ee18 1a10 	vmov	r1, s16
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	220a      	movs	r2, #10
 8008792:	2300      	movs	r3, #0
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fc65 	bl	8009064 <__multadd>
 800879a:	9b08      	ldr	r3, [sp, #32]
 800879c:	ee08 0a10 	vmov	s16, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 81b1 	beq.w	8008b08 <_dtoa_r+0xbc0>
 80087a6:	2300      	movs	r3, #0
 80087a8:	4639      	mov	r1, r7
 80087aa:	220a      	movs	r2, #10
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fc59 	bl	8009064 <__multadd>
 80087b2:	9b02      	ldr	r3, [sp, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	4607      	mov	r7, r0
 80087b8:	f300 808e 	bgt.w	80088d8 <_dtoa_r+0x990>
 80087bc:	9b06      	ldr	r3, [sp, #24]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	dc51      	bgt.n	8008866 <_dtoa_r+0x91e>
 80087c2:	e089      	b.n	80088d8 <_dtoa_r+0x990>
 80087c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087ca:	e74b      	b.n	8008664 <_dtoa_r+0x71c>
 80087cc:	9b03      	ldr	r3, [sp, #12]
 80087ce:	1e5e      	subs	r6, r3, #1
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	42b3      	cmp	r3, r6
 80087d4:	bfbf      	itttt	lt
 80087d6:	9b07      	ldrlt	r3, [sp, #28]
 80087d8:	9607      	strlt	r6, [sp, #28]
 80087da:	1af2      	sublt	r2, r6, r3
 80087dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087de:	bfb6      	itet	lt
 80087e0:	189b      	addlt	r3, r3, r2
 80087e2:	1b9e      	subge	r6, r3, r6
 80087e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	bfb8      	it	lt
 80087ea:	2600      	movlt	r6, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bfb7      	itett	lt
 80087f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80087f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087f8:	1a9d      	sublt	r5, r3, r2
 80087fa:	2300      	movlt	r3, #0
 80087fc:	e734      	b.n	8008668 <_dtoa_r+0x720>
 80087fe:	9e07      	ldr	r6, [sp, #28]
 8008800:	9d04      	ldr	r5, [sp, #16]
 8008802:	9f08      	ldr	r7, [sp, #32]
 8008804:	e73b      	b.n	800867e <_dtoa_r+0x736>
 8008806:	9a07      	ldr	r2, [sp, #28]
 8008808:	e767      	b.n	80086da <_dtoa_r+0x792>
 800880a:	9b06      	ldr	r3, [sp, #24]
 800880c:	2b01      	cmp	r3, #1
 800880e:	dc18      	bgt.n	8008842 <_dtoa_r+0x8fa>
 8008810:	f1ba 0f00 	cmp.w	sl, #0
 8008814:	d115      	bne.n	8008842 <_dtoa_r+0x8fa>
 8008816:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800881a:	b993      	cbnz	r3, 8008842 <_dtoa_r+0x8fa>
 800881c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008820:	0d1b      	lsrs	r3, r3, #20
 8008822:	051b      	lsls	r3, r3, #20
 8008824:	b183      	cbz	r3, 8008848 <_dtoa_r+0x900>
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	3301      	adds	r3, #1
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	9b05      	ldr	r3, [sp, #20]
 800882e:	3301      	adds	r3, #1
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	f04f 0801 	mov.w	r8, #1
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f af6a 	bne.w	8008712 <_dtoa_r+0x7ca>
 800883e:	2001      	movs	r0, #1
 8008840:	e76f      	b.n	8008722 <_dtoa_r+0x7da>
 8008842:	f04f 0800 	mov.w	r8, #0
 8008846:	e7f6      	b.n	8008836 <_dtoa_r+0x8ee>
 8008848:	4698      	mov	r8, r3
 800884a:	e7f4      	b.n	8008836 <_dtoa_r+0x8ee>
 800884c:	f43f af7d 	beq.w	800874a <_dtoa_r+0x802>
 8008850:	4618      	mov	r0, r3
 8008852:	301c      	adds	r0, #28
 8008854:	e772      	b.n	800873c <_dtoa_r+0x7f4>
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	dc37      	bgt.n	80088cc <_dtoa_r+0x984>
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	2b02      	cmp	r3, #2
 8008860:	dd34      	ble.n	80088cc <_dtoa_r+0x984>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	b96b      	cbnz	r3, 8008886 <_dtoa_r+0x93e>
 800886a:	4631      	mov	r1, r6
 800886c:	2205      	movs	r2, #5
 800886e:	4620      	mov	r0, r4
 8008870:	f000 fbf8 	bl	8009064 <__multadd>
 8008874:	4601      	mov	r1, r0
 8008876:	4606      	mov	r6, r0
 8008878:	ee18 0a10 	vmov	r0, s16
 800887c:	f000 fe12 	bl	80094a4 <__mcmp>
 8008880:	2800      	cmp	r0, #0
 8008882:	f73f adbb 	bgt.w	80083fc <_dtoa_r+0x4b4>
 8008886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008888:	9d01      	ldr	r5, [sp, #4]
 800888a:	43db      	mvns	r3, r3
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	f04f 0800 	mov.w	r8, #0
 8008892:	4631      	mov	r1, r6
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fbc3 	bl	8009020 <_Bfree>
 800889a:	2f00      	cmp	r7, #0
 800889c:	f43f aea4 	beq.w	80085e8 <_dtoa_r+0x6a0>
 80088a0:	f1b8 0f00 	cmp.w	r8, #0
 80088a4:	d005      	beq.n	80088b2 <_dtoa_r+0x96a>
 80088a6:	45b8      	cmp	r8, r7
 80088a8:	d003      	beq.n	80088b2 <_dtoa_r+0x96a>
 80088aa:	4641      	mov	r1, r8
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fbb7 	bl	8009020 <_Bfree>
 80088b2:	4639      	mov	r1, r7
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 fbb3 	bl	8009020 <_Bfree>
 80088ba:	e695      	b.n	80085e8 <_dtoa_r+0x6a0>
 80088bc:	2600      	movs	r6, #0
 80088be:	4637      	mov	r7, r6
 80088c0:	e7e1      	b.n	8008886 <_dtoa_r+0x93e>
 80088c2:	9700      	str	r7, [sp, #0]
 80088c4:	4637      	mov	r7, r6
 80088c6:	e599      	b.n	80083fc <_dtoa_r+0x4b4>
 80088c8:	40240000 	.word	0x40240000
 80088cc:	9b08      	ldr	r3, [sp, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80ca 	beq.w	8008a68 <_dtoa_r+0xb20>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	9302      	str	r3, [sp, #8]
 80088d8:	2d00      	cmp	r5, #0
 80088da:	dd05      	ble.n	80088e8 <_dtoa_r+0x9a0>
 80088dc:	4639      	mov	r1, r7
 80088de:	462a      	mov	r2, r5
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fd6f 	bl	80093c4 <__lshift>
 80088e6:	4607      	mov	r7, r0
 80088e8:	f1b8 0f00 	cmp.w	r8, #0
 80088ec:	d05b      	beq.n	80089a6 <_dtoa_r+0xa5e>
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fb55 	bl	8008fa0 <_Balloc>
 80088f6:	4605      	mov	r5, r0
 80088f8:	b928      	cbnz	r0, 8008906 <_dtoa_r+0x9be>
 80088fa:	4b87      	ldr	r3, [pc, #540]	; (8008b18 <_dtoa_r+0xbd0>)
 80088fc:	4602      	mov	r2, r0
 80088fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008902:	f7ff bb3b 	b.w	8007f7c <_dtoa_r+0x34>
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	3202      	adds	r2, #2
 800890a:	0092      	lsls	r2, r2, #2
 800890c:	f107 010c 	add.w	r1, r7, #12
 8008910:	300c      	adds	r0, #12
 8008912:	f000 fb2b 	bl	8008f6c <memcpy>
 8008916:	2201      	movs	r2, #1
 8008918:	4629      	mov	r1, r5
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fd52 	bl	80093c4 <__lshift>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	f103 0901 	add.w	r9, r3, #1
 8008926:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800892a:	4413      	add	r3, r2
 800892c:	9305      	str	r3, [sp, #20]
 800892e:	f00a 0301 	and.w	r3, sl, #1
 8008932:	46b8      	mov	r8, r7
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	4607      	mov	r7, r0
 8008938:	4631      	mov	r1, r6
 800893a:	ee18 0a10 	vmov	r0, s16
 800893e:	f7ff fa77 	bl	8007e30 <quorem>
 8008942:	4641      	mov	r1, r8
 8008944:	9002      	str	r0, [sp, #8]
 8008946:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800894a:	ee18 0a10 	vmov	r0, s16
 800894e:	f000 fda9 	bl	80094a4 <__mcmp>
 8008952:	463a      	mov	r2, r7
 8008954:	9003      	str	r0, [sp, #12]
 8008956:	4631      	mov	r1, r6
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fdbf 	bl	80094dc <__mdiff>
 800895e:	68c2      	ldr	r2, [r0, #12]
 8008960:	f109 3bff 	add.w	fp, r9, #4294967295
 8008964:	4605      	mov	r5, r0
 8008966:	bb02      	cbnz	r2, 80089aa <_dtoa_r+0xa62>
 8008968:	4601      	mov	r1, r0
 800896a:	ee18 0a10 	vmov	r0, s16
 800896e:	f000 fd99 	bl	80094a4 <__mcmp>
 8008972:	4602      	mov	r2, r0
 8008974:	4629      	mov	r1, r5
 8008976:	4620      	mov	r0, r4
 8008978:	9207      	str	r2, [sp, #28]
 800897a:	f000 fb51 	bl	8009020 <_Bfree>
 800897e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008982:	ea43 0102 	orr.w	r1, r3, r2
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	430b      	orrs	r3, r1
 800898a:	464d      	mov	r5, r9
 800898c:	d10f      	bne.n	80089ae <_dtoa_r+0xa66>
 800898e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008992:	d02a      	beq.n	80089ea <_dtoa_r+0xaa2>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd02      	ble.n	80089a0 <_dtoa_r+0xa58>
 800899a:	9b02      	ldr	r3, [sp, #8]
 800899c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089a0:	f88b a000 	strb.w	sl, [fp]
 80089a4:	e775      	b.n	8008892 <_dtoa_r+0x94a>
 80089a6:	4638      	mov	r0, r7
 80089a8:	e7ba      	b.n	8008920 <_dtoa_r+0x9d8>
 80089aa:	2201      	movs	r2, #1
 80089ac:	e7e2      	b.n	8008974 <_dtoa_r+0xa2c>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	db04      	blt.n	80089be <_dtoa_r+0xa76>
 80089b4:	9906      	ldr	r1, [sp, #24]
 80089b6:	430b      	orrs	r3, r1
 80089b8:	9904      	ldr	r1, [sp, #16]
 80089ba:	430b      	orrs	r3, r1
 80089bc:	d122      	bne.n	8008a04 <_dtoa_r+0xabc>
 80089be:	2a00      	cmp	r2, #0
 80089c0:	ddee      	ble.n	80089a0 <_dtoa_r+0xa58>
 80089c2:	ee18 1a10 	vmov	r1, s16
 80089c6:	2201      	movs	r2, #1
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fcfb 	bl	80093c4 <__lshift>
 80089ce:	4631      	mov	r1, r6
 80089d0:	ee08 0a10 	vmov	s16, r0
 80089d4:	f000 fd66 	bl	80094a4 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dc03      	bgt.n	80089e4 <_dtoa_r+0xa9c>
 80089dc:	d1e0      	bne.n	80089a0 <_dtoa_r+0xa58>
 80089de:	f01a 0f01 	tst.w	sl, #1
 80089e2:	d0dd      	beq.n	80089a0 <_dtoa_r+0xa58>
 80089e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089e8:	d1d7      	bne.n	800899a <_dtoa_r+0xa52>
 80089ea:	2339      	movs	r3, #57	; 0x39
 80089ec:	f88b 3000 	strb.w	r3, [fp]
 80089f0:	462b      	mov	r3, r5
 80089f2:	461d      	mov	r5, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089fa:	2a39      	cmp	r2, #57	; 0x39
 80089fc:	d071      	beq.n	8008ae2 <_dtoa_r+0xb9a>
 80089fe:	3201      	adds	r2, #1
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	e746      	b.n	8008892 <_dtoa_r+0x94a>
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	dd07      	ble.n	8008a18 <_dtoa_r+0xad0>
 8008a08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a0c:	d0ed      	beq.n	80089ea <_dtoa_r+0xaa2>
 8008a0e:	f10a 0301 	add.w	r3, sl, #1
 8008a12:	f88b 3000 	strb.w	r3, [fp]
 8008a16:	e73c      	b.n	8008892 <_dtoa_r+0x94a>
 8008a18:	9b05      	ldr	r3, [sp, #20]
 8008a1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a1e:	4599      	cmp	r9, r3
 8008a20:	d047      	beq.n	8008ab2 <_dtoa_r+0xb6a>
 8008a22:	ee18 1a10 	vmov	r1, s16
 8008a26:	2300      	movs	r3, #0
 8008a28:	220a      	movs	r2, #10
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fb1a 	bl	8009064 <__multadd>
 8008a30:	45b8      	cmp	r8, r7
 8008a32:	ee08 0a10 	vmov	s16, r0
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	f04f 020a 	mov.w	r2, #10
 8008a3e:	4641      	mov	r1, r8
 8008a40:	4620      	mov	r0, r4
 8008a42:	d106      	bne.n	8008a52 <_dtoa_r+0xb0a>
 8008a44:	f000 fb0e 	bl	8009064 <__multadd>
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4607      	mov	r7, r0
 8008a4c:	f109 0901 	add.w	r9, r9, #1
 8008a50:	e772      	b.n	8008938 <_dtoa_r+0x9f0>
 8008a52:	f000 fb07 	bl	8009064 <__multadd>
 8008a56:	4639      	mov	r1, r7
 8008a58:	4680      	mov	r8, r0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fb00 	bl	8009064 <__multadd>
 8008a64:	4607      	mov	r7, r0
 8008a66:	e7f1      	b.n	8008a4c <_dtoa_r+0xb04>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	9d01      	ldr	r5, [sp, #4]
 8008a6e:	ee18 0a10 	vmov	r0, s16
 8008a72:	4631      	mov	r1, r6
 8008a74:	f7ff f9dc 	bl	8007e30 <quorem>
 8008a78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a82:	1aea      	subs	r2, r5, r3
 8008a84:	9b02      	ldr	r3, [sp, #8]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	dd09      	ble.n	8008a9e <_dtoa_r+0xb56>
 8008a8a:	ee18 1a10 	vmov	r1, s16
 8008a8e:	2300      	movs	r3, #0
 8008a90:	220a      	movs	r2, #10
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fae6 	bl	8009064 <__multadd>
 8008a98:	ee08 0a10 	vmov	s16, r0
 8008a9c:	e7e7      	b.n	8008a6e <_dtoa_r+0xb26>
 8008a9e:	9b02      	ldr	r3, [sp, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bfc8      	it	gt
 8008aa4:	461d      	movgt	r5, r3
 8008aa6:	9b01      	ldr	r3, [sp, #4]
 8008aa8:	bfd8      	it	le
 8008aaa:	2501      	movle	r5, #1
 8008aac:	441d      	add	r5, r3
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	ee18 1a10 	vmov	r1, s16
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 fc83 	bl	80093c4 <__lshift>
 8008abe:	4631      	mov	r1, r6
 8008ac0:	ee08 0a10 	vmov	s16, r0
 8008ac4:	f000 fcee 	bl	80094a4 <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	dc91      	bgt.n	80089f0 <_dtoa_r+0xaa8>
 8008acc:	d102      	bne.n	8008ad4 <_dtoa_r+0xb8c>
 8008ace:	f01a 0f01 	tst.w	sl, #1
 8008ad2:	d18d      	bne.n	80089f0 <_dtoa_r+0xaa8>
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	461d      	mov	r5, r3
 8008ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008adc:	2a30      	cmp	r2, #48	; 0x30
 8008ade:	d0fa      	beq.n	8008ad6 <_dtoa_r+0xb8e>
 8008ae0:	e6d7      	b.n	8008892 <_dtoa_r+0x94a>
 8008ae2:	9a01      	ldr	r2, [sp, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d184      	bne.n	80089f2 <_dtoa_r+0xaaa>
 8008ae8:	9b00      	ldr	r3, [sp, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	2331      	movs	r3, #49	; 0x31
 8008af0:	7013      	strb	r3, [r2, #0]
 8008af2:	e6ce      	b.n	8008892 <_dtoa_r+0x94a>
 8008af4:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <_dtoa_r+0xbd4>)
 8008af6:	f7ff ba95 	b.w	8008024 <_dtoa_r+0xdc>
 8008afa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f47f aa6e 	bne.w	8007fde <_dtoa_r+0x96>
 8008b02:	4b07      	ldr	r3, [pc, #28]	; (8008b20 <_dtoa_r+0xbd8>)
 8008b04:	f7ff ba8e 	b.w	8008024 <_dtoa_r+0xdc>
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	dcae      	bgt.n	8008a6c <_dtoa_r+0xb24>
 8008b0e:	9b06      	ldr	r3, [sp, #24]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	f73f aea8 	bgt.w	8008866 <_dtoa_r+0x91e>
 8008b16:	e7a9      	b.n	8008a6c <_dtoa_r+0xb24>
 8008b18:	0800a24f 	.word	0x0800a24f
 8008b1c:	0800a1ac 	.word	0x0800a1ac
 8008b20:	0800a1d0 	.word	0x0800a1d0

08008b24 <__sflush_r>:
 8008b24:	898a      	ldrh	r2, [r1, #12]
 8008b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	0710      	lsls	r0, r2, #28
 8008b2e:	460c      	mov	r4, r1
 8008b30:	d458      	bmi.n	8008be4 <__sflush_r+0xc0>
 8008b32:	684b      	ldr	r3, [r1, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dc05      	bgt.n	8008b44 <__sflush_r+0x20>
 8008b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dc02      	bgt.n	8008b44 <__sflush_r+0x20>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d0f9      	beq.n	8008b3e <__sflush_r+0x1a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b50:	682f      	ldr	r7, [r5, #0]
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	d032      	beq.n	8008bbc <__sflush_r+0x98>
 8008b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	075a      	lsls	r2, r3, #29
 8008b5c:	d505      	bpl.n	8008b6a <__sflush_r+0x46>
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	1ac0      	subs	r0, r0, r3
 8008b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b64:	b10b      	cbz	r3, 8008b6a <__sflush_r+0x46>
 8008b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b68:	1ac0      	subs	r0, r0, r3
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b0      	blx	r6
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	d106      	bne.n	8008b8a <__sflush_r+0x66>
 8008b7c:	6829      	ldr	r1, [r5, #0]
 8008b7e:	291d      	cmp	r1, #29
 8008b80:	d82c      	bhi.n	8008bdc <__sflush_r+0xb8>
 8008b82:	4a2a      	ldr	r2, [pc, #168]	; (8008c2c <__sflush_r+0x108>)
 8008b84:	40ca      	lsrs	r2, r1
 8008b86:	07d6      	lsls	r6, r2, #31
 8008b88:	d528      	bpl.n	8008bdc <__sflush_r+0xb8>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	6062      	str	r2, [r4, #4]
 8008b8e:	04d9      	lsls	r1, r3, #19
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	6022      	str	r2, [r4, #0]
 8008b94:	d504      	bpl.n	8008ba0 <__sflush_r+0x7c>
 8008b96:	1c42      	adds	r2, r0, #1
 8008b98:	d101      	bne.n	8008b9e <__sflush_r+0x7a>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	b903      	cbnz	r3, 8008ba0 <__sflush_r+0x7c>
 8008b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba2:	602f      	str	r7, [r5, #0]
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	d0ca      	beq.n	8008b3e <__sflush_r+0x1a>
 8008ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <__sflush_r+0x92>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7fe fa61 	bl	8007078 <_free_r>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bba:	e7c1      	b.n	8008b40 <__sflush_r+0x1c>
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b0      	blx	r6
 8008bc4:	1c41      	adds	r1, r0, #1
 8008bc6:	d1c7      	bne.n	8008b58 <__sflush_r+0x34>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0c4      	beq.n	8008b58 <__sflush_r+0x34>
 8008bce:	2b1d      	cmp	r3, #29
 8008bd0:	d001      	beq.n	8008bd6 <__sflush_r+0xb2>
 8008bd2:	2b16      	cmp	r3, #22
 8008bd4:	d101      	bne.n	8008bda <__sflush_r+0xb6>
 8008bd6:	602f      	str	r7, [r5, #0]
 8008bd8:	e7b1      	b.n	8008b3e <__sflush_r+0x1a>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	e7ad      	b.n	8008b40 <__sflush_r+0x1c>
 8008be4:	690f      	ldr	r7, [r1, #16]
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	d0a9      	beq.n	8008b3e <__sflush_r+0x1a>
 8008bea:	0793      	lsls	r3, r2, #30
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	600f      	str	r7, [r1, #0]
 8008bf4:	bf18      	it	ne
 8008bf6:	2300      	movne	r3, #0
 8008bf8:	eba6 0807 	sub.w	r8, r6, r7
 8008bfc:	608b      	str	r3, [r1, #8]
 8008bfe:	f1b8 0f00 	cmp.w	r8, #0
 8008c02:	dd9c      	ble.n	8008b3e <__sflush_r+0x1a>
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c08:	4643      	mov	r3, r8
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b0      	blx	r6
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dc06      	bgt.n	8008c22 <__sflush_r+0xfe>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e78e      	b.n	8008b40 <__sflush_r+0x1c>
 8008c22:	4407      	add	r7, r0
 8008c24:	eba8 0800 	sub.w	r8, r8, r0
 8008c28:	e7e9      	b.n	8008bfe <__sflush_r+0xda>
 8008c2a:	bf00      	nop
 8008c2c:	20400001 	.word	0x20400001

08008c30 <_fflush_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	4605      	mov	r5, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b913      	cbnz	r3, 8008c40 <_fflush_r+0x10>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	b118      	cbz	r0, 8008c4a <_fflush_r+0x1a>
 8008c42:	6983      	ldr	r3, [r0, #24]
 8008c44:	b90b      	cbnz	r3, 8008c4a <_fflush_r+0x1a>
 8008c46:	f000 f887 	bl	8008d58 <__sinit>
 8008c4a:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <_fflush_r+0x6c>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	d11b      	bne.n	8008c88 <_fflush_r+0x58>
 8008c50:	686c      	ldr	r4, [r5, #4]
 8008c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0ef      	beq.n	8008c3a <_fflush_r+0xa>
 8008c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c5c:	07d0      	lsls	r0, r2, #31
 8008c5e:	d404      	bmi.n	8008c6a <_fflush_r+0x3a>
 8008c60:	0599      	lsls	r1, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_fflush_r+0x3a>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f000 f91a 	bl	8008e9e <__retarget_lock_acquire_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7ff ff59 	bl	8008b24 <__sflush_r>
 8008c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	4605      	mov	r5, r0
 8008c78:	d4e0      	bmi.n	8008c3c <_fflush_r+0xc>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	059b      	lsls	r3, r3, #22
 8008c7e:	d4dd      	bmi.n	8008c3c <_fflush_r+0xc>
 8008c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c82:	f000 f90d 	bl	8008ea0 <__retarget_lock_release_recursive>
 8008c86:	e7d9      	b.n	8008c3c <_fflush_r+0xc>
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <_fflush_r+0x70>)
 8008c8a:	429c      	cmp	r4, r3
 8008c8c:	d101      	bne.n	8008c92 <_fflush_r+0x62>
 8008c8e:	68ac      	ldr	r4, [r5, #8]
 8008c90:	e7df      	b.n	8008c52 <_fflush_r+0x22>
 8008c92:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <_fflush_r+0x74>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	bf08      	it	eq
 8008c98:	68ec      	ldreq	r4, [r5, #12]
 8008c9a:	e7da      	b.n	8008c52 <_fflush_r+0x22>
 8008c9c:	0800a280 	.word	0x0800a280
 8008ca0:	0800a2a0 	.word	0x0800a2a0
 8008ca4:	0800a260 	.word	0x0800a260

08008ca8 <std>:
 8008ca8:	2300      	movs	r3, #0
 8008caa:	b510      	push	{r4, lr}
 8008cac:	4604      	mov	r4, r0
 8008cae:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cb6:	6083      	str	r3, [r0, #8]
 8008cb8:	8181      	strh	r1, [r0, #12]
 8008cba:	6643      	str	r3, [r0, #100]	; 0x64
 8008cbc:	81c2      	strh	r2, [r0, #14]
 8008cbe:	6183      	str	r3, [r0, #24]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	2208      	movs	r2, #8
 8008cc4:	305c      	adds	r0, #92	; 0x5c
 8008cc6:	f7fe f9b9 	bl	800703c <memset>
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <std+0x38>)
 8008ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <std+0x3c>)
 8008cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <std+0x40>)
 8008cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <std+0x44>)
 8008cd8:	6224      	str	r4, [r4, #32]
 8008cda:	6323      	str	r3, [r4, #48]	; 0x30
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	bf00      	nop
 8008ce0:	08009c71 	.word	0x08009c71
 8008ce4:	08009c93 	.word	0x08009c93
 8008ce8:	08009ccb 	.word	0x08009ccb
 8008cec:	08009cef 	.word	0x08009cef

08008cf0 <_cleanup_r>:
 8008cf0:	4901      	ldr	r1, [pc, #4]	; (8008cf8 <_cleanup_r+0x8>)
 8008cf2:	f000 b8af 	b.w	8008e54 <_fwalk_reent>
 8008cf6:	bf00      	nop
 8008cf8:	08008c31 	.word	0x08008c31

08008cfc <__sfmoreglue>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	2268      	movs	r2, #104	; 0x68
 8008d00:	1e4d      	subs	r5, r1, #1
 8008d02:	4355      	muls	r5, r2
 8008d04:	460e      	mov	r6, r1
 8008d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d0a:	f7fe fa21 	bl	8007150 <_malloc_r>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	b140      	cbz	r0, 8008d24 <__sfmoreglue+0x28>
 8008d12:	2100      	movs	r1, #0
 8008d14:	e9c0 1600 	strd	r1, r6, [r0]
 8008d18:	300c      	adds	r0, #12
 8008d1a:	60a0      	str	r0, [r4, #8]
 8008d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d20:	f7fe f98c 	bl	800703c <memset>
 8008d24:	4620      	mov	r0, r4
 8008d26:	bd70      	pop	{r4, r5, r6, pc}

08008d28 <__sfp_lock_acquire>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__sfp_lock_acquire+0x8>)
 8008d2a:	f000 b8b8 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20000705 	.word	0x20000705

08008d34 <__sfp_lock_release>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__sfp_lock_release+0x8>)
 8008d36:	f000 b8b3 	b.w	8008ea0 <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	20000705 	.word	0x20000705

08008d40 <__sinit_lock_acquire>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__sinit_lock_acquire+0x8>)
 8008d42:	f000 b8ac 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20000706 	.word	0x20000706

08008d4c <__sinit_lock_release>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sinit_lock_release+0x8>)
 8008d4e:	f000 b8a7 	b.w	8008ea0 <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20000706 	.word	0x20000706

08008d58 <__sinit>:
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	f7ff fff0 	bl	8008d40 <__sinit_lock_acquire>
 8008d60:	69a3      	ldr	r3, [r4, #24]
 8008d62:	b11b      	cbz	r3, 8008d6c <__sinit+0x14>
 8008d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d68:	f7ff bff0 	b.w	8008d4c <__sinit_lock_release>
 8008d6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d70:	6523      	str	r3, [r4, #80]	; 0x50
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <__sinit+0x68>)
 8008d74:	4a13      	ldr	r2, [pc, #76]	; (8008dc4 <__sinit+0x6c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	bf04      	itt	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	61a3      	streq	r3, [r4, #24]
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f820 	bl	8008dc8 <__sfp>
 8008d88:	6060      	str	r0, [r4, #4]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f81c 	bl	8008dc8 <__sfp>
 8008d90:	60a0      	str	r0, [r4, #8]
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f818 	bl	8008dc8 <__sfp>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	60e0      	str	r0, [r4, #12]
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	6860      	ldr	r0, [r4, #4]
 8008da0:	f7ff ff82 	bl	8008ca8 <std>
 8008da4:	68a0      	ldr	r0, [r4, #8]
 8008da6:	2201      	movs	r2, #1
 8008da8:	2109      	movs	r1, #9
 8008daa:	f7ff ff7d 	bl	8008ca8 <std>
 8008dae:	68e0      	ldr	r0, [r4, #12]
 8008db0:	2202      	movs	r2, #2
 8008db2:	2112      	movs	r1, #18
 8008db4:	f7ff ff78 	bl	8008ca8 <std>
 8008db8:	2301      	movs	r3, #1
 8008dba:	61a3      	str	r3, [r4, #24]
 8008dbc:	e7d2      	b.n	8008d64 <__sinit+0xc>
 8008dbe:	bf00      	nop
 8008dc0:	0800a198 	.word	0x0800a198
 8008dc4:	08008cf1 	.word	0x08008cf1

08008dc8 <__sfp>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	4607      	mov	r7, r0
 8008dcc:	f7ff ffac 	bl	8008d28 <__sfp_lock_acquire>
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <__sfp+0x84>)
 8008dd2:	681e      	ldr	r6, [r3, #0]
 8008dd4:	69b3      	ldr	r3, [r6, #24]
 8008dd6:	b913      	cbnz	r3, 8008dde <__sfp+0x16>
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff ffbd 	bl	8008d58 <__sinit>
 8008dde:	3648      	adds	r6, #72	; 0x48
 8008de0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	d503      	bpl.n	8008df0 <__sfp+0x28>
 8008de8:	6833      	ldr	r3, [r6, #0]
 8008dea:	b30b      	cbz	r3, 8008e30 <__sfp+0x68>
 8008dec:	6836      	ldr	r6, [r6, #0]
 8008dee:	e7f7      	b.n	8008de0 <__sfp+0x18>
 8008df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008df4:	b9d5      	cbnz	r5, 8008e2c <__sfp+0x64>
 8008df6:	4b16      	ldr	r3, [pc, #88]	; (8008e50 <__sfp+0x88>)
 8008df8:	60e3      	str	r3, [r4, #12]
 8008dfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8008e00:	f000 f84c 	bl	8008e9c <__retarget_lock_init_recursive>
 8008e04:	f7ff ff96 	bl	8008d34 <__sfp_lock_release>
 8008e08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e10:	6025      	str	r5, [r4, #0]
 8008e12:	61a5      	str	r5, [r4, #24]
 8008e14:	2208      	movs	r2, #8
 8008e16:	4629      	mov	r1, r5
 8008e18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e1c:	f7fe f90e 	bl	800703c <memset>
 8008e20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e28:	4620      	mov	r0, r4
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e2c:	3468      	adds	r4, #104	; 0x68
 8008e2e:	e7d9      	b.n	8008de4 <__sfp+0x1c>
 8008e30:	2104      	movs	r1, #4
 8008e32:	4638      	mov	r0, r7
 8008e34:	f7ff ff62 	bl	8008cfc <__sfmoreglue>
 8008e38:	4604      	mov	r4, r0
 8008e3a:	6030      	str	r0, [r6, #0]
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1d5      	bne.n	8008dec <__sfp+0x24>
 8008e40:	f7ff ff78 	bl	8008d34 <__sfp_lock_release>
 8008e44:	230c      	movs	r3, #12
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	e7ee      	b.n	8008e28 <__sfp+0x60>
 8008e4a:	bf00      	nop
 8008e4c:	0800a198 	.word	0x0800a198
 8008e50:	ffff0001 	.word	0xffff0001

08008e54 <_fwalk_reent>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	4606      	mov	r6, r0
 8008e5a:	4688      	mov	r8, r1
 8008e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e60:	2700      	movs	r7, #0
 8008e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e66:	f1b9 0901 	subs.w	r9, r9, #1
 8008e6a:	d505      	bpl.n	8008e78 <_fwalk_reent+0x24>
 8008e6c:	6824      	ldr	r4, [r4, #0]
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d1f7      	bne.n	8008e62 <_fwalk_reent+0xe>
 8008e72:	4638      	mov	r0, r7
 8008e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d907      	bls.n	8008e8e <_fwalk_reent+0x3a>
 8008e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e82:	3301      	adds	r3, #1
 8008e84:	d003      	beq.n	8008e8e <_fwalk_reent+0x3a>
 8008e86:	4629      	mov	r1, r5
 8008e88:	4630      	mov	r0, r6
 8008e8a:	47c0      	blx	r8
 8008e8c:	4307      	orrs	r7, r0
 8008e8e:	3568      	adds	r5, #104	; 0x68
 8008e90:	e7e9      	b.n	8008e66 <_fwalk_reent+0x12>
	...

08008e94 <_localeconv_r>:
 8008e94:	4800      	ldr	r0, [pc, #0]	; (8008e98 <_localeconv_r+0x4>)
 8008e96:	4770      	bx	lr
 8008e98:	2000041c 	.word	0x2000041c

08008e9c <__retarget_lock_init_recursive>:
 8008e9c:	4770      	bx	lr

08008e9e <__retarget_lock_acquire_recursive>:
 8008e9e:	4770      	bx	lr

08008ea0 <__retarget_lock_release_recursive>:
 8008ea0:	4770      	bx	lr

08008ea2 <__swhatbuf_r>:
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	460e      	mov	r6, r1
 8008ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eaa:	2900      	cmp	r1, #0
 8008eac:	b096      	sub	sp, #88	; 0x58
 8008eae:	4614      	mov	r4, r2
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	da08      	bge.n	8008ec6 <__swhatbuf_r+0x24>
 8008eb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	602a      	str	r2, [r5, #0]
 8008ebc:	061a      	lsls	r2, r3, #24
 8008ebe:	d410      	bmi.n	8008ee2 <__swhatbuf_r+0x40>
 8008ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec4:	e00e      	b.n	8008ee4 <__swhatbuf_r+0x42>
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f000 ff68 	bl	8009d9c <_fstat_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	dbf1      	blt.n	8008eb4 <__swhatbuf_r+0x12>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ed6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008eda:	425a      	negs	r2, r3
 8008edc:	415a      	adcs	r2, r3
 8008ede:	602a      	str	r2, [r5, #0]
 8008ee0:	e7ee      	b.n	8008ec0 <__swhatbuf_r+0x1e>
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	b016      	add	sp, #88	; 0x58
 8008eea:	bd70      	pop	{r4, r5, r6, pc}

08008eec <__smakebuf_r>:
 8008eec:	898b      	ldrh	r3, [r1, #12]
 8008eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ef0:	079d      	lsls	r5, r3, #30
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	d507      	bpl.n	8008f08 <__smakebuf_r+0x1c>
 8008ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	6123      	str	r3, [r4, #16]
 8008f00:	2301      	movs	r3, #1
 8008f02:	6163      	str	r3, [r4, #20]
 8008f04:	b002      	add	sp, #8
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	ab01      	add	r3, sp, #4
 8008f0a:	466a      	mov	r2, sp
 8008f0c:	f7ff ffc9 	bl	8008ea2 <__swhatbuf_r>
 8008f10:	9900      	ldr	r1, [sp, #0]
 8008f12:	4605      	mov	r5, r0
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7fe f91b 	bl	8007150 <_malloc_r>
 8008f1a:	b948      	cbnz	r0, 8008f30 <__smakebuf_r+0x44>
 8008f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d4ef      	bmi.n	8008f04 <__smakebuf_r+0x18>
 8008f24:	f023 0303 	bic.w	r3, r3, #3
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	e7e3      	b.n	8008ef8 <__smakebuf_r+0xc>
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <__smakebuf_r+0x7c>)
 8008f32:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	6020      	str	r0, [r4, #0]
 8008f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	6163      	str	r3, [r4, #20]
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	6120      	str	r0, [r4, #16]
 8008f46:	b15b      	cbz	r3, 8008f60 <__smakebuf_r+0x74>
 8008f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 ff37 	bl	8009dc0 <_isatty_r>
 8008f52:	b128      	cbz	r0, 8008f60 <__smakebuf_r+0x74>
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	89a0      	ldrh	r0, [r4, #12]
 8008f62:	4305      	orrs	r5, r0
 8008f64:	81a5      	strh	r5, [r4, #12]
 8008f66:	e7cd      	b.n	8008f04 <__smakebuf_r+0x18>
 8008f68:	08008cf1 	.word	0x08008cf1

08008f6c <memcpy>:
 8008f6c:	440a      	add	r2, r1
 8008f6e:	4291      	cmp	r1, r2
 8008f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f74:	d100      	bne.n	8008f78 <memcpy+0xc>
 8008f76:	4770      	bx	lr
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f82:	4291      	cmp	r1, r2
 8008f84:	d1f9      	bne.n	8008f7a <memcpy+0xe>
 8008f86:	bd10      	pop	{r4, pc}

08008f88 <__malloc_lock>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__malloc_lock+0x8>)
 8008f8a:	f7ff bf88 	b.w	8008e9e <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20000704 	.word	0x20000704

08008f94 <__malloc_unlock>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__malloc_unlock+0x8>)
 8008f96:	f7ff bf83 	b.w	8008ea0 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20000704 	.word	0x20000704

08008fa0 <_Balloc>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	b976      	cbnz	r6, 8008fc8 <_Balloc+0x28>
 8008faa:	2010      	movs	r0, #16
 8008fac:	f7fe f83e 	bl	800702c <malloc>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb4:	b920      	cbnz	r0, 8008fc0 <_Balloc+0x20>
 8008fb6:	4b18      	ldr	r3, [pc, #96]	; (8009018 <_Balloc+0x78>)
 8008fb8:	4818      	ldr	r0, [pc, #96]	; (800901c <_Balloc+0x7c>)
 8008fba:	2166      	movs	r1, #102	; 0x66
 8008fbc:	f000 feae 	bl	8009d1c <__assert_func>
 8008fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc4:	6006      	str	r6, [r0, #0]
 8008fc6:	60c6      	str	r6, [r0, #12]
 8008fc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fca:	68f3      	ldr	r3, [r6, #12]
 8008fcc:	b183      	cbz	r3, 8008ff0 <_Balloc+0x50>
 8008fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fd6:	b9b8      	cbnz	r0, 8009008 <_Balloc+0x68>
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f605 	lsl.w	r6, r1, r5
 8008fde:	1d72      	adds	r2, r6, #5
 8008fe0:	0092      	lsls	r2, r2, #2
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7fe f832 	bl	800704c <_calloc_r>
 8008fe8:	b160      	cbz	r0, 8009004 <_Balloc+0x64>
 8008fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fee:	e00e      	b.n	800900e <_Balloc+0x6e>
 8008ff0:	2221      	movs	r2, #33	; 0x21
 8008ff2:	2104      	movs	r1, #4
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7fe f829 	bl	800704c <_calloc_r>
 8008ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffc:	60f0      	str	r0, [r6, #12]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e4      	bne.n	8008fce <_Balloc+0x2e>
 8009004:	2000      	movs	r0, #0
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	6802      	ldr	r2, [r0, #0]
 800900a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800900e:	2300      	movs	r3, #0
 8009010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009014:	e7f7      	b.n	8009006 <_Balloc+0x66>
 8009016:	bf00      	nop
 8009018:	0800a1dd 	.word	0x0800a1dd
 800901c:	0800a2c0 	.word	0x0800a2c0

08009020 <_Bfree>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	b976      	cbnz	r6, 8009048 <_Bfree+0x28>
 800902a:	2010      	movs	r0, #16
 800902c:	f7fd fffe 	bl	800702c <malloc>
 8009030:	4602      	mov	r2, r0
 8009032:	6268      	str	r0, [r5, #36]	; 0x24
 8009034:	b920      	cbnz	r0, 8009040 <_Bfree+0x20>
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <_Bfree+0x3c>)
 8009038:	4809      	ldr	r0, [pc, #36]	; (8009060 <_Bfree+0x40>)
 800903a:	218a      	movs	r1, #138	; 0x8a
 800903c:	f000 fe6e 	bl	8009d1c <__assert_func>
 8009040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009044:	6006      	str	r6, [r0, #0]
 8009046:	60c6      	str	r6, [r0, #12]
 8009048:	b13c      	cbz	r4, 800905a <_Bfree+0x3a>
 800904a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800904c:	6862      	ldr	r2, [r4, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009054:	6021      	str	r1, [r4, #0]
 8009056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	0800a1dd 	.word	0x0800a1dd
 8009060:	0800a2c0 	.word	0x0800a2c0

08009064 <__multadd>:
 8009064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009068:	690d      	ldr	r5, [r1, #16]
 800906a:	4607      	mov	r7, r0
 800906c:	460c      	mov	r4, r1
 800906e:	461e      	mov	r6, r3
 8009070:	f101 0c14 	add.w	ip, r1, #20
 8009074:	2000      	movs	r0, #0
 8009076:	f8dc 3000 	ldr.w	r3, [ip]
 800907a:	b299      	uxth	r1, r3
 800907c:	fb02 6101 	mla	r1, r2, r1, r6
 8009080:	0c1e      	lsrs	r6, r3, #16
 8009082:	0c0b      	lsrs	r3, r1, #16
 8009084:	fb02 3306 	mla	r3, r2, r6, r3
 8009088:	b289      	uxth	r1, r1
 800908a:	3001      	adds	r0, #1
 800908c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009090:	4285      	cmp	r5, r0
 8009092:	f84c 1b04 	str.w	r1, [ip], #4
 8009096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800909a:	dcec      	bgt.n	8009076 <__multadd+0x12>
 800909c:	b30e      	cbz	r6, 80090e2 <__multadd+0x7e>
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dc19      	bgt.n	80090d8 <__multadd+0x74>
 80090a4:	6861      	ldr	r1, [r4, #4]
 80090a6:	4638      	mov	r0, r7
 80090a8:	3101      	adds	r1, #1
 80090aa:	f7ff ff79 	bl	8008fa0 <_Balloc>
 80090ae:	4680      	mov	r8, r0
 80090b0:	b928      	cbnz	r0, 80090be <__multadd+0x5a>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <__multadd+0x84>)
 80090b6:	480d      	ldr	r0, [pc, #52]	; (80090ec <__multadd+0x88>)
 80090b8:	21b5      	movs	r1, #181	; 0xb5
 80090ba:	f000 fe2f 	bl	8009d1c <__assert_func>
 80090be:	6922      	ldr	r2, [r4, #16]
 80090c0:	3202      	adds	r2, #2
 80090c2:	f104 010c 	add.w	r1, r4, #12
 80090c6:	0092      	lsls	r2, r2, #2
 80090c8:	300c      	adds	r0, #12
 80090ca:	f7ff ff4f 	bl	8008f6c <memcpy>
 80090ce:	4621      	mov	r1, r4
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff ffa5 	bl	8009020 <_Bfree>
 80090d6:	4644      	mov	r4, r8
 80090d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090dc:	3501      	adds	r5, #1
 80090de:	615e      	str	r6, [r3, #20]
 80090e0:	6125      	str	r5, [r4, #16]
 80090e2:	4620      	mov	r0, r4
 80090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e8:	0800a24f 	.word	0x0800a24f
 80090ec:	0800a2c0 	.word	0x0800a2c0

080090f0 <__hi0bits>:
 80090f0:	0c03      	lsrs	r3, r0, #16
 80090f2:	041b      	lsls	r3, r3, #16
 80090f4:	b9d3      	cbnz	r3, 800912c <__hi0bits+0x3c>
 80090f6:	0400      	lsls	r0, r0, #16
 80090f8:	2310      	movs	r3, #16
 80090fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090fe:	bf04      	itt	eq
 8009100:	0200      	lsleq	r0, r0, #8
 8009102:	3308      	addeq	r3, #8
 8009104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009108:	bf04      	itt	eq
 800910a:	0100      	lsleq	r0, r0, #4
 800910c:	3304      	addeq	r3, #4
 800910e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009112:	bf04      	itt	eq
 8009114:	0080      	lsleq	r0, r0, #2
 8009116:	3302      	addeq	r3, #2
 8009118:	2800      	cmp	r0, #0
 800911a:	db05      	blt.n	8009128 <__hi0bits+0x38>
 800911c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009120:	f103 0301 	add.w	r3, r3, #1
 8009124:	bf08      	it	eq
 8009126:	2320      	moveq	r3, #32
 8009128:	4618      	mov	r0, r3
 800912a:	4770      	bx	lr
 800912c:	2300      	movs	r3, #0
 800912e:	e7e4      	b.n	80090fa <__hi0bits+0xa>

08009130 <__lo0bits>:
 8009130:	6803      	ldr	r3, [r0, #0]
 8009132:	f013 0207 	ands.w	r2, r3, #7
 8009136:	4601      	mov	r1, r0
 8009138:	d00b      	beq.n	8009152 <__lo0bits+0x22>
 800913a:	07da      	lsls	r2, r3, #31
 800913c:	d423      	bmi.n	8009186 <__lo0bits+0x56>
 800913e:	0798      	lsls	r0, r3, #30
 8009140:	bf49      	itett	mi
 8009142:	085b      	lsrmi	r3, r3, #1
 8009144:	089b      	lsrpl	r3, r3, #2
 8009146:	2001      	movmi	r0, #1
 8009148:	600b      	strmi	r3, [r1, #0]
 800914a:	bf5c      	itt	pl
 800914c:	600b      	strpl	r3, [r1, #0]
 800914e:	2002      	movpl	r0, #2
 8009150:	4770      	bx	lr
 8009152:	b298      	uxth	r0, r3
 8009154:	b9a8      	cbnz	r0, 8009182 <__lo0bits+0x52>
 8009156:	0c1b      	lsrs	r3, r3, #16
 8009158:	2010      	movs	r0, #16
 800915a:	b2da      	uxtb	r2, r3
 800915c:	b90a      	cbnz	r2, 8009162 <__lo0bits+0x32>
 800915e:	3008      	adds	r0, #8
 8009160:	0a1b      	lsrs	r3, r3, #8
 8009162:	071a      	lsls	r2, r3, #28
 8009164:	bf04      	itt	eq
 8009166:	091b      	lsreq	r3, r3, #4
 8009168:	3004      	addeq	r0, #4
 800916a:	079a      	lsls	r2, r3, #30
 800916c:	bf04      	itt	eq
 800916e:	089b      	lsreq	r3, r3, #2
 8009170:	3002      	addeq	r0, #2
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d403      	bmi.n	800917e <__lo0bits+0x4e>
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	f100 0001 	add.w	r0, r0, #1
 800917c:	d005      	beq.n	800918a <__lo0bits+0x5a>
 800917e:	600b      	str	r3, [r1, #0]
 8009180:	4770      	bx	lr
 8009182:	4610      	mov	r0, r2
 8009184:	e7e9      	b.n	800915a <__lo0bits+0x2a>
 8009186:	2000      	movs	r0, #0
 8009188:	4770      	bx	lr
 800918a:	2020      	movs	r0, #32
 800918c:	4770      	bx	lr
	...

08009190 <__i2b>:
 8009190:	b510      	push	{r4, lr}
 8009192:	460c      	mov	r4, r1
 8009194:	2101      	movs	r1, #1
 8009196:	f7ff ff03 	bl	8008fa0 <_Balloc>
 800919a:	4602      	mov	r2, r0
 800919c:	b928      	cbnz	r0, 80091aa <__i2b+0x1a>
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <__i2b+0x24>)
 80091a0:	4805      	ldr	r0, [pc, #20]	; (80091b8 <__i2b+0x28>)
 80091a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091a6:	f000 fdb9 	bl	8009d1c <__assert_func>
 80091aa:	2301      	movs	r3, #1
 80091ac:	6144      	str	r4, [r0, #20]
 80091ae:	6103      	str	r3, [r0, #16]
 80091b0:	bd10      	pop	{r4, pc}
 80091b2:	bf00      	nop
 80091b4:	0800a24f 	.word	0x0800a24f
 80091b8:	0800a2c0 	.word	0x0800a2c0

080091bc <__multiply>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	4691      	mov	r9, r2
 80091c2:	690a      	ldr	r2, [r1, #16]
 80091c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	bfb8      	it	lt
 80091cc:	460b      	movlt	r3, r1
 80091ce:	460c      	mov	r4, r1
 80091d0:	bfbc      	itt	lt
 80091d2:	464c      	movlt	r4, r9
 80091d4:	4699      	movlt	r9, r3
 80091d6:	6927      	ldr	r7, [r4, #16]
 80091d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091dc:	68a3      	ldr	r3, [r4, #8]
 80091de:	6861      	ldr	r1, [r4, #4]
 80091e0:	eb07 060a 	add.w	r6, r7, sl
 80091e4:	42b3      	cmp	r3, r6
 80091e6:	b085      	sub	sp, #20
 80091e8:	bfb8      	it	lt
 80091ea:	3101      	addlt	r1, #1
 80091ec:	f7ff fed8 	bl	8008fa0 <_Balloc>
 80091f0:	b930      	cbnz	r0, 8009200 <__multiply+0x44>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b44      	ldr	r3, [pc, #272]	; (8009308 <__multiply+0x14c>)
 80091f6:	4845      	ldr	r0, [pc, #276]	; (800930c <__multiply+0x150>)
 80091f8:	f240 115d 	movw	r1, #349	; 0x15d
 80091fc:	f000 fd8e 	bl	8009d1c <__assert_func>
 8009200:	f100 0514 	add.w	r5, r0, #20
 8009204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009208:	462b      	mov	r3, r5
 800920a:	2200      	movs	r2, #0
 800920c:	4543      	cmp	r3, r8
 800920e:	d321      	bcc.n	8009254 <__multiply+0x98>
 8009210:	f104 0314 	add.w	r3, r4, #20
 8009214:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009218:	f109 0314 	add.w	r3, r9, #20
 800921c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009220:	9202      	str	r2, [sp, #8]
 8009222:	1b3a      	subs	r2, r7, r4
 8009224:	3a15      	subs	r2, #21
 8009226:	f022 0203 	bic.w	r2, r2, #3
 800922a:	3204      	adds	r2, #4
 800922c:	f104 0115 	add.w	r1, r4, #21
 8009230:	428f      	cmp	r7, r1
 8009232:	bf38      	it	cc
 8009234:	2204      	movcc	r2, #4
 8009236:	9201      	str	r2, [sp, #4]
 8009238:	9a02      	ldr	r2, [sp, #8]
 800923a:	9303      	str	r3, [sp, #12]
 800923c:	429a      	cmp	r2, r3
 800923e:	d80c      	bhi.n	800925a <__multiply+0x9e>
 8009240:	2e00      	cmp	r6, #0
 8009242:	dd03      	ble.n	800924c <__multiply+0x90>
 8009244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009248:	2b00      	cmp	r3, #0
 800924a:	d05a      	beq.n	8009302 <__multiply+0x146>
 800924c:	6106      	str	r6, [r0, #16]
 800924e:	b005      	add	sp, #20
 8009250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	f843 2b04 	str.w	r2, [r3], #4
 8009258:	e7d8      	b.n	800920c <__multiply+0x50>
 800925a:	f8b3 a000 	ldrh.w	sl, [r3]
 800925e:	f1ba 0f00 	cmp.w	sl, #0
 8009262:	d024      	beq.n	80092ae <__multiply+0xf2>
 8009264:	f104 0e14 	add.w	lr, r4, #20
 8009268:	46a9      	mov	r9, r5
 800926a:	f04f 0c00 	mov.w	ip, #0
 800926e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009272:	f8d9 1000 	ldr.w	r1, [r9]
 8009276:	fa1f fb82 	uxth.w	fp, r2
 800927a:	b289      	uxth	r1, r1
 800927c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009280:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009284:	f8d9 2000 	ldr.w	r2, [r9]
 8009288:	4461      	add	r1, ip
 800928a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800928e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009296:	b289      	uxth	r1, r1
 8009298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800929c:	4577      	cmp	r7, lr
 800929e:	f849 1b04 	str.w	r1, [r9], #4
 80092a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092a6:	d8e2      	bhi.n	800926e <__multiply+0xb2>
 80092a8:	9a01      	ldr	r2, [sp, #4]
 80092aa:	f845 c002 	str.w	ip, [r5, r2]
 80092ae:	9a03      	ldr	r2, [sp, #12]
 80092b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092b4:	3304      	adds	r3, #4
 80092b6:	f1b9 0f00 	cmp.w	r9, #0
 80092ba:	d020      	beq.n	80092fe <__multiply+0x142>
 80092bc:	6829      	ldr	r1, [r5, #0]
 80092be:	f104 0c14 	add.w	ip, r4, #20
 80092c2:	46ae      	mov	lr, r5
 80092c4:	f04f 0a00 	mov.w	sl, #0
 80092c8:	f8bc b000 	ldrh.w	fp, [ip]
 80092cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092d0:	fb09 220b 	mla	r2, r9, fp, r2
 80092d4:	4492      	add	sl, r2
 80092d6:	b289      	uxth	r1, r1
 80092d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092dc:	f84e 1b04 	str.w	r1, [lr], #4
 80092e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092e4:	f8be 1000 	ldrh.w	r1, [lr]
 80092e8:	0c12      	lsrs	r2, r2, #16
 80092ea:	fb09 1102 	mla	r1, r9, r2, r1
 80092ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092f2:	4567      	cmp	r7, ip
 80092f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092f8:	d8e6      	bhi.n	80092c8 <__multiply+0x10c>
 80092fa:	9a01      	ldr	r2, [sp, #4]
 80092fc:	50a9      	str	r1, [r5, r2]
 80092fe:	3504      	adds	r5, #4
 8009300:	e79a      	b.n	8009238 <__multiply+0x7c>
 8009302:	3e01      	subs	r6, #1
 8009304:	e79c      	b.n	8009240 <__multiply+0x84>
 8009306:	bf00      	nop
 8009308:	0800a24f 	.word	0x0800a24f
 800930c:	0800a2c0 	.word	0x0800a2c0

08009310 <__pow5mult>:
 8009310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009314:	4615      	mov	r5, r2
 8009316:	f012 0203 	ands.w	r2, r2, #3
 800931a:	4606      	mov	r6, r0
 800931c:	460f      	mov	r7, r1
 800931e:	d007      	beq.n	8009330 <__pow5mult+0x20>
 8009320:	4c25      	ldr	r4, [pc, #148]	; (80093b8 <__pow5mult+0xa8>)
 8009322:	3a01      	subs	r2, #1
 8009324:	2300      	movs	r3, #0
 8009326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800932a:	f7ff fe9b 	bl	8009064 <__multadd>
 800932e:	4607      	mov	r7, r0
 8009330:	10ad      	asrs	r5, r5, #2
 8009332:	d03d      	beq.n	80093b0 <__pow5mult+0xa0>
 8009334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009336:	b97c      	cbnz	r4, 8009358 <__pow5mult+0x48>
 8009338:	2010      	movs	r0, #16
 800933a:	f7fd fe77 	bl	800702c <malloc>
 800933e:	4602      	mov	r2, r0
 8009340:	6270      	str	r0, [r6, #36]	; 0x24
 8009342:	b928      	cbnz	r0, 8009350 <__pow5mult+0x40>
 8009344:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <__pow5mult+0xac>)
 8009346:	481e      	ldr	r0, [pc, #120]	; (80093c0 <__pow5mult+0xb0>)
 8009348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800934c:	f000 fce6 	bl	8009d1c <__assert_func>
 8009350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009354:	6004      	str	r4, [r0, #0]
 8009356:	60c4      	str	r4, [r0, #12]
 8009358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800935c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009360:	b94c      	cbnz	r4, 8009376 <__pow5mult+0x66>
 8009362:	f240 2171 	movw	r1, #625	; 0x271
 8009366:	4630      	mov	r0, r6
 8009368:	f7ff ff12 	bl	8009190 <__i2b>
 800936c:	2300      	movs	r3, #0
 800936e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009372:	4604      	mov	r4, r0
 8009374:	6003      	str	r3, [r0, #0]
 8009376:	f04f 0900 	mov.w	r9, #0
 800937a:	07eb      	lsls	r3, r5, #31
 800937c:	d50a      	bpl.n	8009394 <__pow5mult+0x84>
 800937e:	4639      	mov	r1, r7
 8009380:	4622      	mov	r2, r4
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ff1a 	bl	80091bc <__multiply>
 8009388:	4639      	mov	r1, r7
 800938a:	4680      	mov	r8, r0
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff fe47 	bl	8009020 <_Bfree>
 8009392:	4647      	mov	r7, r8
 8009394:	106d      	asrs	r5, r5, #1
 8009396:	d00b      	beq.n	80093b0 <__pow5mult+0xa0>
 8009398:	6820      	ldr	r0, [r4, #0]
 800939a:	b938      	cbnz	r0, 80093ac <__pow5mult+0x9c>
 800939c:	4622      	mov	r2, r4
 800939e:	4621      	mov	r1, r4
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7ff ff0b 	bl	80091bc <__multiply>
 80093a6:	6020      	str	r0, [r4, #0]
 80093a8:	f8c0 9000 	str.w	r9, [r0]
 80093ac:	4604      	mov	r4, r0
 80093ae:	e7e4      	b.n	800937a <__pow5mult+0x6a>
 80093b0:	4638      	mov	r0, r7
 80093b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b6:	bf00      	nop
 80093b8:	0800a410 	.word	0x0800a410
 80093bc:	0800a1dd 	.word	0x0800a1dd
 80093c0:	0800a2c0 	.word	0x0800a2c0

080093c4 <__lshift>:
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	460c      	mov	r4, r1
 80093ca:	6849      	ldr	r1, [r1, #4]
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	4607      	mov	r7, r0
 80093d6:	4691      	mov	r9, r2
 80093d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093dc:	f108 0601 	add.w	r6, r8, #1
 80093e0:	42b3      	cmp	r3, r6
 80093e2:	db0b      	blt.n	80093fc <__lshift+0x38>
 80093e4:	4638      	mov	r0, r7
 80093e6:	f7ff fddb 	bl	8008fa0 <_Balloc>
 80093ea:	4605      	mov	r5, r0
 80093ec:	b948      	cbnz	r0, 8009402 <__lshift+0x3e>
 80093ee:	4602      	mov	r2, r0
 80093f0:	4b2a      	ldr	r3, [pc, #168]	; (800949c <__lshift+0xd8>)
 80093f2:	482b      	ldr	r0, [pc, #172]	; (80094a0 <__lshift+0xdc>)
 80093f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093f8:	f000 fc90 	bl	8009d1c <__assert_func>
 80093fc:	3101      	adds	r1, #1
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	e7ee      	b.n	80093e0 <__lshift+0x1c>
 8009402:	2300      	movs	r3, #0
 8009404:	f100 0114 	add.w	r1, r0, #20
 8009408:	f100 0210 	add.w	r2, r0, #16
 800940c:	4618      	mov	r0, r3
 800940e:	4553      	cmp	r3, sl
 8009410:	db37      	blt.n	8009482 <__lshift+0xbe>
 8009412:	6920      	ldr	r0, [r4, #16]
 8009414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009418:	f104 0314 	add.w	r3, r4, #20
 800941c:	f019 091f 	ands.w	r9, r9, #31
 8009420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009428:	d02f      	beq.n	800948a <__lshift+0xc6>
 800942a:	f1c9 0e20 	rsb	lr, r9, #32
 800942e:	468a      	mov	sl, r1
 8009430:	f04f 0c00 	mov.w	ip, #0
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	fa02 f209 	lsl.w	r2, r2, r9
 800943a:	ea42 020c 	orr.w	r2, r2, ip
 800943e:	f84a 2b04 	str.w	r2, [sl], #4
 8009442:	f853 2b04 	ldr.w	r2, [r3], #4
 8009446:	4298      	cmp	r0, r3
 8009448:	fa22 fc0e 	lsr.w	ip, r2, lr
 800944c:	d8f2      	bhi.n	8009434 <__lshift+0x70>
 800944e:	1b03      	subs	r3, r0, r4
 8009450:	3b15      	subs	r3, #21
 8009452:	f023 0303 	bic.w	r3, r3, #3
 8009456:	3304      	adds	r3, #4
 8009458:	f104 0215 	add.w	r2, r4, #21
 800945c:	4290      	cmp	r0, r2
 800945e:	bf38      	it	cc
 8009460:	2304      	movcc	r3, #4
 8009462:	f841 c003 	str.w	ip, [r1, r3]
 8009466:	f1bc 0f00 	cmp.w	ip, #0
 800946a:	d001      	beq.n	8009470 <__lshift+0xac>
 800946c:	f108 0602 	add.w	r6, r8, #2
 8009470:	3e01      	subs	r6, #1
 8009472:	4638      	mov	r0, r7
 8009474:	612e      	str	r6, [r5, #16]
 8009476:	4621      	mov	r1, r4
 8009478:	f7ff fdd2 	bl	8009020 <_Bfree>
 800947c:	4628      	mov	r0, r5
 800947e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009482:	f842 0f04 	str.w	r0, [r2, #4]!
 8009486:	3301      	adds	r3, #1
 8009488:	e7c1      	b.n	800940e <__lshift+0x4a>
 800948a:	3904      	subs	r1, #4
 800948c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009490:	f841 2f04 	str.w	r2, [r1, #4]!
 8009494:	4298      	cmp	r0, r3
 8009496:	d8f9      	bhi.n	800948c <__lshift+0xc8>
 8009498:	e7ea      	b.n	8009470 <__lshift+0xac>
 800949a:	bf00      	nop
 800949c:	0800a24f 	.word	0x0800a24f
 80094a0:	0800a2c0 	.word	0x0800a2c0

080094a4 <__mcmp>:
 80094a4:	b530      	push	{r4, r5, lr}
 80094a6:	6902      	ldr	r2, [r0, #16]
 80094a8:	690c      	ldr	r4, [r1, #16]
 80094aa:	1b12      	subs	r2, r2, r4
 80094ac:	d10e      	bne.n	80094cc <__mcmp+0x28>
 80094ae:	f100 0314 	add.w	r3, r0, #20
 80094b2:	3114      	adds	r1, #20
 80094b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094c4:	42a5      	cmp	r5, r4
 80094c6:	d003      	beq.n	80094d0 <__mcmp+0x2c>
 80094c8:	d305      	bcc.n	80094d6 <__mcmp+0x32>
 80094ca:	2201      	movs	r2, #1
 80094cc:	4610      	mov	r0, r2
 80094ce:	bd30      	pop	{r4, r5, pc}
 80094d0:	4283      	cmp	r3, r0
 80094d2:	d3f3      	bcc.n	80094bc <__mcmp+0x18>
 80094d4:	e7fa      	b.n	80094cc <__mcmp+0x28>
 80094d6:	f04f 32ff 	mov.w	r2, #4294967295
 80094da:	e7f7      	b.n	80094cc <__mcmp+0x28>

080094dc <__mdiff>:
 80094dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	460c      	mov	r4, r1
 80094e2:	4606      	mov	r6, r0
 80094e4:	4611      	mov	r1, r2
 80094e6:	4620      	mov	r0, r4
 80094e8:	4690      	mov	r8, r2
 80094ea:	f7ff ffdb 	bl	80094a4 <__mcmp>
 80094ee:	1e05      	subs	r5, r0, #0
 80094f0:	d110      	bne.n	8009514 <__mdiff+0x38>
 80094f2:	4629      	mov	r1, r5
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7ff fd53 	bl	8008fa0 <_Balloc>
 80094fa:	b930      	cbnz	r0, 800950a <__mdiff+0x2e>
 80094fc:	4b3a      	ldr	r3, [pc, #232]	; (80095e8 <__mdiff+0x10c>)
 80094fe:	4602      	mov	r2, r0
 8009500:	f240 2132 	movw	r1, #562	; 0x232
 8009504:	4839      	ldr	r0, [pc, #228]	; (80095ec <__mdiff+0x110>)
 8009506:	f000 fc09 	bl	8009d1c <__assert_func>
 800950a:	2301      	movs	r3, #1
 800950c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009514:	bfa4      	itt	ge
 8009516:	4643      	movge	r3, r8
 8009518:	46a0      	movge	r8, r4
 800951a:	4630      	mov	r0, r6
 800951c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009520:	bfa6      	itte	ge
 8009522:	461c      	movge	r4, r3
 8009524:	2500      	movge	r5, #0
 8009526:	2501      	movlt	r5, #1
 8009528:	f7ff fd3a 	bl	8008fa0 <_Balloc>
 800952c:	b920      	cbnz	r0, 8009538 <__mdiff+0x5c>
 800952e:	4b2e      	ldr	r3, [pc, #184]	; (80095e8 <__mdiff+0x10c>)
 8009530:	4602      	mov	r2, r0
 8009532:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009536:	e7e5      	b.n	8009504 <__mdiff+0x28>
 8009538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800953c:	6926      	ldr	r6, [r4, #16]
 800953e:	60c5      	str	r5, [r0, #12]
 8009540:	f104 0914 	add.w	r9, r4, #20
 8009544:	f108 0514 	add.w	r5, r8, #20
 8009548:	f100 0e14 	add.w	lr, r0, #20
 800954c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009554:	f108 0210 	add.w	r2, r8, #16
 8009558:	46f2      	mov	sl, lr
 800955a:	2100      	movs	r1, #0
 800955c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009564:	fa1f f883 	uxth.w	r8, r3
 8009568:	fa11 f18b 	uxtah	r1, r1, fp
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	eba1 0808 	sub.w	r8, r1, r8
 8009572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009576:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800957a:	fa1f f888 	uxth.w	r8, r8
 800957e:	1419      	asrs	r1, r3, #16
 8009580:	454e      	cmp	r6, r9
 8009582:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009586:	f84a 3b04 	str.w	r3, [sl], #4
 800958a:	d8e7      	bhi.n	800955c <__mdiff+0x80>
 800958c:	1b33      	subs	r3, r6, r4
 800958e:	3b15      	subs	r3, #21
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	3304      	adds	r3, #4
 8009596:	3415      	adds	r4, #21
 8009598:	42a6      	cmp	r6, r4
 800959a:	bf38      	it	cc
 800959c:	2304      	movcc	r3, #4
 800959e:	441d      	add	r5, r3
 80095a0:	4473      	add	r3, lr
 80095a2:	469e      	mov	lr, r3
 80095a4:	462e      	mov	r6, r5
 80095a6:	4566      	cmp	r6, ip
 80095a8:	d30e      	bcc.n	80095c8 <__mdiff+0xec>
 80095aa:	f10c 0203 	add.w	r2, ip, #3
 80095ae:	1b52      	subs	r2, r2, r5
 80095b0:	f022 0203 	bic.w	r2, r2, #3
 80095b4:	3d03      	subs	r5, #3
 80095b6:	45ac      	cmp	ip, r5
 80095b8:	bf38      	it	cc
 80095ba:	2200      	movcc	r2, #0
 80095bc:	441a      	add	r2, r3
 80095be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095c2:	b17b      	cbz	r3, 80095e4 <__mdiff+0x108>
 80095c4:	6107      	str	r7, [r0, #16]
 80095c6:	e7a3      	b.n	8009510 <__mdiff+0x34>
 80095c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80095cc:	fa11 f288 	uxtah	r2, r1, r8
 80095d0:	1414      	asrs	r4, r2, #16
 80095d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095d6:	b292      	uxth	r2, r2
 80095d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095dc:	f84e 2b04 	str.w	r2, [lr], #4
 80095e0:	1421      	asrs	r1, r4, #16
 80095e2:	e7e0      	b.n	80095a6 <__mdiff+0xca>
 80095e4:	3f01      	subs	r7, #1
 80095e6:	e7ea      	b.n	80095be <__mdiff+0xe2>
 80095e8:	0800a24f 	.word	0x0800a24f
 80095ec:	0800a2c0 	.word	0x0800a2c0

080095f0 <__d2b>:
 80095f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4689      	mov	r9, r1
 80095f6:	2101      	movs	r1, #1
 80095f8:	ec57 6b10 	vmov	r6, r7, d0
 80095fc:	4690      	mov	r8, r2
 80095fe:	f7ff fccf 	bl	8008fa0 <_Balloc>
 8009602:	4604      	mov	r4, r0
 8009604:	b930      	cbnz	r0, 8009614 <__d2b+0x24>
 8009606:	4602      	mov	r2, r0
 8009608:	4b25      	ldr	r3, [pc, #148]	; (80096a0 <__d2b+0xb0>)
 800960a:	4826      	ldr	r0, [pc, #152]	; (80096a4 <__d2b+0xb4>)
 800960c:	f240 310a 	movw	r1, #778	; 0x30a
 8009610:	f000 fb84 	bl	8009d1c <__assert_func>
 8009614:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800961c:	bb35      	cbnz	r5, 800966c <__d2b+0x7c>
 800961e:	2e00      	cmp	r6, #0
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	d028      	beq.n	8009676 <__d2b+0x86>
 8009624:	4668      	mov	r0, sp
 8009626:	9600      	str	r6, [sp, #0]
 8009628:	f7ff fd82 	bl	8009130 <__lo0bits>
 800962c:	9900      	ldr	r1, [sp, #0]
 800962e:	b300      	cbz	r0, 8009672 <__d2b+0x82>
 8009630:	9a01      	ldr	r2, [sp, #4]
 8009632:	f1c0 0320 	rsb	r3, r0, #32
 8009636:	fa02 f303 	lsl.w	r3, r2, r3
 800963a:	430b      	orrs	r3, r1
 800963c:	40c2      	lsrs	r2, r0
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	9201      	str	r2, [sp, #4]
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	61a3      	str	r3, [r4, #24]
 8009646:	2b00      	cmp	r3, #0
 8009648:	bf14      	ite	ne
 800964a:	2202      	movne	r2, #2
 800964c:	2201      	moveq	r2, #1
 800964e:	6122      	str	r2, [r4, #16]
 8009650:	b1d5      	cbz	r5, 8009688 <__d2b+0x98>
 8009652:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009656:	4405      	add	r5, r0
 8009658:	f8c9 5000 	str.w	r5, [r9]
 800965c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009660:	f8c8 0000 	str.w	r0, [r8]
 8009664:	4620      	mov	r0, r4
 8009666:	b003      	add	sp, #12
 8009668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800966c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009670:	e7d5      	b.n	800961e <__d2b+0x2e>
 8009672:	6161      	str	r1, [r4, #20]
 8009674:	e7e5      	b.n	8009642 <__d2b+0x52>
 8009676:	a801      	add	r0, sp, #4
 8009678:	f7ff fd5a 	bl	8009130 <__lo0bits>
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	6163      	str	r3, [r4, #20]
 8009680:	2201      	movs	r2, #1
 8009682:	6122      	str	r2, [r4, #16]
 8009684:	3020      	adds	r0, #32
 8009686:	e7e3      	b.n	8009650 <__d2b+0x60>
 8009688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800968c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009690:	f8c9 0000 	str.w	r0, [r9]
 8009694:	6918      	ldr	r0, [r3, #16]
 8009696:	f7ff fd2b 	bl	80090f0 <__hi0bits>
 800969a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800969e:	e7df      	b.n	8009660 <__d2b+0x70>
 80096a0:	0800a24f 	.word	0x0800a24f
 80096a4:	0800a2c0 	.word	0x0800a2c0

080096a8 <_realloc_r>:
 80096a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	4680      	mov	r8, r0
 80096ae:	4614      	mov	r4, r2
 80096b0:	460e      	mov	r6, r1
 80096b2:	b921      	cbnz	r1, 80096be <_realloc_r+0x16>
 80096b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b8:	4611      	mov	r1, r2
 80096ba:	f7fd bd49 	b.w	8007150 <_malloc_r>
 80096be:	b92a      	cbnz	r2, 80096cc <_realloc_r+0x24>
 80096c0:	f7fd fcda 	bl	8007078 <_free_r>
 80096c4:	4625      	mov	r5, r4
 80096c6:	4628      	mov	r0, r5
 80096c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096cc:	f000 fbc6 	bl	8009e5c <_malloc_usable_size_r>
 80096d0:	4284      	cmp	r4, r0
 80096d2:	4607      	mov	r7, r0
 80096d4:	d802      	bhi.n	80096dc <_realloc_r+0x34>
 80096d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096da:	d812      	bhi.n	8009702 <_realloc_r+0x5a>
 80096dc:	4621      	mov	r1, r4
 80096de:	4640      	mov	r0, r8
 80096e0:	f7fd fd36 	bl	8007150 <_malloc_r>
 80096e4:	4605      	mov	r5, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0ed      	beq.n	80096c6 <_realloc_r+0x1e>
 80096ea:	42bc      	cmp	r4, r7
 80096ec:	4622      	mov	r2, r4
 80096ee:	4631      	mov	r1, r6
 80096f0:	bf28      	it	cs
 80096f2:	463a      	movcs	r2, r7
 80096f4:	f7ff fc3a 	bl	8008f6c <memcpy>
 80096f8:	4631      	mov	r1, r6
 80096fa:	4640      	mov	r0, r8
 80096fc:	f7fd fcbc 	bl	8007078 <_free_r>
 8009700:	e7e1      	b.n	80096c6 <_realloc_r+0x1e>
 8009702:	4635      	mov	r5, r6
 8009704:	e7df      	b.n	80096c6 <_realloc_r+0x1e>

08009706 <__ssputs_r>:
 8009706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800970a:	688e      	ldr	r6, [r1, #8]
 800970c:	429e      	cmp	r6, r3
 800970e:	4682      	mov	sl, r0
 8009710:	460c      	mov	r4, r1
 8009712:	4690      	mov	r8, r2
 8009714:	461f      	mov	r7, r3
 8009716:	d838      	bhi.n	800978a <__ssputs_r+0x84>
 8009718:	898a      	ldrh	r2, [r1, #12]
 800971a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800971e:	d032      	beq.n	8009786 <__ssputs_r+0x80>
 8009720:	6825      	ldr	r5, [r4, #0]
 8009722:	6909      	ldr	r1, [r1, #16]
 8009724:	eba5 0901 	sub.w	r9, r5, r1
 8009728:	6965      	ldr	r5, [r4, #20]
 800972a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800972e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009732:	3301      	adds	r3, #1
 8009734:	444b      	add	r3, r9
 8009736:	106d      	asrs	r5, r5, #1
 8009738:	429d      	cmp	r5, r3
 800973a:	bf38      	it	cc
 800973c:	461d      	movcc	r5, r3
 800973e:	0553      	lsls	r3, r2, #21
 8009740:	d531      	bpl.n	80097a6 <__ssputs_r+0xa0>
 8009742:	4629      	mov	r1, r5
 8009744:	f7fd fd04 	bl	8007150 <_malloc_r>
 8009748:	4606      	mov	r6, r0
 800974a:	b950      	cbnz	r0, 8009762 <__ssputs_r+0x5c>
 800974c:	230c      	movs	r3, #12
 800974e:	f8ca 3000 	str.w	r3, [sl]
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	f04f 30ff 	mov.w	r0, #4294967295
 800975e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009762:	6921      	ldr	r1, [r4, #16]
 8009764:	464a      	mov	r2, r9
 8009766:	f7ff fc01 	bl	8008f6c <memcpy>
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	6126      	str	r6, [r4, #16]
 8009778:	6165      	str	r5, [r4, #20]
 800977a:	444e      	add	r6, r9
 800977c:	eba5 0509 	sub.w	r5, r5, r9
 8009780:	6026      	str	r6, [r4, #0]
 8009782:	60a5      	str	r5, [r4, #8]
 8009784:	463e      	mov	r6, r7
 8009786:	42be      	cmp	r6, r7
 8009788:	d900      	bls.n	800978c <__ssputs_r+0x86>
 800978a:	463e      	mov	r6, r7
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	4632      	mov	r2, r6
 8009790:	4641      	mov	r1, r8
 8009792:	f000 fb49 	bl	8009e28 <memmove>
 8009796:	68a3      	ldr	r3, [r4, #8]
 8009798:	1b9b      	subs	r3, r3, r6
 800979a:	60a3      	str	r3, [r4, #8]
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	4433      	add	r3, r6
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	2000      	movs	r0, #0
 80097a4:	e7db      	b.n	800975e <__ssputs_r+0x58>
 80097a6:	462a      	mov	r2, r5
 80097a8:	f7ff ff7e 	bl	80096a8 <_realloc_r>
 80097ac:	4606      	mov	r6, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d1e1      	bne.n	8009776 <__ssputs_r+0x70>
 80097b2:	6921      	ldr	r1, [r4, #16]
 80097b4:	4650      	mov	r0, sl
 80097b6:	f7fd fc5f 	bl	8007078 <_free_r>
 80097ba:	e7c7      	b.n	800974c <__ssputs_r+0x46>

080097bc <_svfiprintf_r>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	4698      	mov	r8, r3
 80097c2:	898b      	ldrh	r3, [r1, #12]
 80097c4:	061b      	lsls	r3, r3, #24
 80097c6:	b09d      	sub	sp, #116	; 0x74
 80097c8:	4607      	mov	r7, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	4614      	mov	r4, r2
 80097ce:	d50e      	bpl.n	80097ee <_svfiprintf_r+0x32>
 80097d0:	690b      	ldr	r3, [r1, #16]
 80097d2:	b963      	cbnz	r3, 80097ee <_svfiprintf_r+0x32>
 80097d4:	2140      	movs	r1, #64	; 0x40
 80097d6:	f7fd fcbb 	bl	8007150 <_malloc_r>
 80097da:	6028      	str	r0, [r5, #0]
 80097dc:	6128      	str	r0, [r5, #16]
 80097de:	b920      	cbnz	r0, 80097ea <_svfiprintf_r+0x2e>
 80097e0:	230c      	movs	r3, #12
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	f04f 30ff 	mov.w	r0, #4294967295
 80097e8:	e0d1      	b.n	800998e <_svfiprintf_r+0x1d2>
 80097ea:	2340      	movs	r3, #64	; 0x40
 80097ec:	616b      	str	r3, [r5, #20]
 80097ee:	2300      	movs	r3, #0
 80097f0:	9309      	str	r3, [sp, #36]	; 0x24
 80097f2:	2320      	movs	r3, #32
 80097f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097fc:	2330      	movs	r3, #48	; 0x30
 80097fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099a8 <_svfiprintf_r+0x1ec>
 8009802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009806:	f04f 0901 	mov.w	r9, #1
 800980a:	4623      	mov	r3, r4
 800980c:	469a      	mov	sl, r3
 800980e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009812:	b10a      	cbz	r2, 8009818 <_svfiprintf_r+0x5c>
 8009814:	2a25      	cmp	r2, #37	; 0x25
 8009816:	d1f9      	bne.n	800980c <_svfiprintf_r+0x50>
 8009818:	ebba 0b04 	subs.w	fp, sl, r4
 800981c:	d00b      	beq.n	8009836 <_svfiprintf_r+0x7a>
 800981e:	465b      	mov	r3, fp
 8009820:	4622      	mov	r2, r4
 8009822:	4629      	mov	r1, r5
 8009824:	4638      	mov	r0, r7
 8009826:	f7ff ff6e 	bl	8009706 <__ssputs_r>
 800982a:	3001      	adds	r0, #1
 800982c:	f000 80aa 	beq.w	8009984 <_svfiprintf_r+0x1c8>
 8009830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009832:	445a      	add	r2, fp
 8009834:	9209      	str	r2, [sp, #36]	; 0x24
 8009836:	f89a 3000 	ldrb.w	r3, [sl]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80a2 	beq.w	8009984 <_svfiprintf_r+0x1c8>
 8009840:	2300      	movs	r3, #0
 8009842:	f04f 32ff 	mov.w	r2, #4294967295
 8009846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800984a:	f10a 0a01 	add.w	sl, sl, #1
 800984e:	9304      	str	r3, [sp, #16]
 8009850:	9307      	str	r3, [sp, #28]
 8009852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009856:	931a      	str	r3, [sp, #104]	; 0x68
 8009858:	4654      	mov	r4, sl
 800985a:	2205      	movs	r2, #5
 800985c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009860:	4851      	ldr	r0, [pc, #324]	; (80099a8 <_svfiprintf_r+0x1ec>)
 8009862:	f7f6 fcc5 	bl	80001f0 <memchr>
 8009866:	9a04      	ldr	r2, [sp, #16]
 8009868:	b9d8      	cbnz	r0, 80098a2 <_svfiprintf_r+0xe6>
 800986a:	06d0      	lsls	r0, r2, #27
 800986c:	bf44      	itt	mi
 800986e:	2320      	movmi	r3, #32
 8009870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009874:	0711      	lsls	r1, r2, #28
 8009876:	bf44      	itt	mi
 8009878:	232b      	movmi	r3, #43	; 0x2b
 800987a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800987e:	f89a 3000 	ldrb.w	r3, [sl]
 8009882:	2b2a      	cmp	r3, #42	; 0x2a
 8009884:	d015      	beq.n	80098b2 <_svfiprintf_r+0xf6>
 8009886:	9a07      	ldr	r2, [sp, #28]
 8009888:	4654      	mov	r4, sl
 800988a:	2000      	movs	r0, #0
 800988c:	f04f 0c0a 	mov.w	ip, #10
 8009890:	4621      	mov	r1, r4
 8009892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009896:	3b30      	subs	r3, #48	; 0x30
 8009898:	2b09      	cmp	r3, #9
 800989a:	d94e      	bls.n	800993a <_svfiprintf_r+0x17e>
 800989c:	b1b0      	cbz	r0, 80098cc <_svfiprintf_r+0x110>
 800989e:	9207      	str	r2, [sp, #28]
 80098a0:	e014      	b.n	80098cc <_svfiprintf_r+0x110>
 80098a2:	eba0 0308 	sub.w	r3, r0, r8
 80098a6:	fa09 f303 	lsl.w	r3, r9, r3
 80098aa:	4313      	orrs	r3, r2
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	46a2      	mov	sl, r4
 80098b0:	e7d2      	b.n	8009858 <_svfiprintf_r+0x9c>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	1d19      	adds	r1, r3, #4
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	9103      	str	r1, [sp, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	bfbb      	ittet	lt
 80098be:	425b      	neglt	r3, r3
 80098c0:	f042 0202 	orrlt.w	r2, r2, #2
 80098c4:	9307      	strge	r3, [sp, #28]
 80098c6:	9307      	strlt	r3, [sp, #28]
 80098c8:	bfb8      	it	lt
 80098ca:	9204      	strlt	r2, [sp, #16]
 80098cc:	7823      	ldrb	r3, [r4, #0]
 80098ce:	2b2e      	cmp	r3, #46	; 0x2e
 80098d0:	d10c      	bne.n	80098ec <_svfiprintf_r+0x130>
 80098d2:	7863      	ldrb	r3, [r4, #1]
 80098d4:	2b2a      	cmp	r3, #42	; 0x2a
 80098d6:	d135      	bne.n	8009944 <_svfiprintf_r+0x188>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	1d1a      	adds	r2, r3, #4
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	9203      	str	r2, [sp, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	bfb8      	it	lt
 80098e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80098e8:	3402      	adds	r4, #2
 80098ea:	9305      	str	r3, [sp, #20]
 80098ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099b8 <_svfiprintf_r+0x1fc>
 80098f0:	7821      	ldrb	r1, [r4, #0]
 80098f2:	2203      	movs	r2, #3
 80098f4:	4650      	mov	r0, sl
 80098f6:	f7f6 fc7b 	bl	80001f0 <memchr>
 80098fa:	b140      	cbz	r0, 800990e <_svfiprintf_r+0x152>
 80098fc:	2340      	movs	r3, #64	; 0x40
 80098fe:	eba0 000a 	sub.w	r0, r0, sl
 8009902:	fa03 f000 	lsl.w	r0, r3, r0
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	4303      	orrs	r3, r0
 800990a:	3401      	adds	r4, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009912:	4826      	ldr	r0, [pc, #152]	; (80099ac <_svfiprintf_r+0x1f0>)
 8009914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009918:	2206      	movs	r2, #6
 800991a:	f7f6 fc69 	bl	80001f0 <memchr>
 800991e:	2800      	cmp	r0, #0
 8009920:	d038      	beq.n	8009994 <_svfiprintf_r+0x1d8>
 8009922:	4b23      	ldr	r3, [pc, #140]	; (80099b0 <_svfiprintf_r+0x1f4>)
 8009924:	bb1b      	cbnz	r3, 800996e <_svfiprintf_r+0x1b2>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	3307      	adds	r3, #7
 800992a:	f023 0307 	bic.w	r3, r3, #7
 800992e:	3308      	adds	r3, #8
 8009930:	9303      	str	r3, [sp, #12]
 8009932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009934:	4433      	add	r3, r6
 8009936:	9309      	str	r3, [sp, #36]	; 0x24
 8009938:	e767      	b.n	800980a <_svfiprintf_r+0x4e>
 800993a:	fb0c 3202 	mla	r2, ip, r2, r3
 800993e:	460c      	mov	r4, r1
 8009940:	2001      	movs	r0, #1
 8009942:	e7a5      	b.n	8009890 <_svfiprintf_r+0xd4>
 8009944:	2300      	movs	r3, #0
 8009946:	3401      	adds	r4, #1
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	4619      	mov	r1, r3
 800994c:	f04f 0c0a 	mov.w	ip, #10
 8009950:	4620      	mov	r0, r4
 8009952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009956:	3a30      	subs	r2, #48	; 0x30
 8009958:	2a09      	cmp	r2, #9
 800995a:	d903      	bls.n	8009964 <_svfiprintf_r+0x1a8>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0c5      	beq.n	80098ec <_svfiprintf_r+0x130>
 8009960:	9105      	str	r1, [sp, #20]
 8009962:	e7c3      	b.n	80098ec <_svfiprintf_r+0x130>
 8009964:	fb0c 2101 	mla	r1, ip, r1, r2
 8009968:	4604      	mov	r4, r0
 800996a:	2301      	movs	r3, #1
 800996c:	e7f0      	b.n	8009950 <_svfiprintf_r+0x194>
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	462a      	mov	r2, r5
 8009974:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <_svfiprintf_r+0x1f8>)
 8009976:	a904      	add	r1, sp, #16
 8009978:	4638      	mov	r0, r7
 800997a:	f7fd fcfd 	bl	8007378 <_printf_float>
 800997e:	1c42      	adds	r2, r0, #1
 8009980:	4606      	mov	r6, r0
 8009982:	d1d6      	bne.n	8009932 <_svfiprintf_r+0x176>
 8009984:	89ab      	ldrh	r3, [r5, #12]
 8009986:	065b      	lsls	r3, r3, #25
 8009988:	f53f af2c 	bmi.w	80097e4 <_svfiprintf_r+0x28>
 800998c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800998e:	b01d      	add	sp, #116	; 0x74
 8009990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009994:	ab03      	add	r3, sp, #12
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	462a      	mov	r2, r5
 800999a:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <_svfiprintf_r+0x1f8>)
 800999c:	a904      	add	r1, sp, #16
 800999e:	4638      	mov	r0, r7
 80099a0:	f7fd ff8e 	bl	80078c0 <_printf_i>
 80099a4:	e7eb      	b.n	800997e <_svfiprintf_r+0x1c2>
 80099a6:	bf00      	nop
 80099a8:	0800a41c 	.word	0x0800a41c
 80099ac:	0800a426 	.word	0x0800a426
 80099b0:	08007379 	.word	0x08007379
 80099b4:	08009707 	.word	0x08009707
 80099b8:	0800a422 	.word	0x0800a422

080099bc <__sfputc_r>:
 80099bc:	6893      	ldr	r3, [r2, #8]
 80099be:	3b01      	subs	r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	b410      	push	{r4}
 80099c4:	6093      	str	r3, [r2, #8]
 80099c6:	da08      	bge.n	80099da <__sfputc_r+0x1e>
 80099c8:	6994      	ldr	r4, [r2, #24]
 80099ca:	42a3      	cmp	r3, r4
 80099cc:	db01      	blt.n	80099d2 <__sfputc_r+0x16>
 80099ce:	290a      	cmp	r1, #10
 80099d0:	d103      	bne.n	80099da <__sfputc_r+0x1e>
 80099d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d6:	f7fe b96b 	b.w	8007cb0 <__swbuf_r>
 80099da:	6813      	ldr	r3, [r2, #0]
 80099dc:	1c58      	adds	r0, r3, #1
 80099de:	6010      	str	r0, [r2, #0]
 80099e0:	7019      	strb	r1, [r3, #0]
 80099e2:	4608      	mov	r0, r1
 80099e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <__sfputs_r>:
 80099ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ec:	4606      	mov	r6, r0
 80099ee:	460f      	mov	r7, r1
 80099f0:	4614      	mov	r4, r2
 80099f2:	18d5      	adds	r5, r2, r3
 80099f4:	42ac      	cmp	r4, r5
 80099f6:	d101      	bne.n	80099fc <__sfputs_r+0x12>
 80099f8:	2000      	movs	r0, #0
 80099fa:	e007      	b.n	8009a0c <__sfputs_r+0x22>
 80099fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a00:	463a      	mov	r2, r7
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7ff ffda 	bl	80099bc <__sfputc_r>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d1f3      	bne.n	80099f4 <__sfputs_r+0xa>
 8009a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a10 <_vfiprintf_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	460d      	mov	r5, r1
 8009a16:	b09d      	sub	sp, #116	; 0x74
 8009a18:	4614      	mov	r4, r2
 8009a1a:	4698      	mov	r8, r3
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	b118      	cbz	r0, 8009a28 <_vfiprintf_r+0x18>
 8009a20:	6983      	ldr	r3, [r0, #24]
 8009a22:	b90b      	cbnz	r3, 8009a28 <_vfiprintf_r+0x18>
 8009a24:	f7ff f998 	bl	8008d58 <__sinit>
 8009a28:	4b89      	ldr	r3, [pc, #548]	; (8009c50 <_vfiprintf_r+0x240>)
 8009a2a:	429d      	cmp	r5, r3
 8009a2c:	d11b      	bne.n	8009a66 <_vfiprintf_r+0x56>
 8009a2e:	6875      	ldr	r5, [r6, #4]
 8009a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a32:	07d9      	lsls	r1, r3, #31
 8009a34:	d405      	bmi.n	8009a42 <_vfiprintf_r+0x32>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	059a      	lsls	r2, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_vfiprintf_r+0x32>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3e:	f7ff fa2e 	bl	8008e9e <__retarget_lock_acquire_recursive>
 8009a42:	89ab      	ldrh	r3, [r5, #12]
 8009a44:	071b      	lsls	r3, r3, #28
 8009a46:	d501      	bpl.n	8009a4c <_vfiprintf_r+0x3c>
 8009a48:	692b      	ldr	r3, [r5, #16]
 8009a4a:	b9eb      	cbnz	r3, 8009a88 <_vfiprintf_r+0x78>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f7fe f980 	bl	8007d54 <__swsetup_r>
 8009a54:	b1c0      	cbz	r0, 8009a88 <_vfiprintf_r+0x78>
 8009a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a58:	07dc      	lsls	r4, r3, #31
 8009a5a:	d50e      	bpl.n	8009a7a <_vfiprintf_r+0x6a>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	b01d      	add	sp, #116	; 0x74
 8009a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a66:	4b7b      	ldr	r3, [pc, #492]	; (8009c54 <_vfiprintf_r+0x244>)
 8009a68:	429d      	cmp	r5, r3
 8009a6a:	d101      	bne.n	8009a70 <_vfiprintf_r+0x60>
 8009a6c:	68b5      	ldr	r5, [r6, #8]
 8009a6e:	e7df      	b.n	8009a30 <_vfiprintf_r+0x20>
 8009a70:	4b79      	ldr	r3, [pc, #484]	; (8009c58 <_vfiprintf_r+0x248>)
 8009a72:	429d      	cmp	r5, r3
 8009a74:	bf08      	it	eq
 8009a76:	68f5      	ldreq	r5, [r6, #12]
 8009a78:	e7da      	b.n	8009a30 <_vfiprintf_r+0x20>
 8009a7a:	89ab      	ldrh	r3, [r5, #12]
 8009a7c:	0598      	lsls	r0, r3, #22
 8009a7e:	d4ed      	bmi.n	8009a5c <_vfiprintf_r+0x4c>
 8009a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a82:	f7ff fa0d 	bl	8008ea0 <__retarget_lock_release_recursive>
 8009a86:	e7e9      	b.n	8009a5c <_vfiprintf_r+0x4c>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8c:	2320      	movs	r3, #32
 8009a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a96:	2330      	movs	r3, #48	; 0x30
 8009a98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c5c <_vfiprintf_r+0x24c>
 8009a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa0:	f04f 0901 	mov.w	r9, #1
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	469a      	mov	sl, r3
 8009aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aac:	b10a      	cbz	r2, 8009ab2 <_vfiprintf_r+0xa2>
 8009aae:	2a25      	cmp	r2, #37	; 0x25
 8009ab0:	d1f9      	bne.n	8009aa6 <_vfiprintf_r+0x96>
 8009ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab6:	d00b      	beq.n	8009ad0 <_vfiprintf_r+0xc0>
 8009ab8:	465b      	mov	r3, fp
 8009aba:	4622      	mov	r2, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ff93 	bl	80099ea <__sfputs_r>
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	f000 80aa 	beq.w	8009c1e <_vfiprintf_r+0x20e>
 8009aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009acc:	445a      	add	r2, fp
 8009ace:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80a2 	beq.w	8009c1e <_vfiprintf_r+0x20e>
 8009ada:	2300      	movs	r3, #0
 8009adc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae4:	f10a 0a01 	add.w	sl, sl, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	9307      	str	r3, [sp, #28]
 8009aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af0:	931a      	str	r3, [sp, #104]	; 0x68
 8009af2:	4654      	mov	r4, sl
 8009af4:	2205      	movs	r2, #5
 8009af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afa:	4858      	ldr	r0, [pc, #352]	; (8009c5c <_vfiprintf_r+0x24c>)
 8009afc:	f7f6 fb78 	bl	80001f0 <memchr>
 8009b00:	9a04      	ldr	r2, [sp, #16]
 8009b02:	b9d8      	cbnz	r0, 8009b3c <_vfiprintf_r+0x12c>
 8009b04:	06d1      	lsls	r1, r2, #27
 8009b06:	bf44      	itt	mi
 8009b08:	2320      	movmi	r3, #32
 8009b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0e:	0713      	lsls	r3, r2, #28
 8009b10:	bf44      	itt	mi
 8009b12:	232b      	movmi	r3, #43	; 0x2b
 8009b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b18:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1e:	d015      	beq.n	8009b4c <_vfiprintf_r+0x13c>
 8009b20:	9a07      	ldr	r2, [sp, #28]
 8009b22:	4654      	mov	r4, sl
 8009b24:	2000      	movs	r0, #0
 8009b26:	f04f 0c0a 	mov.w	ip, #10
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b30:	3b30      	subs	r3, #48	; 0x30
 8009b32:	2b09      	cmp	r3, #9
 8009b34:	d94e      	bls.n	8009bd4 <_vfiprintf_r+0x1c4>
 8009b36:	b1b0      	cbz	r0, 8009b66 <_vfiprintf_r+0x156>
 8009b38:	9207      	str	r2, [sp, #28]
 8009b3a:	e014      	b.n	8009b66 <_vfiprintf_r+0x156>
 8009b3c:	eba0 0308 	sub.w	r3, r0, r8
 8009b40:	fa09 f303 	lsl.w	r3, r9, r3
 8009b44:	4313      	orrs	r3, r2
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	46a2      	mov	sl, r4
 8009b4a:	e7d2      	b.n	8009af2 <_vfiprintf_r+0xe2>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	1d19      	adds	r1, r3, #4
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	9103      	str	r1, [sp, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bfbb      	ittet	lt
 8009b58:	425b      	neglt	r3, r3
 8009b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b5e:	9307      	strge	r3, [sp, #28]
 8009b60:	9307      	strlt	r3, [sp, #28]
 8009b62:	bfb8      	it	lt
 8009b64:	9204      	strlt	r2, [sp, #16]
 8009b66:	7823      	ldrb	r3, [r4, #0]
 8009b68:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6a:	d10c      	bne.n	8009b86 <_vfiprintf_r+0x176>
 8009b6c:	7863      	ldrb	r3, [r4, #1]
 8009b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b70:	d135      	bne.n	8009bde <_vfiprintf_r+0x1ce>
 8009b72:	9b03      	ldr	r3, [sp, #12]
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	9203      	str	r2, [sp, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bfb8      	it	lt
 8009b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b82:	3402      	adds	r4, #2
 8009b84:	9305      	str	r3, [sp, #20]
 8009b86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c6c <_vfiprintf_r+0x25c>
 8009b8a:	7821      	ldrb	r1, [r4, #0]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	4650      	mov	r0, sl
 8009b90:	f7f6 fb2e 	bl	80001f0 <memchr>
 8009b94:	b140      	cbz	r0, 8009ba8 <_vfiprintf_r+0x198>
 8009b96:	2340      	movs	r3, #64	; 0x40
 8009b98:	eba0 000a 	sub.w	r0, r0, sl
 8009b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	4303      	orrs	r3, r0
 8009ba4:	3401      	adds	r4, #1
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bac:	482c      	ldr	r0, [pc, #176]	; (8009c60 <_vfiprintf_r+0x250>)
 8009bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bb2:	2206      	movs	r2, #6
 8009bb4:	f7f6 fb1c 	bl	80001f0 <memchr>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d03f      	beq.n	8009c3c <_vfiprintf_r+0x22c>
 8009bbc:	4b29      	ldr	r3, [pc, #164]	; (8009c64 <_vfiprintf_r+0x254>)
 8009bbe:	bb1b      	cbnz	r3, 8009c08 <_vfiprintf_r+0x1f8>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	3307      	adds	r3, #7
 8009bc4:	f023 0307 	bic.w	r3, r3, #7
 8009bc8:	3308      	adds	r3, #8
 8009bca:	9303      	str	r3, [sp, #12]
 8009bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bce:	443b      	add	r3, r7
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd2:	e767      	b.n	8009aa4 <_vfiprintf_r+0x94>
 8009bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd8:	460c      	mov	r4, r1
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e7a5      	b.n	8009b2a <_vfiprintf_r+0x11a>
 8009bde:	2300      	movs	r3, #0
 8009be0:	3401      	adds	r4, #1
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	4619      	mov	r1, r3
 8009be6:	f04f 0c0a 	mov.w	ip, #10
 8009bea:	4620      	mov	r0, r4
 8009bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf0:	3a30      	subs	r2, #48	; 0x30
 8009bf2:	2a09      	cmp	r2, #9
 8009bf4:	d903      	bls.n	8009bfe <_vfiprintf_r+0x1ee>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0c5      	beq.n	8009b86 <_vfiprintf_r+0x176>
 8009bfa:	9105      	str	r1, [sp, #20]
 8009bfc:	e7c3      	b.n	8009b86 <_vfiprintf_r+0x176>
 8009bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c02:	4604      	mov	r4, r0
 8009c04:	2301      	movs	r3, #1
 8009c06:	e7f0      	b.n	8009bea <_vfiprintf_r+0x1da>
 8009c08:	ab03      	add	r3, sp, #12
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	4b16      	ldr	r3, [pc, #88]	; (8009c68 <_vfiprintf_r+0x258>)
 8009c10:	a904      	add	r1, sp, #16
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7fd fbb0 	bl	8007378 <_printf_float>
 8009c18:	4607      	mov	r7, r0
 8009c1a:	1c78      	adds	r0, r7, #1
 8009c1c:	d1d6      	bne.n	8009bcc <_vfiprintf_r+0x1bc>
 8009c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c20:	07d9      	lsls	r1, r3, #31
 8009c22:	d405      	bmi.n	8009c30 <_vfiprintf_r+0x220>
 8009c24:	89ab      	ldrh	r3, [r5, #12]
 8009c26:	059a      	lsls	r2, r3, #22
 8009c28:	d402      	bmi.n	8009c30 <_vfiprintf_r+0x220>
 8009c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2c:	f7ff f938 	bl	8008ea0 <__retarget_lock_release_recursive>
 8009c30:	89ab      	ldrh	r3, [r5, #12]
 8009c32:	065b      	lsls	r3, r3, #25
 8009c34:	f53f af12 	bmi.w	8009a5c <_vfiprintf_r+0x4c>
 8009c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3a:	e711      	b.n	8009a60 <_vfiprintf_r+0x50>
 8009c3c:	ab03      	add	r3, sp, #12
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	462a      	mov	r2, r5
 8009c42:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <_vfiprintf_r+0x258>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7fd fe3a 	bl	80078c0 <_printf_i>
 8009c4c:	e7e4      	b.n	8009c18 <_vfiprintf_r+0x208>
 8009c4e:	bf00      	nop
 8009c50:	0800a280 	.word	0x0800a280
 8009c54:	0800a2a0 	.word	0x0800a2a0
 8009c58:	0800a260 	.word	0x0800a260
 8009c5c:	0800a41c 	.word	0x0800a41c
 8009c60:	0800a426 	.word	0x0800a426
 8009c64:	08007379 	.word	0x08007379
 8009c68:	080099eb 	.word	0x080099eb
 8009c6c:	0800a422 	.word	0x0800a422

08009c70 <__sread>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c78:	f000 f8f8 	bl	8009e6c <_read_r>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	bfab      	itete	ge
 8009c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c82:	89a3      	ldrhlt	r3, [r4, #12]
 8009c84:	181b      	addge	r3, r3, r0
 8009c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c8a:	bfac      	ite	ge
 8009c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c8e:	81a3      	strhlt	r3, [r4, #12]
 8009c90:	bd10      	pop	{r4, pc}

08009c92 <__swrite>:
 8009c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c96:	461f      	mov	r7, r3
 8009c98:	898b      	ldrh	r3, [r1, #12]
 8009c9a:	05db      	lsls	r3, r3, #23
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	d505      	bpl.n	8009cb0 <__swrite+0x1e>
 8009ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca8:	2302      	movs	r3, #2
 8009caa:	2200      	movs	r2, #0
 8009cac:	f000 f898 	bl	8009de0 <_lseek_r>
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc6:	f000 b817 	b.w	8009cf8 <_write_r>

08009cca <__sseek>:
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	460c      	mov	r4, r1
 8009cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd2:	f000 f885 	bl	8009de0 <_lseek_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	bf15      	itete	ne
 8009cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ce6:	81a3      	strheq	r3, [r4, #12]
 8009ce8:	bf18      	it	ne
 8009cea:	81a3      	strhne	r3, [r4, #12]
 8009cec:	bd10      	pop	{r4, pc}

08009cee <__sclose>:
 8009cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf2:	f000 b831 	b.w	8009d58 <_close_r>
	...

08009cf8 <_write_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d07      	ldr	r5, [pc, #28]	; (8009d18 <_write_r+0x20>)
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	4608      	mov	r0, r1
 8009d00:	4611      	mov	r1, r2
 8009d02:	2200      	movs	r2, #0
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	f7f7 f8d8 	bl	8000ebc <_write>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d102      	bne.n	8009d16 <_write_r+0x1e>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	b103      	cbz	r3, 8009d16 <_write_r+0x1e>
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	bd38      	pop	{r3, r4, r5, pc}
 8009d18:	20000708 	.word	0x20000708

08009d1c <__assert_func>:
 8009d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d1e:	4614      	mov	r4, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <__assert_func+0x2c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4605      	mov	r5, r0
 8009d28:	68d8      	ldr	r0, [r3, #12]
 8009d2a:	b14c      	cbz	r4, 8009d40 <__assert_func+0x24>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <__assert_func+0x30>)
 8009d2e:	9100      	str	r1, [sp, #0]
 8009d30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d34:	4906      	ldr	r1, [pc, #24]	; (8009d50 <__assert_func+0x34>)
 8009d36:	462b      	mov	r3, r5
 8009d38:	f000 f81e 	bl	8009d78 <fiprintf>
 8009d3c:	f000 f8b5 	bl	8009eaa <abort>
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <__assert_func+0x38>)
 8009d42:	461c      	mov	r4, r3
 8009d44:	e7f3      	b.n	8009d2e <__assert_func+0x12>
 8009d46:	bf00      	nop
 8009d48:	200002c8 	.word	0x200002c8
 8009d4c:	0800a42d 	.word	0x0800a42d
 8009d50:	0800a43a 	.word	0x0800a43a
 8009d54:	0800a468 	.word	0x0800a468

08009d58 <_close_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	; (8009d74 <_close_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f7 feb3 	bl	8001ace <_close>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_close_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_close_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	20000708 	.word	0x20000708

08009d78 <fiprintf>:
 8009d78:	b40e      	push	{r1, r2, r3}
 8009d7a:	b503      	push	{r0, r1, lr}
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	ab03      	add	r3, sp, #12
 8009d80:	4805      	ldr	r0, [pc, #20]	; (8009d98 <fiprintf+0x20>)
 8009d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d86:	6800      	ldr	r0, [r0, #0]
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	f7ff fe41 	bl	8009a10 <_vfiprintf_r>
 8009d8e:	b002      	add	sp, #8
 8009d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d94:	b003      	add	sp, #12
 8009d96:	4770      	bx	lr
 8009d98:	200002c8 	.word	0x200002c8

08009d9c <_fstat_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d07      	ldr	r5, [pc, #28]	; (8009dbc <_fstat_r+0x20>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	4611      	mov	r1, r2
 8009da8:	602b      	str	r3, [r5, #0]
 8009daa:	f7f7 fe9c 	bl	8001ae6 <_fstat>
 8009dae:	1c43      	adds	r3, r0, #1
 8009db0:	d102      	bne.n	8009db8 <_fstat_r+0x1c>
 8009db2:	682b      	ldr	r3, [r5, #0]
 8009db4:	b103      	cbz	r3, 8009db8 <_fstat_r+0x1c>
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	bd38      	pop	{r3, r4, r5, pc}
 8009dba:	bf00      	nop
 8009dbc:	20000708 	.word	0x20000708

08009dc0 <_isatty_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d06      	ldr	r5, [pc, #24]	; (8009ddc <_isatty_r+0x1c>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7f7 fe9b 	bl	8001b06 <_isatty>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_isatty_r+0x1a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_isatty_r+0x1a>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	20000708 	.word	0x20000708

08009de0 <_lseek_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	; (8009e00 <_lseek_r+0x20>)
 8009de4:	4604      	mov	r4, r0
 8009de6:	4608      	mov	r0, r1
 8009de8:	4611      	mov	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	602a      	str	r2, [r5, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f7f7 fe94 	bl	8001b1c <_lseek>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_lseek_r+0x1e>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_lseek_r+0x1e>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	20000708 	.word	0x20000708

08009e04 <__ascii_mbtowc>:
 8009e04:	b082      	sub	sp, #8
 8009e06:	b901      	cbnz	r1, 8009e0a <__ascii_mbtowc+0x6>
 8009e08:	a901      	add	r1, sp, #4
 8009e0a:	b142      	cbz	r2, 8009e1e <__ascii_mbtowc+0x1a>
 8009e0c:	b14b      	cbz	r3, 8009e22 <__ascii_mbtowc+0x1e>
 8009e0e:	7813      	ldrb	r3, [r2, #0]
 8009e10:	600b      	str	r3, [r1, #0]
 8009e12:	7812      	ldrb	r2, [r2, #0]
 8009e14:	1e10      	subs	r0, r2, #0
 8009e16:	bf18      	it	ne
 8009e18:	2001      	movne	r0, #1
 8009e1a:	b002      	add	sp, #8
 8009e1c:	4770      	bx	lr
 8009e1e:	4610      	mov	r0, r2
 8009e20:	e7fb      	b.n	8009e1a <__ascii_mbtowc+0x16>
 8009e22:	f06f 0001 	mvn.w	r0, #1
 8009e26:	e7f8      	b.n	8009e1a <__ascii_mbtowc+0x16>

08009e28 <memmove>:
 8009e28:	4288      	cmp	r0, r1
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	eb01 0402 	add.w	r4, r1, r2
 8009e30:	d902      	bls.n	8009e38 <memmove+0x10>
 8009e32:	4284      	cmp	r4, r0
 8009e34:	4623      	mov	r3, r4
 8009e36:	d807      	bhi.n	8009e48 <memmove+0x20>
 8009e38:	1e43      	subs	r3, r0, #1
 8009e3a:	42a1      	cmp	r1, r4
 8009e3c:	d008      	beq.n	8009e50 <memmove+0x28>
 8009e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e46:	e7f8      	b.n	8009e3a <memmove+0x12>
 8009e48:	4402      	add	r2, r0
 8009e4a:	4601      	mov	r1, r0
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d100      	bne.n	8009e52 <memmove+0x2a>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e5a:	e7f7      	b.n	8009e4c <memmove+0x24>

08009e5c <_malloc_usable_size_r>:
 8009e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e60:	1f18      	subs	r0, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	bfbc      	itt	lt
 8009e66:	580b      	ldrlt	r3, [r1, r0]
 8009e68:	18c0      	addlt	r0, r0, r3
 8009e6a:	4770      	bx	lr

08009e6c <_read_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d07      	ldr	r5, [pc, #28]	; (8009e8c <_read_r+0x20>)
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	4611      	mov	r1, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	602a      	str	r2, [r5, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f7f7 fe0a 	bl	8001a94 <_read>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_read_r+0x1e>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_read_r+0x1e>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	20000708 	.word	0x20000708

08009e90 <__ascii_wctomb>:
 8009e90:	b149      	cbz	r1, 8009ea6 <__ascii_wctomb+0x16>
 8009e92:	2aff      	cmp	r2, #255	; 0xff
 8009e94:	bf85      	ittet	hi
 8009e96:	238a      	movhi	r3, #138	; 0x8a
 8009e98:	6003      	strhi	r3, [r0, #0]
 8009e9a:	700a      	strbls	r2, [r1, #0]
 8009e9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ea0:	bf98      	it	ls
 8009ea2:	2001      	movls	r0, #1
 8009ea4:	4770      	bx	lr
 8009ea6:	4608      	mov	r0, r1
 8009ea8:	4770      	bx	lr

08009eaa <abort>:
 8009eaa:	b508      	push	{r3, lr}
 8009eac:	2006      	movs	r0, #6
 8009eae:	f000 f82b 	bl	8009f08 <raise>
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	f7f7 fde4 	bl	8001a80 <_exit>

08009eb8 <_raise_r>:
 8009eb8:	291f      	cmp	r1, #31
 8009eba:	b538      	push	{r3, r4, r5, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	d904      	bls.n	8009ecc <_raise_r+0x14>
 8009ec2:	2316      	movs	r3, #22
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ece:	b112      	cbz	r2, 8009ed6 <_raise_r+0x1e>
 8009ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ed4:	b94b      	cbnz	r3, 8009eea <_raise_r+0x32>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f830 	bl	8009f3c <_getpid_r>
 8009edc:	462a      	mov	r2, r5
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee6:	f000 b817 	b.w	8009f18 <_kill_r>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d00a      	beq.n	8009f04 <_raise_r+0x4c>
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	d103      	bne.n	8009efa <_raise_r+0x42>
 8009ef2:	2316      	movs	r3, #22
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7e7      	b.n	8009eca <_raise_r+0x12>
 8009efa:	2400      	movs	r4, #0
 8009efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f00:	4628      	mov	r0, r5
 8009f02:	4798      	blx	r3
 8009f04:	2000      	movs	r0, #0
 8009f06:	e7e0      	b.n	8009eca <_raise_r+0x12>

08009f08 <raise>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <raise+0xc>)
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f7ff bfd3 	b.w	8009eb8 <_raise_r>
 8009f12:	bf00      	nop
 8009f14:	200002c8 	.word	0x200002c8

08009f18 <_kill_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	; (8009f38 <_kill_r+0x20>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	4611      	mov	r1, r2
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	f7f7 fd9b 	bl	8001a60 <_kill>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d102      	bne.n	8009f34 <_kill_r+0x1c>
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	b103      	cbz	r3, 8009f34 <_kill_r+0x1c>
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	20000708 	.word	0x20000708

08009f3c <_getpid_r>:
 8009f3c:	f7f7 bd88 	b.w	8001a50 <_getpid>

08009f40 <_init>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr

08009f4c <_fini>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr
